/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000-2002 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class QTWindow!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEQTWINDOWINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>

#include "OSGQT4WindowBase.h"
#include "OSGQT4Window.h"


OSG_BEGIN_NAMESPACE

#ifdef __sgi
#pragma set woff 1174
#endif

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::QTWindow
    The class for QT-based windows. See \ref PageWindowQT for a description.
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/


/*! \var OSGQGLWidgetP   QTWindowBase::_sfGlWidget
    
*/
//! QTWindow description

void QTWindowBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;

    pDesc = new SFOSGQGLWidgetP::Description(
        SFOSGQGLWidgetP::getClassType(),
        "GlWidget",
        "",
        GlWidgetFieldId, GlWidgetFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&QTWindow::editHandleGlWidget),
        static_cast<FieldGetMethodSig >(&QTWindow::getHandleGlWidget));

    oType.addInitialDesc(pDesc);
}

//! QTWindow type
QTWindowBase::TypeObject QTWindowBase::_type(
    QTWindowBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&QTWindowBase::createEmptyLocal),
    QTWindow::initMethod,
    QTWindow::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&QTWindowBase::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"QTWindow\"\n"
    "\tparent=\"Window\"\n"
    "\tlibrary=\"WindowQT4\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    ">\n"
    "The class for QT-based windows. See \\ref PageWindowQT for a description.\n"
    "\t<Field\n"
    "\t\tname=\"GlWidget\"\n"
    "\t\ttype=\"OSGQGLWidget\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\theader=\"\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "The class for QT-based windows. See \\ref PageWindowQT for a description.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &QTWindowBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &QTWindowBase::getType(void) const 
{
    return _type;
} 

UInt32 QTWindowBase::getContainerSize(void) const
{
    return sizeof(QTWindow);
}

/*------------------------- decorator get ------------------------------*/


//SFOSGQGLWidgetP QTWindowBase::editSFGlWidget(void)
//{
//    editSField(GlWidgetFieldMask);
//
//    return &_sfGlWidget;
//}
//
//const SFOSGQGLWidgetP QTWindowBase::getSFGlWidget(void) const
//{
//    return &_sfGlWidget;
//}

/*------------------------------ access -----------------------------------*/

UInt32 QTWindowBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (GlWidgetFieldMask & whichField))
    {
        returnValue += _sfGlWidget.getBinSize();
    }


    return returnValue;
}

void QTWindowBase::copyToBin(BinaryDataHandler &pMem,
                             ConstFieldMaskArg whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (GlWidgetFieldMask & whichField))
    {
        _sfGlWidget.copyToBin(pMem);
    }


}

void QTWindowBase::copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (GlWidgetFieldMask & whichField))
    {
        _sfGlWidget.copyFromBin(pMem);
    }


}

//! create a new instance of the class
QTWindowTransitPtr QTWindowBase::createLocal(BitVector bFlags)
{
    QTWindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<QTWindow>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class, copy the container flags
QTWindowTransitPtr QTWindowBase::createDependent(BitVector bFlags)
{
    QTWindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyDependent(bFlags);

        fc = dynamic_pointer_cast<QTWindow>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
QTWindowTransitPtr QTWindowBase::create(void)
{
    QTWindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<QTWindow>(tmpPtr);
    }

    return fc;
}

QTWindow *QTWindowBase::createEmptyLocal(BitVector bFlags)
{
    QTWindow *returnValue;

    newPtr<QTWindow>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
QTWindow *QTWindowBase::createEmpty(void)
{
    QTWindow *returnValue;

    newPtr<QTWindow>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr QTWindowBase::shallowCopyLocal(
    BitVector bFlags) const
{
    QTWindow *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const QTWindow *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr QTWindowBase::shallowCopyDependent(
    BitVector bFlags) const
{
    QTWindow *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const QTWindow *>(this), ~bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask = bFlags;

    return returnValue;
}

FieldContainerTransitPtr QTWindowBase::shallowCopy(void) const
{
    QTWindow *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const QTWindow *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}

/*------------------------- constructors ----------------------------------*/

//! Constructor

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 383)
#endif

QTWindowBase::QTWindowBase(void) :
    _sfGlWidget               (OSGQGLWidgetP(NULL)), 
    Inherited() 
{
}

#ifdef OSG_WIN32_ICL
#pragma warning (default : 383)
#endif

//! Copy Constructor

QTWindowBase::QTWindowBase(const QTWindowBase &source) :
    _sfGlWidget               (source._sfGlWidget               ), 
    Inherited                 (source)
{
}

/*-------------------------- destructors ----------------------------------*/

//! Destructor

QTWindowBase::~QTWindowBase(void)
{
}

GetFieldHandlePtr QTWindowBase::getHandleGlWidget          (void) const
{
    SFOSGQGLWidgetP::GetHandlePtr returnValue(
        new  SFOSGQGLWidgetP::GetHandle(
             &_sfGlWidget,
             this->getType().getFieldDesc(GlWidgetFieldId),
             const_cast<QTWindowBase *>(this)));

    return returnValue;
}

EditFieldHandlePtr QTWindowBase::editHandleGlWidget         (void)
{
    SFOSGQGLWidgetP::EditHandlePtr returnValue(
        new  SFOSGQGLWidgetP::EditHandle(
             &_sfGlWidget,
             this->getType().getFieldDesc(GlWidgetFieldId),
             this));


    editSField(GlWidgetFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void QTWindowBase::execSyncV(           FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    QTWindow *pThis = static_cast<QTWindow *>(this);

    pThis->execSync(static_cast<QTWindow *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *QTWindowBase::createAspectCopy(
    const FieldContainer *pRefAspect) const
{
   QTWindow *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const QTWindow *>(pRefAspect),
                  dynamic_cast<const QTWindow *>(this));

    return returnValue;
}
#endif

void QTWindowBase::resolveLinks(void)
{
    Inherited::resolveLinks();
}


#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<QTWindow *>::_type("QTWindowPtr", "WindowPtr");
#endif

//OSG_FIELDTRAITS_GETTYPE(QTWindow *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           QTWindow *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           QTWindow *,
                           0);

OSG_END_NAMESPACE

