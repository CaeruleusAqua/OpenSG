/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class EGLWindow!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEEGLWINDOWINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>




#include "OSGEGLWindowBase.h"
#include "OSGEGLWindow.h"

#include "boost/bind.hpp"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::EGLWindow
    The class for EGL windows.
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var EGLDisplay      EGLWindowBase::_sfDisplay
    
*/

/*! \var EGLSurface      EGLWindowBase::_sfWindow
    
*/

/*! \var EGLContext      EGLWindowBase::_sfContext
    
*/


void EGLWindowBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFEGLDisplay::Description(
        SFEGLDisplay::getClassType(),
        "display",
        "",
        DisplayFieldId, DisplayFieldMask,
        true,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&EGLWindow::editHandleDisplay),
        static_cast<FieldGetMethodSig >(&EGLWindow::getHandleDisplay));

    oType.addInitialDesc(pDesc);

    pDesc = new SFEGLSurface::Description(
        SFEGLSurface::getClassType(),
        "window",
        "",
        WindowFieldId, WindowFieldMask,
        true,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&EGLWindow::editHandleWindow),
        static_cast<FieldGetMethodSig >(&EGLWindow::getHandleWindow));

    oType.addInitialDesc(pDesc);

    pDesc = new SFEGLContext::Description(
        SFEGLContext::getClassType(),
        "context",
        "",
        ContextFieldId, ContextFieldMask,
        true,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&EGLWindow::editHandleContext),
        static_cast<FieldGetMethodSig >(&EGLWindow::getHandleContext));

    oType.addInitialDesc(pDesc);
}


EGLWindowBase::TypeObject EGLWindowBase::_type(
    EGLWindowBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&EGLWindowBase::createEmptyLocal),
    EGLWindow::initMethod,
    EGLWindow::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&EGLWindowBase::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"EGLWindow\"\n"
    "\tparent=\"Window\"\n"
    "\tlibrary=\"WindowEGL\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    ">\n"
    "The class for EGL windows.\n"
    "\t<Field\n"
    "\t\tname=\"display\"\n"
    "\t\ttype=\"EGLDisplay\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\theader=\"OSGEGLWindowDataFields.h\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"window\"\n"
    "\t\ttype=\"EGLSurface\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\theader=\"OSGEGLWindowDataFields.h\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"context\"\n"
    "\t\ttype=\"EGLContext\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\theader=\"OSGEGLWindowDataFields.h\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "The class for EGL windows.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &EGLWindowBase::getType(void)
{
    return _type;
}

const FieldContainerType &EGLWindowBase::getType(void) const
{
    return _type;
}

UInt32 EGLWindowBase::getContainerSize(void) const
{
    return sizeof(EGLWindow);
}

/*------------------------- decorator get ------------------------------*/


SFEGLDisplay *EGLWindowBase::editSFDisplay(void)
{
    editSField(DisplayFieldMask);

    return &_sfDisplay;
}

const SFEGLDisplay *EGLWindowBase::getSFDisplay(void) const
{
    return &_sfDisplay;
}


SFEGLSurface *EGLWindowBase::editSFWindow(void)
{
    editSField(WindowFieldMask);

    return &_sfWindow;
}

const SFEGLSurface *EGLWindowBase::getSFWindow(void) const
{
    return &_sfWindow;
}


SFEGLContext *EGLWindowBase::editSFContext(void)
{
    editSField(ContextFieldMask);

    return &_sfContext;
}

const SFEGLContext *EGLWindowBase::getSFContext(void) const
{
    return &_sfContext;
}






/*------------------------------ access -----------------------------------*/

UInt32 EGLWindowBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (DisplayFieldMask & whichField))
    {
        returnValue += _sfDisplay.getBinSize();
    }
    if(FieldBits::NoField != (WindowFieldMask & whichField))
    {
        returnValue += _sfWindow.getBinSize();
    }
    if(FieldBits::NoField != (ContextFieldMask & whichField))
    {
        returnValue += _sfContext.getBinSize();
    }

    return returnValue;
}

void EGLWindowBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (DisplayFieldMask & whichField))
    {
        _sfDisplay.copyToBin(pMem);
    }
    if(FieldBits::NoField != (WindowFieldMask & whichField))
    {
        _sfWindow.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ContextFieldMask & whichField))
    {
        _sfContext.copyToBin(pMem);
    }
}

void EGLWindowBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (DisplayFieldMask & whichField))
    {
        _sfDisplay.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (WindowFieldMask & whichField))
    {
        _sfWindow.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ContextFieldMask & whichField))
    {
        _sfContext.copyFromBin(pMem);
    }
}

//! create a new instance of the class
EGLWindowTransitPtr EGLWindowBase::createLocal(BitVector bFlags)
{
    EGLWindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<EGLWindow>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
EGLWindowTransitPtr EGLWindowBase::create(void)
{
    EGLWindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<EGLWindow>(tmpPtr);
    }

    return fc;
}

EGLWindow *EGLWindowBase::createEmptyLocal(BitVector bFlags)
{
    EGLWindow *returnValue;

    newPtr<EGLWindow>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
EGLWindow *EGLWindowBase::createEmpty(void)
{
    EGLWindow *returnValue;

    newPtr<EGLWindow>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &= 
        ~Thread::getCurrentLocalFlags(); 

    return returnValue;
}


FieldContainerTransitPtr EGLWindowBase::shallowCopyLocal(
    BitVector bFlags) const
{
    EGLWindow *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const EGLWindow *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr EGLWindowBase::shallowCopy(void) const
{
    EGLWindow *tmpPtr;

    newPtr(tmpPtr, 
           dynamic_cast<const EGLWindow *>(this), 
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

EGLWindowBase::EGLWindowBase(void) :
    Inherited(),
    _sfDisplay                (EGLDisplay(0)),
    _sfWindow                 (EGLSurface(0)),
    _sfContext                (EGLContext(0))
{
}

EGLWindowBase::EGLWindowBase(const EGLWindowBase &source) :
    Inherited(source),
    _sfDisplay                (source._sfDisplay                ),
    _sfWindow                 (source._sfWindow                 ),
    _sfContext                (source._sfContext                )
{
}


/*-------------------------- destructors ----------------------------------*/

EGLWindowBase::~EGLWindowBase(void)
{
}


GetFieldHandlePtr EGLWindowBase::getHandleDisplay         (void) const
{
    SFEGLDisplay::GetHandlePtr returnValue(
        new  SFEGLDisplay::GetHandle(
             &_sfDisplay, 
             this->getType().getFieldDesc(DisplayFieldId)));

    return returnValue;
}

EditFieldHandlePtr EGLWindowBase::editHandleDisplay        (void)
{
    SFEGLDisplay::EditHandlePtr returnValue(
        new  SFEGLDisplay::EditHandle(
             &_sfDisplay, 
             this->getType().getFieldDesc(DisplayFieldId)));

    editSField(DisplayFieldMask);

    return returnValue;
}

GetFieldHandlePtr EGLWindowBase::getHandleWindow          (void) const
{
    SFEGLSurface::GetHandlePtr returnValue(
        new  SFEGLSurface::GetHandle(
             &_sfWindow, 
             this->getType().getFieldDesc(WindowFieldId)));

    return returnValue;
}

EditFieldHandlePtr EGLWindowBase::editHandleWindow         (void)
{
    SFEGLSurface::EditHandlePtr returnValue(
        new  SFEGLSurface::EditHandle(
             &_sfWindow, 
             this->getType().getFieldDesc(WindowFieldId)));

    editSField(WindowFieldMask);

    return returnValue;
}

GetFieldHandlePtr EGLWindowBase::getHandleContext         (void) const
{
    SFEGLContext::GetHandlePtr returnValue(
        new  SFEGLContext::GetHandle(
             &_sfContext, 
             this->getType().getFieldDesc(ContextFieldId)));

    return returnValue;
}

EditFieldHandlePtr EGLWindowBase::editHandleContext        (void)
{
    SFEGLContext::EditHandlePtr returnValue(
        new  SFEGLContext::EditHandle(
             &_sfContext, 
             this->getType().getFieldDesc(ContextFieldId)));

    editSField(ContextFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void EGLWindowBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<EGLWindowBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *EGLWindowBase::createAspectCopy(void) const
{
    EGLWindow *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const EGLWindow *>(this));

    return returnValue;
}
#endif

void EGLWindowBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<EGLWindow *>::_type("EGLWindowPtr", "WindowPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(EGLWindow *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField, 
                           EGLWindow *, 
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField, 
                           EGLWindow *, 
                           0);

OSG_END_NAMESPACE
