/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class GLUTWindow!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEGLUTWINDOWINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>




#include "OSGGLUTWindowBase.h"
#include "OSGGLUTWindow.h"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::GLUTWindow
    The class for GLUT-based windows. See \ref PageWindowGlut for a description.
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var Int32           GLUTWindowBase::_sfId
    
*/


void GLUTWindowBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


#ifdef OSG_1_GET_COMPAT
    typedef const SFInt32 *(GLUTWindowBase::*GetSFIdF)(void) const;

    GetSFIdF GetSFId = &GLUTWindowBase::getSFId;
#endif

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "id",
        "",
        IdFieldId, IdFieldMask,
        true,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&GLUTWindowBase::editSFId),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFId));
#else
        reinterpret_cast<FieldGetMethodSig >(&GLUTWindowBase::getSFId));
#endif

    oType.addInitialDesc(pDesc);
}


GLUTWindowBase::TypeObject GLUTWindowBase::_type(
    GLUTWindowBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &GLUTWindowBase::createEmpty,
    GLUTWindow::initMethod,
    (InitalInsertDescFunc) &GLUTWindowBase::classDescInserter,
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"GLUTWindow\"\n"
    "\tparent=\"Window\"\n"
    "\tlibrary=\"WindowGLUT\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    ">\n"
    "The class for GLUT-based windows. See \\ref PageWindowGlut for a description.\n"
    "\t<Field\n"
    "\t\tname=\"id\"\n"
    "\t\ttype=\"Int32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\theader=\"\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "The class for GLUT-based windows. See \\ref PageWindowGlut for a description.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &GLUTWindowBase::getType(void)
{
    return _type;
}

const FieldContainerType &GLUTWindowBase::getType(void) const
{
    return _type;
}

UInt32 GLUTWindowBase::getContainerSize(void) const
{
    return sizeof(GLUTWindow);
}

/*------------------------- decorator get ------------------------------*/


SFInt32 *GLUTWindowBase::editSFId(void)
{
    editSField(IdFieldMask);

    return &_sfId;
}

const SFInt32 *GLUTWindowBase::getSFId(void) const
{
    return &_sfId;
}

#ifdef OSG_1_GET_COMPAT
SFInt32             *GLUTWindowBase::getSFId             (void)
{
    return this->editSFId             ();
}
#endif





/*------------------------------ access -----------------------------------*/

UInt32 GLUTWindowBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (IdFieldMask & whichField))
    {
        returnValue += _sfId.getBinSize();
    }

    return returnValue;
}

void GLUTWindowBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (IdFieldMask & whichField))
    {
        _sfId.copyToBin(pMem);
    }
}

void GLUTWindowBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (IdFieldMask & whichField))
    {
        _sfId.copyFromBin(pMem);
    }
}

//! create a new instance of the class
GLUTWindowPtr GLUTWindowBase::create(void)
{
    GLUTWindowPtr fc;

    if(getClassType().getPrototype() != NullFC)
    {
        fc = OSG::cast_dynamic<GLUTWindow::ObjPtr>(
            getClassType().getPrototype()-> shallowCopy());
    }

    return fc;
}

//! create an empty new instance of the class, do not copy the prototype
GLUTWindowPtr GLUTWindowBase::createEmpty(void)
{
    GLUTWindowPtr returnValue;

    newPtr<GLUTWindow>(returnValue);

    return returnValue;
}

FieldContainerPtr GLUTWindowBase::shallowCopy(void) const
{
    GLUTWindowPtr returnValue;

    newPtr(returnValue, dynamic_cast<const GLUTWindow *>(this));

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

GLUTWindowBase::GLUTWindowBase(void) :
    Inherited(),
    _sfId                     (Int32(0))
{
}

GLUTWindowBase::GLUTWindowBase(const GLUTWindowBase &source) :
    Inherited(source),
    _sfId                     (source._sfId                     )
{
}

/*-------------------------- destructors ----------------------------------*/

GLUTWindowBase::~GLUTWindowBase(void)
{
}


#ifdef OSG_MT_FIELDCONTAINERPTR
void GLUTWindowBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo,
                                        UInt32             uiCopyOffset)
{
    this->execSync(static_cast<GLUTWindowBase *>(&oFrom),
                   whichField,
                   syncMode,
                   uiSyncInfo,
                   uiCopyOffset);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
void GLUTWindowBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<GLUTWindowBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif

#if 0
void GLUTWindowBase::execBeginEditV(ConstFieldMaskArg whichField,
                                       UInt32            uiAspect,
                                       UInt32            uiContainerSize)
{
    this->execBeginEdit(whichField, uiAspect, uiContainerSize);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr GLUTWindowBase::createAspectCopy(void) const
{
    GLUTWindowPtr returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const GLUTWindow *>(this));

    return returnValue;
}
#endif

void GLUTWindowBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE

#include "OSGSFieldAdaptor.ins"
#include "OSGMFieldAdaptor.ins"

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<GLUTWindowPtr>::_type("GLUTWindowPtr", "WindowPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(GLUTWindowPtr)

OSG_FIELD_DLLEXPORT_DEF2(SFieldAdaptor, GLUTWindowPtr, SFFieldContainerPtr);
OSG_FIELD_DLLEXPORT_DEF2(MFieldAdaptor, GLUTWindowPtr, MFFieldContainerPtr);

OSG_END_NAMESPACE
