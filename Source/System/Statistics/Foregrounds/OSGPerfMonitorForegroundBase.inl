/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PerfMonitorForeground!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE



//! access the type of the class
inline
OSG::FieldContainerType &PerfMonitorForegroundBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 PerfMonitorForegroundBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 PerfMonitorForegroundBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the PerfMonitorForeground::_sfMode field.

inline
UInt32 &PerfMonitorForegroundBase::editMode(void)
{
    editSField(ModeFieldMask);

    return _sfMode.getValue();
}

//! Get the value of the PerfMonitorForeground::_sfMode field.
inline
      UInt32  PerfMonitorForegroundBase::getMode(void) const
{
    return _sfMode.getValue();
}

//! Set the value of the PerfMonitorForeground::_sfMode field.
inline
void PerfMonitorForegroundBase::setMode(const UInt32 value)
{
    editSField(ModeFieldMask);

    _sfMode.setValue(value);
}
//! Get the value of the PerfMonitorForeground::_sfMaxSize field.

inline
Real32 &PerfMonitorForegroundBase::editMaxSize(void)
{
    editSField(MaxSizeFieldMask);

    return _sfMaxSize.getValue();
}

//! Get the value of the PerfMonitorForeground::_sfMaxSize field.
inline
      Real32  PerfMonitorForegroundBase::getMaxSize(void) const
{
    return _sfMaxSize.getValue();
}

//! Set the value of the PerfMonitorForeground::_sfMaxSize field.
inline
void PerfMonitorForegroundBase::setMaxSize(const Real32 value)
{
    editSField(MaxSizeFieldMask);

    _sfMaxSize.setValue(value);
}
//! Get the value of the PerfMonitorForeground::_sfColor field.

inline
Color4f &PerfMonitorForegroundBase::editColor(void)
{
    editSField(ColorFieldMask);

    return _sfColor.getValue();
}

//! Get the value of the PerfMonitorForeground::_sfColor field.
inline
const Color4f &PerfMonitorForegroundBase::getColor(void) const
{
    return _sfColor.getValue();
}

//! Set the value of the PerfMonitorForeground::_sfColor field.
inline
void PerfMonitorForegroundBase::setColor(const Color4f &value)
{
    editSField(ColorFieldMask);

    _sfColor.setValue(value);
}
//! Get the value of the PerfMonitorForeground::_sfBgColor field.

inline
Color4f &PerfMonitorForegroundBase::editBgColor(void)
{
    editSField(BgColorFieldMask);

    return _sfBgColor.getValue();
}

//! Get the value of the PerfMonitorForeground::_sfBgColor field.
inline
const Color4f &PerfMonitorForegroundBase::getBgColor(void) const
{
    return _sfBgColor.getValue();
}

//! Set the value of the PerfMonitorForeground::_sfBgColor field.
inline
void PerfMonitorForegroundBase::setBgColor(const Color4f &value)
{
    editSField(BgColorFieldMask);

    _sfBgColor.setValue(value);
}
//! Get the value of the PerfMonitorForeground::_sfFamily field.

inline
std::string &PerfMonitorForegroundBase::editFamily(void)
{
    editSField(FamilyFieldMask);

    return _sfFamily.getValue();
}

//! Get the value of the PerfMonitorForeground::_sfFamily field.
inline
const std::string &PerfMonitorForegroundBase::getFamily(void) const
{
    return _sfFamily.getValue();
}

//! Set the value of the PerfMonitorForeground::_sfFamily field.
inline
void PerfMonitorForegroundBase::setFamily(const std::string &value)
{
    editSField(FamilyFieldMask);

    _sfFamily.setValue(value);
}
//! Get the value of the PerfMonitorForeground::_sfBorderColor field.

inline
Color4f &PerfMonitorForegroundBase::editBorderColor(void)
{
    editSField(BorderColorFieldMask);

    return _sfBorderColor.getValue();
}

//! Get the value of the PerfMonitorForeground::_sfBorderColor field.
inline
const Color4f &PerfMonitorForegroundBase::getBorderColor(void) const
{
    return _sfBorderColor.getValue();
}

//! Set the value of the PerfMonitorForeground::_sfBorderColor field.
inline
void PerfMonitorForegroundBase::setBorderColor(const Color4f &value)
{
    editSField(BorderColorFieldMask);

    _sfBorderColor.setValue(value);
}
//! Get the value of the PerfMonitorForeground::_sfBorderOffset field.

inline
Vec2f &PerfMonitorForegroundBase::editBorderOffset(void)
{
    editSField(BorderOffsetFieldMask);

    return _sfBorderOffset.getValue();
}

//! Get the value of the PerfMonitorForeground::_sfBorderOffset field.
inline
const Vec2f &PerfMonitorForegroundBase::getBorderOffset(void) const
{
    return _sfBorderOffset.getValue();
}

//! Set the value of the PerfMonitorForeground::_sfBorderOffset field.
inline
void PerfMonitorForegroundBase::setBorderOffset(const Vec2f &value)
{
    editSField(BorderOffsetFieldMask);

    _sfBorderOffset.setValue(value);
}
//! Get the value of the PerfMonitorForeground::_sfTextMargin field.

inline
Vec2f &PerfMonitorForegroundBase::editTextMargin(void)
{
    editSField(TextMarginFieldMask);

    return _sfTextMargin.getValue();
}

//! Get the value of the PerfMonitorForeground::_sfTextMargin field.
inline
const Vec2f &PerfMonitorForegroundBase::getTextMargin(void) const
{
    return _sfTextMargin.getValue();
}

//! Set the value of the PerfMonitorForeground::_sfTextMargin field.
inline
void PerfMonitorForegroundBase::setTextMargin(const Vec2f &value)
{
    editSField(TextMarginFieldMask);

    _sfTextMargin.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void PerfMonitorForegroundBase::execSync (      PerfMonitorForegroundBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (ModeFieldMask & whichField))
        _sfMode.syncWith(pFrom->_sfMode);

    if(FieldBits::NoField != (MaxSizeFieldMask & whichField))
        _sfMaxSize.syncWith(pFrom->_sfMaxSize);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
        _sfColor.syncWith(pFrom->_sfColor);

    if(FieldBits::NoField != (BgColorFieldMask & whichField))
        _sfBgColor.syncWith(pFrom->_sfBgColor);

    if(FieldBits::NoField != (FamilyFieldMask & whichField))
        _sfFamily.syncWith(pFrom->_sfFamily);

    if(FieldBits::NoField != (BorderColorFieldMask & whichField))
        _sfBorderColor.syncWith(pFrom->_sfBorderColor);

    if(FieldBits::NoField != (BorderOffsetFieldMask & whichField))
        _sfBorderOffset.syncWith(pFrom->_sfBorderOffset);

    if(FieldBits::NoField != (TextMarginFieldMask & whichField))
        _sfTextMargin.syncWith(pFrom->_sfTextMargin);
}
#endif


inline
const Char8 *PerfMonitorForegroundBase::getClassname(void)
{
    return "PerfMonitorForeground";
}
OSG_GEN_CONTAINERPTR(PerfMonitorForeground);

OSG_END_NAMESPACE

