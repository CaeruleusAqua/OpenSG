/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SimpleStatisticsForeground!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESIMPLESTATISTICSFOREGROUNDINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>




#include "OSGSimpleStatisticsForegroundBase.h"
#include "OSGSimpleStatisticsForeground.h"

#include "boost/bind.hpp"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::SimpleStatisticsForeground
    \ingroup GrpSystemWindowForegroundsStatistics

    SimpleStatisticsForeground displays the Statistics info as simple lines of text.

    osg::SimpleStatisticsForeground displays the statistics info as simple text
    lines. They are displayed using a compiled-in font that can use an arbitrary
    color and that can be arbitrarily resized, with the size per line given in
    pixel.

    The format of every element is given by a format string for every element that
    is directly passed to OSG::StatElem::putToString(), so go there to see the
    possible options.

    If no elementIDs are given all elements in the osg::StatCollector are display,
    using the default format.

    The format string for the given elements are stored in the _mfFormats Field,
    the size and color used for all lines in _sfSize and _sfColor.

    See \ref PageSystemWindowForegroundStatisticsSimple
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var std::string     SimpleStatisticsForegroundBase::_mfFormats
    The format strings for the given StatElemDesc IDs. If not set, name and value are used.
*/

/*! \var Real32          SimpleStatisticsForegroundBase::_sfSize
    Height of a single line, in  pixel.
*/

/*! \var Color4f         SimpleStatisticsForegroundBase::_sfColor
    Color of the text.
*/

/*! \var Color4f         SimpleStatisticsForegroundBase::_sfShadowColor
    Color of the shadow.
*/

/*! \var Color4f         SimpleStatisticsForegroundBase::_sfBgColor
    Color of the background.
*/

/*! \var std::string     SimpleStatisticsForegroundBase::_sfFamily
    The font family to be used, e.g. "SANS", default if unset.
*/

/*! \var Vec2f           SimpleStatisticsForegroundBase::_sfShadowOffset
    Offset of the shadow, in pixels.
*/

/*! \var UInt8           SimpleStatisticsForegroundBase::_sfHorizontalAlign
    Simple form of layout management, 0 defaults to left.
*/

/*! \var UInt8           SimpleStatisticsForegroundBase::_sfVerticalAlign
    Simple form of layout management, 0 defaults to top.
*/

/*! \var Color4f         SimpleStatisticsForegroundBase::_sfBorderColor
    Color of the border.
*/

/*! \var Vec2f           SimpleStatisticsForegroundBase::_sfBorderOffset
    Offset of the border in pixels.
*/

/*! \var Vec2f           SimpleStatisticsForegroundBase::_sfTextMargin
    Text margin in pixels.
*/


void SimpleStatisticsForegroundBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFString::Description(
        MFString::getClassType(),
        "formats",
        "The format strings for the given StatElemDesc IDs. If not set, name and value are used.\n",
        FormatsFieldId, FormatsFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&SimpleStatisticsForegroundBase::editHandleFormats),
        static_cast<FieldGetMethodSig >(&SimpleStatisticsForegroundBase::getHandleFormats));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "size",
        "Height of a single line, in  pixel.\n",
        SizeFieldId, SizeFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&SimpleStatisticsForegroundBase::editHandleSize),
        static_cast<FieldGetMethodSig >(&SimpleStatisticsForegroundBase::getHandleSize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "color",
        "Color of the text.\n",
        ColorFieldId, ColorFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&SimpleStatisticsForegroundBase::editHandleColor),
        static_cast<FieldGetMethodSig >(&SimpleStatisticsForegroundBase::getHandleColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "shadowColor",
        "Color of the shadow.\n",
        ShadowColorFieldId, ShadowColorFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&SimpleStatisticsForegroundBase::editHandleShadowColor),
        static_cast<FieldGetMethodSig >(&SimpleStatisticsForegroundBase::getHandleShadowColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "bgColor",
        "Color of the background.\n",
        BgColorFieldId, BgColorFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&SimpleStatisticsForegroundBase::editHandleBgColor),
        static_cast<FieldGetMethodSig >(&SimpleStatisticsForegroundBase::getHandleBgColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "family",
        "The font family to be used, e.g. \"SANS\", default if unset.\n",
        FamilyFieldId, FamilyFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&SimpleStatisticsForegroundBase::editHandleFamily),
        static_cast<FieldGetMethodSig >(&SimpleStatisticsForegroundBase::getHandleFamily));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "shadowOffset",
        "Offset of the shadow, in pixels.\n",
        ShadowOffsetFieldId, ShadowOffsetFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&SimpleStatisticsForegroundBase::editHandleShadowOffset),
        static_cast<FieldGetMethodSig >(&SimpleStatisticsForegroundBase::getHandleShadowOffset));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt8::Description(
        SFUInt8::getClassType(),
        "horizontalAlign",
        "Simple form of layout management, 0 defaults to left.\n",
        HorizontalAlignFieldId, HorizontalAlignFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&SimpleStatisticsForegroundBase::editHandleHorizontalAlign),
        static_cast<FieldGetMethodSig >(&SimpleStatisticsForegroundBase::getHandleHorizontalAlign));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt8::Description(
        SFUInt8::getClassType(),
        "verticalAlign",
        "Simple form of layout management, 0 defaults to top.\n",
        VerticalAlignFieldId, VerticalAlignFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&SimpleStatisticsForegroundBase::editHandleVerticalAlign),
        static_cast<FieldGetMethodSig >(&SimpleStatisticsForegroundBase::getHandleVerticalAlign));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "borderColor",
        "Color of the border.\n",
        BorderColorFieldId, BorderColorFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&SimpleStatisticsForegroundBase::editHandleBorderColor),
        static_cast<FieldGetMethodSig >(&SimpleStatisticsForegroundBase::getHandleBorderColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "borderOffset",
        "Offset of the border in pixels.\n",
        BorderOffsetFieldId, BorderOffsetFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&SimpleStatisticsForegroundBase::editHandleBorderOffset),
        static_cast<FieldGetMethodSig >(&SimpleStatisticsForegroundBase::getHandleBorderOffset));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "textMargin",
        "Text margin in pixels.\n",
        TextMarginFieldId, TextMarginFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&SimpleStatisticsForegroundBase::editHandleTextMargin),
        static_cast<FieldGetMethodSig >(&SimpleStatisticsForegroundBase::getHandleTextMargin));

    oType.addInitialDesc(pDesc);
}


SimpleStatisticsForegroundBase::TypeObject SimpleStatisticsForegroundBase::_type(
    SimpleStatisticsForegroundBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &SimpleStatisticsForegroundBase::createEmpty,
    SimpleStatisticsForeground::initMethod,
    SimpleStatisticsForeground::exitMethod,
    (InitalInsertDescFunc) &SimpleStatisticsForegroundBase::classDescInserter,
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"SimpleStatisticsForeground\"\n"
    "\tparent=\"StatisticsForeground\"\n"
    "\tlibrary=\"Util\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    ">\n"
    "\\ingroup GrpSystemWindowForegroundsStatistics\n"
    "\n"
    "SimpleStatisticsForeground displays the Statistics info as simple lines of text.\n"
    "\n"
    "osg::SimpleStatisticsForeground displays the statistics info as simple text\n"
    "lines. They are displayed using a compiled-in font that can use an arbitrary\n"
    "color and that can be arbitrarily resized, with the size per line given in\n"
    "pixel.\n"
    "\n"
    "The format of every element is given by a format string for every element that\n"
    "is directly passed to OSG::StatElem::putToString(), so go there to see the\n"
    "possible options.\n"
    "\n"
    "If no elementIDs are given all elements in the osg::StatCollector are display,\n"
    "using the default format.\n"
    "\n"
    "The format string for the given elements are stored in the _mfFormats Field,\n"
    "the size and color used for all lines in _sfSize and _sfColor.\n"
    "\n"
    "See \\ref PageSystemWindowForegroundStatisticsSimple\n"
    "\t<Field\n"
    "\t\tname=\"formats\"\n"
    "\t\ttype=\"std::string\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe format strings for the given StatElemDesc IDs. If not set, name and value are used.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"size\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"16\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tHeight of a single line, in  pixel.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"color\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1,1,1,1\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tColor of the text.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shadowColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0,0,0,1\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tColor of the shadow.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"bgColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0,0,0,0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tColor of the background.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"family\"\n"
    "\t\ttype=\"std::string\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe font family to be used, e.g. \"SANS\", default if unset.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shadowOffset\"\n"
    "\t\ttype=\"Vec2f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1,-1\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tOffset of the shadow, in pixels.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"horizontalAlign\"\n"
    "\t\ttype=\"UInt8\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tSimple form of layout management, 0 defaults to left.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"verticalAlign\"\n"
    "\t\ttype=\"UInt8\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tSimple form of layout management, 0 defaults to top.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"borderColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0,0,0,0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tColor of the border.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"borderOffset\"\n"
    "\t\ttype=\"Vec2f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"4,4\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tOffset of the border in pixels.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"textMargin\"\n"
    "\t\ttype=\"Vec2f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0,0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tText margin in pixels.\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "\\ingroup GrpSystemWindowForegroundsStatistics\n"
    "\n"
    "SimpleStatisticsForeground displays the Statistics info as simple lines of text.\n"
    "\n"
    "osg::SimpleStatisticsForeground displays the statistics info as simple text\n"
    "lines. They are displayed using a compiled-in font that can use an arbitrary\n"
    "color and that can be arbitrarily resized, with the size per line given in\n"
    "pixel.\n"
    "\n"
    "The format of every element is given by a format string for every element that\n"
    "is directly passed to OSG::StatElem::putToString(), so go there to see the\n"
    "possible options.\n"
    "\n"
    "If no elementIDs are given all elements in the osg::StatCollector are display,\n"
    "using the default format.\n"
    "\n"
    "The format string for the given elements are stored in the _mfFormats Field,\n"
    "the size and color used for all lines in _sfSize and _sfColor.\n"
    "\n"
    "See \\ref PageSystemWindowForegroundStatisticsSimple\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &SimpleStatisticsForegroundBase::getType(void)
{
    return _type;
}

const FieldContainerType &SimpleStatisticsForegroundBase::getType(void) const
{
    return _type;
}

UInt32 SimpleStatisticsForegroundBase::getContainerSize(void) const
{
    return sizeof(SimpleStatisticsForeground);
}

/*------------------------- decorator get ------------------------------*/


MFString *SimpleStatisticsForegroundBase::editMFFormats(void)
{
    editMField(FormatsFieldMask, _mfFormats);

    return &_mfFormats;
}

const MFString *SimpleStatisticsForegroundBase::getMFFormats(void) const
{
    return &_mfFormats;
}

#ifdef OSG_1_GET_COMPAT
MFString            *SimpleStatisticsForegroundBase::getMFFormats        (void)
{
    return this->editMFFormats        ();
}
#endif

SFReal32 *SimpleStatisticsForegroundBase::editSFSize(void)
{
    editSField(SizeFieldMask);

    return &_sfSize;
}

const SFReal32 *SimpleStatisticsForegroundBase::getSFSize(void) const
{
    return &_sfSize;
}

#ifdef OSG_1_GET_COMPAT
SFReal32            *SimpleStatisticsForegroundBase::getSFSize           (void)
{
    return this->editSFSize           ();
}
#endif

SFColor4f *SimpleStatisticsForegroundBase::editSFColor(void)
{
    editSField(ColorFieldMask);

    return &_sfColor;
}

const SFColor4f *SimpleStatisticsForegroundBase::getSFColor(void) const
{
    return &_sfColor;
}

#ifdef OSG_1_GET_COMPAT
SFColor4f           *SimpleStatisticsForegroundBase::getSFColor          (void)
{
    return this->editSFColor          ();
}
#endif

SFColor4f *SimpleStatisticsForegroundBase::editSFShadowColor(void)
{
    editSField(ShadowColorFieldMask);

    return &_sfShadowColor;
}

const SFColor4f *SimpleStatisticsForegroundBase::getSFShadowColor(void) const
{
    return &_sfShadowColor;
}

#ifdef OSG_1_GET_COMPAT
SFColor4f           *SimpleStatisticsForegroundBase::getSFShadowColor    (void)
{
    return this->editSFShadowColor    ();
}
#endif

SFColor4f *SimpleStatisticsForegroundBase::editSFBgColor(void)
{
    editSField(BgColorFieldMask);

    return &_sfBgColor;
}

const SFColor4f *SimpleStatisticsForegroundBase::getSFBgColor(void) const
{
    return &_sfBgColor;
}

#ifdef OSG_1_GET_COMPAT
SFColor4f           *SimpleStatisticsForegroundBase::getSFBgColor        (void)
{
    return this->editSFBgColor        ();
}
#endif

SFString *SimpleStatisticsForegroundBase::editSFFamily(void)
{
    editSField(FamilyFieldMask);

    return &_sfFamily;
}

const SFString *SimpleStatisticsForegroundBase::getSFFamily(void) const
{
    return &_sfFamily;
}

#ifdef OSG_1_GET_COMPAT
SFString            *SimpleStatisticsForegroundBase::getSFFamily         (void)
{
    return this->editSFFamily         ();
}
#endif

SFVec2f *SimpleStatisticsForegroundBase::editSFShadowOffset(void)
{
    editSField(ShadowOffsetFieldMask);

    return &_sfShadowOffset;
}

const SFVec2f *SimpleStatisticsForegroundBase::getSFShadowOffset(void) const
{
    return &_sfShadowOffset;
}

#ifdef OSG_1_GET_COMPAT
SFVec2f             *SimpleStatisticsForegroundBase::getSFShadowOffset   (void)
{
    return this->editSFShadowOffset   ();
}
#endif

SFUInt8 *SimpleStatisticsForegroundBase::editSFHorizontalAlign(void)
{
    editSField(HorizontalAlignFieldMask);

    return &_sfHorizontalAlign;
}

const SFUInt8 *SimpleStatisticsForegroundBase::getSFHorizontalAlign(void) const
{
    return &_sfHorizontalAlign;
}

#ifdef OSG_1_GET_COMPAT
SFUInt8             *SimpleStatisticsForegroundBase::getSFHorizontalAlign(void)
{
    return this->editSFHorizontalAlign();
}
#endif

SFUInt8 *SimpleStatisticsForegroundBase::editSFVerticalAlign(void)
{
    editSField(VerticalAlignFieldMask);

    return &_sfVerticalAlign;
}

const SFUInt8 *SimpleStatisticsForegroundBase::getSFVerticalAlign(void) const
{
    return &_sfVerticalAlign;
}

#ifdef OSG_1_GET_COMPAT
SFUInt8             *SimpleStatisticsForegroundBase::getSFVerticalAlign  (void)
{
    return this->editSFVerticalAlign  ();
}
#endif

SFColor4f *SimpleStatisticsForegroundBase::editSFBorderColor(void)
{
    editSField(BorderColorFieldMask);

    return &_sfBorderColor;
}

const SFColor4f *SimpleStatisticsForegroundBase::getSFBorderColor(void) const
{
    return &_sfBorderColor;
}

#ifdef OSG_1_GET_COMPAT
SFColor4f           *SimpleStatisticsForegroundBase::getSFBorderColor    (void)
{
    return this->editSFBorderColor    ();
}
#endif

SFVec2f *SimpleStatisticsForegroundBase::editSFBorderOffset(void)
{
    editSField(BorderOffsetFieldMask);

    return &_sfBorderOffset;
}

const SFVec2f *SimpleStatisticsForegroundBase::getSFBorderOffset(void) const
{
    return &_sfBorderOffset;
}

#ifdef OSG_1_GET_COMPAT
SFVec2f             *SimpleStatisticsForegroundBase::getSFBorderOffset   (void)
{
    return this->editSFBorderOffset   ();
}
#endif

SFVec2f *SimpleStatisticsForegroundBase::editSFTextMargin(void)
{
    editSField(TextMarginFieldMask);

    return &_sfTextMargin;
}

const SFVec2f *SimpleStatisticsForegroundBase::getSFTextMargin(void) const
{
    return &_sfTextMargin;
}

#ifdef OSG_1_GET_COMPAT
SFVec2f             *SimpleStatisticsForegroundBase::getSFTextMargin     (void)
{
    return this->editSFTextMargin     ();
}
#endif



/*********************************** Non-ptr code ********************************/
void SimpleStatisticsForegroundBase::pushToFormats(const std::string& value)
{
    editMField(FormatsFieldMask, _mfFormats);
    _mfFormats.push_back(value);
}

void SimpleStatisticsForegroundBase::insertIntoFormats(UInt32                uiIndex,
                                                   const std::string& value   )
{
    editMField(FormatsFieldMask, _mfFormats);

    MFString::iterator fieldIt = _mfFormats.begin();

    fieldIt += uiIndex;

    _mfFormats.insert(fieldIt, value);
}

void SimpleStatisticsForegroundBase::replaceInFormats(UInt32                uiIndex,
                                                       const std::string& value   )
{
    if(uiIndex >= _mfFormats.size())
        return;

    editMField(FormatsFieldMask, _mfFormats);

    _mfFormats[uiIndex] = value;
}

void SimpleStatisticsForegroundBase::replaceInFormats(const std::string& pOldElem,
                                                        const std::string& pNewElem)
{
    Int32  elemIdx = _mfFormats.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(FormatsFieldMask, _mfFormats);

        MFString::iterator fieldIt = _mfFormats.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void SimpleStatisticsForegroundBase::removeFromFormats(UInt32 uiIndex)
{
    if(uiIndex < _mfFormats.size())
    {
        editMField(FormatsFieldMask, _mfFormats);

        MFString::iterator fieldIt = _mfFormats.begin();

        fieldIt += uiIndex;
        _mfFormats.erase(fieldIt);
    }
}

void SimpleStatisticsForegroundBase::removeFromFormats(const std::string& value)
{
    Int32 iElemIdx = _mfFormats.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(FormatsFieldMask, _mfFormats);

        MFString::iterator fieldIt = _mfFormats.begin();

        fieldIt += iElemIdx;

        _mfFormats.erase(fieldIt);
    }
}

void SimpleStatisticsForegroundBase::clearFormats(void)
{
    editMField(FormatsFieldMask, _mfFormats);

    _mfFormats.clear();
}


/*------------------------------ access -----------------------------------*/

UInt32 SimpleStatisticsForegroundBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (FormatsFieldMask & whichField))
    {
        returnValue += _mfFormats.getBinSize();
    }
    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        returnValue += _sfSize.getBinSize();
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        returnValue += _sfColor.getBinSize();
    }
    if(FieldBits::NoField != (ShadowColorFieldMask & whichField))
    {
        returnValue += _sfShadowColor.getBinSize();
    }
    if(FieldBits::NoField != (BgColorFieldMask & whichField))
    {
        returnValue += _sfBgColor.getBinSize();
    }
    if(FieldBits::NoField != (FamilyFieldMask & whichField))
    {
        returnValue += _sfFamily.getBinSize();
    }
    if(FieldBits::NoField != (ShadowOffsetFieldMask & whichField))
    {
        returnValue += _sfShadowOffset.getBinSize();
    }
    if(FieldBits::NoField != (HorizontalAlignFieldMask & whichField))
    {
        returnValue += _sfHorizontalAlign.getBinSize();
    }
    if(FieldBits::NoField != (VerticalAlignFieldMask & whichField))
    {
        returnValue += _sfVerticalAlign.getBinSize();
    }
    if(FieldBits::NoField != (BorderColorFieldMask & whichField))
    {
        returnValue += _sfBorderColor.getBinSize();
    }
    if(FieldBits::NoField != (BorderOffsetFieldMask & whichField))
    {
        returnValue += _sfBorderOffset.getBinSize();
    }
    if(FieldBits::NoField != (TextMarginFieldMask & whichField))
    {
        returnValue += _sfTextMargin.getBinSize();
    }

    return returnValue;
}

void SimpleStatisticsForegroundBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (FormatsFieldMask & whichField))
    {
        _mfFormats.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        _sfSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShadowColorFieldMask & whichField))
    {
        _sfShadowColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BgColorFieldMask & whichField))
    {
        _sfBgColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FamilyFieldMask & whichField))
    {
        _sfFamily.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShadowOffsetFieldMask & whichField))
    {
        _sfShadowOffset.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HorizontalAlignFieldMask & whichField))
    {
        _sfHorizontalAlign.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VerticalAlignFieldMask & whichField))
    {
        _sfVerticalAlign.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BorderColorFieldMask & whichField))
    {
        _sfBorderColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BorderOffsetFieldMask & whichField))
    {
        _sfBorderOffset.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TextMarginFieldMask & whichField))
    {
        _sfTextMargin.copyToBin(pMem);
    }
}

void SimpleStatisticsForegroundBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (FormatsFieldMask & whichField))
    {
        _mfFormats.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        _sfSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShadowColorFieldMask & whichField))
    {
        _sfShadowColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BgColorFieldMask & whichField))
    {
        _sfBgColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FamilyFieldMask & whichField))
    {
        _sfFamily.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShadowOffsetFieldMask & whichField))
    {
        _sfShadowOffset.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HorizontalAlignFieldMask & whichField))
    {
        _sfHorizontalAlign.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VerticalAlignFieldMask & whichField))
    {
        _sfVerticalAlign.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BorderColorFieldMask & whichField))
    {
        _sfBorderColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BorderOffsetFieldMask & whichField))
    {
        _sfBorderOffset.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TextMarginFieldMask & whichField))
    {
        _sfTextMargin.copyFromBin(pMem);
    }
}

//! create a new instance of the class
SimpleStatisticsForegroundPtr SimpleStatisticsForegroundBase::create(void)
{
    SimpleStatisticsForegroundPtr fc;

    if(getClassType().getPrototype() != NullFC)
    {
        fc = dynamic_cast<SimpleStatisticsForeground::ObjPtr>(
            getClassType().getPrototype()-> shallowCopy());
    }

    return fc;
}

//! create an empty new instance of the class, do not copy the prototype
SimpleStatisticsForegroundPtr SimpleStatisticsForegroundBase::createEmpty(void)
{
    SimpleStatisticsForegroundPtr returnValue;

    newPtr<SimpleStatisticsForeground>(returnValue);

    return returnValue;
}

FieldContainerPtr SimpleStatisticsForegroundBase::shallowCopy(void) const
{
    SimpleStatisticsForegroundPtr returnValue;

    newPtr(returnValue, dynamic_cast<const SimpleStatisticsForeground *>(this));

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

SimpleStatisticsForegroundBase::SimpleStatisticsForegroundBase(void) :
    Inherited(),
    _mfFormats                (),
    _sfSize                   (Real32(16)),
    _sfColor                  (Color4f(1,1,1,1)),
    _sfShadowColor            (Color4f(0,0,0,1)),
    _sfBgColor                (Color4f(0,0,0,0)),
    _sfFamily                 (),
    _sfShadowOffset           (Vec2f(1,-1)),
    _sfHorizontalAlign        (UInt8(0)),
    _sfVerticalAlign          (UInt8(0)),
    _sfBorderColor            (Color4f(0,0,0,0)),
    _sfBorderOffset           (Vec2f(4,4)),
    _sfTextMargin             (Vec2f(0,0))
{
}

SimpleStatisticsForegroundBase::SimpleStatisticsForegroundBase(const SimpleStatisticsForegroundBase &source) :
    Inherited(source),
    _mfFormats                (source._mfFormats                ),
    _sfSize                   (source._sfSize                   ),
    _sfColor                  (source._sfColor                  ),
    _sfShadowColor            (source._sfShadowColor            ),
    _sfBgColor                (source._sfBgColor                ),
    _sfFamily                 (source._sfFamily                 ),
    _sfShadowOffset           (source._sfShadowOffset           ),
    _sfHorizontalAlign        (source._sfHorizontalAlign        ),
    _sfVerticalAlign          (source._sfVerticalAlign          ),
    _sfBorderColor            (source._sfBorderColor            ),
    _sfBorderOffset           (source._sfBorderOffset           ),
    _sfTextMargin             (source._sfTextMargin             )
{
}


/*-------------------------- destructors ----------------------------------*/

SimpleStatisticsForegroundBase::~SimpleStatisticsForegroundBase(void)
{
}


GetFieldHandlePtr SimpleStatisticsForegroundBase::getHandleFormats         (void) const
{
    MFString::GetHandlePtr returnValue(
        new  MFString::GetHandle(
             &_mfFormats, 
             this->getType().getFieldDesc(FormatsFieldId)));

    return returnValue;
}

EditFieldHandlePtr SimpleStatisticsForegroundBase::editHandleFormats        (void)
{
    MFString::EditHandlePtr returnValue(
        new  MFString::EditHandle(
             &_mfFormats, 
             this->getType().getFieldDesc(FormatsFieldId)));

    editMField(FormatsFieldMask, _mfFormats);

    return returnValue;
}

GetFieldHandlePtr SimpleStatisticsForegroundBase::getHandleSize            (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfSize, 
             this->getType().getFieldDesc(SizeFieldId)));

    return returnValue;
}

EditFieldHandlePtr SimpleStatisticsForegroundBase::editHandleSize           (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfSize, 
             this->getType().getFieldDesc(SizeFieldId)));

    editSField(SizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleStatisticsForegroundBase::getHandleColor           (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfColor, 
             this->getType().getFieldDesc(ColorFieldId)));

    return returnValue;
}

EditFieldHandlePtr SimpleStatisticsForegroundBase::editHandleColor          (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfColor, 
             this->getType().getFieldDesc(ColorFieldId)));

    editSField(ColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleStatisticsForegroundBase::getHandleShadowColor     (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfShadowColor, 
             this->getType().getFieldDesc(ShadowColorFieldId)));

    return returnValue;
}

EditFieldHandlePtr SimpleStatisticsForegroundBase::editHandleShadowColor    (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfShadowColor, 
             this->getType().getFieldDesc(ShadowColorFieldId)));

    editSField(ShadowColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleStatisticsForegroundBase::getHandleBgColor         (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfBgColor, 
             this->getType().getFieldDesc(BgColorFieldId)));

    return returnValue;
}

EditFieldHandlePtr SimpleStatisticsForegroundBase::editHandleBgColor        (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfBgColor, 
             this->getType().getFieldDesc(BgColorFieldId)));

    editSField(BgColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleStatisticsForegroundBase::getHandleFamily          (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfFamily, 
             this->getType().getFieldDesc(FamilyFieldId)));

    return returnValue;
}

EditFieldHandlePtr SimpleStatisticsForegroundBase::editHandleFamily         (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfFamily, 
             this->getType().getFieldDesc(FamilyFieldId)));

    editSField(FamilyFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleStatisticsForegroundBase::getHandleShadowOffset    (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfShadowOffset, 
             this->getType().getFieldDesc(ShadowOffsetFieldId)));

    return returnValue;
}

EditFieldHandlePtr SimpleStatisticsForegroundBase::editHandleShadowOffset   (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfShadowOffset, 
             this->getType().getFieldDesc(ShadowOffsetFieldId)));

    editSField(ShadowOffsetFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleStatisticsForegroundBase::getHandleHorizontalAlign (void) const
{
    SFUInt8::GetHandlePtr returnValue(
        new  SFUInt8::GetHandle(
             &_sfHorizontalAlign, 
             this->getType().getFieldDesc(HorizontalAlignFieldId)));

    return returnValue;
}

EditFieldHandlePtr SimpleStatisticsForegroundBase::editHandleHorizontalAlign(void)
{
    SFUInt8::EditHandlePtr returnValue(
        new  SFUInt8::EditHandle(
             &_sfHorizontalAlign, 
             this->getType().getFieldDesc(HorizontalAlignFieldId)));

    editSField(HorizontalAlignFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleStatisticsForegroundBase::getHandleVerticalAlign   (void) const
{
    SFUInt8::GetHandlePtr returnValue(
        new  SFUInt8::GetHandle(
             &_sfVerticalAlign, 
             this->getType().getFieldDesc(VerticalAlignFieldId)));

    return returnValue;
}

EditFieldHandlePtr SimpleStatisticsForegroundBase::editHandleVerticalAlign  (void)
{
    SFUInt8::EditHandlePtr returnValue(
        new  SFUInt8::EditHandle(
             &_sfVerticalAlign, 
             this->getType().getFieldDesc(VerticalAlignFieldId)));

    editSField(VerticalAlignFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleStatisticsForegroundBase::getHandleBorderColor     (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfBorderColor, 
             this->getType().getFieldDesc(BorderColorFieldId)));

    return returnValue;
}

EditFieldHandlePtr SimpleStatisticsForegroundBase::editHandleBorderColor    (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfBorderColor, 
             this->getType().getFieldDesc(BorderColorFieldId)));

    editSField(BorderColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleStatisticsForegroundBase::getHandleBorderOffset    (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfBorderOffset, 
             this->getType().getFieldDesc(BorderOffsetFieldId)));

    return returnValue;
}

EditFieldHandlePtr SimpleStatisticsForegroundBase::editHandleBorderOffset   (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfBorderOffset, 
             this->getType().getFieldDesc(BorderOffsetFieldId)));

    editSField(BorderOffsetFieldMask);

    return returnValue;
}

GetFieldHandlePtr SimpleStatisticsForegroundBase::getHandleTextMargin      (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfTextMargin, 
             this->getType().getFieldDesc(TextMarginFieldId)));

    return returnValue;
}

EditFieldHandlePtr SimpleStatisticsForegroundBase::editHandleTextMargin     (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfTextMargin, 
             this->getType().getFieldDesc(TextMarginFieldId)));

    editSField(TextMarginFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void SimpleStatisticsForegroundBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<SimpleStatisticsForegroundBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr SimpleStatisticsForegroundBase::createAspectCopy(void) const
{
    SimpleStatisticsForegroundPtr returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const SimpleStatisticsForeground *>(this));

    return returnValue;
}
#endif

void SimpleStatisticsForegroundBase::resolveLinks(void)
{
    Inherited::resolveLinks();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfFormats.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE

#include "OSGSFieldAdaptor.ins"
#include "OSGMFieldAdaptor.ins"

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<SimpleStatisticsForegroundPtr>::_type("SimpleStatisticsForegroundPtr", "StatisticsForegroundPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(SimpleStatisticsForegroundPtr)

OSG_FIELD_DLLEXPORT_DEF2(SFieldAdaptor, SimpleStatisticsForegroundPtr, SFFieldContainerPtr);
OSG_FIELD_DLLEXPORT_DEF2(MFieldAdaptor, SimpleStatisticsForegroundPtr, MFFieldContainerPtr);

OSG_END_NAMESPACE
