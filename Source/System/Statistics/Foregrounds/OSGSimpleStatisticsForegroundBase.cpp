/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SimpleStatisticsForeground!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESIMPLESTATISTICSFOREGROUNDINST

#include <stdlib.h>
#include <stdio.h>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>




#include "OSGSimpleStatisticsForegroundBase.h"
#include "OSGSimpleStatisticsForeground.h"

OSG_USING_NAMESPACE

// Field descriptions

/*! \var std::string SimpleStatisticsForegroundBase::_mfFormats
    	The format strings for the given StatElemDesc IDs. If not set, name and value are used.

*/
/*! \var Real32 SimpleStatisticsForegroundBase::_sfSize
    	Height of a single line, in  pixel.

*/
/*! \var Color4f SimpleStatisticsForegroundBase::_sfColor
    	Color of the text.

*/

void SimpleStatisticsForegroundBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL; 


#ifdef OSG_1_COMPAT
    typedef const MFString *(SimpleStatisticsForegroundBase::*GetMFFormatsF)(void) const;

    GetMFFormatsF GetMFFormats = &SimpleStatisticsForegroundBase::getMFFormats;
#endif

    pDesc = new MFString::Description(
        MFString::getClassType(), 
        "formats", 
        "	The format strings for the given StatElemDesc IDs. If not set, name and value are used.\n",
        FormatsFieldId, FormatsFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&SimpleStatisticsForegroundBase::editMFFormats),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFFormats));
#else
        reinterpret_cast<FieldGetMethodSig >(&SimpleStatisticsForegroundBase::getMFFormats));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFReal32 *(SimpleStatisticsForegroundBase::*GetSFSizeF)(void) const;

    GetSFSizeF GetSFSize = &SimpleStatisticsForegroundBase::getSFSize;
#endif

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(), 
        "size", 
        "	Height of a single line, in  pixel.\n",
        SizeFieldId, SizeFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&SimpleStatisticsForegroundBase::editSFSize),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFSize));
#else
        reinterpret_cast<FieldGetMethodSig >(&SimpleStatisticsForegroundBase::getSFSize));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFColor4f *(SimpleStatisticsForegroundBase::*GetSFColorF)(void) const;

    GetSFColorF GetSFColor = &SimpleStatisticsForegroundBase::getSFColor;
#endif

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(), 
        "color", 
        "	Color of the text.\n",
        ColorFieldId, ColorFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&SimpleStatisticsForegroundBase::editSFColor),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFColor));
#else
        reinterpret_cast<FieldGetMethodSig >(&SimpleStatisticsForegroundBase::getSFColor));
#endif

    oType.addInitialDesc(pDesc);
}


SimpleStatisticsForegroundBase::TypeObject SimpleStatisticsForegroundBase::_type(true,
    SimpleStatisticsForegroundBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &SimpleStatisticsForegroundBase::createEmpty,
    SimpleStatisticsForeground::initMethod,
    (InitalInsertDescFunc) &SimpleStatisticsForegroundBase::classDescInserter,
    false,
    "<?xml version=\"1.0\"?>\n"
"\n"
"<FieldContainer\n"
"	name=\"SimpleStatisticsForeground\"\n"
"	parent=\"StatisticsForeground\"\n"
"	library=\"Util\"\n"
"	pointerfieldtypes=\"both\"\n"
"	structure=\"concrete\"\n"
"	systemcomponent=\"true\"\n"
"	parentsystemcomponent=\"true\"\n"
"	decoratable=\"false\"\n"
">\n"
"Simpe Statistics display. Just print all the selected elements in the upper right corner of the screen.\n"
"	<Field\n"
"		name=\"formats\"\n"
"		type=\"std::string\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	The format strings for the given StatElemDesc IDs. If not set, name and value are used.\n"
"	</Field>\n"
"	<Field\n"
"		name=\"size\"\n"
"		type=\"Real32\"\n"
"		cardinality=\"single\"\n"
"		visibility=\"external\"\n"
"		defaultValue=\"25\"\n"
"		access=\"public\"\n"
"	>\n"
"	Height of a single line, in  pixel.\n"
"	</Field>\n"
"	<Field\n"
"		name=\"color\"\n"
"		type=\"Color4f\"\n"
"		cardinality=\"single\"\n"
"		visibility=\"external\"\n"
"		defaultValue=\"1,1,1,1\"\n"
"		access=\"public\"\n"
"	>\n"
"	Color of the text.\n"
"	</Field>\n"
"</FieldContainer>\n"
,
    "Simpe Statistics display. Just print all the selected elements in the upper right corner of the screen.\n" 
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &SimpleStatisticsForegroundBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &SimpleStatisticsForegroundBase::getType(void) const 
{
    return _type;
} 

UInt32 SimpleStatisticsForegroundBase::getContainerSize(void) const 
{ 
    return sizeof(SimpleStatisticsForeground); 
}

/*------------------------- decorator get ------------------------------*/


MFString *SimpleStatisticsForegroundBase::editMFFormats(void)
{
    editMField(FormatsFieldMask, _mfFormats);

    return &_mfFormats;
}

const MFString *SimpleStatisticsForegroundBase::getMFFormats(void) const
{
    return &_mfFormats;
}

#ifdef OSG_1_COMPAT
MFString *SimpleStatisticsForegroundBase::getMFFormats(void)
{
    return this->editMFFormats();
}
#endif

SFReal32 *SimpleStatisticsForegroundBase::editSFSize(void)
{
    editSField(SizeFieldMask);

    return &_sfSize;
}

const SFReal32 *SimpleStatisticsForegroundBase::getSFSize(void) const
{
    return &_sfSize;
}

#ifdef OSG_1_COMPAT
SFReal32 *SimpleStatisticsForegroundBase::getSFSize(void)
{
    return this->editSFSize();
}
#endif

SFColor4f *SimpleStatisticsForegroundBase::editSFColor(void)
{
    editSField(ColorFieldMask);

    return &_sfColor;
}

const SFColor4f *SimpleStatisticsForegroundBase::getSFColor(void) const
{
    return &_sfColor;
}

#ifdef OSG_1_COMPAT
SFColor4f *SimpleStatisticsForegroundBase::getSFColor(void)
{
    return this->editSFColor();
}
#endif



/*------------------------------ access -----------------------------------*/

UInt32 SimpleStatisticsForegroundBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (FormatsFieldMask & whichField))
    {
        returnValue += _mfFormats.getBinSize();
    }
    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        returnValue += _sfSize.getBinSize();
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        returnValue += _sfColor.getBinSize();
    }

    return returnValue;
}

void SimpleStatisticsForegroundBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (FormatsFieldMask & whichField))
    {
        _mfFormats.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        _sfSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyToBin(pMem);
    }
}

void SimpleStatisticsForegroundBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (FormatsFieldMask & whichField))
    {
        _mfFormats.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        _sfSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyFromBin(pMem);
    }
}

//! create an empty new instance of the class, do not copy the prototype
SimpleStatisticsForegroundPtr SimpleStatisticsForegroundBase::createEmpty(void) 
{ 
    SimpleStatisticsForegroundPtr returnValue; 
    
    newPtr<SimpleStatisticsForeground>(returnValue); 

    return returnValue; 
}

FieldContainerPtr SimpleStatisticsForegroundBase::shallowCopy(void) const 
{ 
    SimpleStatisticsForegroundPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const SimpleStatisticsForeground *>(this)); 

    return returnValue; 
}



/*------------------------- constructors ----------------------------------*/

SimpleStatisticsForegroundBase::SimpleStatisticsForegroundBase(void) :
    Inherited(),
    _mfFormats(),
    _sfSize(Real32(25)),
    _sfColor(Color4f(1,1,1,1))
{
}

SimpleStatisticsForegroundBase::SimpleStatisticsForegroundBase(const SimpleStatisticsForegroundBase &source) :
    Inherited(source),
    _mfFormats(source._mfFormats),
    _sfSize(source._sfSize),
    _sfColor(source._sfColor)
{
}

/*-------------------------- destructors ----------------------------------*/

SimpleStatisticsForegroundBase::~SimpleStatisticsForegroundBase(void)
{
}


#ifdef OSG_MT_FIELDCONTAINERPTR
void SimpleStatisticsForegroundBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo,
                                        UInt32             uiCopyOffset)
{
    this->execSync(static_cast<SimpleStatisticsForegroundBase *>(&oFrom),
                   whichField, 
                   syncMode, 
                   uiSyncInfo,
                   uiCopyOffset);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
void SimpleStatisticsForegroundBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<SimpleStatisticsForegroundBase *>(&oFrom), 
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif

#if 0
void SimpleStatisticsForegroundBase::execBeginEditV(ConstFieldMaskArg whichField,
                                       UInt32            uiAspect,
                                       UInt32            uiContainerSize)
{
    this->execBeginEdit(whichField, uiAspect, uiContainerSize);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr SimpleStatisticsForegroundBase::createAspectCopy(void) const
{
    SimpleStatisticsForegroundPtr returnValue; 

    newAspectCopy(returnValue, 
                  dynamic_cast<const SimpleStatisticsForeground *>(this)); 

    return returnValue; 
}
#endif

void SimpleStatisticsForegroundBase::resolveLinks(void)
{
    Inherited::resolveLinks();
}


#include "OSGSField.ins"
#include "OSGMField.ins"

#if defined(OSG_TMPL_STATIC_MEMBER_NEEDS_FUNCTION_INSTANTIATION) || \
    defined(OSG_TMPL_STATIC_MEMBER_NEEDS_CLASS_INSTANTIATION   )

#include "OSGSFieldFuncs.ins"
#include "OSGMFieldFuncs.ins"
#endif

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<SimpleStatisticsForegroundPtr>::_type("SimpleStatisticsForegroundPtr", "StatisticsForegroundPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(SimpleStatisticsForegroundPtr)

OSG_FIELD_DLLEXPORT_DEF1(SField, SimpleStatisticsForegroundPtr);
OSG_FIELD_DLLEXPORT_DEF1(MField, SimpleStatisticsForegroundPtr);

OSG_END_NAMESPACE


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id$";
    static Char8 cvsid_hpp       [] = OSGSIMPLESTATISTICSFOREGROUNDBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGSIMPLESTATISTICSFOREGROUNDBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGSIMPLESTATISTICSFOREGROUNDFIELDS_HEADER_CVSID;
}
