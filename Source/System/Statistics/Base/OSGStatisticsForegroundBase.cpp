/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class StatisticsForeground!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESTATISTICSFOREGROUNDINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>




#include "OSGStatisticsForegroundBase.h"
#include "OSGStatisticsForeground.h"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::StatisticsForeground
    \ingroup GrpSystemWindowForegrounds

    StatisticsForeground is the base class for all foregrounds that process
    statistics.  Decendents of this class can be used to print or draw Statistics
    elements on the rendered image.

    The OSG::StatCollector that is used to collect the elements needs to be
    attached to the foreground in the _sfCollection field and the list of
    OSG::StatElemDesc IDs that should be displayed need to be selected with the
    _mfElementIDs field.

    Statistics presentation is done as a foreground so it can be drawn on top of a
    currently rendering scene.  This does not mean you could not collect statistics
    directly and present them to the user in another way such as a GUI or text output.

    See \ref PageSystemWindowForegroundStatistics for a description.
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var Int32           StatisticsForegroundBase::_mfElementIDs
    The StatElemDesc IDs to use. If not set, use all in the descriptor.
*/

/*! \var StatCollector   StatisticsForegroundBase::_sfCollector
    The OSG::StatCollector that keeps the displayed statistics.
*/


void StatisticsForegroundBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


#ifdef OSG_1_COMPAT
    typedef const MFInt32 *(StatisticsForegroundBase::*GetMFElementIDsF)(void) const;

    GetMFElementIDsF GetMFElementIDs = &StatisticsForegroundBase::getMFElementIDs;
#endif

    pDesc = new MFInt32::Description(
        MFInt32::getClassType(),
        "elementIDs",
        "The StatElemDesc IDs to use. If not set, use all in the descriptor.\n",
        ElementIDsFieldId, ElementIDsFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&StatisticsForegroundBase::editMFElementIDs),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFElementIDs));
#else
        reinterpret_cast<FieldGetMethodSig >(&StatisticsForegroundBase::getMFElementIDs));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFStatCollector *(StatisticsForegroundBase::*GetSFCollectorF)(void) const;

    GetSFCollectorF GetSFCollector = &StatisticsForegroundBase::getSFCollector;
#endif

    pDesc = new SFStatCollector::Description(
        SFStatCollector::getClassType(),
        "collector",
        "The OSG::StatCollector that keeps the displayed statistics.\n",
        CollectorFieldId, CollectorFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&StatisticsForegroundBase::editSFCollector),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFCollector));
#else
        reinterpret_cast<FieldGetMethodSig >(&StatisticsForegroundBase::getSFCollector));
#endif

    oType.addInitialDesc(pDesc);
}


StatisticsForegroundBase::TypeObject StatisticsForegroundBase::_type(true,
    StatisticsForegroundBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    StatisticsForeground::initMethod,
    (InitalInsertDescFunc) &StatisticsForegroundBase::classDescInserter,
    false,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"StatisticsForeground\"\n"
    "\tparent=\"Foreground\"\n"
    "\tlibrary=\"System\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"abstract\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    ">\n"
    "\\ingroup GrpSystemWindowForegrounds\n"
    "\n"
    "StatisticsForeground is the base class for all foregrounds that process\n"
    "statistics.  Decendents of this class can be used to print or draw Statistics\n"
    "elements on the rendered image.\n"
    "\n"
    "The OSG::StatCollector that is used to collect the elements needs to be\n"
    "attached to the foreground in the _sfCollection field and the list of\n"
    "OSG::StatElemDesc IDs that should be displayed need to be selected with the\n"
    "_mfElementIDs field.\n"
    "\n"
    "Statistics presentation is done as a foreground so it can be drawn on top of a\n"
    "currently rendering scene.  This does not mean you could not collect statistics\n"
    "directly and present them to the user in another way such as a GUI or text output.\n"
    "\n"
    "See \\ref PageSystemWindowForegroundStatistics for a description.\n"
    "\t<Field\n"
    "\t\tname=\"elementIDs\"\n"
    "\t\ttype=\"Int32\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe StatElemDesc IDs to use. If not set, use all in the descriptor.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"collector\"\n"
    "\t\ttype=\"StatCollector\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        The OSG::StatCollector that keeps the displayed statistics.\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "\\ingroup GrpSystemWindowForegrounds\n"
    "\n"
    "StatisticsForeground is the base class for all foregrounds that process\n"
    "statistics.  Decendents of this class can be used to print or draw Statistics\n"
    "elements on the rendered image.\n"
    "\n"
    "The OSG::StatCollector that is used to collect the elements needs to be\n"
    "attached to the foreground in the _sfCollection field and the list of\n"
    "OSG::StatElemDesc IDs that should be displayed need to be selected with the\n"
    "_mfElementIDs field.\n"
    "\n"
    "Statistics presentation is done as a foreground so it can be drawn on top of a\n"
    "currently rendering scene.  This does not mean you could not collect statistics\n"
    "directly and present them to the user in another way such as a GUI or text output.\n"
    "\n"
    "See \\ref PageSystemWindowForegroundStatistics for a description.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &StatisticsForegroundBase::getType(void)
{
    return _type;
}

const FieldContainerType &StatisticsForegroundBase::getType(void) const
{
    return _type;
}

UInt32 StatisticsForegroundBase::getContainerSize(void) const
{
    return sizeof(StatisticsForeground);
}

/*------------------------- decorator get ------------------------------*/


MFInt32 *StatisticsForegroundBase::editMFElementIDs(void)
{
    editMField(ElementIDsFieldMask, _mfElementIDs);

    return &_mfElementIDs;
}

const MFInt32 *StatisticsForegroundBase::getMFElementIDs(void) const
{
    return &_mfElementIDs;
}

#ifdef OSG_1_COMPAT
MFInt32             *StatisticsForegroundBase::getMFElementIDs     (void)
{
    return this->editMFElementIDs     ();
}
#endif

SFStatCollector *StatisticsForegroundBase::editSFCollector(void)
{
    editSField(CollectorFieldMask);

    return &_sfCollector;
}

const SFStatCollector *StatisticsForegroundBase::getSFCollector(void) const
{
    return &_sfCollector;
}

#ifdef OSG_1_COMPAT
SFStatCollector     *StatisticsForegroundBase::getSFCollector      (void)
{
    return this->editSFCollector      ();
}
#endif



/*********************************** Non-ptr code ********************************/
void StatisticsForegroundBase::pushToElementIDs(const Int32& value)
{
    editMField(ElementIDsFieldMask, _mfElementIDs);
    _mfElementIDs.push_back(value);
}

void StatisticsForegroundBase::insertIntoElementIDs(UInt32                uiIndex,
                                                   const Int32& value   )
{
    editMField(ElementIDsFieldMask, _mfElementIDs);

    MFInt32::iterator fieldIt = _mfElementIDs.begin();

    fieldIt += uiIndex;

    _mfElementIDs.insert(fieldIt, value);
}

void StatisticsForegroundBase::replaceInElementIDs(UInt32                uiIndex,
                                                       const Int32& value   )
{
    if(uiIndex >= _mfElementIDs.size())
        return;

    editMField(ElementIDsFieldMask, _mfElementIDs);

    _mfElementIDs[uiIndex] = value;
}

void StatisticsForegroundBase::replaceInElementIDs(const Int32& pOldElem,
                                                        const Int32& pNewElem)
{
    Int32  elemIdx = _mfElementIDs.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(ElementIDsFieldMask, _mfElementIDs);

        MFInt32::iterator fieldIt = _mfElementIDs.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void StatisticsForegroundBase::removeFromElementIDs(UInt32 uiIndex)
{
    if(uiIndex < _mfElementIDs.size())
    {
        editMField(ElementIDsFieldMask, _mfElementIDs);

        MFInt32::iterator fieldIt = _mfElementIDs.begin();

        fieldIt += uiIndex;
        _mfElementIDs.erase(fieldIt);
    }
}

void StatisticsForegroundBase::removeFromElementIDs(const Int32& value)
{
    Int32 iElemIdx = _mfElementIDs.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ElementIDsFieldMask, _mfElementIDs);

        MFInt32::iterator fieldIt = _mfElementIDs.begin();

        fieldIt += iElemIdx;

        _mfElementIDs.erase(fieldIt);
    }
}

void StatisticsForegroundBase::clearElementIDs(void)
{
    editMField(ElementIDsFieldMask, _mfElementIDs);

    _mfElementIDs.clear();
}


/*------------------------------ access -----------------------------------*/

UInt32 StatisticsForegroundBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ElementIDsFieldMask & whichField))
    {
        returnValue += _mfElementIDs.getBinSize();
    }
    if(FieldBits::NoField != (CollectorFieldMask & whichField))
    {
        returnValue += _sfCollector.getBinSize();
    }

    return returnValue;
}

void StatisticsForegroundBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ElementIDsFieldMask & whichField))
    {
        _mfElementIDs.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CollectorFieldMask & whichField))
    {
        _sfCollector.copyToBin(pMem);
    }
}

void StatisticsForegroundBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ElementIDsFieldMask & whichField))
    {
        _mfElementIDs.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CollectorFieldMask & whichField))
    {
        _sfCollector.copyFromBin(pMem);
    }
}



/*------------------------- constructors ----------------------------------*/

StatisticsForegroundBase::StatisticsForegroundBase(void) :
    Inherited(),
    _mfElementIDs             (),
    _sfCollector              ()
{
}

StatisticsForegroundBase::StatisticsForegroundBase(const StatisticsForegroundBase &source) :
    Inherited(source),
    _mfElementIDs             (source._mfElementIDs             ),
    _sfCollector              (source._sfCollector              )
{
}

/*-------------------------- destructors ----------------------------------*/

StatisticsForegroundBase::~StatisticsForegroundBase(void)
{
}


#ifdef OSG_MT_FIELDCONTAINERPTR
void StatisticsForegroundBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo,
                                        UInt32             uiCopyOffset)
{
    this->execSync(static_cast<StatisticsForegroundBase *>(&oFrom),
                   whichField,
                   syncMode,
                   uiSyncInfo,
                   uiCopyOffset);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
void StatisticsForegroundBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<StatisticsForegroundBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif

#if 0
void StatisticsForegroundBase::execBeginEditV(ConstFieldMaskArg whichField,
                                       UInt32            uiAspect,
                                       UInt32            uiContainerSize)
{
    this->execBeginEdit(whichField, uiAspect, uiContainerSize);
}
#endif


void StatisticsForegroundBase::resolveLinks(void)
{
    Inherited::resolveLinks();
}


OSG_END_NAMESPACE

#include "OSGSFieldAdaptor.ins"
#include "OSGMFieldAdaptor.ins"

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<StatisticsForegroundPtr>::_type("StatisticsForegroundPtr", "ForegroundPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(StatisticsForegroundPtr)

OSG_FIELD_DLLEXPORT_DEF2(SFieldAdaptor, StatisticsForegroundPtr, SFFieldContainerPtr);
OSG_FIELD_DLLEXPORT_DEF2(MFieldAdaptor, StatisticsForegroundPtr, MFFieldContainerPtr);

OSG_END_NAMESPACE
