/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextureImageChunk
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGTEXTUREIMAGECHUNKBASE_H_
#define _OSGTEXTUREIMAGECHUNKBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGStateDef.h"

//#include "OSGBaseTypes.h"

#include "OSGStateChunk.h" // Parent

#include "OSGTextureBaseChunkFields.h"  // Texture type
#include "OSGSysFields.h"               // Level type
#include "OSGBaseFields.h"              // Access type

#include "OSGTextureImageChunkFields.h"

OSG_BEGIN_NAMESPACE


class TextureImageChunk;

//! \brief TextureImageChunk Base Class.

class OSG_STATE_DLLMAPPING TextureImageChunkBase : public StateChunk
{
  public:

    typedef StateChunk Inherited;
    typedef StateChunk ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(TextureImageChunk);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        TextureFieldId = Inherited::NextFieldId,
        LevelFieldId = TextureFieldId + 1,
        LayerFieldId = LevelFieldId + 1,
        AccessFieldId = LayerFieldId + 1,
        FormatFieldId = AccessFieldId + 1,
        NextFieldId = FormatFieldId + 1
    };

    static const OSG::BitVector TextureFieldMask =
        (TypeTraits<BitVector>::One << TextureFieldId);
    static const OSG::BitVector LevelFieldMask =
        (TypeTraits<BitVector>::One << LevelFieldId);
    static const OSG::BitVector LayerFieldMask =
        (TypeTraits<BitVector>::One << LayerFieldId);
    static const OSG::BitVector AccessFieldMask =
        (TypeTraits<BitVector>::One << AccessFieldId);
    static const OSG::BitVector FormatFieldMask =
        (TypeTraits<BitVector>::One << FormatFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUnrecTextureBaseChunkPtr SFTextureType;
    typedef SFInt32           SFLevelType;
    typedef SFInt32           SFLayerType;
    typedef SFGLenum          SFAccessType;
    typedef SFGLenum          SFFormatType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecTextureBaseChunkPtr *getSFTexture        (void) const;
                  SFUnrecTextureBaseChunkPtr *editSFTexture        (void);

                  SFInt32             *editSFLevel          (void);
            const SFInt32             *getSFLevel           (void) const;

                  SFInt32             *editSFLayer          (void);
            const SFInt32             *getSFLayer           (void) const;

                  SFGLenum            *editSFAccess         (void);
            const SFGLenum            *getSFAccess          (void) const;

                  SFGLenum            *editSFFormat         (void);
            const SFGLenum            *getSFFormat          (void) const;


                  TextureBaseChunk * getTexture        (void) const;

                  Int32               &editLevel          (void);
                  Int32                getLevel           (void) const;

                  Int32               &editLayer          (void);
                  Int32                getLayer           (void) const;

                  GLenum              &editAccess         (void);
            const GLenum              &getAccess          (void) const;

                  GLenum              &editFormat         (void);
            const GLenum              &getFormat          (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setTexture        (TextureBaseChunk * const value);
            void setLevel          (const Int32 value);
            void setLayer          (const Int32 value);
            void setAccess         (const GLenum &value);
            void setFormat         (const GLenum &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual SizeT  getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  TextureImageChunkTransitPtr  create          (void);
    static  TextureImageChunk           *createEmpty     (void);

    static  TextureImageChunkTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  TextureImageChunk            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  TextureImageChunkTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUnrecTextureBaseChunkPtr _sfTexture;
    SFInt32           _sfLevel;
    SFInt32           _sfLayer;
    SFGLenum          _sfAccess;
    SFGLenum          _sfFormat;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    TextureImageChunkBase(void);
    TextureImageChunkBase(const TextureImageChunkBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~TextureImageChunkBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const TextureImageChunk *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

     GetFieldHandlePtr  getHandleTexture         (void) const;
     EditFieldHandlePtr editHandleTexture        (void);
     GetFieldHandlePtr  getHandleLevel           (void) const;
     EditFieldHandlePtr editHandleLevel          (void);
     GetFieldHandlePtr  getHandleLayer           (void) const;
     EditFieldHandlePtr editHandleLayer          (void);
     GetFieldHandlePtr  getHandleAccess          (void) const;
     EditFieldHandlePtr editHandleAccess         (void);
     GetFieldHandlePtr  getHandleFormat          (void) const;
     EditFieldHandlePtr editHandleFormat         (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      TextureImageChunkBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const TextureImageChunkBase &source);
};

typedef TextureImageChunkBase *TextureImageChunkBaseP;

OSG_END_NAMESPACE

#endif /* _OSGTEXTUREIMAGECHUNKBASE_H_ */
