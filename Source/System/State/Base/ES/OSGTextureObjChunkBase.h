/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextureObjChunk
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGTEXTUREOBJCHUNKBASE_H_
#define _OSGTEXTUREOBJCHUNKBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGSystemDef.h"

#include "OSGBaseTypes.h"

#include "OSGTextureBaseChunk.h" // Parent

#include "OSGImageFields.h" // Image type
#include "OSGGLenumFields.h" // InternalFormat type
#include "OSGGLenumFields.h" // ExternalFormat type
#include "OSGBoolFields.h" // Scale type
#include "OSGUInt32Fields.h" // Frame type
#include "OSGGLenumFields.h" // MinFilter type
#include "OSGGLenumFields.h" // MagFilter type
#include "OSGGLenumFields.h" // WrapS type
#include "OSGGLenumFields.h" // WrapT type
#include "OSGGLenumFields.h" // WrapR type
#include "OSGGLenumFields.h" // EnvMode type
#include "OSGColor4fFields.h" // EnvColor type
#include "OSGGLenumFields.h" // EnvCombineRGB type
#include "OSGGLenumFields.h" // EnvCombineAlpha type
#include "OSGReal32Fields.h" // EnvScaleRGB type
#include "OSGReal32Fields.h" // EnvScaleAlpha type
#include "OSGGLenumFields.h" // EnvSource0RGB type
#include "OSGGLenumFields.h" // EnvSource1RGB type
#include "OSGGLenumFields.h" // EnvSource2RGB type
#include "OSGGLenumFields.h" // EnvSource0Alpha type
#include "OSGGLenumFields.h" // EnvSource1Alpha type
#include "OSGGLenumFields.h" // EnvSource2Alpha type
#include "OSGGLenumFields.h" // EnvOperand0RGB type
#include "OSGGLenumFields.h" // EnvOperand1RGB type
#include "OSGGLenumFields.h" // EnvOperand2RGB type
#include "OSGGLenumFields.h" // EnvOperand0Alpha type
#include "OSGGLenumFields.h" // EnvOperand1Alpha type
#include "OSGGLenumFields.h" // EnvOperand2Alpha type
#include "OSGGLenumFields.h" // GLId type
#include "OSGInt32Fields.h" // IgnoreGLForAspect type
#include "OSGBoolFields.h" // PointSprite type
#include "OSGReal32Fields.h" // Priority type
#include "OSGGLenumFields.h" // ShaderOperation type
#include "OSGGLenumFields.h" // ShaderInput type
#include "OSGReal32Fields.h" // ShaderOffsetMatrix type
#include "OSGReal32Fields.h" // ShaderOffsetScale type
#include "OSGReal32Fields.h" // ShaderOffsetBias type
#include "OSGGLenumFields.h" // ShaderRGBADotProduct type
#include "OSGUInt8Fields.h" // ShaderCullModes type
#include "OSGVec3fFields.h" // ShaderConstEye type
#include "OSGReal32Fields.h" // LodBias type
#include "OSGGLenumFields.h" // Target type
#include "OSGInt32Fields.h" // DirtyLeft type
#include "OSGInt32Fields.h" // DirtyMinX type
#include "OSGInt32Fields.h" // DirtyMaxX type
#include "OSGInt32Fields.h" // DirtyMinY type
#include "OSGInt32Fields.h" // DirtyMaxY type
#include "OSGInt32Fields.h" // DirtyMinZ type
#include "OSGInt32Fields.h" // DirtyMaxZ type
#include "OSGReal32Fields.h" // Anisotropy type
#include "OSGColor4fFields.h" // BorderColor type
#include "OSGGLenumFields.h" // CompareMode type
#include "OSGGLenumFields.h" // CompareFunc type
#include "OSGGLenumFields.h" // DepthMode type

#include "OSGTextureObjChunkFields.h"

OSG_BEGIN_NAMESPACE

class TextureObjChunk;

//! \brief TextureObjChunk Base Class.

class OSG_SYSTEM_DLLMAPPING TextureObjChunkBase : public TextureBaseChunk
{
  public:

    typedef TextureBaseChunk Inherited;
    typedef TextureBaseChunk ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    typedef PointerFwdBuilder<TextureBaseChunkPtr, 
                              TextureBaseChunkConstPtr, 
                              TextureObjChunk>::ObjPtr         ObjPtr;
    typedef PointerFwdBuilder<TextureBaseChunkPtr, 
                              TextureBaseChunkConstPtr, 
                              TextureObjChunk>::ObjPtrConst    ObjPtrConst;
    typedef PointerFwdBuilder<TextureBaseChunkPtr, 
                              TextureBaseChunkConstPtr,
                              TextureObjChunk>::ObjConstPtr    ObjConstPtr;
    typedef PointerFwdBuilder<TextureBaseChunkPtr, 
                              TextureBaseChunkConstPtr,
                              TextureObjChunk>::ObjPtrArg      ObjPtrArg;
    typedef PointerFwdBuilder<TextureBaseChunkPtr, 
                              TextureBaseChunkConstPtr,
                              TextureObjChunk>::ObjConstPtrArg ObjConstPtrArg;
    typedef PointerFwdBuilder<TextureBaseChunkPtr, 
                              TextureBaseChunkConstPtr,
                              TextureObjChunk>::ObjPtrConstArg ObjPtrConstArg;

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        ImageFieldId = Inherited::NextFieldId,
        InternalFormatFieldId = ImageFieldId + 1,
        ExternalFormatFieldId = InternalFormatFieldId + 1,
        ScaleFieldId = ExternalFormatFieldId + 1,
        FrameFieldId = ScaleFieldId + 1,
        MinFilterFieldId = FrameFieldId + 1,
        MagFilterFieldId = MinFilterFieldId + 1,
        WrapSFieldId = MagFilterFieldId + 1,
        WrapTFieldId = WrapSFieldId + 1,
        WrapRFieldId = WrapTFieldId + 1,
        EnvModeFieldId = WrapRFieldId + 1,
        EnvColorFieldId = EnvModeFieldId + 1,
        EnvCombineRGBFieldId = EnvColorFieldId + 1,
        EnvCombineAlphaFieldId = EnvCombineRGBFieldId + 1,
        EnvScaleRGBFieldId = EnvCombineAlphaFieldId + 1,
        EnvScaleAlphaFieldId = EnvScaleRGBFieldId + 1,
        EnvSource0RGBFieldId = EnvScaleAlphaFieldId + 1,
        EnvSource1RGBFieldId = EnvSource0RGBFieldId + 1,
        EnvSource2RGBFieldId = EnvSource1RGBFieldId + 1,
        EnvSource0AlphaFieldId = EnvSource2RGBFieldId + 1,
        EnvSource1AlphaFieldId = EnvSource0AlphaFieldId + 1,
        EnvSource2AlphaFieldId = EnvSource1AlphaFieldId + 1,
        EnvOperand0RGBFieldId = EnvSource2AlphaFieldId + 1,
        EnvOperand1RGBFieldId = EnvOperand0RGBFieldId + 1,
        EnvOperand2RGBFieldId = EnvOperand1RGBFieldId + 1,
        EnvOperand0AlphaFieldId = EnvOperand2RGBFieldId + 1,
        EnvOperand1AlphaFieldId = EnvOperand0AlphaFieldId + 1,
        EnvOperand2AlphaFieldId = EnvOperand1AlphaFieldId + 1,
        GLIdFieldId = EnvOperand2AlphaFieldId + 1,
        IgnoreGLForAspectFieldId = GLIdFieldId + 1,
        PointSpriteFieldId = IgnoreGLForAspectFieldId + 1,
        PriorityFieldId = PointSpriteFieldId + 1,
        ShaderOperationFieldId = PriorityFieldId + 1,
        ShaderInputFieldId = ShaderOperationFieldId + 1,
        ShaderOffsetMatrixFieldId = ShaderInputFieldId + 1,
        ShaderOffsetScaleFieldId = ShaderOffsetMatrixFieldId + 1,
        ShaderOffsetBiasFieldId = ShaderOffsetScaleFieldId + 1,
        ShaderRGBADotProductFieldId = ShaderOffsetBiasFieldId + 1,
        ShaderCullModesFieldId = ShaderRGBADotProductFieldId + 1,
        ShaderConstEyeFieldId = ShaderCullModesFieldId + 1,
        LodBiasFieldId = ShaderConstEyeFieldId + 1,
        TargetFieldId = LodBiasFieldId + 1,
        DirtyLeftFieldId = TargetFieldId + 1,
        DirtyMinXFieldId = DirtyLeftFieldId + 1,
        DirtyMaxXFieldId = DirtyMinXFieldId + 1,
        DirtyMinYFieldId = DirtyMaxXFieldId + 1,
        DirtyMaxYFieldId = DirtyMinYFieldId + 1,
        DirtyMinZFieldId = DirtyMaxYFieldId + 1,
        DirtyMaxZFieldId = DirtyMinZFieldId + 1,
        AnisotropyFieldId = DirtyMaxZFieldId + 1,
        BorderColorFieldId = AnisotropyFieldId + 1,
        CompareModeFieldId = BorderColorFieldId + 1,
        CompareFuncFieldId = CompareModeFieldId + 1,
        DepthModeFieldId = CompareFuncFieldId + 1,
        NextFieldId = DepthModeFieldId + 1
    };

    static const OSG::BitVector ImageFieldMask = 
        (TypeTraits<BitVector>::One << ImageFieldId);
    static const OSG::BitVector InternalFormatFieldMask = 
        (TypeTraits<BitVector>::One << InternalFormatFieldId);
    static const OSG::BitVector ExternalFormatFieldMask = 
        (TypeTraits<BitVector>::One << ExternalFormatFieldId);
    static const OSG::BitVector ScaleFieldMask = 
        (TypeTraits<BitVector>::One << ScaleFieldId);
    static const OSG::BitVector FrameFieldMask = 
        (TypeTraits<BitVector>::One << FrameFieldId);
    static const OSG::BitVector MinFilterFieldMask = 
        (TypeTraits<BitVector>::One << MinFilterFieldId);
    static const OSG::BitVector MagFilterFieldMask = 
        (TypeTraits<BitVector>::One << MagFilterFieldId);
    static const OSG::BitVector WrapSFieldMask = 
        (TypeTraits<BitVector>::One << WrapSFieldId);
    static const OSG::BitVector WrapTFieldMask = 
        (TypeTraits<BitVector>::One << WrapTFieldId);
    static const OSG::BitVector WrapRFieldMask = 
        (TypeTraits<BitVector>::One << WrapRFieldId);
    static const OSG::BitVector EnvModeFieldMask = 
        (TypeTraits<BitVector>::One << EnvModeFieldId);
    static const OSG::BitVector EnvColorFieldMask = 
        (TypeTraits<BitVector>::One << EnvColorFieldId);
    static const OSG::BitVector EnvCombineRGBFieldMask = 
        (TypeTraits<BitVector>::One << EnvCombineRGBFieldId);
    static const OSG::BitVector EnvCombineAlphaFieldMask = 
        (TypeTraits<BitVector>::One << EnvCombineAlphaFieldId);
    static const OSG::BitVector EnvScaleRGBFieldMask = 
        (TypeTraits<BitVector>::One << EnvScaleRGBFieldId);
    static const OSG::BitVector EnvScaleAlphaFieldMask = 
        (TypeTraits<BitVector>::One << EnvScaleAlphaFieldId);
    static const OSG::BitVector EnvSource0RGBFieldMask = 
        (TypeTraits<BitVector>::One << EnvSource0RGBFieldId);
    static const OSG::BitVector EnvSource1RGBFieldMask = 
        (TypeTraits<BitVector>::One << EnvSource1RGBFieldId);
    static const OSG::BitVector EnvSource2RGBFieldMask = 
        (TypeTraits<BitVector>::One << EnvSource2RGBFieldId);
    static const OSG::BitVector EnvSource0AlphaFieldMask = 
        (TypeTraits<BitVector>::One << EnvSource0AlphaFieldId);
    static const OSG::BitVector EnvSource1AlphaFieldMask = 
        (TypeTraits<BitVector>::One << EnvSource1AlphaFieldId);
    static const OSG::BitVector EnvSource2AlphaFieldMask = 
        (TypeTraits<BitVector>::One << EnvSource2AlphaFieldId);
    static const OSG::BitVector EnvOperand0RGBFieldMask = 
        (TypeTraits<BitVector>::One << EnvOperand0RGBFieldId);
    static const OSG::BitVector EnvOperand1RGBFieldMask = 
        (TypeTraits<BitVector>::One << EnvOperand1RGBFieldId);
    static const OSG::BitVector EnvOperand2RGBFieldMask = 
        (TypeTraits<BitVector>::One << EnvOperand2RGBFieldId);
    static const OSG::BitVector EnvOperand0AlphaFieldMask = 
        (TypeTraits<BitVector>::One << EnvOperand0AlphaFieldId);
    static const OSG::BitVector EnvOperand1AlphaFieldMask = 
        (TypeTraits<BitVector>::One << EnvOperand1AlphaFieldId);
    static const OSG::BitVector EnvOperand2AlphaFieldMask = 
        (TypeTraits<BitVector>::One << EnvOperand2AlphaFieldId);
    static const OSG::BitVector GLIdFieldMask = 
        (TypeTraits<BitVector>::One << GLIdFieldId);
    static const OSG::BitVector IgnoreGLForAspectFieldMask = 
        (TypeTraits<BitVector>::One << IgnoreGLForAspectFieldId);
    static const OSG::BitVector PointSpriteFieldMask = 
        (TypeTraits<BitVector>::One << PointSpriteFieldId);
    static const OSG::BitVector PriorityFieldMask = 
        (TypeTraits<BitVector>::One << PriorityFieldId);
    static const OSG::BitVector ShaderOperationFieldMask = 
        (TypeTraits<BitVector>::One << ShaderOperationFieldId);
    static const OSG::BitVector ShaderInputFieldMask = 
        (TypeTraits<BitVector>::One << ShaderInputFieldId);
    static const OSG::BitVector ShaderOffsetMatrixFieldMask = 
        (TypeTraits<BitVector>::One << ShaderOffsetMatrixFieldId);
    static const OSG::BitVector ShaderOffsetScaleFieldMask = 
        (TypeTraits<BitVector>::One << ShaderOffsetScaleFieldId);
    static const OSG::BitVector ShaderOffsetBiasFieldMask = 
        (TypeTraits<BitVector>::One << ShaderOffsetBiasFieldId);
    static const OSG::BitVector ShaderRGBADotProductFieldMask = 
        (TypeTraits<BitVector>::One << ShaderRGBADotProductFieldId);
    static const OSG::BitVector ShaderCullModesFieldMask = 
        (TypeTraits<BitVector>::One << ShaderCullModesFieldId);
    static const OSG::BitVector ShaderConstEyeFieldMask = 
        (TypeTraits<BitVector>::One << ShaderConstEyeFieldId);
    static const OSG::BitVector LodBiasFieldMask = 
        (TypeTraits<BitVector>::One << LodBiasFieldId);
    static const OSG::BitVector TargetFieldMask = 
        (TypeTraits<BitVector>::One << TargetFieldId);
    static const OSG::BitVector DirtyLeftFieldMask = 
        (TypeTraits<BitVector>::One << DirtyLeftFieldId);
    static const OSG::BitVector DirtyMinXFieldMask = 
        (TypeTraits<BitVector>::One << DirtyMinXFieldId);
    static const OSG::BitVector DirtyMaxXFieldMask = 
        (TypeTraits<BitVector>::One << DirtyMaxXFieldId);
    static const OSG::BitVector DirtyMinYFieldMask = 
        (TypeTraits<BitVector>::One << DirtyMinYFieldId);
    static const OSG::BitVector DirtyMaxYFieldMask = 
        (TypeTraits<BitVector>::One << DirtyMaxYFieldId);
    static const OSG::BitVector DirtyMinZFieldMask = 
        (TypeTraits<BitVector>::One << DirtyMinZFieldId);
    static const OSG::BitVector DirtyMaxZFieldMask = 
        (TypeTraits<BitVector>::One << DirtyMaxZFieldId);
    static const OSG::BitVector AnisotropyFieldMask = 
        (TypeTraits<BitVector>::One << AnisotropyFieldId);
    static const OSG::BitVector BorderColorFieldMask = 
        (TypeTraits<BitVector>::One << BorderColorFieldId);
    static const OSG::BitVector CompareModeFieldMask = 
        (TypeTraits<BitVector>::One << CompareModeFieldId);
    static const OSG::BitVector CompareFuncFieldMask = 
        (TypeTraits<BitVector>::One << CompareFuncFieldId);
    static const OSG::BitVector DepthModeFieldMask = 
        (TypeTraits<BitVector>::One << DepthModeFieldId);
    static const OSG::BitVector NextFieldMask = 
        (TypeTraits<BitVector>::One << NextFieldId);


    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void); 
    static UInt32              getClassTypeId (void); 
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void); 
    virtual const FieldContainerType &getType         (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

     const SFImagePtr *getSFImage (void) const;

           SFGLenum *editSFInternalFormat(void);
     const SFGLenum *getSFInternalFormat (void) const;

           SFGLenum *editSFExternalFormat(void);
     const SFGLenum *getSFExternalFormat (void) const;

           SFBool *editSFScale(void);
     const SFBool *getSFScale (void) const;

           SFUInt32 *editSFFrame(void);
     const SFUInt32 *getSFFrame (void) const;

           SFGLenum *editSFMinFilter(void);
     const SFGLenum *getSFMinFilter (void) const;

           SFGLenum *editSFMagFilter(void);
     const SFGLenum *getSFMagFilter (void) const;

           SFGLenum *editSFWrapS(void);
     const SFGLenum *getSFWrapS (void) const;

           SFGLenum *editSFWrapT(void);
     const SFGLenum *getSFWrapT (void) const;

           SFGLenum *editSFWrapR(void);
     const SFGLenum *getSFWrapR (void) const;

           SFGLenum *editSFEnvMode(void);
     const SFGLenum *getSFEnvMode (void) const;

           SFColor4f *editSFEnvColor(void);
     const SFColor4f *getSFEnvColor (void) const;

           SFGLenum *editSFEnvCombineRGB(void);
     const SFGLenum *getSFEnvCombineRGB (void) const;

           SFGLenum *editSFEnvCombineAlpha(void);
     const SFGLenum *getSFEnvCombineAlpha (void) const;

           SFReal32 *editSFEnvScaleRGB(void);
     const SFReal32 *getSFEnvScaleRGB (void) const;

           SFReal32 *editSFEnvScaleAlpha(void);
     const SFReal32 *getSFEnvScaleAlpha (void) const;

           SFGLenum *editSFEnvSource0RGB(void);
     const SFGLenum *getSFEnvSource0RGB (void) const;

           SFGLenum *editSFEnvSource1RGB(void);
     const SFGLenum *getSFEnvSource1RGB (void) const;

           SFGLenum *editSFEnvSource2RGB(void);
     const SFGLenum *getSFEnvSource2RGB (void) const;

           SFGLenum *editSFEnvSource0Alpha(void);
     const SFGLenum *getSFEnvSource0Alpha (void) const;

           SFGLenum *editSFEnvSource1Alpha(void);
     const SFGLenum *getSFEnvSource1Alpha (void) const;

           SFGLenum *editSFEnvSource2Alpha(void);
     const SFGLenum *getSFEnvSource2Alpha (void) const;

           SFGLenum *editSFEnvOperand0RGB(void);
     const SFGLenum *getSFEnvOperand0RGB (void) const;

           SFGLenum *editSFEnvOperand1RGB(void);
     const SFGLenum *getSFEnvOperand1RGB (void) const;

           SFGLenum *editSFEnvOperand2RGB(void);
     const SFGLenum *getSFEnvOperand2RGB (void) const;

           SFGLenum *editSFEnvOperand0Alpha(void);
     const SFGLenum *getSFEnvOperand0Alpha (void) const;

           SFGLenum *editSFEnvOperand1Alpha(void);
     const SFGLenum *getSFEnvOperand1Alpha (void) const;

           SFGLenum *editSFEnvOperand2Alpha(void);
     const SFGLenum *getSFEnvOperand2Alpha (void) const;

           SFGLenum *editSFGLId(void);
     const SFGLenum *getSFGLId (void) const;

           SFInt32 *editSFIgnoreGLForAspect(void);
     const SFInt32 *getSFIgnoreGLForAspect (void) const;

           SFBool *editSFPointSprite(void);
     const SFBool *getSFPointSprite (void) const;

           SFReal32 *editSFPriority(void);
     const SFReal32 *getSFPriority (void) const;

           SFGLenum *editSFShaderOperation(void);
     const SFGLenum *getSFShaderOperation (void) const;

           SFGLenum *editSFShaderInput(void);
     const SFGLenum *getSFShaderInput (void) const;

           MFReal32 *editMFShaderOffsetMatrix(void);
     const MFReal32 *getMFShaderOffsetMatrix (void) const;

           SFReal32 *editSFShaderOffsetScale(void);
     const SFReal32 *getSFShaderOffsetScale (void) const;

           SFReal32 *editSFShaderOffsetBias(void);
     const SFReal32 *getSFShaderOffsetBias (void) const;

           SFGLenum *editSFShaderRGBADotProduct(void);
     const SFGLenum *getSFShaderRGBADotProduct (void) const;

           SFUInt8 *editSFShaderCullModes(void);
     const SFUInt8 *getSFShaderCullModes (void) const;

           SFVec3f *editSFShaderConstEye(void);
     const SFVec3f *getSFShaderConstEye (void) const;

           SFReal32 *editSFLodBias(void);
     const SFReal32 *getSFLodBias (void) const;

           SFGLenum *editSFTarget(void);
     const SFGLenum *getSFTarget (void) const;

           SFInt32 *editSFDirtyLeft(void);
     const SFInt32 *getSFDirtyLeft (void) const;

           SFInt32 *editSFDirtyMinX(void);
     const SFInt32 *getSFDirtyMinX (void) const;

           SFInt32 *editSFDirtyMaxX(void);
     const SFInt32 *getSFDirtyMaxX (void) const;

           SFInt32 *editSFDirtyMinY(void);
     const SFInt32 *getSFDirtyMinY (void) const;

           SFInt32 *editSFDirtyMaxY(void);
     const SFInt32 *getSFDirtyMaxY (void) const;

           SFInt32 *editSFDirtyMinZ(void);
     const SFInt32 *getSFDirtyMinZ (void) const;

           SFInt32 *editSFDirtyMaxZ(void);
     const SFInt32 *getSFDirtyMaxZ (void) const;

           SFReal32 *editSFAnisotropy(void);
     const SFReal32 *getSFAnisotropy (void) const;

           SFColor4f *editSFBorderColor(void);
     const SFColor4f *getSFBorderColor (void) const;

           SFGLenum *editSFCompareMode(void);
     const SFGLenum *getSFCompareMode (void) const;

           SFGLenum *editSFCompareFunc(void);
     const SFGLenum *getSFCompareFunc (void) const;

           SFGLenum *editSFDepthMode(void);
     const SFGLenum *getSFDepthMode (void) const;


           ImagePtrConst getImage(void) const;

           GLenum &editInternalFormat(void);
     const GLenum &getInternalFormat (void) const;

           GLenum &editExternalFormat(void);
     const GLenum &getExternalFormat (void) const;

           bool &editScale(void);
     const bool &getScale (void) const;

           UInt32 &editFrame(void);
     const UInt32 &getFrame (void) const;

           GLenum &editMinFilter(void);
     const GLenum &getMinFilter (void) const;

           GLenum &editMagFilter(void);
     const GLenum &getMagFilter (void) const;

           GLenum &editWrapS(void);
     const GLenum &getWrapS (void) const;

           GLenum &editWrapT(void);
     const GLenum &getWrapT (void) const;

           GLenum &editWrapR(void);
     const GLenum &getWrapR (void) const;

           GLenum &editEnvMode(void);
     const GLenum &getEnvMode (void) const;

           Color4f &editEnvColor(void);
     const Color4f &getEnvColor (void) const;

           GLenum &editEnvCombineRGB(void);
     const GLenum &getEnvCombineRGB (void) const;

           GLenum &editEnvCombineAlpha(void);
     const GLenum &getEnvCombineAlpha (void) const;

           Real32 &editEnvScaleRGB(void);
     const Real32 &getEnvScaleRGB (void) const;

           Real32 &editEnvScaleAlpha(void);
     const Real32 &getEnvScaleAlpha (void) const;

           GLenum &editEnvSource0RGB(void);
     const GLenum &getEnvSource0RGB (void) const;

           GLenum &editEnvSource1RGB(void);
     const GLenum &getEnvSource1RGB (void) const;

           GLenum &editEnvSource2RGB(void);
     const GLenum &getEnvSource2RGB (void) const;

           GLenum &editEnvSource0Alpha(void);
     const GLenum &getEnvSource0Alpha (void) const;

           GLenum &editEnvSource1Alpha(void);
     const GLenum &getEnvSource1Alpha (void) const;

           GLenum &editEnvSource2Alpha(void);
     const GLenum &getEnvSource2Alpha (void) const;

           GLenum &editEnvOperand0RGB(void);
     const GLenum &getEnvOperand0RGB (void) const;

           GLenum &editEnvOperand1RGB(void);
     const GLenum &getEnvOperand1RGB (void) const;

           GLenum &editEnvOperand2RGB(void);
     const GLenum &getEnvOperand2RGB (void) const;

           GLenum &editEnvOperand0Alpha(void);
     const GLenum &getEnvOperand0Alpha (void) const;

           GLenum &editEnvOperand1Alpha(void);
     const GLenum &getEnvOperand1Alpha (void) const;

           GLenum &editEnvOperand2Alpha(void);
     const GLenum &getEnvOperand2Alpha (void) const;

           GLenum &editGLId(void);
     const GLenum &getGLId (void) const;

           Int32 &editIgnoreGLForAspect(void);
     const Int32 &getIgnoreGLForAspect (void) const;

           bool &editPointSprite(void);
     const bool &getPointSprite (void) const;

           Real32 &editPriority(void);
     const Real32 &getPriority (void) const;

           GLenum &editShaderOperation(void);
     const GLenum &getShaderOperation (void) const;

           GLenum &editShaderInput(void);
     const GLenum &getShaderInput (void) const;

           Real32 &editShaderOffsetMatrix(const UInt32 index);
     const Real32 &getShaderOffsetMatrix (const UInt32 index) const;
           MFReal32 &editShaderOffsetMatrix(void);
     const MFReal32 &getShaderOffsetMatrix(void) const;

           Real32 &editShaderOffsetScale(void);
     const Real32 &getShaderOffsetScale (void) const;

           Real32 &editShaderOffsetBias(void);
     const Real32 &getShaderOffsetBias (void) const;

           GLenum &editShaderRGBADotProduct(void);
     const GLenum &getShaderRGBADotProduct (void) const;

           UInt8 &editShaderCullModes(void);
     const UInt8 &getShaderCullModes (void) const;

           Vec3f &editShaderConstEye(void);
     const Vec3f &getShaderConstEye (void) const;

           Real32 &editLodBias(void);
     const Real32 &getLodBias (void) const;

           GLenum &editTarget(void);
     const GLenum &getTarget (void) const;

           Int32 &editDirtyLeft(void);
     const Int32 &getDirtyLeft (void) const;

           Int32 &editDirtyMinX(void);
     const Int32 &getDirtyMinX (void) const;

           Int32 &editDirtyMaxX(void);
     const Int32 &getDirtyMaxX (void) const;

           Int32 &editDirtyMinY(void);
     const Int32 &getDirtyMinY (void) const;

           Int32 &editDirtyMaxY(void);
     const Int32 &getDirtyMaxY (void) const;

           Int32 &editDirtyMinZ(void);
     const Int32 &getDirtyMinZ (void) const;

           Int32 &editDirtyMaxZ(void);
     const Int32 &getDirtyMaxZ (void) const;

           Real32 &editAnisotropy(void);
     const Real32 &getAnisotropy (void) const;

           Color4f &editBorderColor(void);
     const Color4f &getBorderColor (void) const;

           GLenum &editCompareMode(void);
     const GLenum &getCompareMode (void) const;

           GLenum &editCompareFunc(void);
     const GLenum &getCompareFunc (void) const;

           GLenum &editDepthMode(void);
     const GLenum &getDepthMode (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setImage(ImagePtrConstArg value);
     void setInternalFormat(const GLenum &value);
     void setExternalFormat(const GLenum &value);
     void setScale(const bool &value);
     void setFrame(const UInt32 &value);
     void setMinFilter(const GLenum &value);
     void setMagFilter(const GLenum &value);
     void setWrapS(const GLenum &value);
     void setWrapT(const GLenum &value);
     void setWrapR(const GLenum &value);
     void setEnvMode(const GLenum &value);
     void setEnvColor(const Color4f &value);
     void setEnvCombineRGB(const GLenum &value);
     void setEnvCombineAlpha(const GLenum &value);
     void setEnvScaleRGB(const Real32 &value);
     void setEnvScaleAlpha(const Real32 &value);
     void setEnvSource0RGB(const GLenum &value);
     void setEnvSource1RGB(const GLenum &value);
     void setEnvSource2RGB(const GLenum &value);
     void setEnvSource0Alpha(const GLenum &value);
     void setEnvSource1Alpha(const GLenum &value);
     void setEnvSource2Alpha(const GLenum &value);
     void setEnvOperand0RGB(const GLenum &value);
     void setEnvOperand1RGB(const GLenum &value);
     void setEnvOperand2RGB(const GLenum &value);
     void setEnvOperand0Alpha(const GLenum &value);
     void setEnvOperand1Alpha(const GLenum &value);
     void setEnvOperand2Alpha(const GLenum &value);
     void setGLId(const GLenum &value);
     void setIgnoreGLForAspect(const Int32 &value);
     void setPointSprite(const bool &value);
     void setPriority(const Real32 &value);
     void setShaderOperation(const GLenum &value);
     void setShaderInput(const GLenum &value);
     void setShaderOffsetScale(const Real32 &value);
     void setShaderOffsetBias(const Real32 &value);
     void setShaderRGBADotProduct(const GLenum &value);
     void setShaderCullModes(const UInt8 &value);
     void setShaderConstEye(const Vec3f &value);
     void setLodBias(const Real32 &value);
     void setTarget(const GLenum &value);
     void setDirtyLeft(const Int32 &value);
     void setDirtyMinX(const Int32 &value);
     void setDirtyMaxX(const Int32 &value);
     void setDirtyMinY(const Int32 &value);
     void setDirtyMaxY(const Int32 &value);
     void setDirtyMinZ(const Int32 &value);
     void setDirtyMaxZ(const Int32 &value);
     void setAnisotropy(const Real32 &value);
     void setBorderColor(const Color4f &value);
     void setCompareMode(const GLenum &value);
     void setCompareFunc(const GLenum &value);
     void setDepthMode(const GLenum &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    virtual void pushToField     (      FieldContainerPtrConstArg pNewElement, 
                                  const UInt32                    uiFieldId  );

    virtual void insertIntoMField(const UInt32                    uiIndex, 
                                        FieldContainerPtrConstArg pNewElement, 
                                  const UInt32                    uiFieldId  );

    virtual void replaceInMField (const UInt32                    uiIndex,
                                        FieldContainerPtrConstArg pNewElement, 
                                  const UInt32                    uiFieldId  );

    virtual void replaceInMField (      FieldContainerPtrConstArg pOldElement,
                                        FieldContainerPtrConstArg pNewElement, 
                                  const UInt32                    uiFieldId  );

    virtual void removeFromMField(const UInt32                    uiIndex, 
                                  const UInt32                    uiFieldId  );
    
    virtual void removeFromMField(      FieldContainerPtrConstArg pElement, 
                                  const UInt32                    uiFieldId  );

    virtual void clearField      (const UInt32                    uiFieldId  );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  TextureObjChunkPtr create     (void); 
    static  TextureObjChunkPtr createEmpty(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr shallowCopy(void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static void   classDescInserter(TypeObject &oType);
    static Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFImagePtr _sfImage;
    SFGLenum _sfInternalFormat;
    SFGLenum _sfExternalFormat;
    SFBool _sfScale;
    SFUInt32 _sfFrame;
    SFGLenum _sfMinFilter;
    SFGLenum _sfMagFilter;
    SFGLenum _sfWrapS;
    SFGLenum _sfWrapT;
    SFGLenum _sfWrapR;
    SFGLenum _sfEnvMode;
    SFColor4f _sfEnvColor;
    SFGLenum _sfEnvCombineRGB;
    SFGLenum _sfEnvCombineAlpha;
    SFReal32 _sfEnvScaleRGB;
    SFReal32 _sfEnvScaleAlpha;
    SFGLenum _sfEnvSource0RGB;
    SFGLenum _sfEnvSource1RGB;
    SFGLenum _sfEnvSource2RGB;
    SFGLenum _sfEnvSource0Alpha;
    SFGLenum _sfEnvSource1Alpha;
    SFGLenum _sfEnvSource2Alpha;
    SFGLenum _sfEnvOperand0RGB;
    SFGLenum _sfEnvOperand1RGB;
    SFGLenum _sfEnvOperand2RGB;
    SFGLenum _sfEnvOperand0Alpha;
    SFGLenum _sfEnvOperand1Alpha;
    SFGLenum _sfEnvOperand2Alpha;
    SFGLenum _sfGLId;
    SFInt32 _sfIgnoreGLForAspect;
    SFBool _sfPointSprite;
    SFReal32 _sfPriority;
    SFGLenum _sfShaderOperation;
    SFGLenum _sfShaderInput;
    MFReal32 _mfShaderOffsetMatrix;
    SFReal32 _sfShaderOffsetScale;
    SFReal32 _sfShaderOffsetBias;
    SFGLenum _sfShaderRGBADotProduct;
    SFUInt8 _sfShaderCullModes;
    SFVec3f _sfShaderConstEye;
    SFReal32 _sfLodBias;
    SFGLenum _sfTarget;
    SFInt32 _sfDirtyLeft;
    SFInt32 _sfDirtyMinX;
    SFInt32 _sfDirtyMaxX;
    SFInt32 _sfDirtyMinY;
    SFInt32 _sfDirtyMaxY;
    SFInt32 _sfDirtyMinZ;
    SFInt32 _sfDirtyMaxZ;
    SFReal32 _sfAnisotropy;
    SFColor4f _sfBorderColor;
    SFGLenum _sfCompareMode;
    SFGLenum _sfCompareFunc;
    SFGLenum _sfDepthMode;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    TextureObjChunkBase(void);
    TextureObjChunkBase(const TextureObjChunkBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~TextureObjChunkBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const TextureObjChunk *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_FIELDCONTAINERPTR
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo,
                                 UInt32             uiCopyOffset);

            void execSync (      TextureObjChunkBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo,
                                 UInt32             uiCopyOffset);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      TextureObjChunkBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

#if 0
    virtual void execBeginEditV(ConstFieldMaskArg whichField, 
                                UInt32            uiAspect,
                                UInt32            uiContainerSize);

            void execBeginEdit (ConstFieldMaskArg whichField, 
                                UInt32            uiAspect,
                                UInt32            uiContainerSize);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainerPtr createAspectCopy(void) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const TextureObjChunkBase &source);
};

typedef TextureObjChunkBase *TextureObjChunkBaseP;

/** Type specific RefPtr type for TextureObjChunk. */
typedef RefPtr<TextureObjChunkPtr> TextureObjChunkRefPtr;

typedef osgIF<
    TextureObjChunkBase::isNodeCore,

    CoredNodePtr<TextureObjChunk>,
    FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC>::_IRet

        TextureObjChunkNodePtr;

OSG_END_NAMESPACE

#define OSGTEXTUREOBJCHUNKBASE_HEADER_CVSID "@(#)$Id$"

#endif /* _OSGTEXTUREOBJCHUNKBASE_H_ */
