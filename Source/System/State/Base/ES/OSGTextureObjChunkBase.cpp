/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextureObjChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILETEXTUREOBJCHUNKINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>


#include <OSGGL.h>                        // InternalFormat default header
#include <OSGGL.h>                        // ExternalFormat default header
#include <OSGGL.h>                        // MinFilter default header
#include <OSGGL.h>                        // MagFilter default header
#include <OSGGL.h>                        // WrapS default header
#include <OSGGL.h>                        // WrapT default header
#include <OSGGL.h>                        // WrapR default header
#include <OSGGL.h>                        // EnvMode default header
#include <OSGGL.h>                        // EnvCombineRGB default header
#include <OSGGL.h>                        // EnvCombineAlpha default header
#include <OSGGL.h>                        // EnvSource0RGB default header
#include <OSGGLEXT.h>                     // EnvSource1RGB default header
#include <OSGGLEXT.h>                     // EnvSource2RGB default header
#include <OSGGL.h>                        // EnvSource0Alpha default header
#include <OSGGLEXT.h>                     // EnvSource1Alpha default header
#include <OSGGLEXT.h>                     // EnvSource2Alpha default header
#include <OSGGL.h>                        // EnvOperand0RGB default header
#include <OSGGL.h>                        // EnvOperand1RGB default header
#include <OSGGL.h>                        // EnvOperand2RGB default header
#include <OSGGL.h>                        // EnvOperand0Alpha default header
#include <OSGGL.h>                        // EnvOperand1Alpha default header
#include <OSGGL.h>                        // EnvOperand2Alpha default header
#include <OSGGL.h>                        // PointSprite default header
#include <OSGGL.h>                        // ShaderOperation default header
#include <OSGGL.h>                        // ShaderInput default header
#include <OSGGL.h>                        // ShaderRGBADotProduct default header
#include <OSGGL.h>                        // Target default header
#include <OSGGL.h>                        // CompareMode default header
#include <OSGGL.h>                        // CompareFunc default header
#include <OSGGL.h>                        // DepthMode default header

#include <OSGImage.h> // Image Class

#include "OSGTextureObjChunkBase.h"
#include "OSGTextureObjChunk.h"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::TextureObjChunk
    \ingroup GrpSystemState

    See \ref PageSystemTextureObjChunk for a description.

    This chunk wraps glTexImage[123]D (OSG::TextureChunk::_sfImage,
    OSG::TextureChunk::_sfInternalFormat, OSG::TextureChunk::_sfExternalFormat),
    glTexParameter (OSG::TextureChunk::_sfMinFilter,
    OSG::TextureChunk::_sfMagFilter, OSG::TextureChunk::_sfWrapS,
    OSG::TextureChunk::_sfWrapT, OSG::TextureChunk::_sfWrapR), glTexEnv
    (OSG::TextureChunk::_sfEnvMode, OSG::TextureChunk::_sfEnvColor,
    OSG::TextureChunk::_sfPriority).

    The ARB combine extension is also supported,
    where available (OSG::TextureChunk::_sfEnvCombineRGB,
    OSG::TextureChunk::_sfEnvScaleRGB, OSG::TextureChunk::_sfEnvSource0RGB,
    OSG::TextureChunk::_sfEnvSource1RGB, OSG::TextureChunk::_sfEnvSource2RGB,
    OSG::TextureChunk::_sfEnvOperand0RGB, OSG::TextureChunk::_sfEnvOperand1RGB,
    OSG::TextureChunk::_sfEnvOperand2RGB,
    OSG::TextureChunk::_sfEnvCombineAlpha,   OSG::TextureChunk::_sfEnvScaleAlpha,
    OSG::TextureChunk::_sfEnvSource0Alpha, OSG::TextureChunk::_sfEnvSource1Alpha,
    OSG::TextureChunk::_sfEnvSource2Alpha, OSG::TextureChunk::_sfEnvOperand0Alpha,
    OSG::TextureChunk::_sfEnvOperand1Alpha,
    OSG::TextureChunk::_sfEnvOperand2Alpha).

    It is possible to enable the point
    sprite coordinate replacement  (OSG::TextureChunk::_sfPointSprite), see \ref
    PageSystemPointChunk for details. The two parameters
    OSG::TextureChunk::_sfScale and OSG::TextureChunk::_sfFrame specify details
    about the texture.

    On hardware that supports it (i.e. NVidia boards) the texture shader
    extension(s) are also available.
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var ImagePtr        TextureObjChunkBase::_sfImage
    
*/

/*! \var GLenum          TextureObjChunkBase::_sfInternalFormat
    The internal texture format.
*/

/*! \var GLenum          TextureObjChunkBase::_sfExternalFormat
    The external texture format - overwrites 
    external format of image when set to a value not equal to 
    GL_NONE (which is the default).
*/

/*! \var bool            TextureObjChunkBase::_sfScale
    Specifies whether the image should be scaled to the next power of two,
    thus filling the whole texture coordinate range, or if it should be put
    in the lower left corner, leaving the rest of the texture undefined.
    This is mainly used for rapidly changing non power of two textures, to
    get around the scaling overhead.
*/

/*! \var UInt32          TextureObjChunkBase::_sfFrame
    Select the frame of the image to be used. See OSG::Image about details
    concerning multi-frame images.
    @hint For fast update use GL_LINEAR or GL_NEAREST filters, as mipmap creation is slow right now. \endhint
*/

/*! \var GLenum          TextureObjChunkBase::_sfMinFilter
    The minimisation filter, default GL_LINEAR_MIPMAP_LINEAR.
*/

/*! \var GLenum          TextureObjChunkBase::_sfMagFilter
    The magnification filter, default GL_LINEAR.
*/

/*! \var GLenum          TextureObjChunkBase::_sfWrapS
    Texture coordinate S wrapping, default GL_REPEAT.
*/

/*! \var GLenum          TextureObjChunkBase::_sfWrapT
    Texture coordinate T wrapping, default GL_REPEAT.
*/

/*! \var GLenum          TextureObjChunkBase::_sfWrapR
    Texture coordinate R wrapping, default GL_REPEAT.
*/

/*! \var GLenum          TextureObjChunkBase::_sfEnvMode
    Texture environment mode, default GL_REPLACE
*/

/*! \var Color4f         TextureObjChunkBase::_sfEnvColor
    Texture environment color default transparent black.
*/

/*! \var GLenum          TextureObjChunkBase::_sfEnvCombineRGB
    Texture environment rgb combine mode, default GL_MODULATE
*/

/*! \var GLenum          TextureObjChunkBase::_sfEnvCombineAlpha
    Texture environment alpha combine mode, default GL_MODULATE
*/

/*! \var Real32          TextureObjChunkBase::_sfEnvScaleRGB
    Texture environment combine rgb scale factor, default 1.f
*/

/*! \var Real32          TextureObjChunkBase::_sfEnvScaleAlpha
    Texture environment combine alpha scale factor, default 1.f
*/

/*! \var GLenum          TextureObjChunkBase::_sfEnvSource0RGB
    Texture environment combine source 0 rgb, default GL_TEXTURE
*/

/*! \var GLenum          TextureObjChunkBase::_sfEnvSource1RGB
    Texture environment combine source 1 rgb, default GL_PREVIOUS_EXT
*/

/*! \var GLenum          TextureObjChunkBase::_sfEnvSource2RGB
    Texture environment combine source 2 rgb, default GL_CONSTANT_EXT
*/

/*! \var GLenum          TextureObjChunkBase::_sfEnvSource0Alpha
    Texture environment combine source 0 alpha, default GL_TEXTURE
*/

/*! \var GLenum          TextureObjChunkBase::_sfEnvSource1Alpha
    Texture environment combine source 1 alpha, default GL_PREVIOUS_EXT
*/

/*! \var GLenum          TextureObjChunkBase::_sfEnvSource2Alpha
    Texture environment combine source 2 alpha, default GL_CONSTANT_EXT
*/

/*! \var GLenum          TextureObjChunkBase::_sfEnvOperand0RGB
    Texture environment combine operand 0 rgb, default GL_SRC_COLOR
*/

/*! \var GLenum          TextureObjChunkBase::_sfEnvOperand1RGB
    Texture environment combine operand 1 rgb, default GL_SRC_COLOR
*/

/*! \var GLenum          TextureObjChunkBase::_sfEnvOperand2RGB
    Texture environment combine operand 2 rgb, default GL_SRC_ALPHA
*/

/*! \var GLenum          TextureObjChunkBase::_sfEnvOperand0Alpha
    Texture environment combine operand 0 alpha, default GL_SRC_ALPHA
*/

/*! \var GLenum          TextureObjChunkBase::_sfEnvOperand1Alpha
    Texture environment combine operand 1 alpha, default GL_SRC_ALPHA
*/

/*! \var GLenum          TextureObjChunkBase::_sfEnvOperand2Alpha
    Texture environment combine operand 2 alpha, default GL_SRC_ALPHA
*/

/*! \var GLenum          TextureObjChunkBase::_sfGLId
    The OpenGL texture id for this texture.
*/

/*! \var Int32           TextureObjChunkBase::_sfIgnoreGLForAspect
    Don't do any GL calls for aspect of given id.
*/

/*! \var bool            TextureObjChunkBase::_sfPointSprite
    Flag to use this texture for Point Sprites.
*/

/*! \var Real32          TextureObjChunkBase::_sfPriority
    Priority of this texture, between 0 and 1, the default is 0.
*/

/*! \var GLenum          TextureObjChunkBase::_sfShaderOperation
    Shader operation of this texture unit, default GL_NONE. If unit 0 uses
    GL_NONE, shading is switched off.
*/

/*! \var GLenum          TextureObjChunkBase::_sfShaderInput
    Input texture unit for this shader's operation.
*/

/*! \var Real32          TextureObjChunkBase::_mfShaderOffsetMatrix
    The 2x2 transformation matrix for offset textures.
*/

/*! \var Real32          TextureObjChunkBase::_sfShaderOffsetScale
    The scaling factor for scaled offset textures.
*/

/*! \var Real32          TextureObjChunkBase::_sfShaderOffsetBias
    The bias factor for scaled offset textures.
*/

/*! \var GLenum          TextureObjChunkBase::_sfShaderRGBADotProduct
    The RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV value.
*/

/*! \var UInt8           TextureObjChunkBase::_sfShaderCullModes
    The CULL_MODES_NV value, coded into a single byte. The first 4 bits of
    the byte are used to indicate the wnated cull modes, a value of 0 
    signifies GL_LESS, a value of 1 GL_GEQUAL. Bit 0 (mask 1) is used for 
    the S coordinate, bit 1 (mask 2) for T, bit 2 (mask 4) for R and bit 4 
    (mask 8) for Q.
*/

/*! \var Vec3f           TextureObjChunkBase::_sfShaderConstEye
    The CONST_EYE_NV value, i.e. the constant eye position used by the 
    DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV shader.
*/

/*! \var Real32          TextureObjChunkBase::_sfLodBias
    Bias of LOD calculation for texture access.
*/

/*! \var GLenum          TextureObjChunkBase::_sfTarget
    Texture target. Overwrite automatically determined texture target
    based on the parameters of the assigned image if set to anything 
    else than GL_NONE. Used for nVidia's rectangle textures. Be careful
    when using it!
*/

/*! \var Int32           TextureObjChunkBase::_sfDirtyLeft
    Left coordinate of the dirty rectangle to use for 
    imageContentChanged(). This doesn't make sense to be stored in files, 
    it does make sense on a cluster, though, that's why it's external.
*/

/*! \var Int32           TextureObjChunkBase::_sfDirtyMinX
    Minimum X coordinate of the dirty rectangle to use for 
    imageContentChanged(). This doesn't make sense to be stored in files, 
    it does make sense on a cluster, though, that's why it's external.
*/

/*! \var Int32           TextureObjChunkBase::_sfDirtyMaxX
    Maximum X coordinate of the dirty rectangle to use for 
    imageContentChanged(). This doesn't make sense to be stored in files, 
    it does make sense on a cluster, though, that's why it's external.
*/

/*! \var Int32           TextureObjChunkBase::_sfDirtyMinY
    Minimum Y coordinate of the dirty rectangle to use for 
    imageContentChanged(). This doesn't make sense to be stored in files, 
    it does make sense on a cluster, though, that's why it's external.
*/

/*! \var Int32           TextureObjChunkBase::_sfDirtyMaxY
    Maximum Y coordinate of the dirty rectangle to use for 
    imageContentChanged(). This doesn't make sense to be stored in files, 
    it does make sense on a cluster, though, that's why it's external.
*/

/*! \var Int32           TextureObjChunkBase::_sfDirtyMinZ
    Minimum Z coordinate of the dirty rectangle to use for 
    imageContentChanged(). This doesn't make sense to be stored in files, 
    it does make sense on a cluster, though, that's why it's external.
*/

/*! \var Int32           TextureObjChunkBase::_sfDirtyMaxZ
    Maximum Z coordinate of the dirty rectangle to use for 
    imageContentChanged(). This doesn't make sense to be stored in files, 
    it does make sense on a cluster, though, that's why it's external.
*/

/*! \var Real32          TextureObjChunkBase::_sfAnisotropy
    Anisotropic filtering the default 1.0f means isotropic filtering.
*/

/*! \var Color4f         TextureObjChunkBase::_sfBorderColor
    Texture border color
*/

/*! \var GLenum          TextureObjChunkBase::_sfCompareMode
    
*/

/*! \var GLenum          TextureObjChunkBase::_sfCompareFunc
    
*/

/*! \var GLenum          TextureObjChunkBase::_sfDepthMode
    
*/


void TextureObjChunkBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFImagePtr::Description(
        SFImagePtr::getClassType(),
        "image",
        "",
        ImageFieldId, ImageFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&TextureObjChunkBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFImage));

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFInternalFormatF)(void) const;

    GetSFInternalFormatF GetSFInternalFormat = &TextureObjChunkBase::getSFInternalFormat;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "internalFormat",
        "The internal texture format.\n",
        InternalFormatFieldId, InternalFormatFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFInternalFormat),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFInternalFormat));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFInternalFormat));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFExternalFormatF)(void) const;

    GetSFExternalFormatF GetSFExternalFormat = &TextureObjChunkBase::getSFExternalFormat;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "externalFormat",
        "The external texture format - overwrites \n"
        "external format of image when set to a value not equal to \n"
        "GL_NONE (which is the default).\n",
        ExternalFormatFieldId, ExternalFormatFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFExternalFormat),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFExternalFormat));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFExternalFormat));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFBool *(TextureObjChunkBase::*GetSFScaleF)(void) const;

    GetSFScaleF GetSFScale = &TextureObjChunkBase::getSFScale;
#endif

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "scale",
        "Specifies whether the image should be scaled to the next power of two,\n"
        "thus filling the whole texture coordinate range, or if it should be put\n"
        "in the lower left corner, leaving the rest of the texture undefined.\n"
        "This is mainly used for rapidly changing non power of two textures, to\n"
        "get around the scaling overhead.\n",
        ScaleFieldId, ScaleFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFScale),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFScale));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFScale));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFUInt32 *(TextureObjChunkBase::*GetSFFrameF)(void) const;

    GetSFFrameF GetSFFrame = &TextureObjChunkBase::getSFFrame;
#endif

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "frame",
        "Select the frame of the image to be used. See OSG::Image about details\n"
        "concerning multi-frame images.\n"
        "@hint For fast update use GL_LINEAR or GL_NEAREST filters, as mipmap creation is slow right now. \\endhint\n",
        FrameFieldId, FrameFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFFrame),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFFrame));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFFrame));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFMinFilterF)(void) const;

    GetSFMinFilterF GetSFMinFilter = &TextureObjChunkBase::getSFMinFilter;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "minFilter",
        "The minimisation filter, default GL_LINEAR_MIPMAP_LINEAR.\n",
        MinFilterFieldId, MinFilterFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFMinFilter),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFMinFilter));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFMinFilter));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFMagFilterF)(void) const;

    GetSFMagFilterF GetSFMagFilter = &TextureObjChunkBase::getSFMagFilter;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "magFilter",
        "The magnification filter, default GL_LINEAR.\n",
        MagFilterFieldId, MagFilterFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFMagFilter),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFMagFilter));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFMagFilter));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFWrapSF)(void) const;

    GetSFWrapSF GetSFWrapS = &TextureObjChunkBase::getSFWrapS;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "wrapS",
        "Texture coordinate S wrapping, default GL_REPEAT.\n",
        WrapSFieldId, WrapSFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFWrapS),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFWrapS));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFWrapS));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFWrapTF)(void) const;

    GetSFWrapTF GetSFWrapT = &TextureObjChunkBase::getSFWrapT;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "wrapT",
        "Texture coordinate T wrapping, default GL_REPEAT.\n",
        WrapTFieldId, WrapTFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFWrapT),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFWrapT));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFWrapT));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFWrapRF)(void) const;

    GetSFWrapRF GetSFWrapR = &TextureObjChunkBase::getSFWrapR;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "wrapR",
        "Texture coordinate R wrapping, default GL_REPEAT.\n",
        WrapRFieldId, WrapRFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFWrapR),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFWrapR));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFWrapR));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFEnvModeF)(void) const;

    GetSFEnvModeF GetSFEnvMode = &TextureObjChunkBase::getSFEnvMode;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envMode",
        "Texture environment mode, default GL_REPLACE\n",
        EnvModeFieldId, EnvModeFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFEnvMode),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFEnvMode));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFEnvMode));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFColor4f *(TextureObjChunkBase::*GetSFEnvColorF)(void) const;

    GetSFEnvColorF GetSFEnvColor = &TextureObjChunkBase::getSFEnvColor;
#endif

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "envColor",
        "Texture environment color default transparent black.\n",
        EnvColorFieldId, EnvColorFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFEnvColor),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFEnvColor));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFEnvColor));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFEnvCombineRGBF)(void) const;

    GetSFEnvCombineRGBF GetSFEnvCombineRGB = &TextureObjChunkBase::getSFEnvCombineRGB;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envCombineRGB",
        "Texture environment rgb combine mode, default GL_MODULATE\n",
        EnvCombineRGBFieldId, EnvCombineRGBFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFEnvCombineRGB),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFEnvCombineRGB));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFEnvCombineRGB));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFEnvCombineAlphaF)(void) const;

    GetSFEnvCombineAlphaF GetSFEnvCombineAlpha = &TextureObjChunkBase::getSFEnvCombineAlpha;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envCombineAlpha",
        "Texture environment alpha combine mode, default GL_MODULATE\n",
        EnvCombineAlphaFieldId, EnvCombineAlphaFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFEnvCombineAlpha),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFEnvCombineAlpha));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFEnvCombineAlpha));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFReal32 *(TextureObjChunkBase::*GetSFEnvScaleRGBF)(void) const;

    GetSFEnvScaleRGBF GetSFEnvScaleRGB = &TextureObjChunkBase::getSFEnvScaleRGB;
#endif

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "envScaleRGB",
        "Texture environment combine rgb scale factor, default 1.f\n",
        EnvScaleRGBFieldId, EnvScaleRGBFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFEnvScaleRGB),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFEnvScaleRGB));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFEnvScaleRGB));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFReal32 *(TextureObjChunkBase::*GetSFEnvScaleAlphaF)(void) const;

    GetSFEnvScaleAlphaF GetSFEnvScaleAlpha = &TextureObjChunkBase::getSFEnvScaleAlpha;
#endif

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "envScaleAlpha",
        "Texture environment combine alpha scale factor, default 1.f\n",
        EnvScaleAlphaFieldId, EnvScaleAlphaFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFEnvScaleAlpha),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFEnvScaleAlpha));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFEnvScaleAlpha));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFEnvSource0RGBF)(void) const;

    GetSFEnvSource0RGBF GetSFEnvSource0RGB = &TextureObjChunkBase::getSFEnvSource0RGB;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envSource0RGB",
        "Texture environment combine source 0 rgb, default GL_TEXTURE\n",
        EnvSource0RGBFieldId, EnvSource0RGBFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFEnvSource0RGB),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFEnvSource0RGB));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFEnvSource0RGB));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFEnvSource1RGBF)(void) const;

    GetSFEnvSource1RGBF GetSFEnvSource1RGB = &TextureObjChunkBase::getSFEnvSource1RGB;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envSource1RGB",
        "Texture environment combine source 1 rgb, default GL_PREVIOUS_EXT\n",
        EnvSource1RGBFieldId, EnvSource1RGBFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFEnvSource1RGB),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFEnvSource1RGB));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFEnvSource1RGB));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFEnvSource2RGBF)(void) const;

    GetSFEnvSource2RGBF GetSFEnvSource2RGB = &TextureObjChunkBase::getSFEnvSource2RGB;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envSource2RGB",
        "Texture environment combine source 2 rgb, default GL_CONSTANT_EXT\n",
        EnvSource2RGBFieldId, EnvSource2RGBFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFEnvSource2RGB),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFEnvSource2RGB));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFEnvSource2RGB));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFEnvSource0AlphaF)(void) const;

    GetSFEnvSource0AlphaF GetSFEnvSource0Alpha = &TextureObjChunkBase::getSFEnvSource0Alpha;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envSource0Alpha",
        "Texture environment combine source 0 alpha, default GL_TEXTURE\n",
        EnvSource0AlphaFieldId, EnvSource0AlphaFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFEnvSource0Alpha),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFEnvSource0Alpha));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFEnvSource0Alpha));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFEnvSource1AlphaF)(void) const;

    GetSFEnvSource1AlphaF GetSFEnvSource1Alpha = &TextureObjChunkBase::getSFEnvSource1Alpha;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envSource1Alpha",
        "Texture environment combine source 1 alpha, default GL_PREVIOUS_EXT\n",
        EnvSource1AlphaFieldId, EnvSource1AlphaFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFEnvSource1Alpha),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFEnvSource1Alpha));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFEnvSource1Alpha));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFEnvSource2AlphaF)(void) const;

    GetSFEnvSource2AlphaF GetSFEnvSource2Alpha = &TextureObjChunkBase::getSFEnvSource2Alpha;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envSource2Alpha",
        "Texture environment combine source 2 alpha, default GL_CONSTANT_EXT\n",
        EnvSource2AlphaFieldId, EnvSource2AlphaFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFEnvSource2Alpha),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFEnvSource2Alpha));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFEnvSource2Alpha));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFEnvOperand0RGBF)(void) const;

    GetSFEnvOperand0RGBF GetSFEnvOperand0RGB = &TextureObjChunkBase::getSFEnvOperand0RGB;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envOperand0RGB",
        "Texture environment combine operand 0 rgb, default GL_SRC_COLOR\n",
        EnvOperand0RGBFieldId, EnvOperand0RGBFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFEnvOperand0RGB),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFEnvOperand0RGB));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFEnvOperand0RGB));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFEnvOperand1RGBF)(void) const;

    GetSFEnvOperand1RGBF GetSFEnvOperand1RGB = &TextureObjChunkBase::getSFEnvOperand1RGB;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envOperand1RGB",
        "Texture environment combine operand 1 rgb, default GL_SRC_COLOR\n",
        EnvOperand1RGBFieldId, EnvOperand1RGBFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFEnvOperand1RGB),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFEnvOperand1RGB));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFEnvOperand1RGB));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFEnvOperand2RGBF)(void) const;

    GetSFEnvOperand2RGBF GetSFEnvOperand2RGB = &TextureObjChunkBase::getSFEnvOperand2RGB;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envOperand2RGB",
        "Texture environment combine operand 2 rgb, default GL_SRC_ALPHA\n",
        EnvOperand2RGBFieldId, EnvOperand2RGBFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFEnvOperand2RGB),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFEnvOperand2RGB));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFEnvOperand2RGB));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFEnvOperand0AlphaF)(void) const;

    GetSFEnvOperand0AlphaF GetSFEnvOperand0Alpha = &TextureObjChunkBase::getSFEnvOperand0Alpha;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envOperand0Alpha",
        "Texture environment combine operand 0 alpha, default GL_SRC_ALPHA\n",
        EnvOperand0AlphaFieldId, EnvOperand0AlphaFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFEnvOperand0Alpha),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFEnvOperand0Alpha));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFEnvOperand0Alpha));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFEnvOperand1AlphaF)(void) const;

    GetSFEnvOperand1AlphaF GetSFEnvOperand1Alpha = &TextureObjChunkBase::getSFEnvOperand1Alpha;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envOperand1Alpha",
        "Texture environment combine operand 1 alpha, default GL_SRC_ALPHA\n",
        EnvOperand1AlphaFieldId, EnvOperand1AlphaFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFEnvOperand1Alpha),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFEnvOperand1Alpha));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFEnvOperand1Alpha));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFEnvOperand2AlphaF)(void) const;

    GetSFEnvOperand2AlphaF GetSFEnvOperand2Alpha = &TextureObjChunkBase::getSFEnvOperand2Alpha;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envOperand2Alpha",
        "Texture environment combine operand 2 alpha, default GL_SRC_ALPHA\n",
        EnvOperand2AlphaFieldId, EnvOperand2AlphaFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFEnvOperand2Alpha),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFEnvOperand2Alpha));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFEnvOperand2Alpha));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFGLIdF)(void) const;

    GetSFGLIdF GetSFGLId = &TextureObjChunkBase::getSFGLId;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "GLId",
        "The OpenGL texture id for this texture.\n",
        GLIdFieldId, GLIdFieldMask,
        true,
        (Field::FClusterLocal),
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFGLId),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFGLId));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFGLId));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFInt32 *(TextureObjChunkBase::*GetSFIgnoreGLForAspectF)(void) const;

    GetSFIgnoreGLForAspectF GetSFIgnoreGLForAspect = &TextureObjChunkBase::getSFIgnoreGLForAspect;
#endif

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "IgnoreGLForAspect",
        "Don't do any GL calls for aspect of given id.\n",
        IgnoreGLForAspectFieldId, IgnoreGLForAspectFieldMask,
        true,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFIgnoreGLForAspect),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFIgnoreGLForAspect));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFIgnoreGLForAspect));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFBool *(TextureObjChunkBase::*GetSFPointSpriteF)(void) const;

    GetSFPointSpriteF GetSFPointSprite = &TextureObjChunkBase::getSFPointSprite;
#endif

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "pointSprite",
        "Flag to use this texture for Point Sprites.\n",
        PointSpriteFieldId, PointSpriteFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFPointSprite),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFPointSprite));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFPointSprite));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFReal32 *(TextureObjChunkBase::*GetSFPriorityF)(void) const;

    GetSFPriorityF GetSFPriority = &TextureObjChunkBase::getSFPriority;
#endif

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "priority",
        "Priority of this texture, between 0 and 1, the default is 0.\n",
        PriorityFieldId, PriorityFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFPriority),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFPriority));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFPriority));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFShaderOperationF)(void) const;

    GetSFShaderOperationF GetSFShaderOperation = &TextureObjChunkBase::getSFShaderOperation;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "shaderOperation",
        "Shader operation of this texture unit, default GL_NONE. If unit 0 uses\n"
        "GL_NONE, shading is switched off.\n",
        ShaderOperationFieldId, ShaderOperationFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFShaderOperation),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFShaderOperation));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFShaderOperation));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFShaderInputF)(void) const;

    GetSFShaderInputF GetSFShaderInput = &TextureObjChunkBase::getSFShaderInput;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "shaderInput",
        "Input texture unit for this shader's operation.\n",
        ShaderInputFieldId, ShaderInputFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFShaderInput),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFShaderInput));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFShaderInput));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const MFReal32 *(TextureObjChunkBase::*GetMFShaderOffsetMatrixF)(void) const;

    GetMFShaderOffsetMatrixF GetMFShaderOffsetMatrix = &TextureObjChunkBase::getMFShaderOffsetMatrix;
#endif

    pDesc = new MFReal32::Description(
        MFReal32::getClassType(),
        "shaderOffsetMatrix",
        "The 2x2 transformation matrix for offset textures.\n",
        ShaderOffsetMatrixFieldId, ShaderOffsetMatrixFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editMFShaderOffsetMatrix),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFShaderOffsetMatrix));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getMFShaderOffsetMatrix));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFReal32 *(TextureObjChunkBase::*GetSFShaderOffsetScaleF)(void) const;

    GetSFShaderOffsetScaleF GetSFShaderOffsetScale = &TextureObjChunkBase::getSFShaderOffsetScale;
#endif

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "shaderOffsetScale",
        "The scaling factor for scaled offset textures.\n",
        ShaderOffsetScaleFieldId, ShaderOffsetScaleFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFShaderOffsetScale),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFShaderOffsetScale));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFShaderOffsetScale));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFReal32 *(TextureObjChunkBase::*GetSFShaderOffsetBiasF)(void) const;

    GetSFShaderOffsetBiasF GetSFShaderOffsetBias = &TextureObjChunkBase::getSFShaderOffsetBias;
#endif

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "shaderOffsetBias",
        "The bias factor for scaled offset textures.\n",
        ShaderOffsetBiasFieldId, ShaderOffsetBiasFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFShaderOffsetBias),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFShaderOffsetBias));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFShaderOffsetBias));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFShaderRGBADotProductF)(void) const;

    GetSFShaderRGBADotProductF GetSFShaderRGBADotProduct = &TextureObjChunkBase::getSFShaderRGBADotProduct;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "shaderRGBADotProduct",
        "The RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV value.\n",
        ShaderRGBADotProductFieldId, ShaderRGBADotProductFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFShaderRGBADotProduct),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFShaderRGBADotProduct));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFShaderRGBADotProduct));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFUInt8 *(TextureObjChunkBase::*GetSFShaderCullModesF)(void) const;

    GetSFShaderCullModesF GetSFShaderCullModes = &TextureObjChunkBase::getSFShaderCullModes;
#endif

    pDesc = new SFUInt8::Description(
        SFUInt8::getClassType(),
        "shaderCullModes",
        "The CULL_MODES_NV value, coded into a single byte. The first 4 bits of\n"
        "the byte are used to indicate the wnated cull modes, a value of 0 \n"
        "signifies GL_LESS, a value of 1 GL_GEQUAL. Bit 0 (mask 1) is used for \n"
        "the S coordinate, bit 1 (mask 2) for T, bit 2 (mask 4) for R and bit 4 \n"
        "(mask 8) for Q.\n",
        ShaderCullModesFieldId, ShaderCullModesFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFShaderCullModes),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFShaderCullModes));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFShaderCullModes));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFVec3f *(TextureObjChunkBase::*GetSFShaderConstEyeF)(void) const;

    GetSFShaderConstEyeF GetSFShaderConstEye = &TextureObjChunkBase::getSFShaderConstEye;
#endif

    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "shaderConstEye",
        "The CONST_EYE_NV value, i.e. the constant eye position used by the \n"
        "DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV shader.\n",
        ShaderConstEyeFieldId, ShaderConstEyeFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFShaderConstEye),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFShaderConstEye));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFShaderConstEye));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFReal32 *(TextureObjChunkBase::*GetSFLodBiasF)(void) const;

    GetSFLodBiasF GetSFLodBias = &TextureObjChunkBase::getSFLodBias;
#endif

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "lodBias",
        "Bias of LOD calculation for texture access.\n",
        LodBiasFieldId, LodBiasFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFLodBias),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFLodBias));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFLodBias));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFTargetF)(void) const;

    GetSFTargetF GetSFTarget = &TextureObjChunkBase::getSFTarget;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "target",
        "Texture target. Overwrite automatically determined texture target\n"
        "based on the parameters of the assigned image if set to anything \n"
        "else than GL_NONE. Used for nVidia's rectangle textures. Be careful\n"
        "when using it!\n",
        TargetFieldId, TargetFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFTarget),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFTarget));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFTarget));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFInt32 *(TextureObjChunkBase::*GetSFDirtyLeftF)(void) const;

    GetSFDirtyLeftF GetSFDirtyLeft = &TextureObjChunkBase::getSFDirtyLeft;
#endif

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "dirtyLeft",
        "Left coordinate of the dirty rectangle to use for \n"
        "imageContentChanged(). This doesn't make sense to be stored in files, \n"
        "it does make sense on a cluster, though, that's why it's external.\n",
        DirtyLeftFieldId, DirtyLeftFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFDirtyLeft),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFDirtyLeft));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFDirtyLeft));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFInt32 *(TextureObjChunkBase::*GetSFDirtyMinXF)(void) const;

    GetSFDirtyMinXF GetSFDirtyMinX = &TextureObjChunkBase::getSFDirtyMinX;
#endif

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "dirtyMinX",
        "Minimum X coordinate of the dirty rectangle to use for \n"
        "imageContentChanged(). This doesn't make sense to be stored in files, \n"
        "it does make sense on a cluster, though, that's why it's external.\n",
        DirtyMinXFieldId, DirtyMinXFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFDirtyMinX),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFDirtyMinX));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFDirtyMinX));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFInt32 *(TextureObjChunkBase::*GetSFDirtyMaxXF)(void) const;

    GetSFDirtyMaxXF GetSFDirtyMaxX = &TextureObjChunkBase::getSFDirtyMaxX;
#endif

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "dirtyMaxX",
        "Maximum X coordinate of the dirty rectangle to use for \n"
        "imageContentChanged(). This doesn't make sense to be stored in files, \n"
        "it does make sense on a cluster, though, that's why it's external.\n",
        DirtyMaxXFieldId, DirtyMaxXFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFDirtyMaxX),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFDirtyMaxX));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFDirtyMaxX));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFInt32 *(TextureObjChunkBase::*GetSFDirtyMinYF)(void) const;

    GetSFDirtyMinYF GetSFDirtyMinY = &TextureObjChunkBase::getSFDirtyMinY;
#endif

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "dirtyMinY",
        "Minimum Y coordinate of the dirty rectangle to use for \n"
        "imageContentChanged(). This doesn't make sense to be stored in files, \n"
        "it does make sense on a cluster, though, that's why it's external.\n",
        DirtyMinYFieldId, DirtyMinYFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFDirtyMinY),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFDirtyMinY));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFDirtyMinY));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFInt32 *(TextureObjChunkBase::*GetSFDirtyMaxYF)(void) const;

    GetSFDirtyMaxYF GetSFDirtyMaxY = &TextureObjChunkBase::getSFDirtyMaxY;
#endif

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "dirtyMaxY",
        "Maximum Y coordinate of the dirty rectangle to use for \n"
        "imageContentChanged(). This doesn't make sense to be stored in files, \n"
        "it does make sense on a cluster, though, that's why it's external.\n",
        DirtyMaxYFieldId, DirtyMaxYFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFDirtyMaxY),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFDirtyMaxY));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFDirtyMaxY));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFInt32 *(TextureObjChunkBase::*GetSFDirtyMinZF)(void) const;

    GetSFDirtyMinZF GetSFDirtyMinZ = &TextureObjChunkBase::getSFDirtyMinZ;
#endif

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "dirtyMinZ",
        "Minimum Z coordinate of the dirty rectangle to use for \n"
        "imageContentChanged(). This doesn't make sense to be stored in files, \n"
        "it does make sense on a cluster, though, that's why it's external.\n",
        DirtyMinZFieldId, DirtyMinZFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFDirtyMinZ),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFDirtyMinZ));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFDirtyMinZ));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFInt32 *(TextureObjChunkBase::*GetSFDirtyMaxZF)(void) const;

    GetSFDirtyMaxZF GetSFDirtyMaxZ = &TextureObjChunkBase::getSFDirtyMaxZ;
#endif

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "dirtyMaxZ",
        "Maximum Z coordinate of the dirty rectangle to use for \n"
        "imageContentChanged(). This doesn't make sense to be stored in files, \n"
        "it does make sense on a cluster, though, that's why it's external.\n",
        DirtyMaxZFieldId, DirtyMaxZFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFDirtyMaxZ),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFDirtyMaxZ));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFDirtyMaxZ));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFReal32 *(TextureObjChunkBase::*GetSFAnisotropyF)(void) const;

    GetSFAnisotropyF GetSFAnisotropy = &TextureObjChunkBase::getSFAnisotropy;
#endif

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "anisotropy",
        "Anisotropic filtering the default 1.0f means isotropic filtering.\n",
        AnisotropyFieldId, AnisotropyFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFAnisotropy),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFAnisotropy));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFAnisotropy));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFColor4f *(TextureObjChunkBase::*GetSFBorderColorF)(void) const;

    GetSFBorderColorF GetSFBorderColor = &TextureObjChunkBase::getSFBorderColor;
#endif

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "borderColor",
        "Texture border color\n",
        BorderColorFieldId, BorderColorFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFBorderColor),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFBorderColor));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFBorderColor));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFCompareModeF)(void) const;

    GetSFCompareModeF GetSFCompareMode = &TextureObjChunkBase::getSFCompareMode;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "compareMode",
        "",
        CompareModeFieldId, CompareModeFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFCompareMode),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFCompareMode));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFCompareMode));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFCompareFuncF)(void) const;

    GetSFCompareFuncF GetSFCompareFunc = &TextureObjChunkBase::getSFCompareFunc;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "compareFunc",
        "",
        CompareFuncFieldId, CompareFuncFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFCompareFunc),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFCompareFunc));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFCompareFunc));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(TextureObjChunkBase::*GetSFDepthModeF)(void) const;

    GetSFDepthModeF GetSFDepthMode = &TextureObjChunkBase::getSFDepthMode;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "depthMode",
        "",
        DepthModeFieldId, DepthModeFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TextureObjChunkBase::editSFDepthMode),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFDepthMode));
#else
        reinterpret_cast<FieldGetMethodSig >(&TextureObjChunkBase::getSFDepthMode));
#endif

    oType.addInitialDesc(pDesc);
}


TextureObjChunkBase::TypeObject TextureObjChunkBase::_type(
    TextureObjChunkBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &TextureObjChunkBase::createEmpty,
    TextureObjChunk::initMethod,
    (InitalInsertDescFunc) &TextureObjChunkBase::classDescInserter,
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"TextureObjChunk\"\n"
    "\tparent=\"TextureBaseChunk\"\n"
    "\tlibrary=\"System\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"false\"\n"
    ">\n"
    "\\ingroup GrpSystemState\n"
    "\n"
    "See \\ref PageSystemTextureObjChunk for a description.\n"
    "\n"
    "This chunk wraps glTexImage[123]D (OSG::TextureChunk::_sfImage,\n"
    "OSG::TextureChunk::_sfInternalFormat, OSG::TextureChunk::_sfExternalFormat),\n"
    "glTexParameter (OSG::TextureChunk::_sfMinFilter,\n"
    "OSG::TextureChunk::_sfMagFilter, OSG::TextureChunk::_sfWrapS,\n"
    "OSG::TextureChunk::_sfWrapT, OSG::TextureChunk::_sfWrapR), glTexEnv\n"
    "(OSG::TextureChunk::_sfEnvMode, OSG::TextureChunk::_sfEnvColor,\n"
    "OSG::TextureChunk::_sfPriority).\n"
    "\n"
    "The ARB combine extension is also supported,\n"
    "where available (OSG::TextureChunk::_sfEnvCombineRGB,\n"
    "OSG::TextureChunk::_sfEnvScaleRGB, OSG::TextureChunk::_sfEnvSource0RGB,\n"
    "OSG::TextureChunk::_sfEnvSource1RGB, OSG::TextureChunk::_sfEnvSource2RGB,\n"
    "OSG::TextureChunk::_sfEnvOperand0RGB, OSG::TextureChunk::_sfEnvOperand1RGB,\n"
    "OSG::TextureChunk::_sfEnvOperand2RGB,\n"
    "OSG::TextureChunk::_sfEnvCombineAlpha,   OSG::TextureChunk::_sfEnvScaleAlpha,\n"
    "OSG::TextureChunk::_sfEnvSource0Alpha, OSG::TextureChunk::_sfEnvSource1Alpha,\n"
    "OSG::TextureChunk::_sfEnvSource2Alpha, OSG::TextureChunk::_sfEnvOperand0Alpha,\n"
    "OSG::TextureChunk::_sfEnvOperand1Alpha,\n"
    "OSG::TextureChunk::_sfEnvOperand2Alpha).\n"
    "\n"
    "It is possible to enable the point\n"
    "sprite coordinate replacement  (OSG::TextureChunk::_sfPointSprite), see \\ref\n"
    "PageSystemPointChunk for details. The two parameters\n"
    "OSG::TextureChunk::_sfScale and OSG::TextureChunk::_sfFrame specify details\n"
    "about the texture.\n"
    "\n"
    "On hardware that supports it (i.e. NVidia boards) the texture shader\n"
    "extension(s) are also available.\n"
    "\t<Field\n"
    "\t\tname=\"image\"\n"
    "\t\ttype=\"ImagePtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"internalFormat\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_NONE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe internal texture format.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"externalFormat\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_NONE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t    The external texture format - overwrites \n"
    "        external format of image when set to a value not equal to \n"
    "        GL_NONE (which is the default).\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"scale\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Specifies whether the image should be scaled to the next power of two,\n"
    "        thus filling the whole texture coordinate range, or if it should be put\n"
    "        in the lower left corner, leaving the rest of the texture undefined.\n"
    "        This is mainly used for rapidly changing non power of two textures, to\n"
    "        get around the scaling overhead.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"frame\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Select the frame of the image to be used. See OSG::Image about details\n"
    "        concerning multi-frame images.\n"
    "        @hint For fast update use GL_LINEAR or GL_NEAREST filters, as mipmap creation is slow right now. \\endhint\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"minFilter\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_LINEAR_MIPMAP_LINEAR\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        The minimisation filter, default GL_LINEAR_MIPMAP_LINEAR.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"magFilter\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_LINEAR\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        The magnification filter, default GL_LINEAR.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"wrapS\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_REPEAT\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture coordinate S wrapping, default GL_REPEAT.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"wrapT\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_REPEAT\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture coordinate T wrapping, default GL_REPEAT.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"wrapR\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_REPEAT\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture coordinate R wrapping, default GL_REPEAT.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envMode\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_REPLACE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment mode, default GL_REPLACE\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0,0,0,0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment color default transparent black.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envCombineRGB\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_MODULATE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment rgb combine mode, default GL_MODULATE\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envCombineAlpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_MODULATE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment alpha combine mode, default GL_MODULATE\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envScaleRGB\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1.0f\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine rgb scale factor, default 1.f\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envScaleAlpha\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1.0f\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine alpha scale factor, default 1.f\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envSource0RGB\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_TEXTURE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine source 0 rgb, default GL_TEXTURE\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envSource1RGB\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_PREVIOUS_EXT\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGLEXT.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine source 1 rgb, default GL_PREVIOUS_EXT\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envSource2RGB\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_CONSTANT_EXT\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGLEXT.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine source 2 rgb, default GL_CONSTANT_EXT\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envSource0Alpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_TEXTURE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine source 0 alpha, default GL_TEXTURE\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envSource1Alpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_PREVIOUS_EXT\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGLEXT.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine source 1 alpha, default GL_PREVIOUS_EXT\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envSource2Alpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_CONSTANT_EXT\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGLEXT.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine source 2 alpha, default GL_CONSTANT_EXT\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envOperand0RGB\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_SRC_COLOR\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine operand 0 rgb, default GL_SRC_COLOR\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envOperand1RGB\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_SRC_COLOR\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine operand 1 rgb, default GL_SRC_COLOR\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envOperand2RGB\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_SRC_ALPHA\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine operand 2 rgb, default GL_SRC_ALPHA\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envOperand0Alpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_SRC_ALPHA\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine operand 0 alpha, default GL_SRC_ALPHA\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envOperand1Alpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_SRC_ALPHA\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine operand 1 alpha, default GL_SRC_ALPHA\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envOperand2Alpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_SRC_ALPHA\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine operand 2 alpha, default GL_SRC_ALPHA\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"GLId\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "        fieldFlags=\"FClusterLocal\"\n"
    "\t>\n"
    "        The OpenGL texture id for this texture.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"IgnoreGLForAspect\"\n"
    "\t\ttype=\"Int32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\tdefaultValue=\"-1\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t    Don't do any GL calls for aspect of given id.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"pointSprite\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"GL_FALSE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t>\n"
    "        Flag to use this texture for Point Sprites.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"priority\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1.f\"\n"
    "\t>\n"
    "        Priority of this texture, between 0 and 1, the default is 0.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shaderOperation\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"GL_NONE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t>\n"
    "        Shader operation of this texture unit, default GL_NONE. If unit 0 uses\n"
    "        GL_NONE, shading is switched off.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shaderInput\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"GL_NONE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t>\n"
    "        Input texture unit for this shader's operation.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shaderOffsetMatrix\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        The 2x2 transformation matrix for offset textures.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shaderOffsetScale\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1.f\"\n"
    "\t>\n"
    "        The scaling factor for scaled offset textures.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shaderOffsetBias\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.f\"\n"
    "\t>\n"
    "        The bias factor for scaled offset textures.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shaderRGBADotProduct\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"GL_NONE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t>\n"
    "        The RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV value.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shaderCullModes\"\n"
    "\t\ttype=\"UInt8\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t>\n"
    "        The CULL_MODES_NV value, coded into a single byte. The first 4 bits of\n"
    "        the byte are used to indicate the wnated cull modes, a value of 0 \n"
    "        signifies GL_LESS, a value of 1 GL_GEQUAL. Bit 0 (mask 1) is used for \n"
    "        the S coordinate, bit 1 (mask 2) for T, bit 2 (mask 4) for R and bit 4 \n"
    "        (mask 8) for Q.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shaderConstEye\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        The CONST_EYE_NV value, i.e. the constant eye position used by the \n"
    "        DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV shader.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"lodBias\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.f\"\n"
    "\t\tdefaultHeader=\"\"\n"
    "\t>\n"
    "        Bias of LOD calculation for texture access.\n"
    "\t</Field>\n"
    "    <Field\n"
    "        name=\"target\"\n"
    "        type=\"GLenum\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"GL_NONE\"\n"
    "        defaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "        Texture target. Overwrite automatically determined texture target\n"
    "        based on the parameters of the assigned image if set to anything \n"
    "        else than GL_NONE. Used for nVidia's rectangle textures. Be careful\n"
    "        when using it!\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"dirtyLeft\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"-1\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "        Left coordinate of the dirty rectangle to use for \n"
    "        imageContentChanged(). This doesn't make sense to be stored in files, \n"
    "        it does make sense on a cluster, though, that's why it's external.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"dirtyMinX\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"-1\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "        Minimum X coordinate of the dirty rectangle to use for \n"
    "        imageContentChanged(). This doesn't make sense to be stored in files, \n"
    "        it does make sense on a cluster, though, that's why it's external.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"dirtyMaxX\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"-1\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "        Maximum X coordinate of the dirty rectangle to use for \n"
    "        imageContentChanged(). This doesn't make sense to be stored in files, \n"
    "        it does make sense on a cluster, though, that's why it's external.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"dirtyMinY\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"-1\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "        Minimum Y coordinate of the dirty rectangle to use for \n"
    "        imageContentChanged(). This doesn't make sense to be stored in files, \n"
    "        it does make sense on a cluster, though, that's why it's external.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"dirtyMaxY\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"-1\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "        Maximum Y coordinate of the dirty rectangle to use for \n"
    "        imageContentChanged(). This doesn't make sense to be stored in files, \n"
    "        it does make sense on a cluster, though, that's why it's external.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"dirtyMinZ\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"-1\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "        Minimum Z coordinate of the dirty rectangle to use for \n"
    "        imageContentChanged(). This doesn't make sense to be stored in files, \n"
    "        it does make sense on a cluster, though, that's why it's external.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"dirtyMaxZ\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"-1\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "        Maximum Z coordinate of the dirty rectangle to use for \n"
    "        imageContentChanged(). This doesn't make sense to be stored in files, \n"
    "        it does make sense on a cluster, though, that's why it's external.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"anisotropy\"\n"
    "        type=\"Real32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"1.0f\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "        Anisotropic filtering the default 1.0f means isotropic filtering.\n"
    "        </Field>\n"
    "\t<Field\n"
    "\t\tname=\"borderColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0,0,0,0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tTexture border color\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"compareMode\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_NONE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"compareFunc\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_LEQUAL\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"depthMode\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_LUMINANCE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "\\ingroup GrpSystemState\n"
    "\n"
    "See \\ref PageSystemTextureObjChunk for a description.\n"
    "\n"
    "This chunk wraps glTexImage[123]D (OSG::TextureChunk::_sfImage,\n"
    "OSG::TextureChunk::_sfInternalFormat, OSG::TextureChunk::_sfExternalFormat),\n"
    "glTexParameter (OSG::TextureChunk::_sfMinFilter,\n"
    "OSG::TextureChunk::_sfMagFilter, OSG::TextureChunk::_sfWrapS,\n"
    "OSG::TextureChunk::_sfWrapT, OSG::TextureChunk::_sfWrapR), glTexEnv\n"
    "(OSG::TextureChunk::_sfEnvMode, OSG::TextureChunk::_sfEnvColor,\n"
    "OSG::TextureChunk::_sfPriority).\n"
    "\n"
    "The ARB combine extension is also supported,\n"
    "where available (OSG::TextureChunk::_sfEnvCombineRGB,\n"
    "OSG::TextureChunk::_sfEnvScaleRGB, OSG::TextureChunk::_sfEnvSource0RGB,\n"
    "OSG::TextureChunk::_sfEnvSource1RGB, OSG::TextureChunk::_sfEnvSource2RGB,\n"
    "OSG::TextureChunk::_sfEnvOperand0RGB, OSG::TextureChunk::_sfEnvOperand1RGB,\n"
    "OSG::TextureChunk::_sfEnvOperand2RGB,\n"
    "OSG::TextureChunk::_sfEnvCombineAlpha,   OSG::TextureChunk::_sfEnvScaleAlpha,\n"
    "OSG::TextureChunk::_sfEnvSource0Alpha, OSG::TextureChunk::_sfEnvSource1Alpha,\n"
    "OSG::TextureChunk::_sfEnvSource2Alpha, OSG::TextureChunk::_sfEnvOperand0Alpha,\n"
    "OSG::TextureChunk::_sfEnvOperand1Alpha,\n"
    "OSG::TextureChunk::_sfEnvOperand2Alpha).\n"
    "\n"
    "It is possible to enable the point\n"
    "sprite coordinate replacement  (OSG::TextureChunk::_sfPointSprite), see \\ref\n"
    "PageSystemPointChunk for details. The two parameters\n"
    "OSG::TextureChunk::_sfScale and OSG::TextureChunk::_sfFrame specify details\n"
    "about the texture.\n"
    "\n"
    "On hardware that supports it (i.e. NVidia boards) the texture shader\n"
    "extension(s) are also available.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &TextureObjChunkBase::getType(void)
{
    return _type;
}

const FieldContainerType &TextureObjChunkBase::getType(void) const
{
    return _type;
}

UInt32 TextureObjChunkBase::getContainerSize(void) const
{
    return sizeof(TextureObjChunk);
}

/*------------------------- decorator get ------------------------------*/


//! Get the TextureObjChunk::_sfImage field.
const SFImagePtr *TextureObjChunkBase::getSFImage(void) const
{
    return &_sfImage;
}

SFGLenum *TextureObjChunkBase::editSFInternalFormat(void)
{
    editSField(InternalFormatFieldMask);

    return &_sfInternalFormat;
}

const SFGLenum *TextureObjChunkBase::getSFInternalFormat(void) const
{
    return &_sfInternalFormat;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFInternalFormat (void)
{
    return this->editSFInternalFormat ();
}
#endif

SFGLenum *TextureObjChunkBase::editSFExternalFormat(void)
{
    editSField(ExternalFormatFieldMask);

    return &_sfExternalFormat;
}

const SFGLenum *TextureObjChunkBase::getSFExternalFormat(void) const
{
    return &_sfExternalFormat;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFExternalFormat (void)
{
    return this->editSFExternalFormat ();
}
#endif

SFBool *TextureObjChunkBase::editSFScale(void)
{
    editSField(ScaleFieldMask);

    return &_sfScale;
}

const SFBool *TextureObjChunkBase::getSFScale(void) const
{
    return &_sfScale;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *TextureObjChunkBase::getSFScale          (void)
{
    return this->editSFScale          ();
}
#endif

SFUInt32 *TextureObjChunkBase::editSFFrame(void)
{
    editSField(FrameFieldMask);

    return &_sfFrame;
}

const SFUInt32 *TextureObjChunkBase::getSFFrame(void) const
{
    return &_sfFrame;
}

#ifdef OSG_1_GET_COMPAT
SFUInt32            *TextureObjChunkBase::getSFFrame          (void)
{
    return this->editSFFrame          ();
}
#endif

SFGLenum *TextureObjChunkBase::editSFMinFilter(void)
{
    editSField(MinFilterFieldMask);

    return &_sfMinFilter;
}

const SFGLenum *TextureObjChunkBase::getSFMinFilter(void) const
{
    return &_sfMinFilter;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFMinFilter      (void)
{
    return this->editSFMinFilter      ();
}
#endif

SFGLenum *TextureObjChunkBase::editSFMagFilter(void)
{
    editSField(MagFilterFieldMask);

    return &_sfMagFilter;
}

const SFGLenum *TextureObjChunkBase::getSFMagFilter(void) const
{
    return &_sfMagFilter;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFMagFilter      (void)
{
    return this->editSFMagFilter      ();
}
#endif

SFGLenum *TextureObjChunkBase::editSFWrapS(void)
{
    editSField(WrapSFieldMask);

    return &_sfWrapS;
}

const SFGLenum *TextureObjChunkBase::getSFWrapS(void) const
{
    return &_sfWrapS;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFWrapS          (void)
{
    return this->editSFWrapS          ();
}
#endif

SFGLenum *TextureObjChunkBase::editSFWrapT(void)
{
    editSField(WrapTFieldMask);

    return &_sfWrapT;
}

const SFGLenum *TextureObjChunkBase::getSFWrapT(void) const
{
    return &_sfWrapT;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFWrapT          (void)
{
    return this->editSFWrapT          ();
}
#endif

SFGLenum *TextureObjChunkBase::editSFWrapR(void)
{
    editSField(WrapRFieldMask);

    return &_sfWrapR;
}

const SFGLenum *TextureObjChunkBase::getSFWrapR(void) const
{
    return &_sfWrapR;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFWrapR          (void)
{
    return this->editSFWrapR          ();
}
#endif

SFGLenum *TextureObjChunkBase::editSFEnvMode(void)
{
    editSField(EnvModeFieldMask);

    return &_sfEnvMode;
}

const SFGLenum *TextureObjChunkBase::getSFEnvMode(void) const
{
    return &_sfEnvMode;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFEnvMode        (void)
{
    return this->editSFEnvMode        ();
}
#endif

SFColor4f *TextureObjChunkBase::editSFEnvColor(void)
{
    editSField(EnvColorFieldMask);

    return &_sfEnvColor;
}

const SFColor4f *TextureObjChunkBase::getSFEnvColor(void) const
{
    return &_sfEnvColor;
}

#ifdef OSG_1_GET_COMPAT
SFColor4f           *TextureObjChunkBase::getSFEnvColor       (void)
{
    return this->editSFEnvColor       ();
}
#endif

SFGLenum *TextureObjChunkBase::editSFEnvCombineRGB(void)
{
    editSField(EnvCombineRGBFieldMask);

    return &_sfEnvCombineRGB;
}

const SFGLenum *TextureObjChunkBase::getSFEnvCombineRGB(void) const
{
    return &_sfEnvCombineRGB;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFEnvCombineRGB  (void)
{
    return this->editSFEnvCombineRGB  ();
}
#endif

SFGLenum *TextureObjChunkBase::editSFEnvCombineAlpha(void)
{
    editSField(EnvCombineAlphaFieldMask);

    return &_sfEnvCombineAlpha;
}

const SFGLenum *TextureObjChunkBase::getSFEnvCombineAlpha(void) const
{
    return &_sfEnvCombineAlpha;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFEnvCombineAlpha(void)
{
    return this->editSFEnvCombineAlpha();
}
#endif

SFReal32 *TextureObjChunkBase::editSFEnvScaleRGB(void)
{
    editSField(EnvScaleRGBFieldMask);

    return &_sfEnvScaleRGB;
}

const SFReal32 *TextureObjChunkBase::getSFEnvScaleRGB(void) const
{
    return &_sfEnvScaleRGB;
}

#ifdef OSG_1_GET_COMPAT
SFReal32            *TextureObjChunkBase::getSFEnvScaleRGB    (void)
{
    return this->editSFEnvScaleRGB    ();
}
#endif

SFReal32 *TextureObjChunkBase::editSFEnvScaleAlpha(void)
{
    editSField(EnvScaleAlphaFieldMask);

    return &_sfEnvScaleAlpha;
}

const SFReal32 *TextureObjChunkBase::getSFEnvScaleAlpha(void) const
{
    return &_sfEnvScaleAlpha;
}

#ifdef OSG_1_GET_COMPAT
SFReal32            *TextureObjChunkBase::getSFEnvScaleAlpha  (void)
{
    return this->editSFEnvScaleAlpha  ();
}
#endif

SFGLenum *TextureObjChunkBase::editSFEnvSource0RGB(void)
{
    editSField(EnvSource0RGBFieldMask);

    return &_sfEnvSource0RGB;
}

const SFGLenum *TextureObjChunkBase::getSFEnvSource0RGB(void) const
{
    return &_sfEnvSource0RGB;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFEnvSource0RGB  (void)
{
    return this->editSFEnvSource0RGB  ();
}
#endif

SFGLenum *TextureObjChunkBase::editSFEnvSource1RGB(void)
{
    editSField(EnvSource1RGBFieldMask);

    return &_sfEnvSource1RGB;
}

const SFGLenum *TextureObjChunkBase::getSFEnvSource1RGB(void) const
{
    return &_sfEnvSource1RGB;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFEnvSource1RGB  (void)
{
    return this->editSFEnvSource1RGB  ();
}
#endif

SFGLenum *TextureObjChunkBase::editSFEnvSource2RGB(void)
{
    editSField(EnvSource2RGBFieldMask);

    return &_sfEnvSource2RGB;
}

const SFGLenum *TextureObjChunkBase::getSFEnvSource2RGB(void) const
{
    return &_sfEnvSource2RGB;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFEnvSource2RGB  (void)
{
    return this->editSFEnvSource2RGB  ();
}
#endif

SFGLenum *TextureObjChunkBase::editSFEnvSource0Alpha(void)
{
    editSField(EnvSource0AlphaFieldMask);

    return &_sfEnvSource0Alpha;
}

const SFGLenum *TextureObjChunkBase::getSFEnvSource0Alpha(void) const
{
    return &_sfEnvSource0Alpha;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFEnvSource0Alpha(void)
{
    return this->editSFEnvSource0Alpha();
}
#endif

SFGLenum *TextureObjChunkBase::editSFEnvSource1Alpha(void)
{
    editSField(EnvSource1AlphaFieldMask);

    return &_sfEnvSource1Alpha;
}

const SFGLenum *TextureObjChunkBase::getSFEnvSource1Alpha(void) const
{
    return &_sfEnvSource1Alpha;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFEnvSource1Alpha(void)
{
    return this->editSFEnvSource1Alpha();
}
#endif

SFGLenum *TextureObjChunkBase::editSFEnvSource2Alpha(void)
{
    editSField(EnvSource2AlphaFieldMask);

    return &_sfEnvSource2Alpha;
}

const SFGLenum *TextureObjChunkBase::getSFEnvSource2Alpha(void) const
{
    return &_sfEnvSource2Alpha;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFEnvSource2Alpha(void)
{
    return this->editSFEnvSource2Alpha();
}
#endif

SFGLenum *TextureObjChunkBase::editSFEnvOperand0RGB(void)
{
    editSField(EnvOperand0RGBFieldMask);

    return &_sfEnvOperand0RGB;
}

const SFGLenum *TextureObjChunkBase::getSFEnvOperand0RGB(void) const
{
    return &_sfEnvOperand0RGB;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFEnvOperand0RGB (void)
{
    return this->editSFEnvOperand0RGB ();
}
#endif

SFGLenum *TextureObjChunkBase::editSFEnvOperand1RGB(void)
{
    editSField(EnvOperand1RGBFieldMask);

    return &_sfEnvOperand1RGB;
}

const SFGLenum *TextureObjChunkBase::getSFEnvOperand1RGB(void) const
{
    return &_sfEnvOperand1RGB;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFEnvOperand1RGB (void)
{
    return this->editSFEnvOperand1RGB ();
}
#endif

SFGLenum *TextureObjChunkBase::editSFEnvOperand2RGB(void)
{
    editSField(EnvOperand2RGBFieldMask);

    return &_sfEnvOperand2RGB;
}

const SFGLenum *TextureObjChunkBase::getSFEnvOperand2RGB(void) const
{
    return &_sfEnvOperand2RGB;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFEnvOperand2RGB (void)
{
    return this->editSFEnvOperand2RGB ();
}
#endif

SFGLenum *TextureObjChunkBase::editSFEnvOperand0Alpha(void)
{
    editSField(EnvOperand0AlphaFieldMask);

    return &_sfEnvOperand0Alpha;
}

const SFGLenum *TextureObjChunkBase::getSFEnvOperand0Alpha(void) const
{
    return &_sfEnvOperand0Alpha;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFEnvOperand0Alpha(void)
{
    return this->editSFEnvOperand0Alpha();
}
#endif

SFGLenum *TextureObjChunkBase::editSFEnvOperand1Alpha(void)
{
    editSField(EnvOperand1AlphaFieldMask);

    return &_sfEnvOperand1Alpha;
}

const SFGLenum *TextureObjChunkBase::getSFEnvOperand1Alpha(void) const
{
    return &_sfEnvOperand1Alpha;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFEnvOperand1Alpha(void)
{
    return this->editSFEnvOperand1Alpha();
}
#endif

SFGLenum *TextureObjChunkBase::editSFEnvOperand2Alpha(void)
{
    editSField(EnvOperand2AlphaFieldMask);

    return &_sfEnvOperand2Alpha;
}

const SFGLenum *TextureObjChunkBase::getSFEnvOperand2Alpha(void) const
{
    return &_sfEnvOperand2Alpha;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFEnvOperand2Alpha(void)
{
    return this->editSFEnvOperand2Alpha();
}
#endif

SFGLenum *TextureObjChunkBase::editSFGLId(void)
{
    editSField(GLIdFieldMask);

    return &_sfGLId;
}

const SFGLenum *TextureObjChunkBase::getSFGLId(void) const
{
    return &_sfGLId;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFGLId           (void)
{
    return this->editSFGLId           ();
}
#endif

SFInt32 *TextureObjChunkBase::editSFIgnoreGLForAspect(void)
{
    editSField(IgnoreGLForAspectFieldMask);

    return &_sfIgnoreGLForAspect;
}

const SFInt32 *TextureObjChunkBase::getSFIgnoreGLForAspect(void) const
{
    return &_sfIgnoreGLForAspect;
}

#ifdef OSG_1_GET_COMPAT
SFInt32             *TextureObjChunkBase::getSFIgnoreGLForAspect(void)
{
    return this->editSFIgnoreGLForAspect();
}
#endif

SFBool *TextureObjChunkBase::editSFPointSprite(void)
{
    editSField(PointSpriteFieldMask);

    return &_sfPointSprite;
}

const SFBool *TextureObjChunkBase::getSFPointSprite(void) const
{
    return &_sfPointSprite;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *TextureObjChunkBase::getSFPointSprite    (void)
{
    return this->editSFPointSprite    ();
}
#endif

SFReal32 *TextureObjChunkBase::editSFPriority(void)
{
    editSField(PriorityFieldMask);

    return &_sfPriority;
}

const SFReal32 *TextureObjChunkBase::getSFPriority(void) const
{
    return &_sfPriority;
}

#ifdef OSG_1_GET_COMPAT
SFReal32            *TextureObjChunkBase::getSFPriority       (void)
{
    return this->editSFPriority       ();
}
#endif

SFGLenum *TextureObjChunkBase::editSFShaderOperation(void)
{
    editSField(ShaderOperationFieldMask);

    return &_sfShaderOperation;
}

const SFGLenum *TextureObjChunkBase::getSFShaderOperation(void) const
{
    return &_sfShaderOperation;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFShaderOperation(void)
{
    return this->editSFShaderOperation();
}
#endif

SFGLenum *TextureObjChunkBase::editSFShaderInput(void)
{
    editSField(ShaderInputFieldMask);

    return &_sfShaderInput;
}

const SFGLenum *TextureObjChunkBase::getSFShaderInput(void) const
{
    return &_sfShaderInput;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFShaderInput    (void)
{
    return this->editSFShaderInput    ();
}
#endif

MFReal32 *TextureObjChunkBase::editMFShaderOffsetMatrix(void)
{
    editMField(ShaderOffsetMatrixFieldMask, _mfShaderOffsetMatrix);

    return &_mfShaderOffsetMatrix;
}

const MFReal32 *TextureObjChunkBase::getMFShaderOffsetMatrix(void) const
{
    return &_mfShaderOffsetMatrix;
}

#ifdef OSG_1_GET_COMPAT
MFReal32            *TextureObjChunkBase::getMFShaderOffsetMatrix(void)
{
    return this->editMFShaderOffsetMatrix();
}
#endif

SFReal32 *TextureObjChunkBase::editSFShaderOffsetScale(void)
{
    editSField(ShaderOffsetScaleFieldMask);

    return &_sfShaderOffsetScale;
}

const SFReal32 *TextureObjChunkBase::getSFShaderOffsetScale(void) const
{
    return &_sfShaderOffsetScale;
}

#ifdef OSG_1_GET_COMPAT
SFReal32            *TextureObjChunkBase::getSFShaderOffsetScale(void)
{
    return this->editSFShaderOffsetScale();
}
#endif

SFReal32 *TextureObjChunkBase::editSFShaderOffsetBias(void)
{
    editSField(ShaderOffsetBiasFieldMask);

    return &_sfShaderOffsetBias;
}

const SFReal32 *TextureObjChunkBase::getSFShaderOffsetBias(void) const
{
    return &_sfShaderOffsetBias;
}

#ifdef OSG_1_GET_COMPAT
SFReal32            *TextureObjChunkBase::getSFShaderOffsetBias(void)
{
    return this->editSFShaderOffsetBias();
}
#endif

SFGLenum *TextureObjChunkBase::editSFShaderRGBADotProduct(void)
{
    editSField(ShaderRGBADotProductFieldMask);

    return &_sfShaderRGBADotProduct;
}

const SFGLenum *TextureObjChunkBase::getSFShaderRGBADotProduct(void) const
{
    return &_sfShaderRGBADotProduct;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFShaderRGBADotProduct(void)
{
    return this->editSFShaderRGBADotProduct();
}
#endif

SFUInt8 *TextureObjChunkBase::editSFShaderCullModes(void)
{
    editSField(ShaderCullModesFieldMask);

    return &_sfShaderCullModes;
}

const SFUInt8 *TextureObjChunkBase::getSFShaderCullModes(void) const
{
    return &_sfShaderCullModes;
}

#ifdef OSG_1_GET_COMPAT
SFUInt8             *TextureObjChunkBase::getSFShaderCullModes(void)
{
    return this->editSFShaderCullModes();
}
#endif

SFVec3f *TextureObjChunkBase::editSFShaderConstEye(void)
{
    editSField(ShaderConstEyeFieldMask);

    return &_sfShaderConstEye;
}

const SFVec3f *TextureObjChunkBase::getSFShaderConstEye(void) const
{
    return &_sfShaderConstEye;
}

#ifdef OSG_1_GET_COMPAT
SFVec3f             *TextureObjChunkBase::getSFShaderConstEye (void)
{
    return this->editSFShaderConstEye ();
}
#endif

SFReal32 *TextureObjChunkBase::editSFLodBias(void)
{
    editSField(LodBiasFieldMask);

    return &_sfLodBias;
}

const SFReal32 *TextureObjChunkBase::getSFLodBias(void) const
{
    return &_sfLodBias;
}

#ifdef OSG_1_GET_COMPAT
SFReal32            *TextureObjChunkBase::getSFLodBias        (void)
{
    return this->editSFLodBias        ();
}
#endif

SFGLenum *TextureObjChunkBase::editSFTarget(void)
{
    editSField(TargetFieldMask);

    return &_sfTarget;
}

const SFGLenum *TextureObjChunkBase::getSFTarget(void) const
{
    return &_sfTarget;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFTarget         (void)
{
    return this->editSFTarget         ();
}
#endif

SFInt32 *TextureObjChunkBase::editSFDirtyLeft(void)
{
    editSField(DirtyLeftFieldMask);

    return &_sfDirtyLeft;
}

const SFInt32 *TextureObjChunkBase::getSFDirtyLeft(void) const
{
    return &_sfDirtyLeft;
}

#ifdef OSG_1_GET_COMPAT
SFInt32             *TextureObjChunkBase::getSFDirtyLeft      (void)
{
    return this->editSFDirtyLeft      ();
}
#endif

SFInt32 *TextureObjChunkBase::editSFDirtyMinX(void)
{
    editSField(DirtyMinXFieldMask);

    return &_sfDirtyMinX;
}

const SFInt32 *TextureObjChunkBase::getSFDirtyMinX(void) const
{
    return &_sfDirtyMinX;
}

#ifdef OSG_1_GET_COMPAT
SFInt32             *TextureObjChunkBase::getSFDirtyMinX      (void)
{
    return this->editSFDirtyMinX      ();
}
#endif

SFInt32 *TextureObjChunkBase::editSFDirtyMaxX(void)
{
    editSField(DirtyMaxXFieldMask);

    return &_sfDirtyMaxX;
}

const SFInt32 *TextureObjChunkBase::getSFDirtyMaxX(void) const
{
    return &_sfDirtyMaxX;
}

#ifdef OSG_1_GET_COMPAT
SFInt32             *TextureObjChunkBase::getSFDirtyMaxX      (void)
{
    return this->editSFDirtyMaxX      ();
}
#endif

SFInt32 *TextureObjChunkBase::editSFDirtyMinY(void)
{
    editSField(DirtyMinYFieldMask);

    return &_sfDirtyMinY;
}

const SFInt32 *TextureObjChunkBase::getSFDirtyMinY(void) const
{
    return &_sfDirtyMinY;
}

#ifdef OSG_1_GET_COMPAT
SFInt32             *TextureObjChunkBase::getSFDirtyMinY      (void)
{
    return this->editSFDirtyMinY      ();
}
#endif

SFInt32 *TextureObjChunkBase::editSFDirtyMaxY(void)
{
    editSField(DirtyMaxYFieldMask);

    return &_sfDirtyMaxY;
}

const SFInt32 *TextureObjChunkBase::getSFDirtyMaxY(void) const
{
    return &_sfDirtyMaxY;
}

#ifdef OSG_1_GET_COMPAT
SFInt32             *TextureObjChunkBase::getSFDirtyMaxY      (void)
{
    return this->editSFDirtyMaxY      ();
}
#endif

SFInt32 *TextureObjChunkBase::editSFDirtyMinZ(void)
{
    editSField(DirtyMinZFieldMask);

    return &_sfDirtyMinZ;
}

const SFInt32 *TextureObjChunkBase::getSFDirtyMinZ(void) const
{
    return &_sfDirtyMinZ;
}

#ifdef OSG_1_GET_COMPAT
SFInt32             *TextureObjChunkBase::getSFDirtyMinZ      (void)
{
    return this->editSFDirtyMinZ      ();
}
#endif

SFInt32 *TextureObjChunkBase::editSFDirtyMaxZ(void)
{
    editSField(DirtyMaxZFieldMask);

    return &_sfDirtyMaxZ;
}

const SFInt32 *TextureObjChunkBase::getSFDirtyMaxZ(void) const
{
    return &_sfDirtyMaxZ;
}

#ifdef OSG_1_GET_COMPAT
SFInt32             *TextureObjChunkBase::getSFDirtyMaxZ      (void)
{
    return this->editSFDirtyMaxZ      ();
}
#endif

SFReal32 *TextureObjChunkBase::editSFAnisotropy(void)
{
    editSField(AnisotropyFieldMask);

    return &_sfAnisotropy;
}

const SFReal32 *TextureObjChunkBase::getSFAnisotropy(void) const
{
    return &_sfAnisotropy;
}

#ifdef OSG_1_GET_COMPAT
SFReal32            *TextureObjChunkBase::getSFAnisotropy     (void)
{
    return this->editSFAnisotropy     ();
}
#endif

SFColor4f *TextureObjChunkBase::editSFBorderColor(void)
{
    editSField(BorderColorFieldMask);

    return &_sfBorderColor;
}

const SFColor4f *TextureObjChunkBase::getSFBorderColor(void) const
{
    return &_sfBorderColor;
}

#ifdef OSG_1_GET_COMPAT
SFColor4f           *TextureObjChunkBase::getSFBorderColor    (void)
{
    return this->editSFBorderColor    ();
}
#endif

SFGLenum *TextureObjChunkBase::editSFCompareMode(void)
{
    editSField(CompareModeFieldMask);

    return &_sfCompareMode;
}

const SFGLenum *TextureObjChunkBase::getSFCompareMode(void) const
{
    return &_sfCompareMode;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFCompareMode    (void)
{
    return this->editSFCompareMode    ();
}
#endif

SFGLenum *TextureObjChunkBase::editSFCompareFunc(void)
{
    editSField(CompareFuncFieldMask);

    return &_sfCompareFunc;
}

const SFGLenum *TextureObjChunkBase::getSFCompareFunc(void) const
{
    return &_sfCompareFunc;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFCompareFunc    (void)
{
    return this->editSFCompareFunc    ();
}
#endif

SFGLenum *TextureObjChunkBase::editSFDepthMode(void)
{
    editSField(DepthModeFieldMask);

    return &_sfDepthMode;
}

const SFGLenum *TextureObjChunkBase::getSFDepthMode(void) const
{
    return &_sfDepthMode;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureObjChunkBase::getSFDepthMode      (void)
{
    return this->editSFDepthMode      ();
}
#endif


void TextureObjChunkBase::pushToField(      FieldContainerPtrConstArg pNewElement,
                                    const UInt32                    uiFieldId  )
{
    Inherited::pushToField(pNewElement, uiFieldId);

    if(uiFieldId == ImageFieldId)
    {
        static_cast<TextureObjChunk *>(this)->setImage(
            cast_dynamic<ImagePtr>(pNewElement));
    }
}

void TextureObjChunkBase::insertIntoMField(const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::insertIntoMField(uiIndex, pNewElement, uiFieldId);

}

void TextureObjChunkBase::replaceInMField (const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::replaceInMField(uiIndex, pNewElement, uiFieldId);

}

void TextureObjChunkBase::replaceInMField (      FieldContainerPtrConstArg pOldElement,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::replaceInMField(pOldElement, pNewElement, uiFieldId);

}

void TextureObjChunkBase::removeFromMField(const UInt32 uiIndex,
                                         const UInt32 uiFieldId)
{
    Inherited::removeFromMField(uiIndex, uiFieldId);

}

void TextureObjChunkBase::removeFromMField(      FieldContainerPtrConstArg pElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::removeFromMField(pElement, uiFieldId);

}

void TextureObjChunkBase::clearField(const UInt32 uiFieldId)
{
    Inherited::clearField(uiFieldId);

    if(uiFieldId == ImageFieldId)
    {
        static_cast<TextureObjChunk *>(this)->setImage(NullFC);
    }
}

/*********************************** Non-ptr code ********************************/
void TextureObjChunkBase::pushToShaderOffsetMatrix(const Real32& value)
{
    editMField(ShaderOffsetMatrixFieldMask, _mfShaderOffsetMatrix);
    _mfShaderOffsetMatrix.push_back(value);
}

void TextureObjChunkBase::insertIntoShaderOffsetMatrix(UInt32                uiIndex,
                                                   const Real32& value   )
{
    editMField(ShaderOffsetMatrixFieldMask, _mfShaderOffsetMatrix);

    MFReal32::iterator fieldIt = _mfShaderOffsetMatrix.begin();

    fieldIt += uiIndex;

    _mfShaderOffsetMatrix.insert(fieldIt, value);
}

void TextureObjChunkBase::replaceInShaderOffsetMatrix(UInt32                uiIndex,
                                                       const Real32& value   )
{
    if(uiIndex >= _mfShaderOffsetMatrix.size())
        return;

    editMField(ShaderOffsetMatrixFieldMask, _mfShaderOffsetMatrix);

    _mfShaderOffsetMatrix[uiIndex] = value;
}

void TextureObjChunkBase::replaceInShaderOffsetMatrix(const Real32& pOldElem,
                                                        const Real32& pNewElem)
{
    Int32  elemIdx = _mfShaderOffsetMatrix.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(ShaderOffsetMatrixFieldMask, _mfShaderOffsetMatrix);

        MFReal32::iterator fieldIt = _mfShaderOffsetMatrix.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void TextureObjChunkBase::removeFromShaderOffsetMatrix(UInt32 uiIndex)
{
    if(uiIndex < _mfShaderOffsetMatrix.size())
    {
        editMField(ShaderOffsetMatrixFieldMask, _mfShaderOffsetMatrix);

        MFReal32::iterator fieldIt = _mfShaderOffsetMatrix.begin();

        fieldIt += uiIndex;
        _mfShaderOffsetMatrix.erase(fieldIt);
    }
}

void TextureObjChunkBase::removeFromShaderOffsetMatrix(const Real32& value)
{
    Int32 iElemIdx = _mfShaderOffsetMatrix.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ShaderOffsetMatrixFieldMask, _mfShaderOffsetMatrix);

        MFReal32::iterator fieldIt = _mfShaderOffsetMatrix.begin();

        fieldIt += iElemIdx;

        _mfShaderOffsetMatrix.erase(fieldIt);
    }
}

void TextureObjChunkBase::clearShaderOffsetMatrix(void)
{
    editMField(ShaderOffsetMatrixFieldMask, _mfShaderOffsetMatrix);

    _mfShaderOffsetMatrix.clear();
}


/*------------------------------ access -----------------------------------*/

UInt32 TextureObjChunkBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ImageFieldMask & whichField))
    {
        returnValue += _sfImage.getBinSize();
    }
    if(FieldBits::NoField != (InternalFormatFieldMask & whichField))
    {
        returnValue += _sfInternalFormat.getBinSize();
    }
    if(FieldBits::NoField != (ExternalFormatFieldMask & whichField))
    {
        returnValue += _sfExternalFormat.getBinSize();
    }
    if(FieldBits::NoField != (ScaleFieldMask & whichField))
    {
        returnValue += _sfScale.getBinSize();
    }
    if(FieldBits::NoField != (FrameFieldMask & whichField))
    {
        returnValue += _sfFrame.getBinSize();
    }
    if(FieldBits::NoField != (MinFilterFieldMask & whichField))
    {
        returnValue += _sfMinFilter.getBinSize();
    }
    if(FieldBits::NoField != (MagFilterFieldMask & whichField))
    {
        returnValue += _sfMagFilter.getBinSize();
    }
    if(FieldBits::NoField != (WrapSFieldMask & whichField))
    {
        returnValue += _sfWrapS.getBinSize();
    }
    if(FieldBits::NoField != (WrapTFieldMask & whichField))
    {
        returnValue += _sfWrapT.getBinSize();
    }
    if(FieldBits::NoField != (WrapRFieldMask & whichField))
    {
        returnValue += _sfWrapR.getBinSize();
    }
    if(FieldBits::NoField != (EnvModeFieldMask & whichField))
    {
        returnValue += _sfEnvMode.getBinSize();
    }
    if(FieldBits::NoField != (EnvColorFieldMask & whichField))
    {
        returnValue += _sfEnvColor.getBinSize();
    }
    if(FieldBits::NoField != (EnvCombineRGBFieldMask & whichField))
    {
        returnValue += _sfEnvCombineRGB.getBinSize();
    }
    if(FieldBits::NoField != (EnvCombineAlphaFieldMask & whichField))
    {
        returnValue += _sfEnvCombineAlpha.getBinSize();
    }
    if(FieldBits::NoField != (EnvScaleRGBFieldMask & whichField))
    {
        returnValue += _sfEnvScaleRGB.getBinSize();
    }
    if(FieldBits::NoField != (EnvScaleAlphaFieldMask & whichField))
    {
        returnValue += _sfEnvScaleAlpha.getBinSize();
    }
    if(FieldBits::NoField != (EnvSource0RGBFieldMask & whichField))
    {
        returnValue += _sfEnvSource0RGB.getBinSize();
    }
    if(FieldBits::NoField != (EnvSource1RGBFieldMask & whichField))
    {
        returnValue += _sfEnvSource1RGB.getBinSize();
    }
    if(FieldBits::NoField != (EnvSource2RGBFieldMask & whichField))
    {
        returnValue += _sfEnvSource2RGB.getBinSize();
    }
    if(FieldBits::NoField != (EnvSource0AlphaFieldMask & whichField))
    {
        returnValue += _sfEnvSource0Alpha.getBinSize();
    }
    if(FieldBits::NoField != (EnvSource1AlphaFieldMask & whichField))
    {
        returnValue += _sfEnvSource1Alpha.getBinSize();
    }
    if(FieldBits::NoField != (EnvSource2AlphaFieldMask & whichField))
    {
        returnValue += _sfEnvSource2Alpha.getBinSize();
    }
    if(FieldBits::NoField != (EnvOperand0RGBFieldMask & whichField))
    {
        returnValue += _sfEnvOperand0RGB.getBinSize();
    }
    if(FieldBits::NoField != (EnvOperand1RGBFieldMask & whichField))
    {
        returnValue += _sfEnvOperand1RGB.getBinSize();
    }
    if(FieldBits::NoField != (EnvOperand2RGBFieldMask & whichField))
    {
        returnValue += _sfEnvOperand2RGB.getBinSize();
    }
    if(FieldBits::NoField != (EnvOperand0AlphaFieldMask & whichField))
    {
        returnValue += _sfEnvOperand0Alpha.getBinSize();
    }
    if(FieldBits::NoField != (EnvOperand1AlphaFieldMask & whichField))
    {
        returnValue += _sfEnvOperand1Alpha.getBinSize();
    }
    if(FieldBits::NoField != (EnvOperand2AlphaFieldMask & whichField))
    {
        returnValue += _sfEnvOperand2Alpha.getBinSize();
    }
    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        returnValue += _sfGLId.getBinSize();
    }
    if(FieldBits::NoField != (IgnoreGLForAspectFieldMask & whichField))
    {
        returnValue += _sfIgnoreGLForAspect.getBinSize();
    }
    if(FieldBits::NoField != (PointSpriteFieldMask & whichField))
    {
        returnValue += _sfPointSprite.getBinSize();
    }
    if(FieldBits::NoField != (PriorityFieldMask & whichField))
    {
        returnValue += _sfPriority.getBinSize();
    }
    if(FieldBits::NoField != (ShaderOperationFieldMask & whichField))
    {
        returnValue += _sfShaderOperation.getBinSize();
    }
    if(FieldBits::NoField != (ShaderInputFieldMask & whichField))
    {
        returnValue += _sfShaderInput.getBinSize();
    }
    if(FieldBits::NoField != (ShaderOffsetMatrixFieldMask & whichField))
    {
        returnValue += _mfShaderOffsetMatrix.getBinSize();
    }
    if(FieldBits::NoField != (ShaderOffsetScaleFieldMask & whichField))
    {
        returnValue += _sfShaderOffsetScale.getBinSize();
    }
    if(FieldBits::NoField != (ShaderOffsetBiasFieldMask & whichField))
    {
        returnValue += _sfShaderOffsetBias.getBinSize();
    }
    if(FieldBits::NoField != (ShaderRGBADotProductFieldMask & whichField))
    {
        returnValue += _sfShaderRGBADotProduct.getBinSize();
    }
    if(FieldBits::NoField != (ShaderCullModesFieldMask & whichField))
    {
        returnValue += _sfShaderCullModes.getBinSize();
    }
    if(FieldBits::NoField != (ShaderConstEyeFieldMask & whichField))
    {
        returnValue += _sfShaderConstEye.getBinSize();
    }
    if(FieldBits::NoField != (LodBiasFieldMask & whichField))
    {
        returnValue += _sfLodBias.getBinSize();
    }
    if(FieldBits::NoField != (TargetFieldMask & whichField))
    {
        returnValue += _sfTarget.getBinSize();
    }
    if(FieldBits::NoField != (DirtyLeftFieldMask & whichField))
    {
        returnValue += _sfDirtyLeft.getBinSize();
    }
    if(FieldBits::NoField != (DirtyMinXFieldMask & whichField))
    {
        returnValue += _sfDirtyMinX.getBinSize();
    }
    if(FieldBits::NoField != (DirtyMaxXFieldMask & whichField))
    {
        returnValue += _sfDirtyMaxX.getBinSize();
    }
    if(FieldBits::NoField != (DirtyMinYFieldMask & whichField))
    {
        returnValue += _sfDirtyMinY.getBinSize();
    }
    if(FieldBits::NoField != (DirtyMaxYFieldMask & whichField))
    {
        returnValue += _sfDirtyMaxY.getBinSize();
    }
    if(FieldBits::NoField != (DirtyMinZFieldMask & whichField))
    {
        returnValue += _sfDirtyMinZ.getBinSize();
    }
    if(FieldBits::NoField != (DirtyMaxZFieldMask & whichField))
    {
        returnValue += _sfDirtyMaxZ.getBinSize();
    }
    if(FieldBits::NoField != (AnisotropyFieldMask & whichField))
    {
        returnValue += _sfAnisotropy.getBinSize();
    }
    if(FieldBits::NoField != (BorderColorFieldMask & whichField))
    {
        returnValue += _sfBorderColor.getBinSize();
    }
    if(FieldBits::NoField != (CompareModeFieldMask & whichField))
    {
        returnValue += _sfCompareMode.getBinSize();
    }
    if(FieldBits::NoField != (CompareFuncFieldMask & whichField))
    {
        returnValue += _sfCompareFunc.getBinSize();
    }
    if(FieldBits::NoField != (DepthModeFieldMask & whichField))
    {
        returnValue += _sfDepthMode.getBinSize();
    }

    return returnValue;
}

void TextureObjChunkBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ImageFieldMask & whichField))
    {
        _sfImage.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InternalFormatFieldMask & whichField))
    {
        _sfInternalFormat.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ExternalFormatFieldMask & whichField))
    {
        _sfExternalFormat.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ScaleFieldMask & whichField))
    {
        _sfScale.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FrameFieldMask & whichField))
    {
        _sfFrame.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MinFilterFieldMask & whichField))
    {
        _sfMinFilter.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MagFilterFieldMask & whichField))
    {
        _sfMagFilter.copyToBin(pMem);
    }
    if(FieldBits::NoField != (WrapSFieldMask & whichField))
    {
        _sfWrapS.copyToBin(pMem);
    }
    if(FieldBits::NoField != (WrapTFieldMask & whichField))
    {
        _sfWrapT.copyToBin(pMem);
    }
    if(FieldBits::NoField != (WrapRFieldMask & whichField))
    {
        _sfWrapR.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvModeFieldMask & whichField))
    {
        _sfEnvMode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvColorFieldMask & whichField))
    {
        _sfEnvColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvCombineRGBFieldMask & whichField))
    {
        _sfEnvCombineRGB.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvCombineAlphaFieldMask & whichField))
    {
        _sfEnvCombineAlpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvScaleRGBFieldMask & whichField))
    {
        _sfEnvScaleRGB.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvScaleAlphaFieldMask & whichField))
    {
        _sfEnvScaleAlpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource0RGBFieldMask & whichField))
    {
        _sfEnvSource0RGB.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource1RGBFieldMask & whichField))
    {
        _sfEnvSource1RGB.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource2RGBFieldMask & whichField))
    {
        _sfEnvSource2RGB.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource0AlphaFieldMask & whichField))
    {
        _sfEnvSource0Alpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource1AlphaFieldMask & whichField))
    {
        _sfEnvSource1Alpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource2AlphaFieldMask & whichField))
    {
        _sfEnvSource2Alpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand0RGBFieldMask & whichField))
    {
        _sfEnvOperand0RGB.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand1RGBFieldMask & whichField))
    {
        _sfEnvOperand1RGB.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand2RGBFieldMask & whichField))
    {
        _sfEnvOperand2RGB.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand0AlphaFieldMask & whichField))
    {
        _sfEnvOperand0Alpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand1AlphaFieldMask & whichField))
    {
        _sfEnvOperand1Alpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand2AlphaFieldMask & whichField))
    {
        _sfEnvOperand2Alpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        _sfGLId.copyToBin(pMem);
    }
    if(FieldBits::NoField != (IgnoreGLForAspectFieldMask & whichField))
    {
        _sfIgnoreGLForAspect.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PointSpriteFieldMask & whichField))
    {
        _sfPointSprite.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PriorityFieldMask & whichField))
    {
        _sfPriority.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShaderOperationFieldMask & whichField))
    {
        _sfShaderOperation.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShaderInputFieldMask & whichField))
    {
        _sfShaderInput.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShaderOffsetMatrixFieldMask & whichField))
    {
        _mfShaderOffsetMatrix.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShaderOffsetScaleFieldMask & whichField))
    {
        _sfShaderOffsetScale.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShaderOffsetBiasFieldMask & whichField))
    {
        _sfShaderOffsetBias.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShaderRGBADotProductFieldMask & whichField))
    {
        _sfShaderRGBADotProduct.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShaderCullModesFieldMask & whichField))
    {
        _sfShaderCullModes.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShaderConstEyeFieldMask & whichField))
    {
        _sfShaderConstEye.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LodBiasFieldMask & whichField))
    {
        _sfLodBias.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TargetFieldMask & whichField))
    {
        _sfTarget.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DirtyLeftFieldMask & whichField))
    {
        _sfDirtyLeft.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMinXFieldMask & whichField))
    {
        _sfDirtyMinX.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMaxXFieldMask & whichField))
    {
        _sfDirtyMaxX.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMinYFieldMask & whichField))
    {
        _sfDirtyMinY.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMaxYFieldMask & whichField))
    {
        _sfDirtyMaxY.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMinZFieldMask & whichField))
    {
        _sfDirtyMinZ.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMaxZFieldMask & whichField))
    {
        _sfDirtyMaxZ.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AnisotropyFieldMask & whichField))
    {
        _sfAnisotropy.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BorderColorFieldMask & whichField))
    {
        _sfBorderColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CompareModeFieldMask & whichField))
    {
        _sfCompareMode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CompareFuncFieldMask & whichField))
    {
        _sfCompareFunc.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DepthModeFieldMask & whichField))
    {
        _sfDepthMode.copyToBin(pMem);
    }
}

void TextureObjChunkBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ImageFieldMask & whichField))
    {
        _sfImage.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InternalFormatFieldMask & whichField))
    {
        _sfInternalFormat.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ExternalFormatFieldMask & whichField))
    {
        _sfExternalFormat.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ScaleFieldMask & whichField))
    {
        _sfScale.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FrameFieldMask & whichField))
    {
        _sfFrame.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MinFilterFieldMask & whichField))
    {
        _sfMinFilter.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MagFilterFieldMask & whichField))
    {
        _sfMagFilter.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (WrapSFieldMask & whichField))
    {
        _sfWrapS.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (WrapTFieldMask & whichField))
    {
        _sfWrapT.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (WrapRFieldMask & whichField))
    {
        _sfWrapR.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvModeFieldMask & whichField))
    {
        _sfEnvMode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvColorFieldMask & whichField))
    {
        _sfEnvColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvCombineRGBFieldMask & whichField))
    {
        _sfEnvCombineRGB.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvCombineAlphaFieldMask & whichField))
    {
        _sfEnvCombineAlpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvScaleRGBFieldMask & whichField))
    {
        _sfEnvScaleRGB.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvScaleAlphaFieldMask & whichField))
    {
        _sfEnvScaleAlpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource0RGBFieldMask & whichField))
    {
        _sfEnvSource0RGB.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource1RGBFieldMask & whichField))
    {
        _sfEnvSource1RGB.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource2RGBFieldMask & whichField))
    {
        _sfEnvSource2RGB.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource0AlphaFieldMask & whichField))
    {
        _sfEnvSource0Alpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource1AlphaFieldMask & whichField))
    {
        _sfEnvSource1Alpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource2AlphaFieldMask & whichField))
    {
        _sfEnvSource2Alpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand0RGBFieldMask & whichField))
    {
        _sfEnvOperand0RGB.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand1RGBFieldMask & whichField))
    {
        _sfEnvOperand1RGB.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand2RGBFieldMask & whichField))
    {
        _sfEnvOperand2RGB.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand0AlphaFieldMask & whichField))
    {
        _sfEnvOperand0Alpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand1AlphaFieldMask & whichField))
    {
        _sfEnvOperand1Alpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand2AlphaFieldMask & whichField))
    {
        _sfEnvOperand2Alpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        _sfGLId.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (IgnoreGLForAspectFieldMask & whichField))
    {
        _sfIgnoreGLForAspect.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PointSpriteFieldMask & whichField))
    {
        _sfPointSprite.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PriorityFieldMask & whichField))
    {
        _sfPriority.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShaderOperationFieldMask & whichField))
    {
        _sfShaderOperation.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShaderInputFieldMask & whichField))
    {
        _sfShaderInput.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShaderOffsetMatrixFieldMask & whichField))
    {
        _mfShaderOffsetMatrix.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShaderOffsetScaleFieldMask & whichField))
    {
        _sfShaderOffsetScale.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShaderOffsetBiasFieldMask & whichField))
    {
        _sfShaderOffsetBias.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShaderRGBADotProductFieldMask & whichField))
    {
        _sfShaderRGBADotProduct.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShaderCullModesFieldMask & whichField))
    {
        _sfShaderCullModes.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShaderConstEyeFieldMask & whichField))
    {
        _sfShaderConstEye.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LodBiasFieldMask & whichField))
    {
        _sfLodBias.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TargetFieldMask & whichField))
    {
        _sfTarget.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DirtyLeftFieldMask & whichField))
    {
        _sfDirtyLeft.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMinXFieldMask & whichField))
    {
        _sfDirtyMinX.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMaxXFieldMask & whichField))
    {
        _sfDirtyMaxX.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMinYFieldMask & whichField))
    {
        _sfDirtyMinY.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMaxYFieldMask & whichField))
    {
        _sfDirtyMaxY.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMinZFieldMask & whichField))
    {
        _sfDirtyMinZ.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMaxZFieldMask & whichField))
    {
        _sfDirtyMaxZ.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AnisotropyFieldMask & whichField))
    {
        _sfAnisotropy.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BorderColorFieldMask & whichField))
    {
        _sfBorderColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CompareModeFieldMask & whichField))
    {
        _sfCompareMode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CompareFuncFieldMask & whichField))
    {
        _sfCompareFunc.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DepthModeFieldMask & whichField))
    {
        _sfDepthMode.copyFromBin(pMem);
    }
}

//! create an empty new instance of the class, do not copy the prototype
TextureObjChunkPtr TextureObjChunkBase::createEmpty(void)
{
    TextureObjChunkPtr returnValue;

    newPtr<TextureObjChunk>(returnValue);

    return returnValue;
}

FieldContainerPtr TextureObjChunkBase::shallowCopy(void) const
{
    TextureObjChunkPtr returnValue;

    newPtr(returnValue, dynamic_cast<const TextureObjChunk *>(this));

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

TextureObjChunkBase::TextureObjChunkBase(void) :
    Inherited(),
    _sfImage                  (),
    _sfInternalFormat         (GLenum(GL_NONE)),
    _sfExternalFormat         (GLenum(GL_NONE)),
    _sfScale                  (bool(true)),
    _sfFrame                  (UInt32(0)),
    _sfMinFilter              (GLenum(GL_LINEAR_MIPMAP_LINEAR)),
    _sfMagFilter              (GLenum(GL_LINEAR)),
    _sfWrapS                  (GLenum(GL_REPEAT)),
    _sfWrapT                  (GLenum(GL_REPEAT)),
    _sfWrapR                  (GLenum(GL_REPEAT)),
    _sfEnvMode                (GLenum(GL_REPLACE)),
    _sfEnvColor               (Color4f(0,0,0,0)),
    _sfEnvCombineRGB          (GLenum(GL_MODULATE)),
    _sfEnvCombineAlpha        (GLenum(GL_MODULATE)),
    _sfEnvScaleRGB            (Real32(1.0f)),
    _sfEnvScaleAlpha          (Real32(1.0f)),
    _sfEnvSource0RGB          (GLenum(GL_TEXTURE)),
    _sfEnvSource1RGB          (GLenum(GL_PREVIOUS_EXT)),
    _sfEnvSource2RGB          (GLenum(GL_CONSTANT_EXT)),
    _sfEnvSource0Alpha        (GLenum(GL_TEXTURE)),
    _sfEnvSource1Alpha        (GLenum(GL_PREVIOUS_EXT)),
    _sfEnvSource2Alpha        (GLenum(GL_CONSTANT_EXT)),
    _sfEnvOperand0RGB         (GLenum(GL_SRC_COLOR)),
    _sfEnvOperand1RGB         (GLenum(GL_SRC_COLOR)),
    _sfEnvOperand2RGB         (GLenum(GL_SRC_ALPHA)),
    _sfEnvOperand0Alpha       (GLenum(GL_SRC_ALPHA)),
    _sfEnvOperand1Alpha       (GLenum(GL_SRC_ALPHA)),
    _sfEnvOperand2Alpha       (GLenum(GL_SRC_ALPHA)),
    _sfGLId                   (GLenum(0)),
    _sfIgnoreGLForAspect      (Int32(-1)),
    _sfPointSprite            (bool(GL_FALSE)),
    _sfPriority               (Real32(1.f)),
    _sfShaderOperation        (GLenum(GL_NONE)),
    _sfShaderInput            (GLenum(GL_NONE)),
    _mfShaderOffsetMatrix     (),
    _sfShaderOffsetScale      (Real32(1.f)),
    _sfShaderOffsetBias       (Real32(0.f)),
    _sfShaderRGBADotProduct   (GLenum(GL_NONE)),
    _sfShaderCullModes        (UInt8(0)),
    _sfShaderConstEye         (),
    _sfLodBias                (Real32(0.f)),
    _sfTarget                 (GLenum(GL_NONE)),
    _sfDirtyLeft              (Int32(-1)),
    _sfDirtyMinX              (Int32(-1)),
    _sfDirtyMaxX              (Int32(-1)),
    _sfDirtyMinY              (Int32(-1)),
    _sfDirtyMaxY              (Int32(-1)),
    _sfDirtyMinZ              (Int32(-1)),
    _sfDirtyMaxZ              (Int32(-1)),
    _sfAnisotropy             (Real32(1.0f)),
    _sfBorderColor            (Color4f(0,0,0,0)),
    _sfCompareMode            (GLenum(GL_NONE)),
    _sfCompareFunc            (GLenum(GL_LEQUAL)),
    _sfDepthMode              (GLenum(GL_LUMINANCE))
{
}

TextureObjChunkBase::TextureObjChunkBase(const TextureObjChunkBase &source) :
    Inherited(source),
    _sfImage                  (),
    _sfInternalFormat         (source._sfInternalFormat         ),
    _sfExternalFormat         (source._sfExternalFormat         ),
    _sfScale                  (source._sfScale                  ),
    _sfFrame                  (source._sfFrame                  ),
    _sfMinFilter              (source._sfMinFilter              ),
    _sfMagFilter              (source._sfMagFilter              ),
    _sfWrapS                  (source._sfWrapS                  ),
    _sfWrapT                  (source._sfWrapT                  ),
    _sfWrapR                  (source._sfWrapR                  ),
    _sfEnvMode                (source._sfEnvMode                ),
    _sfEnvColor               (source._sfEnvColor               ),
    _sfEnvCombineRGB          (source._sfEnvCombineRGB          ),
    _sfEnvCombineAlpha        (source._sfEnvCombineAlpha        ),
    _sfEnvScaleRGB            (source._sfEnvScaleRGB            ),
    _sfEnvScaleAlpha          (source._sfEnvScaleAlpha          ),
    _sfEnvSource0RGB          (source._sfEnvSource0RGB          ),
    _sfEnvSource1RGB          (source._sfEnvSource1RGB          ),
    _sfEnvSource2RGB          (source._sfEnvSource2RGB          ),
    _sfEnvSource0Alpha        (source._sfEnvSource0Alpha        ),
    _sfEnvSource1Alpha        (source._sfEnvSource1Alpha        ),
    _sfEnvSource2Alpha        (source._sfEnvSource2Alpha        ),
    _sfEnvOperand0RGB         (source._sfEnvOperand0RGB         ),
    _sfEnvOperand1RGB         (source._sfEnvOperand1RGB         ),
    _sfEnvOperand2RGB         (source._sfEnvOperand2RGB         ),
    _sfEnvOperand0Alpha       (source._sfEnvOperand0Alpha       ),
    _sfEnvOperand1Alpha       (source._sfEnvOperand1Alpha       ),
    _sfEnvOperand2Alpha       (source._sfEnvOperand2Alpha       ),
    _sfGLId                   (source._sfGLId                   ),
    _sfIgnoreGLForAspect      (source._sfIgnoreGLForAspect      ),
    _sfPointSprite            (source._sfPointSprite            ),
    _sfPriority               (source._sfPriority               ),
    _sfShaderOperation        (source._sfShaderOperation        ),
    _sfShaderInput            (source._sfShaderInput            ),
    _mfShaderOffsetMatrix     (source._mfShaderOffsetMatrix     ),
    _sfShaderOffsetScale      (source._sfShaderOffsetScale      ),
    _sfShaderOffsetBias       (source._sfShaderOffsetBias       ),
    _sfShaderRGBADotProduct   (source._sfShaderRGBADotProduct   ),
    _sfShaderCullModes        (source._sfShaderCullModes        ),
    _sfShaderConstEye         (source._sfShaderConstEye         ),
    _sfLodBias                (source._sfLodBias                ),
    _sfTarget                 (source._sfTarget                 ),
    _sfDirtyLeft              (source._sfDirtyLeft              ),
    _sfDirtyMinX              (source._sfDirtyMinX              ),
    _sfDirtyMaxX              (source._sfDirtyMaxX              ),
    _sfDirtyMinY              (source._sfDirtyMinY              ),
    _sfDirtyMaxY              (source._sfDirtyMaxY              ),
    _sfDirtyMinZ              (source._sfDirtyMinZ              ),
    _sfDirtyMaxZ              (source._sfDirtyMaxZ              ),
    _sfAnisotropy             (source._sfAnisotropy             ),
    _sfBorderColor            (source._sfBorderColor            ),
    _sfCompareMode            (source._sfCompareMode            ),
    _sfCompareFunc            (source._sfCompareFunc            ),
    _sfDepthMode              (source._sfDepthMode              )
{
}

/*-------------------------- destructors ----------------------------------*/

TextureObjChunkBase::~TextureObjChunkBase(void)
{
}

void TextureObjChunkBase::onCreate(const TextureObjChunk *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {

        this->setImage(source->getImage());
    }
}

#ifdef OSG_MT_FIELDCONTAINERPTR
void TextureObjChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo,
                                        UInt32             uiCopyOffset)
{
    this->execSync(static_cast<TextureObjChunkBase *>(&oFrom),
                   whichField,
                   syncMode,
                   uiSyncInfo,
                   uiCopyOffset);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
void TextureObjChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<TextureObjChunkBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif

#if 0
void TextureObjChunkBase::execBeginEditV(ConstFieldMaskArg whichField,
                                       UInt32            uiAspect,
                                       UInt32            uiContainerSize)
{
    this->execBeginEdit(whichField, uiAspect, uiContainerSize);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr TextureObjChunkBase::createAspectCopy(void) const
{
    TextureObjChunkPtr returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const TextureObjChunk *>(this));

    return returnValue;
}
#endif

void TextureObjChunkBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<TextureObjChunk *>(this)->setImage(NullFC);

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfShaderOffsetMatrix.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
}


OSG_END_NAMESPACE

#include "OSGSFieldAdaptor.ins"
#include "OSGMFieldAdaptor.ins"

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<TextureObjChunkPtr>::_type("TextureObjChunkPtr", "TextureBaseChunkPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(TextureObjChunkPtr)

OSG_FIELD_DLLEXPORT_DEF2(SFieldAdaptor, TextureObjChunkPtr, SFFieldContainerPtr);
OSG_FIELD_DLLEXPORT_DEF2(MFieldAdaptor, TextureObjChunkPtr, MFFieldContainerPtr);

OSG_END_NAMESPACE
