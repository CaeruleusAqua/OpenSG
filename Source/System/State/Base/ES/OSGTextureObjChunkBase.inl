/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextureObjChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &TextureObjChunkBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 TextureObjChunkBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 TextureObjChunkBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the TextureObjChunk::_sfImage field.
inline
ImagePtrConst TextureObjChunkBase::getImage(void) const
{
    return _sfImage.getValue();
}

//! Set the value of the TextureObjChunk::_sfImage field.
inline
void TextureObjChunkBase::setImage(ImagePtrConstArg value)
{
    editSField(ImageFieldMask);

    setRefd(_sfImage.getValue(), value);

}
//! Get the value of the TextureObjChunk::_sfInternalFormat field.

inline
GLenum &TextureObjChunkBase::editInternalFormat(void)
{
    editSField(InternalFormatFieldMask);

    return _sfInternalFormat.getValue();
}

//! Get the value of the TextureObjChunk::_sfInternalFormat field.
inline
const GLenum &TextureObjChunkBase::getInternalFormat(void) const
{
    return _sfInternalFormat.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getInternalFormat (void)
{
    return this->editInternalFormat ();
}
#endif

//! Set the value of the TextureObjChunk::_sfInternalFormat field.
inline
void TextureObjChunkBase::setInternalFormat(const GLenum &value)
{
    editSField(InternalFormatFieldMask);

    _sfInternalFormat.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfExternalFormat field.

inline
GLenum &TextureObjChunkBase::editExternalFormat(void)
{
    editSField(ExternalFormatFieldMask);

    return _sfExternalFormat.getValue();
}

//! Get the value of the TextureObjChunk::_sfExternalFormat field.
inline
const GLenum &TextureObjChunkBase::getExternalFormat(void) const
{
    return _sfExternalFormat.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getExternalFormat (void)
{
    return this->editExternalFormat ();
}
#endif

//! Set the value of the TextureObjChunk::_sfExternalFormat field.
inline
void TextureObjChunkBase::setExternalFormat(const GLenum &value)
{
    editSField(ExternalFormatFieldMask);

    _sfExternalFormat.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfScale field.

inline
bool &TextureObjChunkBase::editScale(void)
{
    editSField(ScaleFieldMask);

    return _sfScale.getValue();
}

//! Get the value of the TextureObjChunk::_sfScale field.
inline
const bool &TextureObjChunkBase::getScale(void) const
{
    return _sfScale.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
bool                &TextureObjChunkBase::getScale          (void)
{
    return this->editScale          ();
}
#endif

//! Set the value of the TextureObjChunk::_sfScale field.
inline
void TextureObjChunkBase::setScale(const bool &value)
{
    editSField(ScaleFieldMask);

    _sfScale.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfFrame field.

inline
UInt32 &TextureObjChunkBase::editFrame(void)
{
    editSField(FrameFieldMask);

    return _sfFrame.getValue();
}

//! Get the value of the TextureObjChunk::_sfFrame field.
inline
const UInt32 &TextureObjChunkBase::getFrame(void) const
{
    return _sfFrame.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
UInt32              &TextureObjChunkBase::getFrame          (void)
{
    return this->editFrame          ();
}
#endif

//! Set the value of the TextureObjChunk::_sfFrame field.
inline
void TextureObjChunkBase::setFrame(const UInt32 &value)
{
    editSField(FrameFieldMask);

    _sfFrame.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfMinFilter field.

inline
GLenum &TextureObjChunkBase::editMinFilter(void)
{
    editSField(MinFilterFieldMask);

    return _sfMinFilter.getValue();
}

//! Get the value of the TextureObjChunk::_sfMinFilter field.
inline
const GLenum &TextureObjChunkBase::getMinFilter(void) const
{
    return _sfMinFilter.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getMinFilter      (void)
{
    return this->editMinFilter      ();
}
#endif

//! Set the value of the TextureObjChunk::_sfMinFilter field.
inline
void TextureObjChunkBase::setMinFilter(const GLenum &value)
{
    editSField(MinFilterFieldMask);

    _sfMinFilter.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfMagFilter field.

inline
GLenum &TextureObjChunkBase::editMagFilter(void)
{
    editSField(MagFilterFieldMask);

    return _sfMagFilter.getValue();
}

//! Get the value of the TextureObjChunk::_sfMagFilter field.
inline
const GLenum &TextureObjChunkBase::getMagFilter(void) const
{
    return _sfMagFilter.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getMagFilter      (void)
{
    return this->editMagFilter      ();
}
#endif

//! Set the value of the TextureObjChunk::_sfMagFilter field.
inline
void TextureObjChunkBase::setMagFilter(const GLenum &value)
{
    editSField(MagFilterFieldMask);

    _sfMagFilter.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfWrapS field.

inline
GLenum &TextureObjChunkBase::editWrapS(void)
{
    editSField(WrapSFieldMask);

    return _sfWrapS.getValue();
}

//! Get the value of the TextureObjChunk::_sfWrapS field.
inline
const GLenum &TextureObjChunkBase::getWrapS(void) const
{
    return _sfWrapS.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getWrapS          (void)
{
    return this->editWrapS          ();
}
#endif

//! Set the value of the TextureObjChunk::_sfWrapS field.
inline
void TextureObjChunkBase::setWrapS(const GLenum &value)
{
    editSField(WrapSFieldMask);

    _sfWrapS.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfWrapT field.

inline
GLenum &TextureObjChunkBase::editWrapT(void)
{
    editSField(WrapTFieldMask);

    return _sfWrapT.getValue();
}

//! Get the value of the TextureObjChunk::_sfWrapT field.
inline
const GLenum &TextureObjChunkBase::getWrapT(void) const
{
    return _sfWrapT.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getWrapT          (void)
{
    return this->editWrapT          ();
}
#endif

//! Set the value of the TextureObjChunk::_sfWrapT field.
inline
void TextureObjChunkBase::setWrapT(const GLenum &value)
{
    editSField(WrapTFieldMask);

    _sfWrapT.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfWrapR field.

inline
GLenum &TextureObjChunkBase::editWrapR(void)
{
    editSField(WrapRFieldMask);

    return _sfWrapR.getValue();
}

//! Get the value of the TextureObjChunk::_sfWrapR field.
inline
const GLenum &TextureObjChunkBase::getWrapR(void) const
{
    return _sfWrapR.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getWrapR          (void)
{
    return this->editWrapR          ();
}
#endif

//! Set the value of the TextureObjChunk::_sfWrapR field.
inline
void TextureObjChunkBase::setWrapR(const GLenum &value)
{
    editSField(WrapRFieldMask);

    _sfWrapR.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfEnvMode field.

inline
GLenum &TextureObjChunkBase::editEnvMode(void)
{
    editSField(EnvModeFieldMask);

    return _sfEnvMode.getValue();
}

//! Get the value of the TextureObjChunk::_sfEnvMode field.
inline
const GLenum &TextureObjChunkBase::getEnvMode(void) const
{
    return _sfEnvMode.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getEnvMode        (void)
{
    return this->editEnvMode        ();
}
#endif

//! Set the value of the TextureObjChunk::_sfEnvMode field.
inline
void TextureObjChunkBase::setEnvMode(const GLenum &value)
{
    editSField(EnvModeFieldMask);

    _sfEnvMode.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfEnvColor field.

inline
Color4f &TextureObjChunkBase::editEnvColor(void)
{
    editSField(EnvColorFieldMask);

    return _sfEnvColor.getValue();
}

//! Get the value of the TextureObjChunk::_sfEnvColor field.
inline
const Color4f &TextureObjChunkBase::getEnvColor(void) const
{
    return _sfEnvColor.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
Color4f             &TextureObjChunkBase::getEnvColor       (void)
{
    return this->editEnvColor       ();
}
#endif

//! Set the value of the TextureObjChunk::_sfEnvColor field.
inline
void TextureObjChunkBase::setEnvColor(const Color4f &value)
{
    editSField(EnvColorFieldMask);

    _sfEnvColor.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfEnvCombineRGB field.

inline
GLenum &TextureObjChunkBase::editEnvCombineRGB(void)
{
    editSField(EnvCombineRGBFieldMask);

    return _sfEnvCombineRGB.getValue();
}

//! Get the value of the TextureObjChunk::_sfEnvCombineRGB field.
inline
const GLenum &TextureObjChunkBase::getEnvCombineRGB(void) const
{
    return _sfEnvCombineRGB.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getEnvCombineRGB  (void)
{
    return this->editEnvCombineRGB  ();
}
#endif

//! Set the value of the TextureObjChunk::_sfEnvCombineRGB field.
inline
void TextureObjChunkBase::setEnvCombineRGB(const GLenum &value)
{
    editSField(EnvCombineRGBFieldMask);

    _sfEnvCombineRGB.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfEnvCombineAlpha field.

inline
GLenum &TextureObjChunkBase::editEnvCombineAlpha(void)
{
    editSField(EnvCombineAlphaFieldMask);

    return _sfEnvCombineAlpha.getValue();
}

//! Get the value of the TextureObjChunk::_sfEnvCombineAlpha field.
inline
const GLenum &TextureObjChunkBase::getEnvCombineAlpha(void) const
{
    return _sfEnvCombineAlpha.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getEnvCombineAlpha(void)
{
    return this->editEnvCombineAlpha();
}
#endif

//! Set the value of the TextureObjChunk::_sfEnvCombineAlpha field.
inline
void TextureObjChunkBase::setEnvCombineAlpha(const GLenum &value)
{
    editSField(EnvCombineAlphaFieldMask);

    _sfEnvCombineAlpha.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfEnvScaleRGB field.

inline
Real32 &TextureObjChunkBase::editEnvScaleRGB(void)
{
    editSField(EnvScaleRGBFieldMask);

    return _sfEnvScaleRGB.getValue();
}

//! Get the value of the TextureObjChunk::_sfEnvScaleRGB field.
inline
const Real32 &TextureObjChunkBase::getEnvScaleRGB(void) const
{
    return _sfEnvScaleRGB.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
Real32              &TextureObjChunkBase::getEnvScaleRGB    (void)
{
    return this->editEnvScaleRGB    ();
}
#endif

//! Set the value of the TextureObjChunk::_sfEnvScaleRGB field.
inline
void TextureObjChunkBase::setEnvScaleRGB(const Real32 &value)
{
    editSField(EnvScaleRGBFieldMask);

    _sfEnvScaleRGB.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfEnvScaleAlpha field.

inline
Real32 &TextureObjChunkBase::editEnvScaleAlpha(void)
{
    editSField(EnvScaleAlphaFieldMask);

    return _sfEnvScaleAlpha.getValue();
}

//! Get the value of the TextureObjChunk::_sfEnvScaleAlpha field.
inline
const Real32 &TextureObjChunkBase::getEnvScaleAlpha(void) const
{
    return _sfEnvScaleAlpha.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
Real32              &TextureObjChunkBase::getEnvScaleAlpha  (void)
{
    return this->editEnvScaleAlpha  ();
}
#endif

//! Set the value of the TextureObjChunk::_sfEnvScaleAlpha field.
inline
void TextureObjChunkBase::setEnvScaleAlpha(const Real32 &value)
{
    editSField(EnvScaleAlphaFieldMask);

    _sfEnvScaleAlpha.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfEnvSource0RGB field.

inline
GLenum &TextureObjChunkBase::editEnvSource0RGB(void)
{
    editSField(EnvSource0RGBFieldMask);

    return _sfEnvSource0RGB.getValue();
}

//! Get the value of the TextureObjChunk::_sfEnvSource0RGB field.
inline
const GLenum &TextureObjChunkBase::getEnvSource0RGB(void) const
{
    return _sfEnvSource0RGB.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getEnvSource0RGB  (void)
{
    return this->editEnvSource0RGB  ();
}
#endif

//! Set the value of the TextureObjChunk::_sfEnvSource0RGB field.
inline
void TextureObjChunkBase::setEnvSource0RGB(const GLenum &value)
{
    editSField(EnvSource0RGBFieldMask);

    _sfEnvSource0RGB.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfEnvSource1RGB field.

inline
GLenum &TextureObjChunkBase::editEnvSource1RGB(void)
{
    editSField(EnvSource1RGBFieldMask);

    return _sfEnvSource1RGB.getValue();
}

//! Get the value of the TextureObjChunk::_sfEnvSource1RGB field.
inline
const GLenum &TextureObjChunkBase::getEnvSource1RGB(void) const
{
    return _sfEnvSource1RGB.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getEnvSource1RGB  (void)
{
    return this->editEnvSource1RGB  ();
}
#endif

//! Set the value of the TextureObjChunk::_sfEnvSource1RGB field.
inline
void TextureObjChunkBase::setEnvSource1RGB(const GLenum &value)
{
    editSField(EnvSource1RGBFieldMask);

    _sfEnvSource1RGB.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfEnvSource2RGB field.

inline
GLenum &TextureObjChunkBase::editEnvSource2RGB(void)
{
    editSField(EnvSource2RGBFieldMask);

    return _sfEnvSource2RGB.getValue();
}

//! Get the value of the TextureObjChunk::_sfEnvSource2RGB field.
inline
const GLenum &TextureObjChunkBase::getEnvSource2RGB(void) const
{
    return _sfEnvSource2RGB.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getEnvSource2RGB  (void)
{
    return this->editEnvSource2RGB  ();
}
#endif

//! Set the value of the TextureObjChunk::_sfEnvSource2RGB field.
inline
void TextureObjChunkBase::setEnvSource2RGB(const GLenum &value)
{
    editSField(EnvSource2RGBFieldMask);

    _sfEnvSource2RGB.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfEnvSource0Alpha field.

inline
GLenum &TextureObjChunkBase::editEnvSource0Alpha(void)
{
    editSField(EnvSource0AlphaFieldMask);

    return _sfEnvSource0Alpha.getValue();
}

//! Get the value of the TextureObjChunk::_sfEnvSource0Alpha field.
inline
const GLenum &TextureObjChunkBase::getEnvSource0Alpha(void) const
{
    return _sfEnvSource0Alpha.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getEnvSource0Alpha(void)
{
    return this->editEnvSource0Alpha();
}
#endif

//! Set the value of the TextureObjChunk::_sfEnvSource0Alpha field.
inline
void TextureObjChunkBase::setEnvSource0Alpha(const GLenum &value)
{
    editSField(EnvSource0AlphaFieldMask);

    _sfEnvSource0Alpha.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfEnvSource1Alpha field.

inline
GLenum &TextureObjChunkBase::editEnvSource1Alpha(void)
{
    editSField(EnvSource1AlphaFieldMask);

    return _sfEnvSource1Alpha.getValue();
}

//! Get the value of the TextureObjChunk::_sfEnvSource1Alpha field.
inline
const GLenum &TextureObjChunkBase::getEnvSource1Alpha(void) const
{
    return _sfEnvSource1Alpha.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getEnvSource1Alpha(void)
{
    return this->editEnvSource1Alpha();
}
#endif

//! Set the value of the TextureObjChunk::_sfEnvSource1Alpha field.
inline
void TextureObjChunkBase::setEnvSource1Alpha(const GLenum &value)
{
    editSField(EnvSource1AlphaFieldMask);

    _sfEnvSource1Alpha.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfEnvSource2Alpha field.

inline
GLenum &TextureObjChunkBase::editEnvSource2Alpha(void)
{
    editSField(EnvSource2AlphaFieldMask);

    return _sfEnvSource2Alpha.getValue();
}

//! Get the value of the TextureObjChunk::_sfEnvSource2Alpha field.
inline
const GLenum &TextureObjChunkBase::getEnvSource2Alpha(void) const
{
    return _sfEnvSource2Alpha.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getEnvSource2Alpha(void)
{
    return this->editEnvSource2Alpha();
}
#endif

//! Set the value of the TextureObjChunk::_sfEnvSource2Alpha field.
inline
void TextureObjChunkBase::setEnvSource2Alpha(const GLenum &value)
{
    editSField(EnvSource2AlphaFieldMask);

    _sfEnvSource2Alpha.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfEnvOperand0RGB field.

inline
GLenum &TextureObjChunkBase::editEnvOperand0RGB(void)
{
    editSField(EnvOperand0RGBFieldMask);

    return _sfEnvOperand0RGB.getValue();
}

//! Get the value of the TextureObjChunk::_sfEnvOperand0RGB field.
inline
const GLenum &TextureObjChunkBase::getEnvOperand0RGB(void) const
{
    return _sfEnvOperand0RGB.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getEnvOperand0RGB (void)
{
    return this->editEnvOperand0RGB ();
}
#endif

//! Set the value of the TextureObjChunk::_sfEnvOperand0RGB field.
inline
void TextureObjChunkBase::setEnvOperand0RGB(const GLenum &value)
{
    editSField(EnvOperand0RGBFieldMask);

    _sfEnvOperand0RGB.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfEnvOperand1RGB field.

inline
GLenum &TextureObjChunkBase::editEnvOperand1RGB(void)
{
    editSField(EnvOperand1RGBFieldMask);

    return _sfEnvOperand1RGB.getValue();
}

//! Get the value of the TextureObjChunk::_sfEnvOperand1RGB field.
inline
const GLenum &TextureObjChunkBase::getEnvOperand1RGB(void) const
{
    return _sfEnvOperand1RGB.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getEnvOperand1RGB (void)
{
    return this->editEnvOperand1RGB ();
}
#endif

//! Set the value of the TextureObjChunk::_sfEnvOperand1RGB field.
inline
void TextureObjChunkBase::setEnvOperand1RGB(const GLenum &value)
{
    editSField(EnvOperand1RGBFieldMask);

    _sfEnvOperand1RGB.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfEnvOperand2RGB field.

inline
GLenum &TextureObjChunkBase::editEnvOperand2RGB(void)
{
    editSField(EnvOperand2RGBFieldMask);

    return _sfEnvOperand2RGB.getValue();
}

//! Get the value of the TextureObjChunk::_sfEnvOperand2RGB field.
inline
const GLenum &TextureObjChunkBase::getEnvOperand2RGB(void) const
{
    return _sfEnvOperand2RGB.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getEnvOperand2RGB (void)
{
    return this->editEnvOperand2RGB ();
}
#endif

//! Set the value of the TextureObjChunk::_sfEnvOperand2RGB field.
inline
void TextureObjChunkBase::setEnvOperand2RGB(const GLenum &value)
{
    editSField(EnvOperand2RGBFieldMask);

    _sfEnvOperand2RGB.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfEnvOperand0Alpha field.

inline
GLenum &TextureObjChunkBase::editEnvOperand0Alpha(void)
{
    editSField(EnvOperand0AlphaFieldMask);

    return _sfEnvOperand0Alpha.getValue();
}

//! Get the value of the TextureObjChunk::_sfEnvOperand0Alpha field.
inline
const GLenum &TextureObjChunkBase::getEnvOperand0Alpha(void) const
{
    return _sfEnvOperand0Alpha.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getEnvOperand0Alpha(void)
{
    return this->editEnvOperand0Alpha();
}
#endif

//! Set the value of the TextureObjChunk::_sfEnvOperand0Alpha field.
inline
void TextureObjChunkBase::setEnvOperand0Alpha(const GLenum &value)
{
    editSField(EnvOperand0AlphaFieldMask);

    _sfEnvOperand0Alpha.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfEnvOperand1Alpha field.

inline
GLenum &TextureObjChunkBase::editEnvOperand1Alpha(void)
{
    editSField(EnvOperand1AlphaFieldMask);

    return _sfEnvOperand1Alpha.getValue();
}

//! Get the value of the TextureObjChunk::_sfEnvOperand1Alpha field.
inline
const GLenum &TextureObjChunkBase::getEnvOperand1Alpha(void) const
{
    return _sfEnvOperand1Alpha.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getEnvOperand1Alpha(void)
{
    return this->editEnvOperand1Alpha();
}
#endif

//! Set the value of the TextureObjChunk::_sfEnvOperand1Alpha field.
inline
void TextureObjChunkBase::setEnvOperand1Alpha(const GLenum &value)
{
    editSField(EnvOperand1AlphaFieldMask);

    _sfEnvOperand1Alpha.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfEnvOperand2Alpha field.

inline
GLenum &TextureObjChunkBase::editEnvOperand2Alpha(void)
{
    editSField(EnvOperand2AlphaFieldMask);

    return _sfEnvOperand2Alpha.getValue();
}

//! Get the value of the TextureObjChunk::_sfEnvOperand2Alpha field.
inline
const GLenum &TextureObjChunkBase::getEnvOperand2Alpha(void) const
{
    return _sfEnvOperand2Alpha.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getEnvOperand2Alpha(void)
{
    return this->editEnvOperand2Alpha();
}
#endif

//! Set the value of the TextureObjChunk::_sfEnvOperand2Alpha field.
inline
void TextureObjChunkBase::setEnvOperand2Alpha(const GLenum &value)
{
    editSField(EnvOperand2AlphaFieldMask);

    _sfEnvOperand2Alpha.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfGLId field.

inline
GLenum &TextureObjChunkBase::editGLId(void)
{
    editSField(GLIdFieldMask);

    return _sfGLId.getValue();
}

//! Get the value of the TextureObjChunk::_sfGLId field.
inline
const GLenum &TextureObjChunkBase::getGLId(void) const
{
    return _sfGLId.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getGLId           (void)
{
    return this->editGLId           ();
}
#endif

//! Set the value of the TextureObjChunk::_sfGLId field.
inline
void TextureObjChunkBase::setGLId(const GLenum &value)
{
    editSField(GLIdFieldMask);

    _sfGLId.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfIgnoreGLForAspect field.

inline
Int32 &TextureObjChunkBase::editIgnoreGLForAspect(void)
{
    editSField(IgnoreGLForAspectFieldMask);

    return _sfIgnoreGLForAspect.getValue();
}

//! Get the value of the TextureObjChunk::_sfIgnoreGLForAspect field.
inline
const Int32 &TextureObjChunkBase::getIgnoreGLForAspect(void) const
{
    return _sfIgnoreGLForAspect.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
Int32               &TextureObjChunkBase::getIgnoreGLForAspect(void)
{
    return this->editIgnoreGLForAspect();
}
#endif

//! Set the value of the TextureObjChunk::_sfIgnoreGLForAspect field.
inline
void TextureObjChunkBase::setIgnoreGLForAspect(const Int32 &value)
{
    editSField(IgnoreGLForAspectFieldMask);

    _sfIgnoreGLForAspect.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfPointSprite field.

inline
bool &TextureObjChunkBase::editPointSprite(void)
{
    editSField(PointSpriteFieldMask);

    return _sfPointSprite.getValue();
}

//! Get the value of the TextureObjChunk::_sfPointSprite field.
inline
const bool &TextureObjChunkBase::getPointSprite(void) const
{
    return _sfPointSprite.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
bool                &TextureObjChunkBase::getPointSprite    (void)
{
    return this->editPointSprite    ();
}
#endif

//! Set the value of the TextureObjChunk::_sfPointSprite field.
inline
void TextureObjChunkBase::setPointSprite(const bool &value)
{
    editSField(PointSpriteFieldMask);

    _sfPointSprite.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfPriority field.

inline
Real32 &TextureObjChunkBase::editPriority(void)
{
    editSField(PriorityFieldMask);

    return _sfPriority.getValue();
}

//! Get the value of the TextureObjChunk::_sfPriority field.
inline
const Real32 &TextureObjChunkBase::getPriority(void) const
{
    return _sfPriority.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
Real32              &TextureObjChunkBase::getPriority       (void)
{
    return this->editPriority       ();
}
#endif

//! Set the value of the TextureObjChunk::_sfPriority field.
inline
void TextureObjChunkBase::setPriority(const Real32 &value)
{
    editSField(PriorityFieldMask);

    _sfPriority.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfShaderOperation field.

inline
GLenum &TextureObjChunkBase::editShaderOperation(void)
{
    editSField(ShaderOperationFieldMask);

    return _sfShaderOperation.getValue();
}

//! Get the value of the TextureObjChunk::_sfShaderOperation field.
inline
const GLenum &TextureObjChunkBase::getShaderOperation(void) const
{
    return _sfShaderOperation.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getShaderOperation(void)
{
    return this->editShaderOperation();
}
#endif

//! Set the value of the TextureObjChunk::_sfShaderOperation field.
inline
void TextureObjChunkBase::setShaderOperation(const GLenum &value)
{
    editSField(ShaderOperationFieldMask);

    _sfShaderOperation.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfShaderInput field.

inline
GLenum &TextureObjChunkBase::editShaderInput(void)
{
    editSField(ShaderInputFieldMask);

    return _sfShaderInput.getValue();
}

//! Get the value of the TextureObjChunk::_sfShaderInput field.
inline
const GLenum &TextureObjChunkBase::getShaderInput(void) const
{
    return _sfShaderInput.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getShaderInput    (void)
{
    return this->editShaderInput    ();
}
#endif

//! Set the value of the TextureObjChunk::_sfShaderInput field.
inline
void TextureObjChunkBase::setShaderInput(const GLenum &value)
{
    editSField(ShaderInputFieldMask);

    _sfShaderInput.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfShaderOffsetScale field.

inline
Real32 &TextureObjChunkBase::editShaderOffsetScale(void)
{
    editSField(ShaderOffsetScaleFieldMask);

    return _sfShaderOffsetScale.getValue();
}

//! Get the value of the TextureObjChunk::_sfShaderOffsetScale field.
inline
const Real32 &TextureObjChunkBase::getShaderOffsetScale(void) const
{
    return _sfShaderOffsetScale.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
Real32              &TextureObjChunkBase::getShaderOffsetScale(void)
{
    return this->editShaderOffsetScale();
}
#endif

//! Set the value of the TextureObjChunk::_sfShaderOffsetScale field.
inline
void TextureObjChunkBase::setShaderOffsetScale(const Real32 &value)
{
    editSField(ShaderOffsetScaleFieldMask);

    _sfShaderOffsetScale.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfShaderOffsetBias field.

inline
Real32 &TextureObjChunkBase::editShaderOffsetBias(void)
{
    editSField(ShaderOffsetBiasFieldMask);

    return _sfShaderOffsetBias.getValue();
}

//! Get the value of the TextureObjChunk::_sfShaderOffsetBias field.
inline
const Real32 &TextureObjChunkBase::getShaderOffsetBias(void) const
{
    return _sfShaderOffsetBias.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
Real32              &TextureObjChunkBase::getShaderOffsetBias(void)
{
    return this->editShaderOffsetBias();
}
#endif

//! Set the value of the TextureObjChunk::_sfShaderOffsetBias field.
inline
void TextureObjChunkBase::setShaderOffsetBias(const Real32 &value)
{
    editSField(ShaderOffsetBiasFieldMask);

    _sfShaderOffsetBias.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfShaderRGBADotProduct field.

inline
GLenum &TextureObjChunkBase::editShaderRGBADotProduct(void)
{
    editSField(ShaderRGBADotProductFieldMask);

    return _sfShaderRGBADotProduct.getValue();
}

//! Get the value of the TextureObjChunk::_sfShaderRGBADotProduct field.
inline
const GLenum &TextureObjChunkBase::getShaderRGBADotProduct(void) const
{
    return _sfShaderRGBADotProduct.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getShaderRGBADotProduct(void)
{
    return this->editShaderRGBADotProduct();
}
#endif

//! Set the value of the TextureObjChunk::_sfShaderRGBADotProduct field.
inline
void TextureObjChunkBase::setShaderRGBADotProduct(const GLenum &value)
{
    editSField(ShaderRGBADotProductFieldMask);

    _sfShaderRGBADotProduct.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfShaderCullModes field.

inline
UInt8 &TextureObjChunkBase::editShaderCullModes(void)
{
    editSField(ShaderCullModesFieldMask);

    return _sfShaderCullModes.getValue();
}

//! Get the value of the TextureObjChunk::_sfShaderCullModes field.
inline
const UInt8 &TextureObjChunkBase::getShaderCullModes(void) const
{
    return _sfShaderCullModes.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
UInt8               &TextureObjChunkBase::getShaderCullModes(void)
{
    return this->editShaderCullModes();
}
#endif

//! Set the value of the TextureObjChunk::_sfShaderCullModes field.
inline
void TextureObjChunkBase::setShaderCullModes(const UInt8 &value)
{
    editSField(ShaderCullModesFieldMask);

    _sfShaderCullModes.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfShaderConstEye field.

inline
Vec3f &TextureObjChunkBase::editShaderConstEye(void)
{
    editSField(ShaderConstEyeFieldMask);

    return _sfShaderConstEye.getValue();
}

//! Get the value of the TextureObjChunk::_sfShaderConstEye field.
inline
const Vec3f &TextureObjChunkBase::getShaderConstEye(void) const
{
    return _sfShaderConstEye.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
Vec3f               &TextureObjChunkBase::getShaderConstEye (void)
{
    return this->editShaderConstEye ();
}
#endif

//! Set the value of the TextureObjChunk::_sfShaderConstEye field.
inline
void TextureObjChunkBase::setShaderConstEye(const Vec3f &value)
{
    editSField(ShaderConstEyeFieldMask);

    _sfShaderConstEye.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfLodBias field.

inline
Real32 &TextureObjChunkBase::editLodBias(void)
{
    editSField(LodBiasFieldMask);

    return _sfLodBias.getValue();
}

//! Get the value of the TextureObjChunk::_sfLodBias field.
inline
const Real32 &TextureObjChunkBase::getLodBias(void) const
{
    return _sfLodBias.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
Real32              &TextureObjChunkBase::getLodBias        (void)
{
    return this->editLodBias        ();
}
#endif

//! Set the value of the TextureObjChunk::_sfLodBias field.
inline
void TextureObjChunkBase::setLodBias(const Real32 &value)
{
    editSField(LodBiasFieldMask);

    _sfLodBias.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfTarget field.

inline
GLenum &TextureObjChunkBase::editTarget(void)
{
    editSField(TargetFieldMask);

    return _sfTarget.getValue();
}

//! Get the value of the TextureObjChunk::_sfTarget field.
inline
const GLenum &TextureObjChunkBase::getTarget(void) const
{
    return _sfTarget.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getTarget         (void)
{
    return this->editTarget         ();
}
#endif

//! Set the value of the TextureObjChunk::_sfTarget field.
inline
void TextureObjChunkBase::setTarget(const GLenum &value)
{
    editSField(TargetFieldMask);

    _sfTarget.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfDirtyLeft field.

inline
Int32 &TextureObjChunkBase::editDirtyLeft(void)
{
    editSField(DirtyLeftFieldMask);

    return _sfDirtyLeft.getValue();
}

//! Get the value of the TextureObjChunk::_sfDirtyLeft field.
inline
const Int32 &TextureObjChunkBase::getDirtyLeft(void) const
{
    return _sfDirtyLeft.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
Int32               &TextureObjChunkBase::getDirtyLeft      (void)
{
    return this->editDirtyLeft      ();
}
#endif

//! Set the value of the TextureObjChunk::_sfDirtyLeft field.
inline
void TextureObjChunkBase::setDirtyLeft(const Int32 &value)
{
    editSField(DirtyLeftFieldMask);

    _sfDirtyLeft.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfDirtyMinX field.

inline
Int32 &TextureObjChunkBase::editDirtyMinX(void)
{
    editSField(DirtyMinXFieldMask);

    return _sfDirtyMinX.getValue();
}

//! Get the value of the TextureObjChunk::_sfDirtyMinX field.
inline
const Int32 &TextureObjChunkBase::getDirtyMinX(void) const
{
    return _sfDirtyMinX.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
Int32               &TextureObjChunkBase::getDirtyMinX      (void)
{
    return this->editDirtyMinX      ();
}
#endif

//! Set the value of the TextureObjChunk::_sfDirtyMinX field.
inline
void TextureObjChunkBase::setDirtyMinX(const Int32 &value)
{
    editSField(DirtyMinXFieldMask);

    _sfDirtyMinX.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfDirtyMaxX field.

inline
Int32 &TextureObjChunkBase::editDirtyMaxX(void)
{
    editSField(DirtyMaxXFieldMask);

    return _sfDirtyMaxX.getValue();
}

//! Get the value of the TextureObjChunk::_sfDirtyMaxX field.
inline
const Int32 &TextureObjChunkBase::getDirtyMaxX(void) const
{
    return _sfDirtyMaxX.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
Int32               &TextureObjChunkBase::getDirtyMaxX      (void)
{
    return this->editDirtyMaxX      ();
}
#endif

//! Set the value of the TextureObjChunk::_sfDirtyMaxX field.
inline
void TextureObjChunkBase::setDirtyMaxX(const Int32 &value)
{
    editSField(DirtyMaxXFieldMask);

    _sfDirtyMaxX.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfDirtyMinY field.

inline
Int32 &TextureObjChunkBase::editDirtyMinY(void)
{
    editSField(DirtyMinYFieldMask);

    return _sfDirtyMinY.getValue();
}

//! Get the value of the TextureObjChunk::_sfDirtyMinY field.
inline
const Int32 &TextureObjChunkBase::getDirtyMinY(void) const
{
    return _sfDirtyMinY.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
Int32               &TextureObjChunkBase::getDirtyMinY      (void)
{
    return this->editDirtyMinY      ();
}
#endif

//! Set the value of the TextureObjChunk::_sfDirtyMinY field.
inline
void TextureObjChunkBase::setDirtyMinY(const Int32 &value)
{
    editSField(DirtyMinYFieldMask);

    _sfDirtyMinY.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfDirtyMaxY field.

inline
Int32 &TextureObjChunkBase::editDirtyMaxY(void)
{
    editSField(DirtyMaxYFieldMask);

    return _sfDirtyMaxY.getValue();
}

//! Get the value of the TextureObjChunk::_sfDirtyMaxY field.
inline
const Int32 &TextureObjChunkBase::getDirtyMaxY(void) const
{
    return _sfDirtyMaxY.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
Int32               &TextureObjChunkBase::getDirtyMaxY      (void)
{
    return this->editDirtyMaxY      ();
}
#endif

//! Set the value of the TextureObjChunk::_sfDirtyMaxY field.
inline
void TextureObjChunkBase::setDirtyMaxY(const Int32 &value)
{
    editSField(DirtyMaxYFieldMask);

    _sfDirtyMaxY.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfDirtyMinZ field.

inline
Int32 &TextureObjChunkBase::editDirtyMinZ(void)
{
    editSField(DirtyMinZFieldMask);

    return _sfDirtyMinZ.getValue();
}

//! Get the value of the TextureObjChunk::_sfDirtyMinZ field.
inline
const Int32 &TextureObjChunkBase::getDirtyMinZ(void) const
{
    return _sfDirtyMinZ.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
Int32               &TextureObjChunkBase::getDirtyMinZ      (void)
{
    return this->editDirtyMinZ      ();
}
#endif

//! Set the value of the TextureObjChunk::_sfDirtyMinZ field.
inline
void TextureObjChunkBase::setDirtyMinZ(const Int32 &value)
{
    editSField(DirtyMinZFieldMask);

    _sfDirtyMinZ.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfDirtyMaxZ field.

inline
Int32 &TextureObjChunkBase::editDirtyMaxZ(void)
{
    editSField(DirtyMaxZFieldMask);

    return _sfDirtyMaxZ.getValue();
}

//! Get the value of the TextureObjChunk::_sfDirtyMaxZ field.
inline
const Int32 &TextureObjChunkBase::getDirtyMaxZ(void) const
{
    return _sfDirtyMaxZ.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
Int32               &TextureObjChunkBase::getDirtyMaxZ      (void)
{
    return this->editDirtyMaxZ      ();
}
#endif

//! Set the value of the TextureObjChunk::_sfDirtyMaxZ field.
inline
void TextureObjChunkBase::setDirtyMaxZ(const Int32 &value)
{
    editSField(DirtyMaxZFieldMask);

    _sfDirtyMaxZ.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfAnisotropy field.

inline
Real32 &TextureObjChunkBase::editAnisotropy(void)
{
    editSField(AnisotropyFieldMask);

    return _sfAnisotropy.getValue();
}

//! Get the value of the TextureObjChunk::_sfAnisotropy field.
inline
const Real32 &TextureObjChunkBase::getAnisotropy(void) const
{
    return _sfAnisotropy.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
Real32              &TextureObjChunkBase::getAnisotropy     (void)
{
    return this->editAnisotropy     ();
}
#endif

//! Set the value of the TextureObjChunk::_sfAnisotropy field.
inline
void TextureObjChunkBase::setAnisotropy(const Real32 &value)
{
    editSField(AnisotropyFieldMask);

    _sfAnisotropy.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfBorderColor field.

inline
Color4f &TextureObjChunkBase::editBorderColor(void)
{
    editSField(BorderColorFieldMask);

    return _sfBorderColor.getValue();
}

//! Get the value of the TextureObjChunk::_sfBorderColor field.
inline
const Color4f &TextureObjChunkBase::getBorderColor(void) const
{
    return _sfBorderColor.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
Color4f             &TextureObjChunkBase::getBorderColor    (void)
{
    return this->editBorderColor    ();
}
#endif

//! Set the value of the TextureObjChunk::_sfBorderColor field.
inline
void TextureObjChunkBase::setBorderColor(const Color4f &value)
{
    editSField(BorderColorFieldMask);

    _sfBorderColor.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfCompareMode field.

inline
GLenum &TextureObjChunkBase::editCompareMode(void)
{
    editSField(CompareModeFieldMask);

    return _sfCompareMode.getValue();
}

//! Get the value of the TextureObjChunk::_sfCompareMode field.
inline
const GLenum &TextureObjChunkBase::getCompareMode(void) const
{
    return _sfCompareMode.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getCompareMode    (void)
{
    return this->editCompareMode    ();
}
#endif

//! Set the value of the TextureObjChunk::_sfCompareMode field.
inline
void TextureObjChunkBase::setCompareMode(const GLenum &value)
{
    editSField(CompareModeFieldMask);

    _sfCompareMode.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfCompareFunc field.

inline
GLenum &TextureObjChunkBase::editCompareFunc(void)
{
    editSField(CompareFuncFieldMask);

    return _sfCompareFunc.getValue();
}

//! Get the value of the TextureObjChunk::_sfCompareFunc field.
inline
const GLenum &TextureObjChunkBase::getCompareFunc(void) const
{
    return _sfCompareFunc.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getCompareFunc    (void)
{
    return this->editCompareFunc    ();
}
#endif

//! Set the value of the TextureObjChunk::_sfCompareFunc field.
inline
void TextureObjChunkBase::setCompareFunc(const GLenum &value)
{
    editSField(CompareFuncFieldMask);

    _sfCompareFunc.setValue(value);
}
//! Get the value of the TextureObjChunk::_sfDepthMode field.

inline
GLenum &TextureObjChunkBase::editDepthMode(void)
{
    editSField(DepthModeFieldMask);

    return _sfDepthMode.getValue();
}

//! Get the value of the TextureObjChunk::_sfDepthMode field.
inline
const GLenum &TextureObjChunkBase::getDepthMode(void) const
{
    return _sfDepthMode.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &TextureObjChunkBase::getDepthMode      (void)
{
    return this->editDepthMode      ();
}
#endif

//! Set the value of the TextureObjChunk::_sfDepthMode field.
inline
void TextureObjChunkBase::setDepthMode(const GLenum &value)
{
    editSField(DepthModeFieldMask);

    _sfDepthMode.setValue(value);
}

//! Get the value of the \a index element the TextureObjChunk::_mfShaderOffsetMatrix field.
inline
const Real32 &TextureObjChunkBase::getShaderOffsetMatrix(const UInt32 index) const
{
    return _mfShaderOffsetMatrix[index];
}

inline
Real32 &TextureObjChunkBase::editShaderOffsetMatrix(const UInt32 index)
{
    editMField(ShaderOffsetMatrixFieldMask, _mfShaderOffsetMatrix);

    return _mfShaderOffsetMatrix[index];
}

//! Get the TextureObjChunk::_mfShaderOffsetMatrix field.
inline
MFReal32 &TextureObjChunkBase::editShaderOffsetMatrix(void)
{
    editMField(ShaderOffsetMatrixFieldMask, _mfShaderOffsetMatrix);

    return _mfShaderOffsetMatrix;
}

#ifdef OSG_1_GET_COMPAT
inline
Real32              &TextureObjChunkBase::getShaderOffsetMatrix(const UInt32 index)
{
    return this->editShaderOffsetMatrix(index);
}

inline
MFReal32            &TextureObjChunkBase::getShaderOffsetMatrix(void)
{
    return this->editShaderOffsetMatrix();
}

#endif


//! Get the TextureObjChunk::_mfShaderOffsetMatrix field.
inline
const MFReal32 &TextureObjChunkBase::getShaderOffsetMatrix(void) const
{
    return _mfShaderOffsetMatrix;
}


#ifdef OSG_MT_FIELDCONTAINERPTR
inline
void TextureObjChunkBase::execSync(      TextureObjChunkBase *pOther,
                                       ConstFieldMaskArg  whichField,
                                       ConstFieldMaskArg  syncMode,
                                 const UInt32             uiSyncInfo,
                                       UInt32             uiCopyOffset)
{
    Inherited::execSync(pOther, whichField, syncMode, uiSyncInfo, uiCopyOffset);

    if(FieldBits::NoField != (ImageFieldMask & whichField))
        _sfImage.syncWith(pOther->_sfImage);

    if(FieldBits::NoField != (InternalFormatFieldMask & whichField))
        _sfInternalFormat.syncWith(pOther->_sfInternalFormat);

    if(FieldBits::NoField != (ExternalFormatFieldMask & whichField))
        _sfExternalFormat.syncWith(pOther->_sfExternalFormat);

    if(FieldBits::NoField != (ScaleFieldMask & whichField))
        _sfScale.syncWith(pOther->_sfScale);

    if(FieldBits::NoField != (FrameFieldMask & whichField))
        _sfFrame.syncWith(pOther->_sfFrame);

    if(FieldBits::NoField != (MinFilterFieldMask & whichField))
        _sfMinFilter.syncWith(pOther->_sfMinFilter);

    if(FieldBits::NoField != (MagFilterFieldMask & whichField))
        _sfMagFilter.syncWith(pOther->_sfMagFilter);

    if(FieldBits::NoField != (WrapSFieldMask & whichField))
        _sfWrapS.syncWith(pOther->_sfWrapS);

    if(FieldBits::NoField != (WrapTFieldMask & whichField))
        _sfWrapT.syncWith(pOther->_sfWrapT);

    if(FieldBits::NoField != (WrapRFieldMask & whichField))
        _sfWrapR.syncWith(pOther->_sfWrapR);

    if(FieldBits::NoField != (EnvModeFieldMask & whichField))
        _sfEnvMode.syncWith(pOther->_sfEnvMode);

    if(FieldBits::NoField != (EnvColorFieldMask & whichField))
        _sfEnvColor.syncWith(pOther->_sfEnvColor);

    if(FieldBits::NoField != (EnvCombineRGBFieldMask & whichField))
        _sfEnvCombineRGB.syncWith(pOther->_sfEnvCombineRGB);

    if(FieldBits::NoField != (EnvCombineAlphaFieldMask & whichField))
        _sfEnvCombineAlpha.syncWith(pOther->_sfEnvCombineAlpha);

    if(FieldBits::NoField != (EnvScaleRGBFieldMask & whichField))
        _sfEnvScaleRGB.syncWith(pOther->_sfEnvScaleRGB);

    if(FieldBits::NoField != (EnvScaleAlphaFieldMask & whichField))
        _sfEnvScaleAlpha.syncWith(pOther->_sfEnvScaleAlpha);

    if(FieldBits::NoField != (EnvSource0RGBFieldMask & whichField))
        _sfEnvSource0RGB.syncWith(pOther->_sfEnvSource0RGB);

    if(FieldBits::NoField != (EnvSource1RGBFieldMask & whichField))
        _sfEnvSource1RGB.syncWith(pOther->_sfEnvSource1RGB);

    if(FieldBits::NoField != (EnvSource2RGBFieldMask & whichField))
        _sfEnvSource2RGB.syncWith(pOther->_sfEnvSource2RGB);

    if(FieldBits::NoField != (EnvSource0AlphaFieldMask & whichField))
        _sfEnvSource0Alpha.syncWith(pOther->_sfEnvSource0Alpha);

    if(FieldBits::NoField != (EnvSource1AlphaFieldMask & whichField))
        _sfEnvSource1Alpha.syncWith(pOther->_sfEnvSource1Alpha);

    if(FieldBits::NoField != (EnvSource2AlphaFieldMask & whichField))
        _sfEnvSource2Alpha.syncWith(pOther->_sfEnvSource2Alpha);

    if(FieldBits::NoField != (EnvOperand0RGBFieldMask & whichField))
        _sfEnvOperand0RGB.syncWith(pOther->_sfEnvOperand0RGB);

    if(FieldBits::NoField != (EnvOperand1RGBFieldMask & whichField))
        _sfEnvOperand1RGB.syncWith(pOther->_sfEnvOperand1RGB);

    if(FieldBits::NoField != (EnvOperand2RGBFieldMask & whichField))
        _sfEnvOperand2RGB.syncWith(pOther->_sfEnvOperand2RGB);

    if(FieldBits::NoField != (EnvOperand0AlphaFieldMask & whichField))
        _sfEnvOperand0Alpha.syncWith(pOther->_sfEnvOperand0Alpha);

    if(FieldBits::NoField != (EnvOperand1AlphaFieldMask & whichField))
        _sfEnvOperand1Alpha.syncWith(pOther->_sfEnvOperand1Alpha);

    if(FieldBits::NoField != (EnvOperand2AlphaFieldMask & whichField))
        _sfEnvOperand2Alpha.syncWith(pOther->_sfEnvOperand2Alpha);

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
        _sfGLId.syncWith(pOther->_sfGLId);

    if(FieldBits::NoField != (IgnoreGLForAspectFieldMask & whichField))
        _sfIgnoreGLForAspect.syncWith(pOther->_sfIgnoreGLForAspect);

    if(FieldBits::NoField != (PointSpriteFieldMask & whichField))
        _sfPointSprite.syncWith(pOther->_sfPointSprite);

    if(FieldBits::NoField != (PriorityFieldMask & whichField))
        _sfPriority.syncWith(pOther->_sfPriority);

    if(FieldBits::NoField != (ShaderOperationFieldMask & whichField))
        _sfShaderOperation.syncWith(pOther->_sfShaderOperation);

    if(FieldBits::NoField != (ShaderInputFieldMask & whichField))
        _sfShaderInput.syncWith(pOther->_sfShaderInput);

    if(FieldBits::NoField != (ShaderOffsetMatrixFieldMask & whichField))
        _mfShaderOffsetMatrix.syncWith(pOther->_mfShaderOffsetMatrix,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (ShaderOffsetScaleFieldMask & whichField))
        _sfShaderOffsetScale.syncWith(pOther->_sfShaderOffsetScale);

    if(FieldBits::NoField != (ShaderOffsetBiasFieldMask & whichField))
        _sfShaderOffsetBias.syncWith(pOther->_sfShaderOffsetBias);

    if(FieldBits::NoField != (ShaderRGBADotProductFieldMask & whichField))
        _sfShaderRGBADotProduct.syncWith(pOther->_sfShaderRGBADotProduct);

    if(FieldBits::NoField != (ShaderCullModesFieldMask & whichField))
        _sfShaderCullModes.syncWith(pOther->_sfShaderCullModes);

    if(FieldBits::NoField != (ShaderConstEyeFieldMask & whichField))
        _sfShaderConstEye.syncWith(pOther->_sfShaderConstEye);

    if(FieldBits::NoField != (LodBiasFieldMask & whichField))
        _sfLodBias.syncWith(pOther->_sfLodBias);

    if(FieldBits::NoField != (TargetFieldMask & whichField))
        _sfTarget.syncWith(pOther->_sfTarget);

    if(FieldBits::NoField != (DirtyLeftFieldMask & whichField))
        _sfDirtyLeft.syncWith(pOther->_sfDirtyLeft);

    if(FieldBits::NoField != (DirtyMinXFieldMask & whichField))
        _sfDirtyMinX.syncWith(pOther->_sfDirtyMinX);

    if(FieldBits::NoField != (DirtyMaxXFieldMask & whichField))
        _sfDirtyMaxX.syncWith(pOther->_sfDirtyMaxX);

    if(FieldBits::NoField != (DirtyMinYFieldMask & whichField))
        _sfDirtyMinY.syncWith(pOther->_sfDirtyMinY);

    if(FieldBits::NoField != (DirtyMaxYFieldMask & whichField))
        _sfDirtyMaxY.syncWith(pOther->_sfDirtyMaxY);

    if(FieldBits::NoField != (DirtyMinZFieldMask & whichField))
        _sfDirtyMinZ.syncWith(pOther->_sfDirtyMinZ);

    if(FieldBits::NoField != (DirtyMaxZFieldMask & whichField))
        _sfDirtyMaxZ.syncWith(pOther->_sfDirtyMaxZ);

    if(FieldBits::NoField != (AnisotropyFieldMask & whichField))
        _sfAnisotropy.syncWith(pOther->_sfAnisotropy);

    if(FieldBits::NoField != (BorderColorFieldMask & whichField))
        _sfBorderColor.syncWith(pOther->_sfBorderColor);

    if(FieldBits::NoField != (CompareModeFieldMask & whichField))
        _sfCompareMode.syncWith(pOther->_sfCompareMode);

    if(FieldBits::NoField != (CompareFuncFieldMask & whichField))
        _sfCompareFunc.syncWith(pOther->_sfCompareFunc);

    if(FieldBits::NoField != (DepthModeFieldMask & whichField))
        _sfDepthMode.syncWith(pOther->_sfDepthMode);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
inline
void TextureObjChunkBase::execSync (      TextureObjChunkBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (ImageFieldMask & whichField))
        _sfImage.syncWith(pFrom->_sfImage);

    if(FieldBits::NoField != (InternalFormatFieldMask & whichField))
        _sfInternalFormat.syncWith(pFrom->_sfInternalFormat);

    if(FieldBits::NoField != (ExternalFormatFieldMask & whichField))
        _sfExternalFormat.syncWith(pFrom->_sfExternalFormat);

    if(FieldBits::NoField != (ScaleFieldMask & whichField))
        _sfScale.syncWith(pFrom->_sfScale);

    if(FieldBits::NoField != (FrameFieldMask & whichField))
        _sfFrame.syncWith(pFrom->_sfFrame);

    if(FieldBits::NoField != (MinFilterFieldMask & whichField))
        _sfMinFilter.syncWith(pFrom->_sfMinFilter);

    if(FieldBits::NoField != (MagFilterFieldMask & whichField))
        _sfMagFilter.syncWith(pFrom->_sfMagFilter);

    if(FieldBits::NoField != (WrapSFieldMask & whichField))
        _sfWrapS.syncWith(pFrom->_sfWrapS);

    if(FieldBits::NoField != (WrapTFieldMask & whichField))
        _sfWrapT.syncWith(pFrom->_sfWrapT);

    if(FieldBits::NoField != (WrapRFieldMask & whichField))
        _sfWrapR.syncWith(pFrom->_sfWrapR);

    if(FieldBits::NoField != (EnvModeFieldMask & whichField))
        _sfEnvMode.syncWith(pFrom->_sfEnvMode);

    if(FieldBits::NoField != (EnvColorFieldMask & whichField))
        _sfEnvColor.syncWith(pFrom->_sfEnvColor);

    if(FieldBits::NoField != (EnvCombineRGBFieldMask & whichField))
        _sfEnvCombineRGB.syncWith(pFrom->_sfEnvCombineRGB);

    if(FieldBits::NoField != (EnvCombineAlphaFieldMask & whichField))
        _sfEnvCombineAlpha.syncWith(pFrom->_sfEnvCombineAlpha);

    if(FieldBits::NoField != (EnvScaleRGBFieldMask & whichField))
        _sfEnvScaleRGB.syncWith(pFrom->_sfEnvScaleRGB);

    if(FieldBits::NoField != (EnvScaleAlphaFieldMask & whichField))
        _sfEnvScaleAlpha.syncWith(pFrom->_sfEnvScaleAlpha);

    if(FieldBits::NoField != (EnvSource0RGBFieldMask & whichField))
        _sfEnvSource0RGB.syncWith(pFrom->_sfEnvSource0RGB);

    if(FieldBits::NoField != (EnvSource1RGBFieldMask & whichField))
        _sfEnvSource1RGB.syncWith(pFrom->_sfEnvSource1RGB);

    if(FieldBits::NoField != (EnvSource2RGBFieldMask & whichField))
        _sfEnvSource2RGB.syncWith(pFrom->_sfEnvSource2RGB);

    if(FieldBits::NoField != (EnvSource0AlphaFieldMask & whichField))
        _sfEnvSource0Alpha.syncWith(pFrom->_sfEnvSource0Alpha);

    if(FieldBits::NoField != (EnvSource1AlphaFieldMask & whichField))
        _sfEnvSource1Alpha.syncWith(pFrom->_sfEnvSource1Alpha);

    if(FieldBits::NoField != (EnvSource2AlphaFieldMask & whichField))
        _sfEnvSource2Alpha.syncWith(pFrom->_sfEnvSource2Alpha);

    if(FieldBits::NoField != (EnvOperand0RGBFieldMask & whichField))
        _sfEnvOperand0RGB.syncWith(pFrom->_sfEnvOperand0RGB);

    if(FieldBits::NoField != (EnvOperand1RGBFieldMask & whichField))
        _sfEnvOperand1RGB.syncWith(pFrom->_sfEnvOperand1RGB);

    if(FieldBits::NoField != (EnvOperand2RGBFieldMask & whichField))
        _sfEnvOperand2RGB.syncWith(pFrom->_sfEnvOperand2RGB);

    if(FieldBits::NoField != (EnvOperand0AlphaFieldMask & whichField))
        _sfEnvOperand0Alpha.syncWith(pFrom->_sfEnvOperand0Alpha);

    if(FieldBits::NoField != (EnvOperand1AlphaFieldMask & whichField))
        _sfEnvOperand1Alpha.syncWith(pFrom->_sfEnvOperand1Alpha);

    if(FieldBits::NoField != (EnvOperand2AlphaFieldMask & whichField))
        _sfEnvOperand2Alpha.syncWith(pFrom->_sfEnvOperand2Alpha);

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
        _sfGLId.syncWith(pFrom->_sfGLId);

    if(FieldBits::NoField != (IgnoreGLForAspectFieldMask & whichField))
        _sfIgnoreGLForAspect.syncWith(pFrom->_sfIgnoreGLForAspect);

    if(FieldBits::NoField != (PointSpriteFieldMask & whichField))
        _sfPointSprite.syncWith(pFrom->_sfPointSprite);

    if(FieldBits::NoField != (PriorityFieldMask & whichField))
        _sfPriority.syncWith(pFrom->_sfPriority);

    if(FieldBits::NoField != (ShaderOperationFieldMask & whichField))
        _sfShaderOperation.syncWith(pFrom->_sfShaderOperation);

    if(FieldBits::NoField != (ShaderInputFieldMask & whichField))
        _sfShaderInput.syncWith(pFrom->_sfShaderInput);

    if(FieldBits::NoField != (ShaderOffsetMatrixFieldMask & whichField))
        _mfShaderOffsetMatrix.syncWith(pFrom->_mfShaderOffsetMatrix,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (ShaderOffsetScaleFieldMask & whichField))
        _sfShaderOffsetScale.syncWith(pFrom->_sfShaderOffsetScale);

    if(FieldBits::NoField != (ShaderOffsetBiasFieldMask & whichField))
        _sfShaderOffsetBias.syncWith(pFrom->_sfShaderOffsetBias);

    if(FieldBits::NoField != (ShaderRGBADotProductFieldMask & whichField))
        _sfShaderRGBADotProduct.syncWith(pFrom->_sfShaderRGBADotProduct);

    if(FieldBits::NoField != (ShaderCullModesFieldMask & whichField))
        _sfShaderCullModes.syncWith(pFrom->_sfShaderCullModes);

    if(FieldBits::NoField != (ShaderConstEyeFieldMask & whichField))
        _sfShaderConstEye.syncWith(pFrom->_sfShaderConstEye);

    if(FieldBits::NoField != (LodBiasFieldMask & whichField))
        _sfLodBias.syncWith(pFrom->_sfLodBias);

    if(FieldBits::NoField != (TargetFieldMask & whichField))
        _sfTarget.syncWith(pFrom->_sfTarget);

    if(FieldBits::NoField != (DirtyLeftFieldMask & whichField))
        _sfDirtyLeft.syncWith(pFrom->_sfDirtyLeft);

    if(FieldBits::NoField != (DirtyMinXFieldMask & whichField))
        _sfDirtyMinX.syncWith(pFrom->_sfDirtyMinX);

    if(FieldBits::NoField != (DirtyMaxXFieldMask & whichField))
        _sfDirtyMaxX.syncWith(pFrom->_sfDirtyMaxX);

    if(FieldBits::NoField != (DirtyMinYFieldMask & whichField))
        _sfDirtyMinY.syncWith(pFrom->_sfDirtyMinY);

    if(FieldBits::NoField != (DirtyMaxYFieldMask & whichField))
        _sfDirtyMaxY.syncWith(pFrom->_sfDirtyMaxY);

    if(FieldBits::NoField != (DirtyMinZFieldMask & whichField))
        _sfDirtyMinZ.syncWith(pFrom->_sfDirtyMinZ);

    if(FieldBits::NoField != (DirtyMaxZFieldMask & whichField))
        _sfDirtyMaxZ.syncWith(pFrom->_sfDirtyMaxZ);

    if(FieldBits::NoField != (AnisotropyFieldMask & whichField))
        _sfAnisotropy.syncWith(pFrom->_sfAnisotropy);

    if(FieldBits::NoField != (BorderColorFieldMask & whichField))
        _sfBorderColor.syncWith(pFrom->_sfBorderColor);

    if(FieldBits::NoField != (CompareModeFieldMask & whichField))
        _sfCompareMode.syncWith(pFrom->_sfCompareMode);

    if(FieldBits::NoField != (CompareFuncFieldMask & whichField))
        _sfCompareFunc.syncWith(pFrom->_sfCompareFunc);

    if(FieldBits::NoField != (DepthModeFieldMask & whichField))
        _sfDepthMode.syncWith(pFrom->_sfDepthMode);
}
#endif

#if 0
inline
void TextureObjChunkBase::execBeginEdit(ConstFieldMaskArg whichField,
                                      UInt32            uiAspect,
                                      UInt32            uiContainerSize)
{
    Inherited::execBeginEdit(whichField, uiAspect, uiContainerSize);

    if(FieldBits::NoField != (ShaderOffsetMatrixFieldMask & whichField))
    {
        _mfShaderOffsetMatrix.beginEdit(uiAspect, uiContainerSize);
    }
}
#endif


inline
Char8 *TextureObjChunkBase::getClassname(void)
{
    return "TextureObjChunk";
}
OSG_GEN_CONTAINERPTR(TextureObjChunk);

OSG_END_NAMESPACE

