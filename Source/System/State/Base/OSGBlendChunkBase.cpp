/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class BlendChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEBLENDCHUNKINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>


#include <OSGGL.h>   // SrcFactor default header
#include <OSGGL.h>   // DestFactor default header
#include <OSGGL.h>   // Equation default header
#include <OSGGL.h>   // AlphaFunc default header


#include "OSGBlendChunkBase.h"
#include "OSGBlendChunk.h"

OSG_USING_NAMESPACE

// Field descriptions

/*! \var GLenum BlendChunkBase::_sfSrcFactor
    	The incoming pixel is multiplied by the source factor. Legal values are directly taken from the glBlendFunc() manpage.

*/
/*! \var GLenum BlendChunkBase::_sfDestFactor
    	The frame buffer pixel is multiplied by the destination factor. Legal values are directly taken from the glBlendFunc() manpage.

*/
/*! \var GLenum BlendChunkBase::_sfEquation
    	The equation used to combine the two values. Only available where GL_ARB_imaging is supported. See glBlendEquation() for details.

*/
/*! \var Color4f BlendChunkBase::_sfColor
    	This is the constant color used by blend modes *_CONSTANT_*.

*/
/*! \var GLenum BlendChunkBase::_sfAlphaFunc
    	The alphaFunc defines how fragments which do not fulfill a certain condition are handled. 
        See glAlphaFunc() for details. GL_NONE is used to disable alpha comparison.

*/
/*! \var Real32 BlendChunkBase::_sfAlphaValue
            The value used in alpha comparison.

*/
/*! \var GLenum BlendChunkBase::_sfAlphaSrcFactor
    	The incoming alpha is multiplied by the source factor before being stored 
        in the frame buffer. Only available where GL_EXT_blend_func_separate is supported.
        The default is GL_NONE, which indicates using the standard BlendFunction.

*/
/*! \var GLenum BlendChunkBase::_sfAlphaDestFactor
    	The frame buffer alpha is multiplied by the source factor before being stored 
        in the frame buffer. Only available where GL_EXT_blend_func_separate is supported.
        The default is GL_NONE, which indicates using the standard BlendFunction.

*/

void BlendChunkBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL; 


#ifdef OSG_1_COMPAT
    typedef const SFGLenum *(BlendChunkBase::*GetSFSrcFactorF)(void) const;

    GetSFSrcFactorF GetSFSrcFactor = &BlendChunkBase::getSFSrcFactor;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(), 
        "srcFactor", 
        SrcFactorFieldId, SrcFactorFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&BlendChunkBase::editSFSrcFactor),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFSrcFactor));
#else
        reinterpret_cast<FieldGetMethodSig >(&BlendChunkBase::getSFSrcFactor));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFGLenum *(BlendChunkBase::*GetSFDestFactorF)(void) const;

    GetSFDestFactorF GetSFDestFactor = &BlendChunkBase::getSFDestFactor;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(), 
        "destFactor", 
        DestFactorFieldId, DestFactorFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&BlendChunkBase::editSFDestFactor),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFDestFactor));
#else
        reinterpret_cast<FieldGetMethodSig >(&BlendChunkBase::getSFDestFactor));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFGLenum *(BlendChunkBase::*GetSFEquationF)(void) const;

    GetSFEquationF GetSFEquation = &BlendChunkBase::getSFEquation;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(), 
        "equation", 
        EquationFieldId, EquationFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&BlendChunkBase::editSFEquation),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFEquation));
#else
        reinterpret_cast<FieldGetMethodSig >(&BlendChunkBase::getSFEquation));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFColor4f *(BlendChunkBase::*GetSFColorF)(void) const;

    GetSFColorF GetSFColor = &BlendChunkBase::getSFColor;
#endif

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(), 
        "color", 
        ColorFieldId, ColorFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&BlendChunkBase::editSFColor),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFColor));
#else
        reinterpret_cast<FieldGetMethodSig >(&BlendChunkBase::getSFColor));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFGLenum *(BlendChunkBase::*GetSFAlphaFuncF)(void) const;

    GetSFAlphaFuncF GetSFAlphaFunc = &BlendChunkBase::getSFAlphaFunc;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(), 
        "alphaFunc", 
        AlphaFuncFieldId, AlphaFuncFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&BlendChunkBase::editSFAlphaFunc),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFAlphaFunc));
#else
        reinterpret_cast<FieldGetMethodSig >(&BlendChunkBase::getSFAlphaFunc));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFReal32 *(BlendChunkBase::*GetSFAlphaValueF)(void) const;

    GetSFAlphaValueF GetSFAlphaValue = &BlendChunkBase::getSFAlphaValue;
#endif

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(), 
        "alphaValue", 
        AlphaValueFieldId, AlphaValueFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&BlendChunkBase::editSFAlphaValue),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFAlphaValue));
#else
        reinterpret_cast<FieldGetMethodSig >(&BlendChunkBase::getSFAlphaValue));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFGLenum *(BlendChunkBase::*GetSFAlphaSrcFactorF)(void) const;

    GetSFAlphaSrcFactorF GetSFAlphaSrcFactor = &BlendChunkBase::getSFAlphaSrcFactor;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(), 
        "alphaSrcFactor", 
        AlphaSrcFactorFieldId, AlphaSrcFactorFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&BlendChunkBase::editSFAlphaSrcFactor),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFAlphaSrcFactor));
#else
        reinterpret_cast<FieldGetMethodSig >(&BlendChunkBase::getSFAlphaSrcFactor));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFGLenum *(BlendChunkBase::*GetSFAlphaDestFactorF)(void) const;

    GetSFAlphaDestFactorF GetSFAlphaDestFactor = &BlendChunkBase::getSFAlphaDestFactor;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(), 
        "alphaDestFactor", 
        AlphaDestFactorFieldId, AlphaDestFactorFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&BlendChunkBase::editSFAlphaDestFactor),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFAlphaDestFactor));
#else
        reinterpret_cast<FieldGetMethodSig >(&BlendChunkBase::getSFAlphaDestFactor));
#endif

    oType.addInitialDesc(pDesc);
}


BlendChunkBase::TypeObject BlendChunkBase::_type(true,
    BlendChunkBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &BlendChunkBase::createEmpty,
    BlendChunk::initMethod,
    (InitalInsertDescFunc) &BlendChunkBase::classDescInserter,
    false);

/*------------------------------ get -----------------------------------*/

FieldContainerType &BlendChunkBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &BlendChunkBase::getType(void) const 
{
    return _type;
} 

UInt32 BlendChunkBase::getContainerSize(void) const 
{ 
    return sizeof(BlendChunk); 
}

/*------------------------- decorator get ------------------------------*/


SFGLenum *BlendChunkBase::editSFSrcFactor(void)
{
    editSField(SrcFactorFieldMask);

    return &_sfSrcFactor;
}

const SFGLenum *BlendChunkBase::getSFSrcFactor(void) const
{
    return &_sfSrcFactor;
}

#ifdef OSG_1_COMPAT
SFGLenum *BlendChunkBase::getSFSrcFactor(void)
{
    return this->editSFSrcFactor();
}
#endif

SFGLenum *BlendChunkBase::editSFDestFactor(void)
{
    editSField(DestFactorFieldMask);

    return &_sfDestFactor;
}

const SFGLenum *BlendChunkBase::getSFDestFactor(void) const
{
    return &_sfDestFactor;
}

#ifdef OSG_1_COMPAT
SFGLenum *BlendChunkBase::getSFDestFactor(void)
{
    return this->editSFDestFactor();
}
#endif

SFGLenum *BlendChunkBase::editSFEquation(void)
{
    editSField(EquationFieldMask);

    return &_sfEquation;
}

const SFGLenum *BlendChunkBase::getSFEquation(void) const
{
    return &_sfEquation;
}

#ifdef OSG_1_COMPAT
SFGLenum *BlendChunkBase::getSFEquation(void)
{
    return this->editSFEquation();
}
#endif

SFColor4f *BlendChunkBase::editSFColor(void)
{
    editSField(ColorFieldMask);

    return &_sfColor;
}

const SFColor4f *BlendChunkBase::getSFColor(void) const
{
    return &_sfColor;
}

#ifdef OSG_1_COMPAT
SFColor4f *BlendChunkBase::getSFColor(void)
{
    return this->editSFColor();
}
#endif

SFGLenum *BlendChunkBase::editSFAlphaFunc(void)
{
    editSField(AlphaFuncFieldMask);

    return &_sfAlphaFunc;
}

const SFGLenum *BlendChunkBase::getSFAlphaFunc(void) const
{
    return &_sfAlphaFunc;
}

#ifdef OSG_1_COMPAT
SFGLenum *BlendChunkBase::getSFAlphaFunc(void)
{
    return this->editSFAlphaFunc();
}
#endif

SFReal32 *BlendChunkBase::editSFAlphaValue(void)
{
    editSField(AlphaValueFieldMask);

    return &_sfAlphaValue;
}

const SFReal32 *BlendChunkBase::getSFAlphaValue(void) const
{
    return &_sfAlphaValue;
}

#ifdef OSG_1_COMPAT
SFReal32 *BlendChunkBase::getSFAlphaValue(void)
{
    return this->editSFAlphaValue();
}
#endif

SFGLenum *BlendChunkBase::editSFAlphaSrcFactor(void)
{
    editSField(AlphaSrcFactorFieldMask);

    return &_sfAlphaSrcFactor;
}

const SFGLenum *BlendChunkBase::getSFAlphaSrcFactor(void) const
{
    return &_sfAlphaSrcFactor;
}

#ifdef OSG_1_COMPAT
SFGLenum *BlendChunkBase::getSFAlphaSrcFactor(void)
{
    return this->editSFAlphaSrcFactor();
}
#endif

SFGLenum *BlendChunkBase::editSFAlphaDestFactor(void)
{
    editSField(AlphaDestFactorFieldMask);

    return &_sfAlphaDestFactor;
}

const SFGLenum *BlendChunkBase::getSFAlphaDestFactor(void) const
{
    return &_sfAlphaDestFactor;
}

#ifdef OSG_1_COMPAT
SFGLenum *BlendChunkBase::getSFAlphaDestFactor(void)
{
    return this->editSFAlphaDestFactor();
}
#endif



/*------------------------------ access -----------------------------------*/

UInt32 BlendChunkBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (SrcFactorFieldMask & whichField))
    {
        returnValue += _sfSrcFactor.getBinSize();
    }
    if(FieldBits::NoField != (DestFactorFieldMask & whichField))
    {
        returnValue += _sfDestFactor.getBinSize();
    }
    if(FieldBits::NoField != (EquationFieldMask & whichField))
    {
        returnValue += _sfEquation.getBinSize();
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        returnValue += _sfColor.getBinSize();
    }
    if(FieldBits::NoField != (AlphaFuncFieldMask & whichField))
    {
        returnValue += _sfAlphaFunc.getBinSize();
    }
    if(FieldBits::NoField != (AlphaValueFieldMask & whichField))
    {
        returnValue += _sfAlphaValue.getBinSize();
    }
    if(FieldBits::NoField != (AlphaSrcFactorFieldMask & whichField))
    {
        returnValue += _sfAlphaSrcFactor.getBinSize();
    }
    if(FieldBits::NoField != (AlphaDestFactorFieldMask & whichField))
    {
        returnValue += _sfAlphaDestFactor.getBinSize();
    }

    return returnValue;
}

void BlendChunkBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (SrcFactorFieldMask & whichField))
    {
        _sfSrcFactor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DestFactorFieldMask & whichField))
    {
        _sfDestFactor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EquationFieldMask & whichField))
    {
        _sfEquation.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AlphaFuncFieldMask & whichField))
    {
        _sfAlphaFunc.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AlphaValueFieldMask & whichField))
    {
        _sfAlphaValue.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AlphaSrcFactorFieldMask & whichField))
    {
        _sfAlphaSrcFactor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AlphaDestFactorFieldMask & whichField))
    {
        _sfAlphaDestFactor.copyToBin(pMem);
    }
}

void BlendChunkBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (SrcFactorFieldMask & whichField))
    {
        _sfSrcFactor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DestFactorFieldMask & whichField))
    {
        _sfDestFactor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EquationFieldMask & whichField))
    {
        _sfEquation.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _sfColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AlphaFuncFieldMask & whichField))
    {
        _sfAlphaFunc.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AlphaValueFieldMask & whichField))
    {
        _sfAlphaValue.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AlphaSrcFactorFieldMask & whichField))
    {
        _sfAlphaSrcFactor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AlphaDestFactorFieldMask & whichField))
    {
        _sfAlphaDestFactor.copyFromBin(pMem);
    }
}

//! create an empty new instance of the class, do not copy the prototype
BlendChunkPtr BlendChunkBase::createEmpty(void) 
{ 
    BlendChunkPtr returnValue; 
    
    newPtr<BlendChunk>(returnValue); 

    return returnValue; 
}

FieldContainerPtr BlendChunkBase::shallowCopy(void) const 
{ 
    BlendChunkPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const BlendChunk *>(this)); 

    return returnValue; 
}



/*------------------------- constructors ----------------------------------*/

BlendChunkBase::BlendChunkBase(void) :
    Inherited(),
    _sfSrcFactor(GLenum(GL_ONE)),
    _sfDestFactor(GLenum(GL_ZERO)),
    _sfEquation(GLenum(GL_NONE)),
    _sfColor(Color4f(0,0,0,0)),
    _sfAlphaFunc(GLenum(GL_NONE)),
    _sfAlphaValue(Real32(0)),
    _sfAlphaSrcFactor(GLenum(OSG_GL_UNUSED)),
    _sfAlphaDestFactor(GLenum(OSG_GL_UNUSED))
{
}

BlendChunkBase::BlendChunkBase(const BlendChunkBase &source) :
    Inherited(source),
    _sfSrcFactor(source._sfSrcFactor),
    _sfDestFactor(source._sfDestFactor),
    _sfEquation(source._sfEquation),
    _sfColor(source._sfColor),
    _sfAlphaFunc(source._sfAlphaFunc),
    _sfAlphaValue(source._sfAlphaValue),
    _sfAlphaSrcFactor(source._sfAlphaSrcFactor),
    _sfAlphaDestFactor(source._sfAlphaDestFactor)
{
}

/*-------------------------- destructors ----------------------------------*/

BlendChunkBase::~BlendChunkBase(void)
{
}


#ifdef OSG_MT_FIELDCONTAINERPTR
void BlendChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo,
                                        UInt32             uiCopyOffset)
{
    this->execSync(static_cast<BlendChunkBase *>(&oFrom),
                   whichField, 
                   syncMode, 
                   uiSyncInfo,
                   uiCopyOffset);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
void BlendChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<BlendChunkBase *>(&oFrom), 
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif

#if 0
void BlendChunkBase::execBeginEditV(ConstFieldMaskArg whichField,
                                       UInt32            uiAspect,
                                       UInt32            uiContainerSize)
{
    this->execBeginEdit(whichField, uiAspect, uiContainerSize);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr BlendChunkBase::createAspectCopy(void) const
{
    BlendChunkPtr returnValue; 

    newAspectCopy(returnValue, 
                  dynamic_cast<const BlendChunk *>(this)); 

    return returnValue; 
}
#endif

void BlendChunkBase::resolveLinks(void)
{
    Inherited::resolveLinks();
}


#include "OSGSField.ins"
#include "OSGMField.ins"

#if defined(OSG_TMPL_STATIC_MEMBER_NEEDS_FUNCTION_INSTANTIATION) || \
    defined(OSG_TMPL_STATIC_MEMBER_NEEDS_CLASS_INSTANTIATION   )

#include "OSGSFieldFuncs.ins"
#include "OSGMFieldFuncs.ins"
#endif

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<BlendChunkPtr>::_type("BlendChunkPtr", "StateChunkPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(BlendChunkPtr)

OSG_FIELD_DLLEXPORT_DEF1(SField, BlendChunkPtr);
OSG_FIELD_DLLEXPORT_DEF1(MField, BlendChunkPtr);

OSG_END_NAMESPACE


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id$";
    static Char8 cvsid_hpp       [] = OSGBLENDCHUNKBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGBLENDCHUNKBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGBLENDCHUNKFIELDS_HEADER_CVSID;
}
