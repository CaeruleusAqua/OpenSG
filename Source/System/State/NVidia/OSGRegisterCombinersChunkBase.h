/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class RegisterCombinersChunk
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGREGISTERCOMBINERSCHUNKBASE_H_
#define _OSGREGISTERCOMBINERSCHUNKBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGStateDef.h"

#include "OSGBaseTypes.h"

#include "OSGStateChunk.h" // Parent

#include "OSGColor4fFields.h" // Color0 type
#include "OSGColor4fFields.h" // Color1 type
#include "OSGBoolFields.h" // ColorSumClamp type
#include "OSGGLenumFields.h" // VariableArgb type
#include "OSGGLenumFields.h" // VariableBrgb type
#include "OSGGLenumFields.h" // VariableCrgb type
#include "OSGGLenumFields.h" // VariableDrgb type
#include "OSGGLenumFields.h" // VariableAalpha type
#include "OSGGLenumFields.h" // VariableBalpha type
#include "OSGGLenumFields.h" // VariableCalpha type
#include "OSGGLenumFields.h" // VariableDalpha type
#include "OSGGLenumFields.h" // OutputABrgb type
#include "OSGGLenumFields.h" // OutputCDrgb type
#include "OSGGLenumFields.h" // OutputSumrgb type
#include "OSGGLenumFields.h" // Scalergb type
#include "OSGGLenumFields.h" // Biasrgb type
#include "OSGGLenumFields.h" // OutputABalpha type
#include "OSGGLenumFields.h" // OutputCDalpha type
#include "OSGGLenumFields.h" // OutputSumalpha type
#include "OSGUInt8Fields.h" // DotABrgb type
#include "OSGUInt8Fields.h" // DotCDrgb type
#include "OSGUInt8Fields.h" // MuxSumrgb type
#include "OSGGLenumFields.h" // Scalealpha type
#include "OSGGLenumFields.h" // Biasalpha type
#include "OSGUInt8Fields.h" // MuxSumalpha type
#include "OSGGLenumFields.h" // VariableE type
#include "OSGGLenumFields.h" // VariableF type
#include "OSGGLenumFields.h" // VariableG type
#include "OSGColor4fFields.h" // CombinerColor0 type
#include "OSGColor4fFields.h" // CombinerColor1 type
#include "OSGUInt8Fields.h" // PerStageConstants type

#include "OSGRegisterCombinersChunkFields.h"

OSG_BEGIN_NAMESPACE

class RegisterCombinersChunk;

//! \brief RegisterCombinersChunk Base Class.

class OSG_STATE_DLLMAPPING RegisterCombinersChunkBase : public StateChunk
{
  public:

    typedef StateChunk Inherited;
    typedef StateChunk ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    typedef PointerFwdBuilder<StateChunkPtr, 
                              StateChunkConstPtr, 
                              RegisterCombinersChunk>::ObjPtr         ObjPtr;
    typedef PointerFwdBuilder<StateChunkPtr, 
                              StateChunkConstPtr, 
                              RegisterCombinersChunk>::ObjPtrConst    ObjPtrConst;
    typedef PointerFwdBuilder<StateChunkPtr, 
                              StateChunkConstPtr,
                              RegisterCombinersChunk>::ObjConstPtr    ObjConstPtr;
    typedef PointerFwdBuilder<StateChunkPtr, 
                              StateChunkConstPtr,
                              RegisterCombinersChunk>::ObjPtrArg      ObjPtrArg;
    typedef PointerFwdBuilder<StateChunkPtr, 
                              StateChunkConstPtr,
                              RegisterCombinersChunk>::ObjConstPtrArg ObjConstPtrArg;
    typedef PointerFwdBuilder<StateChunkPtr, 
                              StateChunkConstPtr,
                              RegisterCombinersChunk>::ObjPtrConstArg ObjPtrConstArg;

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        Color0FieldId = Inherited::NextFieldId,
        Color1FieldId = Color0FieldId + 1,
        ColorSumClampFieldId = Color1FieldId + 1,
        VariableArgbFieldId = ColorSumClampFieldId + 1,
        VariableBrgbFieldId = VariableArgbFieldId + 1,
        VariableCrgbFieldId = VariableBrgbFieldId + 1,
        VariableDrgbFieldId = VariableCrgbFieldId + 1,
        VariableAalphaFieldId = VariableDrgbFieldId + 1,
        VariableBalphaFieldId = VariableAalphaFieldId + 1,
        VariableCalphaFieldId = VariableBalphaFieldId + 1,
        VariableDalphaFieldId = VariableCalphaFieldId + 1,
        OutputABrgbFieldId = VariableDalphaFieldId + 1,
        OutputCDrgbFieldId = OutputABrgbFieldId + 1,
        OutputSumrgbFieldId = OutputCDrgbFieldId + 1,
        ScalergbFieldId = OutputSumrgbFieldId + 1,
        BiasrgbFieldId = ScalergbFieldId + 1,
        OutputABalphaFieldId = BiasrgbFieldId + 1,
        OutputCDalphaFieldId = OutputABalphaFieldId + 1,
        OutputSumalphaFieldId = OutputCDalphaFieldId + 1,
        DotABrgbFieldId = OutputSumalphaFieldId + 1,
        DotCDrgbFieldId = DotABrgbFieldId + 1,
        MuxSumrgbFieldId = DotCDrgbFieldId + 1,
        ScalealphaFieldId = MuxSumrgbFieldId + 1,
        BiasalphaFieldId = ScalealphaFieldId + 1,
        MuxSumalphaFieldId = BiasalphaFieldId + 1,
        VariableEFieldId = MuxSumalphaFieldId + 1,
        VariableFFieldId = VariableEFieldId + 1,
        VariableGFieldId = VariableFFieldId + 1,
        CombinerColor0FieldId = VariableGFieldId + 1,
        CombinerColor1FieldId = CombinerColor0FieldId + 1,
        PerStageConstantsFieldId = CombinerColor1FieldId + 1,
        NextFieldId = PerStageConstantsFieldId + 1
    };

    static const OSG::BitVector Color0FieldMask = 
        (TypeTraits<BitVector>::One << Color0FieldId);
    static const OSG::BitVector Color1FieldMask = 
        (TypeTraits<BitVector>::One << Color1FieldId);
    static const OSG::BitVector ColorSumClampFieldMask = 
        (TypeTraits<BitVector>::One << ColorSumClampFieldId);
    static const OSG::BitVector VariableArgbFieldMask = 
        (TypeTraits<BitVector>::One << VariableArgbFieldId);
    static const OSG::BitVector VariableBrgbFieldMask = 
        (TypeTraits<BitVector>::One << VariableBrgbFieldId);
    static const OSG::BitVector VariableCrgbFieldMask = 
        (TypeTraits<BitVector>::One << VariableCrgbFieldId);
    static const OSG::BitVector VariableDrgbFieldMask = 
        (TypeTraits<BitVector>::One << VariableDrgbFieldId);
    static const OSG::BitVector VariableAalphaFieldMask = 
        (TypeTraits<BitVector>::One << VariableAalphaFieldId);
    static const OSG::BitVector VariableBalphaFieldMask = 
        (TypeTraits<BitVector>::One << VariableBalphaFieldId);
    static const OSG::BitVector VariableCalphaFieldMask = 
        (TypeTraits<BitVector>::One << VariableCalphaFieldId);
    static const OSG::BitVector VariableDalphaFieldMask = 
        (TypeTraits<BitVector>::One << VariableDalphaFieldId);
    static const OSG::BitVector OutputABrgbFieldMask = 
        (TypeTraits<BitVector>::One << OutputABrgbFieldId);
    static const OSG::BitVector OutputCDrgbFieldMask = 
        (TypeTraits<BitVector>::One << OutputCDrgbFieldId);
    static const OSG::BitVector OutputSumrgbFieldMask = 
        (TypeTraits<BitVector>::One << OutputSumrgbFieldId);
    static const OSG::BitVector ScalergbFieldMask = 
        (TypeTraits<BitVector>::One << ScalergbFieldId);
    static const OSG::BitVector BiasrgbFieldMask = 
        (TypeTraits<BitVector>::One << BiasrgbFieldId);
    static const OSG::BitVector OutputABalphaFieldMask = 
        (TypeTraits<BitVector>::One << OutputABalphaFieldId);
    static const OSG::BitVector OutputCDalphaFieldMask = 
        (TypeTraits<BitVector>::One << OutputCDalphaFieldId);
    static const OSG::BitVector OutputSumalphaFieldMask = 
        (TypeTraits<BitVector>::One << OutputSumalphaFieldId);
    static const OSG::BitVector DotABrgbFieldMask = 
        (TypeTraits<BitVector>::One << DotABrgbFieldId);
    static const OSG::BitVector DotCDrgbFieldMask = 
        (TypeTraits<BitVector>::One << DotCDrgbFieldId);
    static const OSG::BitVector MuxSumrgbFieldMask = 
        (TypeTraits<BitVector>::One << MuxSumrgbFieldId);
    static const OSG::BitVector ScalealphaFieldMask = 
        (TypeTraits<BitVector>::One << ScalealphaFieldId);
    static const OSG::BitVector BiasalphaFieldMask = 
        (TypeTraits<BitVector>::One << BiasalphaFieldId);
    static const OSG::BitVector MuxSumalphaFieldMask = 
        (TypeTraits<BitVector>::One << MuxSumalphaFieldId);
    static const OSG::BitVector VariableEFieldMask = 
        (TypeTraits<BitVector>::One << VariableEFieldId);
    static const OSG::BitVector VariableFFieldMask = 
        (TypeTraits<BitVector>::One << VariableFFieldId);
    static const OSG::BitVector VariableGFieldMask = 
        (TypeTraits<BitVector>::One << VariableGFieldId);
    static const OSG::BitVector CombinerColor0FieldMask = 
        (TypeTraits<BitVector>::One << CombinerColor0FieldId);
    static const OSG::BitVector CombinerColor1FieldMask = 
        (TypeTraits<BitVector>::One << CombinerColor1FieldId);
    static const OSG::BitVector PerStageConstantsFieldMask = 
        (TypeTraits<BitVector>::One << PerStageConstantsFieldId);
    static const OSG::BitVector NextFieldMask = 
        (TypeTraits<BitVector>::One << NextFieldId);


    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void); 
    static UInt32              getClassTypeId (void); 
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void); 
    virtual const FieldContainerType &getType         (void) const; 

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


#ifdef OSG_1_COMPAT
           SFColor4f *getSFColor0(void);
#endif
           SFColor4f *editSFColor0(void);
     const SFColor4f *getSFColor0 (void) const;

#ifdef OSG_1_COMPAT
           SFColor4f *getSFColor1(void);
#endif
           SFColor4f *editSFColor1(void);
     const SFColor4f *getSFColor1 (void) const;

#ifdef OSG_1_COMPAT
           SFBool *getSFColorSumClamp(void);
#endif
           SFBool *editSFColorSumClamp(void);
     const SFBool *getSFColorSumClamp (void) const;

#ifdef OSG_1_COMPAT
           MFGLenum *getMFVariableArgb(void);
#endif
           MFGLenum *editMFVariableArgb(void);
     const MFGLenum *getMFVariableArgb (void) const;

#ifdef OSG_1_COMPAT
           MFGLenum *getMFVariableBrgb(void);
#endif
           MFGLenum *editMFVariableBrgb(void);
     const MFGLenum *getMFVariableBrgb (void) const;

#ifdef OSG_1_COMPAT
           MFGLenum *getMFVariableCrgb(void);
#endif
           MFGLenum *editMFVariableCrgb(void);
     const MFGLenum *getMFVariableCrgb (void) const;

#ifdef OSG_1_COMPAT
           MFGLenum *getMFVariableDrgb(void);
#endif
           MFGLenum *editMFVariableDrgb(void);
     const MFGLenum *getMFVariableDrgb (void) const;

#ifdef OSG_1_COMPAT
           MFGLenum *getMFVariableAalpha(void);
#endif
           MFGLenum *editMFVariableAalpha(void);
     const MFGLenum *getMFVariableAalpha (void) const;

#ifdef OSG_1_COMPAT
           MFGLenum *getMFVariableBalpha(void);
#endif
           MFGLenum *editMFVariableBalpha(void);
     const MFGLenum *getMFVariableBalpha (void) const;

#ifdef OSG_1_COMPAT
           MFGLenum *getMFVariableCalpha(void);
#endif
           MFGLenum *editMFVariableCalpha(void);
     const MFGLenum *getMFVariableCalpha (void) const;

#ifdef OSG_1_COMPAT
           MFGLenum *getMFVariableDalpha(void);
#endif
           MFGLenum *editMFVariableDalpha(void);
     const MFGLenum *getMFVariableDalpha (void) const;

#ifdef OSG_1_COMPAT
           MFGLenum *getMFOutputABrgb(void);
#endif
           MFGLenum *editMFOutputABrgb(void);
     const MFGLenum *getMFOutputABrgb (void) const;

#ifdef OSG_1_COMPAT
           MFGLenum *getMFOutputCDrgb(void);
#endif
           MFGLenum *editMFOutputCDrgb(void);
     const MFGLenum *getMFOutputCDrgb (void) const;

#ifdef OSG_1_COMPAT
           MFGLenum *getMFOutputSumrgb(void);
#endif
           MFGLenum *editMFOutputSumrgb(void);
     const MFGLenum *getMFOutputSumrgb (void) const;

#ifdef OSG_1_COMPAT
           MFGLenum *getMFScalergb(void);
#endif
           MFGLenum *editMFScalergb(void);
     const MFGLenum *getMFScalergb (void) const;

#ifdef OSG_1_COMPAT
           MFGLenum *getMFBiasrgb(void);
#endif
           MFGLenum *editMFBiasrgb(void);
     const MFGLenum *getMFBiasrgb (void) const;

#ifdef OSG_1_COMPAT
           MFGLenum *getMFOutputABalpha(void);
#endif
           MFGLenum *editMFOutputABalpha(void);
     const MFGLenum *getMFOutputABalpha (void) const;

#ifdef OSG_1_COMPAT
           MFGLenum *getMFOutputCDalpha(void);
#endif
           MFGLenum *editMFOutputCDalpha(void);
     const MFGLenum *getMFOutputCDalpha (void) const;

#ifdef OSG_1_COMPAT
           MFGLenum *getMFOutputSumalpha(void);
#endif
           MFGLenum *editMFOutputSumalpha(void);
     const MFGLenum *getMFOutputSumalpha (void) const;

#ifdef OSG_1_COMPAT
           MFUInt8 *getMFDotABrgb(void);
#endif
           MFUInt8 *editMFDotABrgb(void);
     const MFUInt8 *getMFDotABrgb (void) const;

#ifdef OSG_1_COMPAT
           MFUInt8 *getMFDotCDrgb(void);
#endif
           MFUInt8 *editMFDotCDrgb(void);
     const MFUInt8 *getMFDotCDrgb (void) const;

#ifdef OSG_1_COMPAT
           MFUInt8 *getMFMuxSumrgb(void);
#endif
           MFUInt8 *editMFMuxSumrgb(void);
     const MFUInt8 *getMFMuxSumrgb (void) const;

#ifdef OSG_1_COMPAT
           MFGLenum *getMFScalealpha(void);
#endif
           MFGLenum *editMFScalealpha(void);
     const MFGLenum *getMFScalealpha (void) const;

#ifdef OSG_1_COMPAT
           MFGLenum *getMFBiasalpha(void);
#endif
           MFGLenum *editMFBiasalpha(void);
     const MFGLenum *getMFBiasalpha (void) const;

#ifdef OSG_1_COMPAT
           MFUInt8 *getMFMuxSumalpha(void);
#endif
           MFUInt8 *editMFMuxSumalpha(void);
     const MFUInt8 *getMFMuxSumalpha (void) const;

#ifdef OSG_1_COMPAT
           MFGLenum *getMFVariableE(void);
#endif
           MFGLenum *editMFVariableE(void);
     const MFGLenum *getMFVariableE (void) const;

#ifdef OSG_1_COMPAT
           MFGLenum *getMFVariableF(void);
#endif
           MFGLenum *editMFVariableF(void);
     const MFGLenum *getMFVariableF (void) const;

#ifdef OSG_1_COMPAT
           MFGLenum *getMFVariableG(void);
#endif
           MFGLenum *editMFVariableG(void);
     const MFGLenum *getMFVariableG (void) const;

#ifdef OSG_1_COMPAT
           MFColor4f *getMFCombinerColor0(void);
#endif
           MFColor4f *editMFCombinerColor0(void);
     const MFColor4f *getMFCombinerColor0 (void) const;

#ifdef OSG_1_COMPAT
           MFColor4f *getMFCombinerColor1(void);
#endif
           MFColor4f *editMFCombinerColor1(void);
     const MFColor4f *getMFCombinerColor1 (void) const;

#ifdef OSG_1_COMPAT
           SFUInt8 *getSFPerStageConstants(void);
#endif
           SFUInt8 *editSFPerStageConstants(void);
     const SFUInt8 *getSFPerStageConstants (void) const;


#ifdef OSG_1_COMPAT
           Color4f &getColor0(void);
#endif
           Color4f &editColor0(void);
     const Color4f &getColor0 (void) const;

#ifdef OSG_1_COMPAT
           Color4f &getColor1(void);
#endif
           Color4f &editColor1(void);
     const Color4f &getColor1 (void) const;

#ifdef OSG_1_COMPAT
           bool &getColorSumClamp(void);
#endif
           bool &editColorSumClamp(void);
     const bool &getColorSumClamp (void) const;

#ifdef OSG_1_COMPAT
           GLenum &getVariableArgb(const UInt32 index);
           MFGLenum &getVariableArgb(void);
#endif
           GLenum &editVariableArgb(const UInt32 index);
     const GLenum &getVariableArgb (const UInt32 index) const;
           MFGLenum &editVariableArgb(void);
     const MFGLenum &getVariableArgb(void) const;

#ifdef OSG_1_COMPAT
           GLenum &getVariableBrgb(const UInt32 index);
           MFGLenum &getVariableBrgb(void);
#endif
           GLenum &editVariableBrgb(const UInt32 index);
     const GLenum &getVariableBrgb (const UInt32 index) const;
           MFGLenum &editVariableBrgb(void);
     const MFGLenum &getVariableBrgb(void) const;

#ifdef OSG_1_COMPAT
           GLenum &getVariableCrgb(const UInt32 index);
           MFGLenum &getVariableCrgb(void);
#endif
           GLenum &editVariableCrgb(const UInt32 index);
     const GLenum &getVariableCrgb (const UInt32 index) const;
           MFGLenum &editVariableCrgb(void);
     const MFGLenum &getVariableCrgb(void) const;

#ifdef OSG_1_COMPAT
           GLenum &getVariableDrgb(const UInt32 index);
           MFGLenum &getVariableDrgb(void);
#endif
           GLenum &editVariableDrgb(const UInt32 index);
     const GLenum &getVariableDrgb (const UInt32 index) const;
           MFGLenum &editVariableDrgb(void);
     const MFGLenum &getVariableDrgb(void) const;

#ifdef OSG_1_COMPAT
           GLenum &getVariableAalpha(const UInt32 index);
           MFGLenum &getVariableAalpha(void);
#endif
           GLenum &editVariableAalpha(const UInt32 index);
     const GLenum &getVariableAalpha (const UInt32 index) const;
           MFGLenum &editVariableAalpha(void);
     const MFGLenum &getVariableAalpha(void) const;

#ifdef OSG_1_COMPAT
           GLenum &getVariableBalpha(const UInt32 index);
           MFGLenum &getVariableBalpha(void);
#endif
           GLenum &editVariableBalpha(const UInt32 index);
     const GLenum &getVariableBalpha (const UInt32 index) const;
           MFGLenum &editVariableBalpha(void);
     const MFGLenum &getVariableBalpha(void) const;

#ifdef OSG_1_COMPAT
           GLenum &getVariableCalpha(const UInt32 index);
           MFGLenum &getVariableCalpha(void);
#endif
           GLenum &editVariableCalpha(const UInt32 index);
     const GLenum &getVariableCalpha (const UInt32 index) const;
           MFGLenum &editVariableCalpha(void);
     const MFGLenum &getVariableCalpha(void) const;

#ifdef OSG_1_COMPAT
           GLenum &getVariableDalpha(const UInt32 index);
           MFGLenum &getVariableDalpha(void);
#endif
           GLenum &editVariableDalpha(const UInt32 index);
     const GLenum &getVariableDalpha (const UInt32 index) const;
           MFGLenum &editVariableDalpha(void);
     const MFGLenum &getVariableDalpha(void) const;

#ifdef OSG_1_COMPAT
           GLenum &getOutputABrgb(const UInt32 index);
           MFGLenum &getOutputABrgb(void);
#endif
           GLenum &editOutputABrgb(const UInt32 index);
     const GLenum &getOutputABrgb (const UInt32 index) const;
           MFGLenum &editOutputABrgb(void);
     const MFGLenum &getOutputABrgb(void) const;

#ifdef OSG_1_COMPAT
           GLenum &getOutputCDrgb(const UInt32 index);
           MFGLenum &getOutputCDrgb(void);
#endif
           GLenum &editOutputCDrgb(const UInt32 index);
     const GLenum &getOutputCDrgb (const UInt32 index) const;
           MFGLenum &editOutputCDrgb(void);
     const MFGLenum &getOutputCDrgb(void) const;

#ifdef OSG_1_COMPAT
           GLenum &getOutputSumrgb(const UInt32 index);
           MFGLenum &getOutputSumrgb(void);
#endif
           GLenum &editOutputSumrgb(const UInt32 index);
     const GLenum &getOutputSumrgb (const UInt32 index) const;
           MFGLenum &editOutputSumrgb(void);
     const MFGLenum &getOutputSumrgb(void) const;

#ifdef OSG_1_COMPAT
           GLenum &getScalergb(const UInt32 index);
           MFGLenum &getScalergb(void);
#endif
           GLenum &editScalergb(const UInt32 index);
     const GLenum &getScalergb (const UInt32 index) const;
           MFGLenum &editScalergb(void);
     const MFGLenum &getScalergb(void) const;

#ifdef OSG_1_COMPAT
           GLenum &getBiasrgb(const UInt32 index);
           MFGLenum &getBiasrgb(void);
#endif
           GLenum &editBiasrgb(const UInt32 index);
     const GLenum &getBiasrgb (const UInt32 index) const;
           MFGLenum &editBiasrgb(void);
     const MFGLenum &getBiasrgb(void) const;

#ifdef OSG_1_COMPAT
           GLenum &getOutputABalpha(const UInt32 index);
           MFGLenum &getOutputABalpha(void);
#endif
           GLenum &editOutputABalpha(const UInt32 index);
     const GLenum &getOutputABalpha (const UInt32 index) const;
           MFGLenum &editOutputABalpha(void);
     const MFGLenum &getOutputABalpha(void) const;

#ifdef OSG_1_COMPAT
           GLenum &getOutputCDalpha(const UInt32 index);
           MFGLenum &getOutputCDalpha(void);
#endif
           GLenum &editOutputCDalpha(const UInt32 index);
     const GLenum &getOutputCDalpha (const UInt32 index) const;
           MFGLenum &editOutputCDalpha(void);
     const MFGLenum &getOutputCDalpha(void) const;

#ifdef OSG_1_COMPAT
           GLenum &getOutputSumalpha(const UInt32 index);
           MFGLenum &getOutputSumalpha(void);
#endif
           GLenum &editOutputSumalpha(const UInt32 index);
     const GLenum &getOutputSumalpha (const UInt32 index) const;
           MFGLenum &editOutputSumalpha(void);
     const MFGLenum &getOutputSumalpha(void) const;

#ifdef OSG_1_COMPAT
           UInt8 &getDotABrgb(const UInt32 index);
           MFUInt8 &getDotABrgb(void);
#endif
           UInt8 &editDotABrgb(const UInt32 index);
     const UInt8 &getDotABrgb (const UInt32 index) const;
           MFUInt8 &editDotABrgb(void);
     const MFUInt8 &getDotABrgb(void) const;

#ifdef OSG_1_COMPAT
           UInt8 &getDotCDrgb(const UInt32 index);
           MFUInt8 &getDotCDrgb(void);
#endif
           UInt8 &editDotCDrgb(const UInt32 index);
     const UInt8 &getDotCDrgb (const UInt32 index) const;
           MFUInt8 &editDotCDrgb(void);
     const MFUInt8 &getDotCDrgb(void) const;

#ifdef OSG_1_COMPAT
           UInt8 &getMuxSumrgb(const UInt32 index);
           MFUInt8 &getMuxSumrgb(void);
#endif
           UInt8 &editMuxSumrgb(const UInt32 index);
     const UInt8 &getMuxSumrgb (const UInt32 index) const;
           MFUInt8 &editMuxSumrgb(void);
     const MFUInt8 &getMuxSumrgb(void) const;

#ifdef OSG_1_COMPAT
           GLenum &getScalealpha(const UInt32 index);
           MFGLenum &getScalealpha(void);
#endif
           GLenum &editScalealpha(const UInt32 index);
     const GLenum &getScalealpha (const UInt32 index) const;
           MFGLenum &editScalealpha(void);
     const MFGLenum &getScalealpha(void) const;

#ifdef OSG_1_COMPAT
           GLenum &getBiasalpha(const UInt32 index);
           MFGLenum &getBiasalpha(void);
#endif
           GLenum &editBiasalpha(const UInt32 index);
     const GLenum &getBiasalpha (const UInt32 index) const;
           MFGLenum &editBiasalpha(void);
     const MFGLenum &getBiasalpha(void) const;

#ifdef OSG_1_COMPAT
           UInt8 &getMuxSumalpha(const UInt32 index);
           MFUInt8 &getMuxSumalpha(void);
#endif
           UInt8 &editMuxSumalpha(const UInt32 index);
     const UInt8 &getMuxSumalpha (const UInt32 index) const;
           MFUInt8 &editMuxSumalpha(void);
     const MFUInt8 &getMuxSumalpha(void) const;

#ifdef OSG_1_COMPAT
           GLenum &getVariableE(const UInt32 index);
           MFGLenum &getVariableE(void);
#endif
           GLenum &editVariableE(const UInt32 index);
     const GLenum &getVariableE (const UInt32 index) const;
           MFGLenum &editVariableE(void);
     const MFGLenum &getVariableE(void) const;

#ifdef OSG_1_COMPAT
           GLenum &getVariableF(const UInt32 index);
           MFGLenum &getVariableF(void);
#endif
           GLenum &editVariableF(const UInt32 index);
     const GLenum &getVariableF (const UInt32 index) const;
           MFGLenum &editVariableF(void);
     const MFGLenum &getVariableF(void) const;

#ifdef OSG_1_COMPAT
           GLenum &getVariableG(const UInt32 index);
           MFGLenum &getVariableG(void);
#endif
           GLenum &editVariableG(const UInt32 index);
     const GLenum &getVariableG (const UInt32 index) const;
           MFGLenum &editVariableG(void);
     const MFGLenum &getVariableG(void) const;

#ifdef OSG_1_COMPAT
           Color4f &getCombinerColor0(const UInt32 index);
           MFColor4f &getCombinerColor0(void);
#endif
           Color4f &editCombinerColor0(const UInt32 index);
     const Color4f &getCombinerColor0 (const UInt32 index) const;
           MFColor4f &editCombinerColor0(void);
     const MFColor4f &getCombinerColor0(void) const;

#ifdef OSG_1_COMPAT
           Color4f &getCombinerColor1(const UInt32 index);
           MFColor4f &getCombinerColor1(void);
#endif
           Color4f &editCombinerColor1(const UInt32 index);
     const Color4f &getCombinerColor1 (const UInt32 index) const;
           MFColor4f &editCombinerColor1(void);
     const MFColor4f &getCombinerColor1(void) const;

#ifdef OSG_1_COMPAT
           UInt8 &getPerStageConstants(void);
#endif
           UInt8 &editPerStageConstants(void);
     const UInt8 &getPerStageConstants (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

     void setColor0(const Color4f &value);
     void setColor1(const Color4f &value);
     void setColorSumClamp(const bool &value);
     void setPerStageConstants(const UInt8 &value);

    /*! \}                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  RegisterCombinersChunkPtr create     (void); 
    static  RegisterCombinersChunkPtr createEmpty(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr shallowCopy(void) const; 

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static void   classDescInserter(TypeObject &oType);
    static Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFColor4f _sfColor0;
    SFColor4f _sfColor1;
    SFBool _sfColorSumClamp;
    MFGLenum _mfVariableArgb;
    MFGLenum _mfVariableBrgb;
    MFGLenum _mfVariableCrgb;
    MFGLenum _mfVariableDrgb;
    MFGLenum _mfVariableAalpha;
    MFGLenum _mfVariableBalpha;
    MFGLenum _mfVariableCalpha;
    MFGLenum _mfVariableDalpha;
    MFGLenum _mfOutputABrgb;
    MFGLenum _mfOutputCDrgb;
    MFGLenum _mfOutputSumrgb;
    MFGLenum _mfScalergb;
    MFGLenum _mfBiasrgb;
    MFGLenum _mfOutputABalpha;
    MFGLenum _mfOutputCDalpha;
    MFGLenum _mfOutputSumalpha;
    MFUInt8 _mfDotABrgb;
    MFUInt8 _mfDotCDrgb;
    MFUInt8 _mfMuxSumrgb;
    MFGLenum _mfScalealpha;
    MFGLenum _mfBiasalpha;
    MFUInt8 _mfMuxSumalpha;
    MFGLenum _mfVariableE;
    MFGLenum _mfVariableF;
    MFGLenum _mfVariableG;
    MFColor4f _mfCombinerColor0;
    MFColor4f _mfCombinerColor1;
    SFUInt8 _sfPerStageConstants;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    RegisterCombinersChunkBase(void);
    RegisterCombinersChunkBase(const RegisterCombinersChunkBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~RegisterCombinersChunkBase(void); 

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_FIELDCONTAINERPTR
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo,
                                 UInt32             uiCopyOffset);

            void execSync (      RegisterCombinersChunkBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo,
                                 UInt32             uiCopyOffset);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      RegisterCombinersChunkBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

#if 0
    virtual void execBeginEditV(ConstFieldMaskArg whichField, 
                                UInt32            uiAspect,
                                UInt32            uiContainerSize);

            void execBeginEdit (ConstFieldMaskArg whichField, 
                                UInt32            uiAspect,
                                UInt32            uiContainerSize);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainerPtr createAspectCopy(void) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const RegisterCombinersChunkBase &source);
};

typedef RegisterCombinersChunkBase *RegisterCombinersChunkBaseP;

typedef RefPtr<RegisterCombinersChunk> RegisterCombinersChunkRefPtr;

typedef osgIF<
    RegisterCombinersChunkBase::isNodeCore,

    CoredNodePtr<RegisterCombinersChunk>,
    FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC>::_IRet

        RegisterCombinersChunkNodePtr;

OSG_END_NAMESPACE

#define OSGREGISTERCOMBINERSCHUNKBASE_HEADER_CVSID "@(#)$Id: $"

#endif /* _OSGREGISTERCOMBINERSCHUNKBASE_H_ */
