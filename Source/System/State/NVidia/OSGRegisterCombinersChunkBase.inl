/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class RegisterCombinersChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &RegisterCombinersChunkBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 RegisterCombinersChunkBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 RegisterCombinersChunkBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the RegisterCombinersChunk::_sfColor0 field.

inline
Color4f &RegisterCombinersChunkBase::editColor0(void)
{
    editSField(Color0FieldMask);

    return _sfColor0.getValue();
}

//! Get the value of the RegisterCombinersChunk::_sfColor0 field.
inline
const Color4f &RegisterCombinersChunkBase::getColor0(void) const
{
    return _sfColor0.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
Color4f             &RegisterCombinersChunkBase::getColor0         (void)
{
    return this->editColor0         ();
}
#endif

//! Set the value of the RegisterCombinersChunk::_sfColor0 field.
inline
void RegisterCombinersChunkBase::setColor0(const Color4f &value)
{
    editSField(Color0FieldMask);

    _sfColor0.setValue(value);
}
//! Get the value of the RegisterCombinersChunk::_sfColor1 field.

inline
Color4f &RegisterCombinersChunkBase::editColor1(void)
{
    editSField(Color1FieldMask);

    return _sfColor1.getValue();
}

//! Get the value of the RegisterCombinersChunk::_sfColor1 field.
inline
const Color4f &RegisterCombinersChunkBase::getColor1(void) const
{
    return _sfColor1.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
Color4f             &RegisterCombinersChunkBase::getColor1         (void)
{
    return this->editColor1         ();
}
#endif

//! Set the value of the RegisterCombinersChunk::_sfColor1 field.
inline
void RegisterCombinersChunkBase::setColor1(const Color4f &value)
{
    editSField(Color1FieldMask);

    _sfColor1.setValue(value);
}
//! Get the value of the RegisterCombinersChunk::_sfColorSumClamp field.

inline
bool &RegisterCombinersChunkBase::editColorSumClamp(void)
{
    editSField(ColorSumClampFieldMask);

    return _sfColorSumClamp.getValue();
}

//! Get the value of the RegisterCombinersChunk::_sfColorSumClamp field.
inline
const bool &RegisterCombinersChunkBase::getColorSumClamp(void) const
{
    return _sfColorSumClamp.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
bool                &RegisterCombinersChunkBase::getColorSumClamp  (void)
{
    return this->editColorSumClamp  ();
}
#endif

//! Set the value of the RegisterCombinersChunk::_sfColorSumClamp field.
inline
void RegisterCombinersChunkBase::setColorSumClamp(const bool &value)
{
    editSField(ColorSumClampFieldMask);

    _sfColorSumClamp.setValue(value);
}
//! Get the value of the RegisterCombinersChunk::_sfPerStageConstants field.

inline
UInt8 &RegisterCombinersChunkBase::editPerStageConstants(void)
{
    editSField(PerStageConstantsFieldMask);

    return _sfPerStageConstants.getValue();
}

//! Get the value of the RegisterCombinersChunk::_sfPerStageConstants field.
inline
const UInt8 &RegisterCombinersChunkBase::getPerStageConstants(void) const
{
    return _sfPerStageConstants.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
UInt8               &RegisterCombinersChunkBase::getPerStageConstants(void)
{
    return this->editPerStageConstants();
}
#endif

//! Set the value of the RegisterCombinersChunk::_sfPerStageConstants field.
inline
void RegisterCombinersChunkBase::setPerStageConstants(const UInt8 &value)
{
    editSField(PerStageConstantsFieldMask);

    _sfPerStageConstants.setValue(value);
}

//! Get the value of the \a index element the RegisterCombinersChunk::_mfVariableArgb field.
inline
const GLenum &RegisterCombinersChunkBase::getVariableArgb(const UInt32 index) const
{
    return _mfVariableArgb[index];
}

inline
GLenum &RegisterCombinersChunkBase::editVariableArgb(const UInt32 index)
{
    editMField(VariableArgbFieldMask, _mfVariableArgb);

    return _mfVariableArgb[index];
}

//! Get the RegisterCombinersChunk::_mfVariableArgb field.
inline
MFGLenum &RegisterCombinersChunkBase::editVariableArgb(void)
{
    editMField(VariableArgbFieldMask, _mfVariableArgb);

    return _mfVariableArgb;
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &RegisterCombinersChunkBase::getVariableArgb   (const UInt32 index)
{
    return this->editVariableArgb   (index);
}

inline
MFGLenum            &RegisterCombinersChunkBase::getVariableArgb   (void)
{
    return this->editVariableArgb   ();
}

#endif


//! Get the RegisterCombinersChunk::_mfVariableArgb field.
inline
const MFGLenum &RegisterCombinersChunkBase::getVariableArgb(void) const
{
    return _mfVariableArgb;
}

//! Get the value of the \a index element the RegisterCombinersChunk::_mfVariableBrgb field.
inline
const GLenum &RegisterCombinersChunkBase::getVariableBrgb(const UInt32 index) const
{
    return _mfVariableBrgb[index];
}

inline
GLenum &RegisterCombinersChunkBase::editVariableBrgb(const UInt32 index)
{
    editMField(VariableBrgbFieldMask, _mfVariableBrgb);

    return _mfVariableBrgb[index];
}

//! Get the RegisterCombinersChunk::_mfVariableBrgb field.
inline
MFGLenum &RegisterCombinersChunkBase::editVariableBrgb(void)
{
    editMField(VariableBrgbFieldMask, _mfVariableBrgb);

    return _mfVariableBrgb;
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &RegisterCombinersChunkBase::getVariableBrgb   (const UInt32 index)
{
    return this->editVariableBrgb   (index);
}

inline
MFGLenum            &RegisterCombinersChunkBase::getVariableBrgb   (void)
{
    return this->editVariableBrgb   ();
}

#endif


//! Get the RegisterCombinersChunk::_mfVariableBrgb field.
inline
const MFGLenum &RegisterCombinersChunkBase::getVariableBrgb(void) const
{
    return _mfVariableBrgb;
}

//! Get the value of the \a index element the RegisterCombinersChunk::_mfVariableCrgb field.
inline
const GLenum &RegisterCombinersChunkBase::getVariableCrgb(const UInt32 index) const
{
    return _mfVariableCrgb[index];
}

inline
GLenum &RegisterCombinersChunkBase::editVariableCrgb(const UInt32 index)
{
    editMField(VariableCrgbFieldMask, _mfVariableCrgb);

    return _mfVariableCrgb[index];
}

//! Get the RegisterCombinersChunk::_mfVariableCrgb field.
inline
MFGLenum &RegisterCombinersChunkBase::editVariableCrgb(void)
{
    editMField(VariableCrgbFieldMask, _mfVariableCrgb);

    return _mfVariableCrgb;
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &RegisterCombinersChunkBase::getVariableCrgb   (const UInt32 index)
{
    return this->editVariableCrgb   (index);
}

inline
MFGLenum            &RegisterCombinersChunkBase::getVariableCrgb   (void)
{
    return this->editVariableCrgb   ();
}

#endif


//! Get the RegisterCombinersChunk::_mfVariableCrgb field.
inline
const MFGLenum &RegisterCombinersChunkBase::getVariableCrgb(void) const
{
    return _mfVariableCrgb;
}

//! Get the value of the \a index element the RegisterCombinersChunk::_mfVariableDrgb field.
inline
const GLenum &RegisterCombinersChunkBase::getVariableDrgb(const UInt32 index) const
{
    return _mfVariableDrgb[index];
}

inline
GLenum &RegisterCombinersChunkBase::editVariableDrgb(const UInt32 index)
{
    editMField(VariableDrgbFieldMask, _mfVariableDrgb);

    return _mfVariableDrgb[index];
}

//! Get the RegisterCombinersChunk::_mfVariableDrgb field.
inline
MFGLenum &RegisterCombinersChunkBase::editVariableDrgb(void)
{
    editMField(VariableDrgbFieldMask, _mfVariableDrgb);

    return _mfVariableDrgb;
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &RegisterCombinersChunkBase::getVariableDrgb   (const UInt32 index)
{
    return this->editVariableDrgb   (index);
}

inline
MFGLenum            &RegisterCombinersChunkBase::getVariableDrgb   (void)
{
    return this->editVariableDrgb   ();
}

#endif


//! Get the RegisterCombinersChunk::_mfVariableDrgb field.
inline
const MFGLenum &RegisterCombinersChunkBase::getVariableDrgb(void) const
{
    return _mfVariableDrgb;
}

//! Get the value of the \a index element the RegisterCombinersChunk::_mfVariableAalpha field.
inline
const GLenum &RegisterCombinersChunkBase::getVariableAalpha(const UInt32 index) const
{
    return _mfVariableAalpha[index];
}

inline
GLenum &RegisterCombinersChunkBase::editVariableAalpha(const UInt32 index)
{
    editMField(VariableAalphaFieldMask, _mfVariableAalpha);

    return _mfVariableAalpha[index];
}

//! Get the RegisterCombinersChunk::_mfVariableAalpha field.
inline
MFGLenum &RegisterCombinersChunkBase::editVariableAalpha(void)
{
    editMField(VariableAalphaFieldMask, _mfVariableAalpha);

    return _mfVariableAalpha;
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &RegisterCombinersChunkBase::getVariableAalpha (const UInt32 index)
{
    return this->editVariableAalpha (index);
}

inline
MFGLenum            &RegisterCombinersChunkBase::getVariableAalpha (void)
{
    return this->editVariableAalpha ();
}

#endif


//! Get the RegisterCombinersChunk::_mfVariableAalpha field.
inline
const MFGLenum &RegisterCombinersChunkBase::getVariableAalpha(void) const
{
    return _mfVariableAalpha;
}

//! Get the value of the \a index element the RegisterCombinersChunk::_mfVariableBalpha field.
inline
const GLenum &RegisterCombinersChunkBase::getVariableBalpha(const UInt32 index) const
{
    return _mfVariableBalpha[index];
}

inline
GLenum &RegisterCombinersChunkBase::editVariableBalpha(const UInt32 index)
{
    editMField(VariableBalphaFieldMask, _mfVariableBalpha);

    return _mfVariableBalpha[index];
}

//! Get the RegisterCombinersChunk::_mfVariableBalpha field.
inline
MFGLenum &RegisterCombinersChunkBase::editVariableBalpha(void)
{
    editMField(VariableBalphaFieldMask, _mfVariableBalpha);

    return _mfVariableBalpha;
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &RegisterCombinersChunkBase::getVariableBalpha (const UInt32 index)
{
    return this->editVariableBalpha (index);
}

inline
MFGLenum            &RegisterCombinersChunkBase::getVariableBalpha (void)
{
    return this->editVariableBalpha ();
}

#endif


//! Get the RegisterCombinersChunk::_mfVariableBalpha field.
inline
const MFGLenum &RegisterCombinersChunkBase::getVariableBalpha(void) const
{
    return _mfVariableBalpha;
}

//! Get the value of the \a index element the RegisterCombinersChunk::_mfVariableCalpha field.
inline
const GLenum &RegisterCombinersChunkBase::getVariableCalpha(const UInt32 index) const
{
    return _mfVariableCalpha[index];
}

inline
GLenum &RegisterCombinersChunkBase::editVariableCalpha(const UInt32 index)
{
    editMField(VariableCalphaFieldMask, _mfVariableCalpha);

    return _mfVariableCalpha[index];
}

//! Get the RegisterCombinersChunk::_mfVariableCalpha field.
inline
MFGLenum &RegisterCombinersChunkBase::editVariableCalpha(void)
{
    editMField(VariableCalphaFieldMask, _mfVariableCalpha);

    return _mfVariableCalpha;
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &RegisterCombinersChunkBase::getVariableCalpha (const UInt32 index)
{
    return this->editVariableCalpha (index);
}

inline
MFGLenum            &RegisterCombinersChunkBase::getVariableCalpha (void)
{
    return this->editVariableCalpha ();
}

#endif


//! Get the RegisterCombinersChunk::_mfVariableCalpha field.
inline
const MFGLenum &RegisterCombinersChunkBase::getVariableCalpha(void) const
{
    return _mfVariableCalpha;
}

//! Get the value of the \a index element the RegisterCombinersChunk::_mfVariableDalpha field.
inline
const GLenum &RegisterCombinersChunkBase::getVariableDalpha(const UInt32 index) const
{
    return _mfVariableDalpha[index];
}

inline
GLenum &RegisterCombinersChunkBase::editVariableDalpha(const UInt32 index)
{
    editMField(VariableDalphaFieldMask, _mfVariableDalpha);

    return _mfVariableDalpha[index];
}

//! Get the RegisterCombinersChunk::_mfVariableDalpha field.
inline
MFGLenum &RegisterCombinersChunkBase::editVariableDalpha(void)
{
    editMField(VariableDalphaFieldMask, _mfVariableDalpha);

    return _mfVariableDalpha;
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &RegisterCombinersChunkBase::getVariableDalpha (const UInt32 index)
{
    return this->editVariableDalpha (index);
}

inline
MFGLenum            &RegisterCombinersChunkBase::getVariableDalpha (void)
{
    return this->editVariableDalpha ();
}

#endif


//! Get the RegisterCombinersChunk::_mfVariableDalpha field.
inline
const MFGLenum &RegisterCombinersChunkBase::getVariableDalpha(void) const
{
    return _mfVariableDalpha;
}

//! Get the value of the \a index element the RegisterCombinersChunk::_mfOutputABrgb field.
inline
const GLenum &RegisterCombinersChunkBase::getOutputABrgb(const UInt32 index) const
{
    return _mfOutputABrgb[index];
}

inline
GLenum &RegisterCombinersChunkBase::editOutputABrgb(const UInt32 index)
{
    editMField(OutputABrgbFieldMask, _mfOutputABrgb);

    return _mfOutputABrgb[index];
}

//! Get the RegisterCombinersChunk::_mfOutputABrgb field.
inline
MFGLenum &RegisterCombinersChunkBase::editOutputABrgb(void)
{
    editMField(OutputABrgbFieldMask, _mfOutputABrgb);

    return _mfOutputABrgb;
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &RegisterCombinersChunkBase::getOutputABrgb    (const UInt32 index)
{
    return this->editOutputABrgb    (index);
}

inline
MFGLenum            &RegisterCombinersChunkBase::getOutputABrgb    (void)
{
    return this->editOutputABrgb    ();
}

#endif


//! Get the RegisterCombinersChunk::_mfOutputABrgb field.
inline
const MFGLenum &RegisterCombinersChunkBase::getOutputABrgb(void) const
{
    return _mfOutputABrgb;
}

//! Get the value of the \a index element the RegisterCombinersChunk::_mfOutputCDrgb field.
inline
const GLenum &RegisterCombinersChunkBase::getOutputCDrgb(const UInt32 index) const
{
    return _mfOutputCDrgb[index];
}

inline
GLenum &RegisterCombinersChunkBase::editOutputCDrgb(const UInt32 index)
{
    editMField(OutputCDrgbFieldMask, _mfOutputCDrgb);

    return _mfOutputCDrgb[index];
}

//! Get the RegisterCombinersChunk::_mfOutputCDrgb field.
inline
MFGLenum &RegisterCombinersChunkBase::editOutputCDrgb(void)
{
    editMField(OutputCDrgbFieldMask, _mfOutputCDrgb);

    return _mfOutputCDrgb;
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &RegisterCombinersChunkBase::getOutputCDrgb    (const UInt32 index)
{
    return this->editOutputCDrgb    (index);
}

inline
MFGLenum            &RegisterCombinersChunkBase::getOutputCDrgb    (void)
{
    return this->editOutputCDrgb    ();
}

#endif


//! Get the RegisterCombinersChunk::_mfOutputCDrgb field.
inline
const MFGLenum &RegisterCombinersChunkBase::getOutputCDrgb(void) const
{
    return _mfOutputCDrgb;
}

//! Get the value of the \a index element the RegisterCombinersChunk::_mfOutputSumrgb field.
inline
const GLenum &RegisterCombinersChunkBase::getOutputSumrgb(const UInt32 index) const
{
    return _mfOutputSumrgb[index];
}

inline
GLenum &RegisterCombinersChunkBase::editOutputSumrgb(const UInt32 index)
{
    editMField(OutputSumrgbFieldMask, _mfOutputSumrgb);

    return _mfOutputSumrgb[index];
}

//! Get the RegisterCombinersChunk::_mfOutputSumrgb field.
inline
MFGLenum &RegisterCombinersChunkBase::editOutputSumrgb(void)
{
    editMField(OutputSumrgbFieldMask, _mfOutputSumrgb);

    return _mfOutputSumrgb;
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &RegisterCombinersChunkBase::getOutputSumrgb   (const UInt32 index)
{
    return this->editOutputSumrgb   (index);
}

inline
MFGLenum            &RegisterCombinersChunkBase::getOutputSumrgb   (void)
{
    return this->editOutputSumrgb   ();
}

#endif


//! Get the RegisterCombinersChunk::_mfOutputSumrgb field.
inline
const MFGLenum &RegisterCombinersChunkBase::getOutputSumrgb(void) const
{
    return _mfOutputSumrgb;
}

//! Get the value of the \a index element the RegisterCombinersChunk::_mfScalergb field.
inline
const GLenum &RegisterCombinersChunkBase::getScalergb(const UInt32 index) const
{
    return _mfScalergb[index];
}

inline
GLenum &RegisterCombinersChunkBase::editScalergb(const UInt32 index)
{
    editMField(ScalergbFieldMask, _mfScalergb);

    return _mfScalergb[index];
}

//! Get the RegisterCombinersChunk::_mfScalergb field.
inline
MFGLenum &RegisterCombinersChunkBase::editScalergb(void)
{
    editMField(ScalergbFieldMask, _mfScalergb);

    return _mfScalergb;
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &RegisterCombinersChunkBase::getScalergb       (const UInt32 index)
{
    return this->editScalergb       (index);
}

inline
MFGLenum            &RegisterCombinersChunkBase::getScalergb       (void)
{
    return this->editScalergb       ();
}

#endif


//! Get the RegisterCombinersChunk::_mfScalergb field.
inline
const MFGLenum &RegisterCombinersChunkBase::getScalergb(void) const
{
    return _mfScalergb;
}

//! Get the value of the \a index element the RegisterCombinersChunk::_mfBiasrgb field.
inline
const GLenum &RegisterCombinersChunkBase::getBiasrgb(const UInt32 index) const
{
    return _mfBiasrgb[index];
}

inline
GLenum &RegisterCombinersChunkBase::editBiasrgb(const UInt32 index)
{
    editMField(BiasrgbFieldMask, _mfBiasrgb);

    return _mfBiasrgb[index];
}

//! Get the RegisterCombinersChunk::_mfBiasrgb field.
inline
MFGLenum &RegisterCombinersChunkBase::editBiasrgb(void)
{
    editMField(BiasrgbFieldMask, _mfBiasrgb);

    return _mfBiasrgb;
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &RegisterCombinersChunkBase::getBiasrgb        (const UInt32 index)
{
    return this->editBiasrgb        (index);
}

inline
MFGLenum            &RegisterCombinersChunkBase::getBiasrgb        (void)
{
    return this->editBiasrgb        ();
}

#endif


//! Get the RegisterCombinersChunk::_mfBiasrgb field.
inline
const MFGLenum &RegisterCombinersChunkBase::getBiasrgb(void) const
{
    return _mfBiasrgb;
}

//! Get the value of the \a index element the RegisterCombinersChunk::_mfOutputABalpha field.
inline
const GLenum &RegisterCombinersChunkBase::getOutputABalpha(const UInt32 index) const
{
    return _mfOutputABalpha[index];
}

inline
GLenum &RegisterCombinersChunkBase::editOutputABalpha(const UInt32 index)
{
    editMField(OutputABalphaFieldMask, _mfOutputABalpha);

    return _mfOutputABalpha[index];
}

//! Get the RegisterCombinersChunk::_mfOutputABalpha field.
inline
MFGLenum &RegisterCombinersChunkBase::editOutputABalpha(void)
{
    editMField(OutputABalphaFieldMask, _mfOutputABalpha);

    return _mfOutputABalpha;
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &RegisterCombinersChunkBase::getOutputABalpha  (const UInt32 index)
{
    return this->editOutputABalpha  (index);
}

inline
MFGLenum            &RegisterCombinersChunkBase::getOutputABalpha  (void)
{
    return this->editOutputABalpha  ();
}

#endif


//! Get the RegisterCombinersChunk::_mfOutputABalpha field.
inline
const MFGLenum &RegisterCombinersChunkBase::getOutputABalpha(void) const
{
    return _mfOutputABalpha;
}

//! Get the value of the \a index element the RegisterCombinersChunk::_mfOutputCDalpha field.
inline
const GLenum &RegisterCombinersChunkBase::getOutputCDalpha(const UInt32 index) const
{
    return _mfOutputCDalpha[index];
}

inline
GLenum &RegisterCombinersChunkBase::editOutputCDalpha(const UInt32 index)
{
    editMField(OutputCDalphaFieldMask, _mfOutputCDalpha);

    return _mfOutputCDalpha[index];
}

//! Get the RegisterCombinersChunk::_mfOutputCDalpha field.
inline
MFGLenum &RegisterCombinersChunkBase::editOutputCDalpha(void)
{
    editMField(OutputCDalphaFieldMask, _mfOutputCDalpha);

    return _mfOutputCDalpha;
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &RegisterCombinersChunkBase::getOutputCDalpha  (const UInt32 index)
{
    return this->editOutputCDalpha  (index);
}

inline
MFGLenum            &RegisterCombinersChunkBase::getOutputCDalpha  (void)
{
    return this->editOutputCDalpha  ();
}

#endif


//! Get the RegisterCombinersChunk::_mfOutputCDalpha field.
inline
const MFGLenum &RegisterCombinersChunkBase::getOutputCDalpha(void) const
{
    return _mfOutputCDalpha;
}

//! Get the value of the \a index element the RegisterCombinersChunk::_mfOutputSumalpha field.
inline
const GLenum &RegisterCombinersChunkBase::getOutputSumalpha(const UInt32 index) const
{
    return _mfOutputSumalpha[index];
}

inline
GLenum &RegisterCombinersChunkBase::editOutputSumalpha(const UInt32 index)
{
    editMField(OutputSumalphaFieldMask, _mfOutputSumalpha);

    return _mfOutputSumalpha[index];
}

//! Get the RegisterCombinersChunk::_mfOutputSumalpha field.
inline
MFGLenum &RegisterCombinersChunkBase::editOutputSumalpha(void)
{
    editMField(OutputSumalphaFieldMask, _mfOutputSumalpha);

    return _mfOutputSumalpha;
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &RegisterCombinersChunkBase::getOutputSumalpha (const UInt32 index)
{
    return this->editOutputSumalpha (index);
}

inline
MFGLenum            &RegisterCombinersChunkBase::getOutputSumalpha (void)
{
    return this->editOutputSumalpha ();
}

#endif


//! Get the RegisterCombinersChunk::_mfOutputSumalpha field.
inline
const MFGLenum &RegisterCombinersChunkBase::getOutputSumalpha(void) const
{
    return _mfOutputSumalpha;
}

//! Get the value of the \a index element the RegisterCombinersChunk::_mfDotABrgb field.
inline
const UInt8 &RegisterCombinersChunkBase::getDotABrgb(const UInt32 index) const
{
    return _mfDotABrgb[index];
}

inline
UInt8 &RegisterCombinersChunkBase::editDotABrgb(const UInt32 index)
{
    editMField(DotABrgbFieldMask, _mfDotABrgb);

    return _mfDotABrgb[index];
}

//! Get the RegisterCombinersChunk::_mfDotABrgb field.
inline
MFUInt8 &RegisterCombinersChunkBase::editDotABrgb(void)
{
    editMField(DotABrgbFieldMask, _mfDotABrgb);

    return _mfDotABrgb;
}

#ifdef OSG_1_GET_COMPAT
inline
UInt8               &RegisterCombinersChunkBase::getDotABrgb       (const UInt32 index)
{
    return this->editDotABrgb       (index);
}

inline
MFUInt8             &RegisterCombinersChunkBase::getDotABrgb       (void)
{
    return this->editDotABrgb       ();
}

#endif


//! Get the RegisterCombinersChunk::_mfDotABrgb field.
inline
const MFUInt8 &RegisterCombinersChunkBase::getDotABrgb(void) const
{
    return _mfDotABrgb;
}

//! Get the value of the \a index element the RegisterCombinersChunk::_mfDotCDrgb field.
inline
const UInt8 &RegisterCombinersChunkBase::getDotCDrgb(const UInt32 index) const
{
    return _mfDotCDrgb[index];
}

inline
UInt8 &RegisterCombinersChunkBase::editDotCDrgb(const UInt32 index)
{
    editMField(DotCDrgbFieldMask, _mfDotCDrgb);

    return _mfDotCDrgb[index];
}

//! Get the RegisterCombinersChunk::_mfDotCDrgb field.
inline
MFUInt8 &RegisterCombinersChunkBase::editDotCDrgb(void)
{
    editMField(DotCDrgbFieldMask, _mfDotCDrgb);

    return _mfDotCDrgb;
}

#ifdef OSG_1_GET_COMPAT
inline
UInt8               &RegisterCombinersChunkBase::getDotCDrgb       (const UInt32 index)
{
    return this->editDotCDrgb       (index);
}

inline
MFUInt8             &RegisterCombinersChunkBase::getDotCDrgb       (void)
{
    return this->editDotCDrgb       ();
}

#endif


//! Get the RegisterCombinersChunk::_mfDotCDrgb field.
inline
const MFUInt8 &RegisterCombinersChunkBase::getDotCDrgb(void) const
{
    return _mfDotCDrgb;
}

//! Get the value of the \a index element the RegisterCombinersChunk::_mfMuxSumrgb field.
inline
const UInt8 &RegisterCombinersChunkBase::getMuxSumrgb(const UInt32 index) const
{
    return _mfMuxSumrgb[index];
}

inline
UInt8 &RegisterCombinersChunkBase::editMuxSumrgb(const UInt32 index)
{
    editMField(MuxSumrgbFieldMask, _mfMuxSumrgb);

    return _mfMuxSumrgb[index];
}

//! Get the RegisterCombinersChunk::_mfMuxSumrgb field.
inline
MFUInt8 &RegisterCombinersChunkBase::editMuxSumrgb(void)
{
    editMField(MuxSumrgbFieldMask, _mfMuxSumrgb);

    return _mfMuxSumrgb;
}

#ifdef OSG_1_GET_COMPAT
inline
UInt8               &RegisterCombinersChunkBase::getMuxSumrgb      (const UInt32 index)
{
    return this->editMuxSumrgb      (index);
}

inline
MFUInt8             &RegisterCombinersChunkBase::getMuxSumrgb      (void)
{
    return this->editMuxSumrgb      ();
}

#endif


//! Get the RegisterCombinersChunk::_mfMuxSumrgb field.
inline
const MFUInt8 &RegisterCombinersChunkBase::getMuxSumrgb(void) const
{
    return _mfMuxSumrgb;
}

//! Get the value of the \a index element the RegisterCombinersChunk::_mfScalealpha field.
inline
const GLenum &RegisterCombinersChunkBase::getScalealpha(const UInt32 index) const
{
    return _mfScalealpha[index];
}

inline
GLenum &RegisterCombinersChunkBase::editScalealpha(const UInt32 index)
{
    editMField(ScalealphaFieldMask, _mfScalealpha);

    return _mfScalealpha[index];
}

//! Get the RegisterCombinersChunk::_mfScalealpha field.
inline
MFGLenum &RegisterCombinersChunkBase::editScalealpha(void)
{
    editMField(ScalealphaFieldMask, _mfScalealpha);

    return _mfScalealpha;
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &RegisterCombinersChunkBase::getScalealpha     (const UInt32 index)
{
    return this->editScalealpha     (index);
}

inline
MFGLenum            &RegisterCombinersChunkBase::getScalealpha     (void)
{
    return this->editScalealpha     ();
}

#endif


//! Get the RegisterCombinersChunk::_mfScalealpha field.
inline
const MFGLenum &RegisterCombinersChunkBase::getScalealpha(void) const
{
    return _mfScalealpha;
}

//! Get the value of the \a index element the RegisterCombinersChunk::_mfBiasalpha field.
inline
const GLenum &RegisterCombinersChunkBase::getBiasalpha(const UInt32 index) const
{
    return _mfBiasalpha[index];
}

inline
GLenum &RegisterCombinersChunkBase::editBiasalpha(const UInt32 index)
{
    editMField(BiasalphaFieldMask, _mfBiasalpha);

    return _mfBiasalpha[index];
}

//! Get the RegisterCombinersChunk::_mfBiasalpha field.
inline
MFGLenum &RegisterCombinersChunkBase::editBiasalpha(void)
{
    editMField(BiasalphaFieldMask, _mfBiasalpha);

    return _mfBiasalpha;
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &RegisterCombinersChunkBase::getBiasalpha      (const UInt32 index)
{
    return this->editBiasalpha      (index);
}

inline
MFGLenum            &RegisterCombinersChunkBase::getBiasalpha      (void)
{
    return this->editBiasalpha      ();
}

#endif


//! Get the RegisterCombinersChunk::_mfBiasalpha field.
inline
const MFGLenum &RegisterCombinersChunkBase::getBiasalpha(void) const
{
    return _mfBiasalpha;
}

//! Get the value of the \a index element the RegisterCombinersChunk::_mfMuxSumalpha field.
inline
const UInt8 &RegisterCombinersChunkBase::getMuxSumalpha(const UInt32 index) const
{
    return _mfMuxSumalpha[index];
}

inline
UInt8 &RegisterCombinersChunkBase::editMuxSumalpha(const UInt32 index)
{
    editMField(MuxSumalphaFieldMask, _mfMuxSumalpha);

    return _mfMuxSumalpha[index];
}

//! Get the RegisterCombinersChunk::_mfMuxSumalpha field.
inline
MFUInt8 &RegisterCombinersChunkBase::editMuxSumalpha(void)
{
    editMField(MuxSumalphaFieldMask, _mfMuxSumalpha);

    return _mfMuxSumalpha;
}

#ifdef OSG_1_GET_COMPAT
inline
UInt8               &RegisterCombinersChunkBase::getMuxSumalpha    (const UInt32 index)
{
    return this->editMuxSumalpha    (index);
}

inline
MFUInt8             &RegisterCombinersChunkBase::getMuxSumalpha    (void)
{
    return this->editMuxSumalpha    ();
}

#endif


//! Get the RegisterCombinersChunk::_mfMuxSumalpha field.
inline
const MFUInt8 &RegisterCombinersChunkBase::getMuxSumalpha(void) const
{
    return _mfMuxSumalpha;
}

//! Get the value of the \a index element the RegisterCombinersChunk::_mfVariableE field.
inline
const GLenum &RegisterCombinersChunkBase::getVariableE(const UInt32 index) const
{
    return _mfVariableE[index];
}

inline
GLenum &RegisterCombinersChunkBase::editVariableE(const UInt32 index)
{
    editMField(VariableEFieldMask, _mfVariableE);

    return _mfVariableE[index];
}

//! Get the RegisterCombinersChunk::_mfVariableE field.
inline
MFGLenum &RegisterCombinersChunkBase::editVariableE(void)
{
    editMField(VariableEFieldMask, _mfVariableE);

    return _mfVariableE;
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &RegisterCombinersChunkBase::getVariableE      (const UInt32 index)
{
    return this->editVariableE      (index);
}

inline
MFGLenum            &RegisterCombinersChunkBase::getVariableE      (void)
{
    return this->editVariableE      ();
}

#endif


//! Get the RegisterCombinersChunk::_mfVariableE field.
inline
const MFGLenum &RegisterCombinersChunkBase::getVariableE(void) const
{
    return _mfVariableE;
}

//! Get the value of the \a index element the RegisterCombinersChunk::_mfVariableF field.
inline
const GLenum &RegisterCombinersChunkBase::getVariableF(const UInt32 index) const
{
    return _mfVariableF[index];
}

inline
GLenum &RegisterCombinersChunkBase::editVariableF(const UInt32 index)
{
    editMField(VariableFFieldMask, _mfVariableF);

    return _mfVariableF[index];
}

//! Get the RegisterCombinersChunk::_mfVariableF field.
inline
MFGLenum &RegisterCombinersChunkBase::editVariableF(void)
{
    editMField(VariableFFieldMask, _mfVariableF);

    return _mfVariableF;
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &RegisterCombinersChunkBase::getVariableF      (const UInt32 index)
{
    return this->editVariableF      (index);
}

inline
MFGLenum            &RegisterCombinersChunkBase::getVariableF      (void)
{
    return this->editVariableF      ();
}

#endif


//! Get the RegisterCombinersChunk::_mfVariableF field.
inline
const MFGLenum &RegisterCombinersChunkBase::getVariableF(void) const
{
    return _mfVariableF;
}

//! Get the value of the \a index element the RegisterCombinersChunk::_mfVariableG field.
inline
const GLenum &RegisterCombinersChunkBase::getVariableG(const UInt32 index) const
{
    return _mfVariableG[index];
}

inline
GLenum &RegisterCombinersChunkBase::editVariableG(const UInt32 index)
{
    editMField(VariableGFieldMask, _mfVariableG);

    return _mfVariableG[index];
}

//! Get the RegisterCombinersChunk::_mfVariableG field.
inline
MFGLenum &RegisterCombinersChunkBase::editVariableG(void)
{
    editMField(VariableGFieldMask, _mfVariableG);

    return _mfVariableG;
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &RegisterCombinersChunkBase::getVariableG      (const UInt32 index)
{
    return this->editVariableG      (index);
}

inline
MFGLenum            &RegisterCombinersChunkBase::getVariableG      (void)
{
    return this->editVariableG      ();
}

#endif


//! Get the RegisterCombinersChunk::_mfVariableG field.
inline
const MFGLenum &RegisterCombinersChunkBase::getVariableG(void) const
{
    return _mfVariableG;
}

//! Get the value of the \a index element the RegisterCombinersChunk::_mfCombinerColor0 field.
inline
const Color4f &RegisterCombinersChunkBase::getCombinerColor0(const UInt32 index) const
{
    return _mfCombinerColor0[index];
}

inline
Color4f &RegisterCombinersChunkBase::editCombinerColor0(const UInt32 index)
{
    editMField(CombinerColor0FieldMask, _mfCombinerColor0);

    return _mfCombinerColor0[index];
}

//! Get the RegisterCombinersChunk::_mfCombinerColor0 field.
inline
MFColor4f &RegisterCombinersChunkBase::editCombinerColor0(void)
{
    editMField(CombinerColor0FieldMask, _mfCombinerColor0);

    return _mfCombinerColor0;
}

#ifdef OSG_1_GET_COMPAT
inline
Color4f             &RegisterCombinersChunkBase::getCombinerColor0 (const UInt32 index)
{
    return this->editCombinerColor0 (index);
}

inline
MFColor4f           &RegisterCombinersChunkBase::getCombinerColor0 (void)
{
    return this->editCombinerColor0 ();
}

#endif


//! Get the RegisterCombinersChunk::_mfCombinerColor0 field.
inline
const MFColor4f &RegisterCombinersChunkBase::getCombinerColor0(void) const
{
    return _mfCombinerColor0;
}

//! Get the value of the \a index element the RegisterCombinersChunk::_mfCombinerColor1 field.
inline
const Color4f &RegisterCombinersChunkBase::getCombinerColor1(const UInt32 index) const
{
    return _mfCombinerColor1[index];
}

inline
Color4f &RegisterCombinersChunkBase::editCombinerColor1(const UInt32 index)
{
    editMField(CombinerColor1FieldMask, _mfCombinerColor1);

    return _mfCombinerColor1[index];
}

//! Get the RegisterCombinersChunk::_mfCombinerColor1 field.
inline
MFColor4f &RegisterCombinersChunkBase::editCombinerColor1(void)
{
    editMField(CombinerColor1FieldMask, _mfCombinerColor1);

    return _mfCombinerColor1;
}

#ifdef OSG_1_GET_COMPAT
inline
Color4f             &RegisterCombinersChunkBase::getCombinerColor1 (const UInt32 index)
{
    return this->editCombinerColor1 (index);
}

inline
MFColor4f           &RegisterCombinersChunkBase::getCombinerColor1 (void)
{
    return this->editCombinerColor1 ();
}

#endif


//! Get the RegisterCombinersChunk::_mfCombinerColor1 field.
inline
const MFColor4f &RegisterCombinersChunkBase::getCombinerColor1(void) const
{
    return _mfCombinerColor1;
}


#ifdef OSG_MT_FIELDCONTAINERPTR
inline
void RegisterCombinersChunkBase::execSync(      RegisterCombinersChunkBase *pOther,
                                       ConstFieldMaskArg  whichField,
                                       ConstFieldMaskArg  syncMode,
                                 const UInt32             uiSyncInfo,
                                       UInt32             uiCopyOffset)
{
    Inherited::execSync(pOther, whichField, syncMode, uiSyncInfo, uiCopyOffset);

    if(FieldBits::NoField != (Color0FieldMask & whichField))
        _sfColor0.syncWith(pOther->_sfColor0);

    if(FieldBits::NoField != (Color1FieldMask & whichField))
        _sfColor1.syncWith(pOther->_sfColor1);

    if(FieldBits::NoField != (ColorSumClampFieldMask & whichField))
        _sfColorSumClamp.syncWith(pOther->_sfColorSumClamp);

    if(FieldBits::NoField != (VariableArgbFieldMask & whichField))
        _mfVariableArgb.syncWith(pOther->_mfVariableArgb,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (VariableBrgbFieldMask & whichField))
        _mfVariableBrgb.syncWith(pOther->_mfVariableBrgb,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (VariableCrgbFieldMask & whichField))
        _mfVariableCrgb.syncWith(pOther->_mfVariableCrgb,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (VariableDrgbFieldMask & whichField))
        _mfVariableDrgb.syncWith(pOther->_mfVariableDrgb,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (VariableAalphaFieldMask & whichField))
        _mfVariableAalpha.syncWith(pOther->_mfVariableAalpha,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (VariableBalphaFieldMask & whichField))
        _mfVariableBalpha.syncWith(pOther->_mfVariableBalpha,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (VariableCalphaFieldMask & whichField))
        _mfVariableCalpha.syncWith(pOther->_mfVariableCalpha,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (VariableDalphaFieldMask & whichField))
        _mfVariableDalpha.syncWith(pOther->_mfVariableDalpha,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (OutputABrgbFieldMask & whichField))
        _mfOutputABrgb.syncWith(pOther->_mfOutputABrgb,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (OutputCDrgbFieldMask & whichField))
        _mfOutputCDrgb.syncWith(pOther->_mfOutputCDrgb,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (OutputSumrgbFieldMask & whichField))
        _mfOutputSumrgb.syncWith(pOther->_mfOutputSumrgb,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (ScalergbFieldMask & whichField))
        _mfScalergb.syncWith(pOther->_mfScalergb,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (BiasrgbFieldMask & whichField))
        _mfBiasrgb.syncWith(pOther->_mfBiasrgb,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (OutputABalphaFieldMask & whichField))
        _mfOutputABalpha.syncWith(pOther->_mfOutputABalpha,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (OutputCDalphaFieldMask & whichField))
        _mfOutputCDalpha.syncWith(pOther->_mfOutputCDalpha,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (OutputSumalphaFieldMask & whichField))
        _mfOutputSumalpha.syncWith(pOther->_mfOutputSumalpha,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (DotABrgbFieldMask & whichField))
        _mfDotABrgb.syncWith(pOther->_mfDotABrgb,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (DotCDrgbFieldMask & whichField))
        _mfDotCDrgb.syncWith(pOther->_mfDotCDrgb,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (MuxSumrgbFieldMask & whichField))
        _mfMuxSumrgb.syncWith(pOther->_mfMuxSumrgb,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (ScalealphaFieldMask & whichField))
        _mfScalealpha.syncWith(pOther->_mfScalealpha,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (BiasalphaFieldMask & whichField))
        _mfBiasalpha.syncWith(pOther->_mfBiasalpha,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (MuxSumalphaFieldMask & whichField))
        _mfMuxSumalpha.syncWith(pOther->_mfMuxSumalpha,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (VariableEFieldMask & whichField))
        _mfVariableE.syncWith(pOther->_mfVariableE,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (VariableFFieldMask & whichField))
        _mfVariableF.syncWith(pOther->_mfVariableF,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (VariableGFieldMask & whichField))
        _mfVariableG.syncWith(pOther->_mfVariableG,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (CombinerColor0FieldMask & whichField))
        _mfCombinerColor0.syncWith(pOther->_mfCombinerColor0,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (CombinerColor1FieldMask & whichField))
        _mfCombinerColor1.syncWith(pOther->_mfCombinerColor1,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (PerStageConstantsFieldMask & whichField))
        _sfPerStageConstants.syncWith(pOther->_sfPerStageConstants);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
inline
void RegisterCombinersChunkBase::execSync (      RegisterCombinersChunkBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (Color0FieldMask & whichField))
        _sfColor0.syncWith(pFrom->_sfColor0);

    if(FieldBits::NoField != (Color1FieldMask & whichField))
        _sfColor1.syncWith(pFrom->_sfColor1);

    if(FieldBits::NoField != (ColorSumClampFieldMask & whichField))
        _sfColorSumClamp.syncWith(pFrom->_sfColorSumClamp);

    if(FieldBits::NoField != (VariableArgbFieldMask & whichField))
        _mfVariableArgb.syncWith(pFrom->_mfVariableArgb,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (VariableBrgbFieldMask & whichField))
        _mfVariableBrgb.syncWith(pFrom->_mfVariableBrgb,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (VariableCrgbFieldMask & whichField))
        _mfVariableCrgb.syncWith(pFrom->_mfVariableCrgb,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (VariableDrgbFieldMask & whichField))
        _mfVariableDrgb.syncWith(pFrom->_mfVariableDrgb,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (VariableAalphaFieldMask & whichField))
        _mfVariableAalpha.syncWith(pFrom->_mfVariableAalpha,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (VariableBalphaFieldMask & whichField))
        _mfVariableBalpha.syncWith(pFrom->_mfVariableBalpha,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (VariableCalphaFieldMask & whichField))
        _mfVariableCalpha.syncWith(pFrom->_mfVariableCalpha,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (VariableDalphaFieldMask & whichField))
        _mfVariableDalpha.syncWith(pFrom->_mfVariableDalpha,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (OutputABrgbFieldMask & whichField))
        _mfOutputABrgb.syncWith(pFrom->_mfOutputABrgb,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (OutputCDrgbFieldMask & whichField))
        _mfOutputCDrgb.syncWith(pFrom->_mfOutputCDrgb,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (OutputSumrgbFieldMask & whichField))
        _mfOutputSumrgb.syncWith(pFrom->_mfOutputSumrgb,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (ScalergbFieldMask & whichField))
        _mfScalergb.syncWith(pFrom->_mfScalergb,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (BiasrgbFieldMask & whichField))
        _mfBiasrgb.syncWith(pFrom->_mfBiasrgb,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (OutputABalphaFieldMask & whichField))
        _mfOutputABalpha.syncWith(pFrom->_mfOutputABalpha,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (OutputCDalphaFieldMask & whichField))
        _mfOutputCDalpha.syncWith(pFrom->_mfOutputCDalpha,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (OutputSumalphaFieldMask & whichField))
        _mfOutputSumalpha.syncWith(pFrom->_mfOutputSumalpha,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (DotABrgbFieldMask & whichField))
        _mfDotABrgb.syncWith(pFrom->_mfDotABrgb,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (DotCDrgbFieldMask & whichField))
        _mfDotCDrgb.syncWith(pFrom->_mfDotCDrgb,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (MuxSumrgbFieldMask & whichField))
        _mfMuxSumrgb.syncWith(pFrom->_mfMuxSumrgb,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (ScalealphaFieldMask & whichField))
        _mfScalealpha.syncWith(pFrom->_mfScalealpha,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (BiasalphaFieldMask & whichField))
        _mfBiasalpha.syncWith(pFrom->_mfBiasalpha,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (MuxSumalphaFieldMask & whichField))
        _mfMuxSumalpha.syncWith(pFrom->_mfMuxSumalpha,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (VariableEFieldMask & whichField))
        _mfVariableE.syncWith(pFrom->_mfVariableE,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (VariableFFieldMask & whichField))
        _mfVariableF.syncWith(pFrom->_mfVariableF,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (VariableGFieldMask & whichField))
        _mfVariableG.syncWith(pFrom->_mfVariableG,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (CombinerColor0FieldMask & whichField))
        _mfCombinerColor0.syncWith(pFrom->_mfCombinerColor0,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (CombinerColor1FieldMask & whichField))
        _mfCombinerColor1.syncWith(pFrom->_mfCombinerColor1,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (PerStageConstantsFieldMask & whichField))
        _sfPerStageConstants.syncWith(pFrom->_sfPerStageConstants);
}
#endif

#if 0
inline
void RegisterCombinersChunkBase::execBeginEdit(ConstFieldMaskArg whichField,
                                      UInt32            uiAspect,
                                      UInt32            uiContainerSize)
{
    Inherited::execBeginEdit(whichField, uiAspect, uiContainerSize);

    if(FieldBits::NoField != (VariableArgbFieldMask & whichField))
    {
        _mfVariableArgb.beginEdit(uiAspect, uiContainerSize);
    }

    if(FieldBits::NoField != (VariableBrgbFieldMask & whichField))
    {
        _mfVariableBrgb.beginEdit(uiAspect, uiContainerSize);
    }

    if(FieldBits::NoField != (VariableCrgbFieldMask & whichField))
    {
        _mfVariableCrgb.beginEdit(uiAspect, uiContainerSize);
    }

    if(FieldBits::NoField != (VariableDrgbFieldMask & whichField))
    {
        _mfVariableDrgb.beginEdit(uiAspect, uiContainerSize);
    }

    if(FieldBits::NoField != (VariableAalphaFieldMask & whichField))
    {
        _mfVariableAalpha.beginEdit(uiAspect, uiContainerSize);
    }

    if(FieldBits::NoField != (VariableBalphaFieldMask & whichField))
    {
        _mfVariableBalpha.beginEdit(uiAspect, uiContainerSize);
    }

    if(FieldBits::NoField != (VariableCalphaFieldMask & whichField))
    {
        _mfVariableCalpha.beginEdit(uiAspect, uiContainerSize);
    }

    if(FieldBits::NoField != (VariableDalphaFieldMask & whichField))
    {
        _mfVariableDalpha.beginEdit(uiAspect, uiContainerSize);
    }

    if(FieldBits::NoField != (OutputABrgbFieldMask & whichField))
    {
        _mfOutputABrgb.beginEdit(uiAspect, uiContainerSize);
    }

    if(FieldBits::NoField != (OutputCDrgbFieldMask & whichField))
    {
        _mfOutputCDrgb.beginEdit(uiAspect, uiContainerSize);
    }

    if(FieldBits::NoField != (OutputSumrgbFieldMask & whichField))
    {
        _mfOutputSumrgb.beginEdit(uiAspect, uiContainerSize);
    }

    if(FieldBits::NoField != (ScalergbFieldMask & whichField))
    {
        _mfScalergb.beginEdit(uiAspect, uiContainerSize);
    }

    if(FieldBits::NoField != (BiasrgbFieldMask & whichField))
    {
        _mfBiasrgb.beginEdit(uiAspect, uiContainerSize);
    }

    if(FieldBits::NoField != (OutputABalphaFieldMask & whichField))
    {
        _mfOutputABalpha.beginEdit(uiAspect, uiContainerSize);
    }

    if(FieldBits::NoField != (OutputCDalphaFieldMask & whichField))
    {
        _mfOutputCDalpha.beginEdit(uiAspect, uiContainerSize);
    }

    if(FieldBits::NoField != (OutputSumalphaFieldMask & whichField))
    {
        _mfOutputSumalpha.beginEdit(uiAspect, uiContainerSize);
    }

    if(FieldBits::NoField != (DotABrgbFieldMask & whichField))
    {
        _mfDotABrgb.beginEdit(uiAspect, uiContainerSize);
    }

    if(FieldBits::NoField != (DotCDrgbFieldMask & whichField))
    {
        _mfDotCDrgb.beginEdit(uiAspect, uiContainerSize);
    }

    if(FieldBits::NoField != (MuxSumrgbFieldMask & whichField))
    {
        _mfMuxSumrgb.beginEdit(uiAspect, uiContainerSize);
    }

    if(FieldBits::NoField != (ScalealphaFieldMask & whichField))
    {
        _mfScalealpha.beginEdit(uiAspect, uiContainerSize);
    }

    if(FieldBits::NoField != (BiasalphaFieldMask & whichField))
    {
        _mfBiasalpha.beginEdit(uiAspect, uiContainerSize);
    }

    if(FieldBits::NoField != (MuxSumalphaFieldMask & whichField))
    {
        _mfMuxSumalpha.beginEdit(uiAspect, uiContainerSize);
    }

    if(FieldBits::NoField != (VariableEFieldMask & whichField))
    {
        _mfVariableE.beginEdit(uiAspect, uiContainerSize);
    }

    if(FieldBits::NoField != (VariableFFieldMask & whichField))
    {
        _mfVariableF.beginEdit(uiAspect, uiContainerSize);
    }

    if(FieldBits::NoField != (VariableGFieldMask & whichField))
    {
        _mfVariableG.beginEdit(uiAspect, uiContainerSize);
    }

    if(FieldBits::NoField != (CombinerColor0FieldMask & whichField))
    {
        _mfCombinerColor0.beginEdit(uiAspect, uiContainerSize);
    }

    if(FieldBits::NoField != (CombinerColor1FieldMask & whichField))
    {
        _mfCombinerColor1.beginEdit(uiAspect, uiContainerSize);
    }
}
#endif


inline
Char8 *RegisterCombinersChunkBase::getClassname(void)
{
    return "RegisterCombinersChunk";
}
OSG_GEN_CONTAINERPTR(RegisterCombinersChunk);

OSG_END_NAMESPACE

