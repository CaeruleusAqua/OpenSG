/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class RegisterCombinersChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEREGISTERCOMBINERSCHUNKINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>




#include "OSGRegisterCombinersChunkBase.h"
#include "OSGRegisterCombinersChunk.h"

#include "boost/bind.hpp"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::RegisterCombinersChunk
    \ingroup GrpSystemState

    See \ref PageSystemRegisterCombinersChunk for a description.

    Try to avoid using this chunk, as it is very non-portable. Using a shader 
    instead is recommend, and much easier to do.

    This chunk wraps nVidia's register combiners. The
    OSG::RegisterCombinersChunk::setCombinerRGB and
    OSG::RegisterCombinersChunk::setCombinerAlpha convenience functions
    should be used,
    which set up all the parameters for a single combiner's RGB or alpha part.
    OSG::RegisterCombinersChunk::setFinalCombiner sets all parameters for the
    final combiner. The constants are set by
    OSG::RegisterCombinersChunk::setConstantColors(Color4f &color0, Color4f
    &color1) for the gloabl constants and 
    OSG::RegisterCombinersChunk::setConstantColors(UInt16 which,  
    Color4f &color0,
    Color4f &color1) for the per-combiner constants (if supported). To reset a
    combiner one or all of the combiners use
    OSG::RegisterCombinersChunk::clearCombiners or 
    OSG::RegisterCombinersChunk::clearCombiner. 

    Don't use the direct field access to set the register combiner's parameter
    unlesss you really have to, as the internal representation is a bit
    non-intuitive.

    \ext To reduce the number of fields there isn't a field for every parameter,
    instead they are kept in blocks of three in the fields. Please refer to the
    source code for details.
    \endext
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var Color4f         RegisterCombinersChunkBase::_sfColor0
    
*/

/*! \var Color4f         RegisterCombinersChunkBase::_sfColor1
    
*/

/*! \var bool            RegisterCombinersChunkBase::_sfColorSumClamp
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfVariableArgb
    input,mapping,component Usage triples for variable A, RGB part
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfVariableBrgb
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfVariableCrgb
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfVariableDrgb
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfVariableAalpha
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfVariableBalpha
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfVariableCalpha
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfVariableDalpha
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfOutputABrgb
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfOutputCDrgb
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfOutputSumrgb
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfScalergb
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfBiasrgb
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfOutputABalpha
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfOutputCDalpha
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfOutputSumalpha
    
*/

/*! \var UInt8           RegisterCombinersChunkBase::_mfDotABrgb
    
*/

/*! \var UInt8           RegisterCombinersChunkBase::_mfDotCDrgb
    
*/

/*! \var UInt8           RegisterCombinersChunkBase::_mfMuxSumrgb
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfScalealpha
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfBiasalpha
    
*/

/*! \var UInt8           RegisterCombinersChunkBase::_mfMuxSumalpha
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfVariableE
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfVariableF
    
*/

/*! \var GLenum          RegisterCombinersChunkBase::_mfVariableG
    
*/

/*! \var Color4f         RegisterCombinersChunkBase::_mfCombinerColor0
    
*/

/*! \var Color4f         RegisterCombinersChunkBase::_mfCombinerColor1
    
*/

/*! \var UInt8           RegisterCombinersChunkBase::_sfPerStageConstants
    
*/


void RegisterCombinersChunkBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "color0",
        "",
        Color0FieldId, Color0FieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleColor0),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleColor0));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "color1",
        "",
        Color1FieldId, Color1FieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleColor1),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleColor1));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "colorSumClamp",
        "",
        ColorSumClampFieldId, ColorSumClampFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleColorSumClamp),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleColorSumClamp));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "variableArgb",
        "input,mapping,component Usage triples for variable A, RGB part\n",
        VariableArgbFieldId, VariableArgbFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleVariableArgb),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleVariableArgb));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "variableBrgb",
        "",
        VariableBrgbFieldId, VariableBrgbFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleVariableBrgb),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleVariableBrgb));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "variableCrgb",
        "",
        VariableCrgbFieldId, VariableCrgbFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleVariableCrgb),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleVariableCrgb));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "variableDrgb",
        "",
        VariableDrgbFieldId, VariableDrgbFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleVariableDrgb),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleVariableDrgb));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "variableAalpha",
        "",
        VariableAalphaFieldId, VariableAalphaFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleVariableAalpha),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleVariableAalpha));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "variableBalpha",
        "",
        VariableBalphaFieldId, VariableBalphaFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleVariableBalpha),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleVariableBalpha));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "variableCalpha",
        "",
        VariableCalphaFieldId, VariableCalphaFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleVariableCalpha),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleVariableCalpha));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "variableDalpha",
        "",
        VariableDalphaFieldId, VariableDalphaFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleVariableDalpha),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleVariableDalpha));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "outputABrgb",
        "",
        OutputABrgbFieldId, OutputABrgbFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleOutputABrgb),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleOutputABrgb));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "outputCDrgb",
        "",
        OutputCDrgbFieldId, OutputCDrgbFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleOutputCDrgb),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleOutputCDrgb));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "outputSumrgb",
        "",
        OutputSumrgbFieldId, OutputSumrgbFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleOutputSumrgb),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleOutputSumrgb));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "scalergb",
        "",
        ScalergbFieldId, ScalergbFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleScalergb),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleScalergb));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "biasrgb",
        "",
        BiasrgbFieldId, BiasrgbFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleBiasrgb),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleBiasrgb));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "outputABalpha",
        "",
        OutputABalphaFieldId, OutputABalphaFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleOutputABalpha),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleOutputABalpha));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "outputCDalpha",
        "",
        OutputCDalphaFieldId, OutputCDalphaFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleOutputCDalpha),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleOutputCDalpha));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "outputSumalpha",
        "",
        OutputSumalphaFieldId, OutputSumalphaFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleOutputSumalpha),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleOutputSumalpha));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUInt8::Description(
        MFUInt8::getClassType(),
        "dotABrgb",
        "",
        DotABrgbFieldId, DotABrgbFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleDotABrgb),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleDotABrgb));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUInt8::Description(
        MFUInt8::getClassType(),
        "dotCDrgb",
        "",
        DotCDrgbFieldId, DotCDrgbFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleDotCDrgb),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleDotCDrgb));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUInt8::Description(
        MFUInt8::getClassType(),
        "muxSumrgb",
        "",
        MuxSumrgbFieldId, MuxSumrgbFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleMuxSumrgb),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleMuxSumrgb));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "scalealpha",
        "",
        ScalealphaFieldId, ScalealphaFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleScalealpha),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleScalealpha));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "biasalpha",
        "",
        BiasalphaFieldId, BiasalphaFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleBiasalpha),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleBiasalpha));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUInt8::Description(
        MFUInt8::getClassType(),
        "muxSumalpha",
        "",
        MuxSumalphaFieldId, MuxSumalphaFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleMuxSumalpha),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleMuxSumalpha));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "variableE",
        "",
        VariableEFieldId, VariableEFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleVariableE),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleVariableE));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "variableF",
        "",
        VariableFFieldId, VariableFFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleVariableF),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleVariableF));

    oType.addInitialDesc(pDesc);

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(),
        "variableG",
        "",
        VariableGFieldId, VariableGFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleVariableG),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleVariableG));

    oType.addInitialDesc(pDesc);

    pDesc = new MFColor4f::Description(
        MFColor4f::getClassType(),
        "combinerColor0",
        "",
        CombinerColor0FieldId, CombinerColor0FieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleCombinerColor0),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleCombinerColor0));

    oType.addInitialDesc(pDesc);

    pDesc = new MFColor4f::Description(
        MFColor4f::getClassType(),
        "combinerColor1",
        "",
        CombinerColor1FieldId, CombinerColor1FieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandleCombinerColor1),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandleCombinerColor1));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt8::Description(
        SFUInt8::getClassType(),
        "perStageConstants",
        "",
        PerStageConstantsFieldId, PerStageConstantsFieldMask,
        true,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editHandlePerStageConstants),
        static_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getHandlePerStageConstants));

    oType.addInitialDesc(pDesc);
}


RegisterCombinersChunkBase::TypeObject RegisterCombinersChunkBase::_type(
    RegisterCombinersChunkBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &RegisterCombinersChunkBase::createEmpty,
    RegisterCombinersChunk::initMethod,
    RegisterCombinersChunk::exitMethod,
    (InitalInsertDescFunc) &RegisterCombinersChunkBase::classDescInserter,
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"RegisterCombinersChunk\"\n"
    "\tparent=\"StateChunk\"\n"
    "\tlibrary=\"State\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "><![CDATA[\n"
    "\\ingroup GrpSystemState\n"
    "\n"
    "See \\ref PageSystemRegisterCombinersChunk for a description.\n"
    "\n"
    "Try to avoid using this chunk, as it is very non-portable. Using a shader \n"
    "instead is recommend, and much easier to do.\n"
    "\n"
    "This chunk wraps nVidia's register combiners. The\n"
    "OSG::RegisterCombinersChunk::setCombinerRGB and\n"
    "OSG::RegisterCombinersChunk::setCombinerAlpha convenience functions\n"
    "should be used,\n"
    "which set up all the parameters for a single combiner's RGB or alpha part.\n"
    "OSG::RegisterCombinersChunk::setFinalCombiner sets all parameters for the\n"
    "final combiner. The constants are set by\n"
    "OSG::RegisterCombinersChunk::setConstantColors(Color4f &color0, Color4f\n"
    "&color1) for the gloabl constants and \n"
    "OSG::RegisterCombinersChunk::setConstantColors(UInt16 which,  \n"
    "Color4f &color0,\n"
    "Color4f &color1) for the per-combiner constants (if supported). To reset a\n"
    "combiner one or all of the combiners use\n"
    "OSG::RegisterCombinersChunk::clearCombiners or \n"
    "OSG::RegisterCombinersChunk::clearCombiner. \n"
    "\n"
    "Don't use the direct field access to set the register combiner's parameter\n"
    "unlesss you really have to, as the internal representation is a bit\n"
    "non-intuitive.\n"
    "\n"
    "\\ext To reduce the number of fields there isn't a field for every parameter,\n"
    "instead they are kept in blocks of three in the fields. Please refer to the\n"
    "source code for details.\n"
    "\\endext]]>\n"
    "\t<Field\n"
    "\t\tname=\"color0\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"color1\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"colorSumClamp\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"variableArgb\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tinput,mapping,component Usage triples for variable A, RGB part\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"variableBrgb\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"variableCrgb\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"variableDrgb\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"variableAalpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"variableBalpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"variableCalpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"variableDalpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"outputABrgb\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"outputCDrgb\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"outputSumrgb\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"scalergb\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"biasrgb\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"outputABalpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"outputCDalpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"outputSumalpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"dotABrgb\"\n"
    "\t\ttype=\"UInt8\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"dotCDrgb\"\n"
    "\t\ttype=\"UInt8\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"muxSumrgb\"\n"
    "\t\ttype=\"UInt8\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"scalealpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"biasalpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"muxSumalpha\"\n"
    "\t\ttype=\"UInt8\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"variableE\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"variableF\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"variableG\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"combinerColor0\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"combinerColor1\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"perStageConstants\"\n"
    "\t\ttype=\"UInt8\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "\\ingroup GrpSystemState\n"
    "\n"
    "See \\ref PageSystemRegisterCombinersChunk for a description.\n"
    "\n"
    "Try to avoid using this chunk, as it is very non-portable. Using a shader \n"
    "instead is recommend, and much easier to do.\n"
    "\n"
    "This chunk wraps nVidia's register combiners. The\n"
    "OSG::RegisterCombinersChunk::setCombinerRGB and\n"
    "OSG::RegisterCombinersChunk::setCombinerAlpha convenience functions\n"
    "should be used,\n"
    "which set up all the parameters for a single combiner's RGB or alpha part.\n"
    "OSG::RegisterCombinersChunk::setFinalCombiner sets all parameters for the\n"
    "final combiner. The constants are set by\n"
    "OSG::RegisterCombinersChunk::setConstantColors(Color4f &color0, Color4f\n"
    "&color1) for the gloabl constants and \n"
    "OSG::RegisterCombinersChunk::setConstantColors(UInt16 which,  \n"
    "Color4f &color0,\n"
    "Color4f &color1) for the per-combiner constants (if supported). To reset a\n"
    "combiner one or all of the combiners use\n"
    "OSG::RegisterCombinersChunk::clearCombiners or \n"
    "OSG::RegisterCombinersChunk::clearCombiner. \n"
    "\n"
    "Don't use the direct field access to set the register combiner's parameter\n"
    "unlesss you really have to, as the internal representation is a bit\n"
    "non-intuitive.\n"
    "\n"
    "\\ext To reduce the number of fields there isn't a field for every parameter,\n"
    "instead they are kept in blocks of three in the fields. Please refer to the\n"
    "source code for details.\n"
    "\\endext\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &RegisterCombinersChunkBase::getType(void)
{
    return _type;
}

const FieldContainerType &RegisterCombinersChunkBase::getType(void) const
{
    return _type;
}

UInt32 RegisterCombinersChunkBase::getContainerSize(void) const
{
    return sizeof(RegisterCombinersChunk);
}

/*------------------------- decorator get ------------------------------*/


SFColor4f *RegisterCombinersChunkBase::editSFColor0(void)
{
    editSField(Color0FieldMask);

    return &_sfColor0;
}

const SFColor4f *RegisterCombinersChunkBase::getSFColor0(void) const
{
    return &_sfColor0;
}

#ifdef OSG_1_GET_COMPAT
SFColor4f           *RegisterCombinersChunkBase::getSFColor0         (void)
{
    return this->editSFColor0         ();
}
#endif

SFColor4f *RegisterCombinersChunkBase::editSFColor1(void)
{
    editSField(Color1FieldMask);

    return &_sfColor1;
}

const SFColor4f *RegisterCombinersChunkBase::getSFColor1(void) const
{
    return &_sfColor1;
}

#ifdef OSG_1_GET_COMPAT
SFColor4f           *RegisterCombinersChunkBase::getSFColor1         (void)
{
    return this->editSFColor1         ();
}
#endif

SFBool *RegisterCombinersChunkBase::editSFColorSumClamp(void)
{
    editSField(ColorSumClampFieldMask);

    return &_sfColorSumClamp;
}

const SFBool *RegisterCombinersChunkBase::getSFColorSumClamp(void) const
{
    return &_sfColorSumClamp;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *RegisterCombinersChunkBase::getSFColorSumClamp  (void)
{
    return this->editSFColorSumClamp  ();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFVariableArgb(void)
{
    editMField(VariableArgbFieldMask, _mfVariableArgb);

    return &_mfVariableArgb;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableArgb(void) const
{
    return &_mfVariableArgb;
}

#ifdef OSG_1_GET_COMPAT
MFGLenum            *RegisterCombinersChunkBase::getMFVariableArgb   (void)
{
    return this->editMFVariableArgb   ();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFVariableBrgb(void)
{
    editMField(VariableBrgbFieldMask, _mfVariableBrgb);

    return &_mfVariableBrgb;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableBrgb(void) const
{
    return &_mfVariableBrgb;
}

#ifdef OSG_1_GET_COMPAT
MFGLenum            *RegisterCombinersChunkBase::getMFVariableBrgb   (void)
{
    return this->editMFVariableBrgb   ();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFVariableCrgb(void)
{
    editMField(VariableCrgbFieldMask, _mfVariableCrgb);

    return &_mfVariableCrgb;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableCrgb(void) const
{
    return &_mfVariableCrgb;
}

#ifdef OSG_1_GET_COMPAT
MFGLenum            *RegisterCombinersChunkBase::getMFVariableCrgb   (void)
{
    return this->editMFVariableCrgb   ();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFVariableDrgb(void)
{
    editMField(VariableDrgbFieldMask, _mfVariableDrgb);

    return &_mfVariableDrgb;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableDrgb(void) const
{
    return &_mfVariableDrgb;
}

#ifdef OSG_1_GET_COMPAT
MFGLenum            *RegisterCombinersChunkBase::getMFVariableDrgb   (void)
{
    return this->editMFVariableDrgb   ();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFVariableAalpha(void)
{
    editMField(VariableAalphaFieldMask, _mfVariableAalpha);

    return &_mfVariableAalpha;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableAalpha(void) const
{
    return &_mfVariableAalpha;
}

#ifdef OSG_1_GET_COMPAT
MFGLenum            *RegisterCombinersChunkBase::getMFVariableAalpha (void)
{
    return this->editMFVariableAalpha ();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFVariableBalpha(void)
{
    editMField(VariableBalphaFieldMask, _mfVariableBalpha);

    return &_mfVariableBalpha;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableBalpha(void) const
{
    return &_mfVariableBalpha;
}

#ifdef OSG_1_GET_COMPAT
MFGLenum            *RegisterCombinersChunkBase::getMFVariableBalpha (void)
{
    return this->editMFVariableBalpha ();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFVariableCalpha(void)
{
    editMField(VariableCalphaFieldMask, _mfVariableCalpha);

    return &_mfVariableCalpha;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableCalpha(void) const
{
    return &_mfVariableCalpha;
}

#ifdef OSG_1_GET_COMPAT
MFGLenum            *RegisterCombinersChunkBase::getMFVariableCalpha (void)
{
    return this->editMFVariableCalpha ();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFVariableDalpha(void)
{
    editMField(VariableDalphaFieldMask, _mfVariableDalpha);

    return &_mfVariableDalpha;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableDalpha(void) const
{
    return &_mfVariableDalpha;
}

#ifdef OSG_1_GET_COMPAT
MFGLenum            *RegisterCombinersChunkBase::getMFVariableDalpha (void)
{
    return this->editMFVariableDalpha ();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFOutputABrgb(void)
{
    editMField(OutputABrgbFieldMask, _mfOutputABrgb);

    return &_mfOutputABrgb;
}

const MFGLenum *RegisterCombinersChunkBase::getMFOutputABrgb(void) const
{
    return &_mfOutputABrgb;
}

#ifdef OSG_1_GET_COMPAT
MFGLenum            *RegisterCombinersChunkBase::getMFOutputABrgb    (void)
{
    return this->editMFOutputABrgb    ();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFOutputCDrgb(void)
{
    editMField(OutputCDrgbFieldMask, _mfOutputCDrgb);

    return &_mfOutputCDrgb;
}

const MFGLenum *RegisterCombinersChunkBase::getMFOutputCDrgb(void) const
{
    return &_mfOutputCDrgb;
}

#ifdef OSG_1_GET_COMPAT
MFGLenum            *RegisterCombinersChunkBase::getMFOutputCDrgb    (void)
{
    return this->editMFOutputCDrgb    ();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFOutputSumrgb(void)
{
    editMField(OutputSumrgbFieldMask, _mfOutputSumrgb);

    return &_mfOutputSumrgb;
}

const MFGLenum *RegisterCombinersChunkBase::getMFOutputSumrgb(void) const
{
    return &_mfOutputSumrgb;
}

#ifdef OSG_1_GET_COMPAT
MFGLenum            *RegisterCombinersChunkBase::getMFOutputSumrgb   (void)
{
    return this->editMFOutputSumrgb   ();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFScalergb(void)
{
    editMField(ScalergbFieldMask, _mfScalergb);

    return &_mfScalergb;
}

const MFGLenum *RegisterCombinersChunkBase::getMFScalergb(void) const
{
    return &_mfScalergb;
}

#ifdef OSG_1_GET_COMPAT
MFGLenum            *RegisterCombinersChunkBase::getMFScalergb       (void)
{
    return this->editMFScalergb       ();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFBiasrgb(void)
{
    editMField(BiasrgbFieldMask, _mfBiasrgb);

    return &_mfBiasrgb;
}

const MFGLenum *RegisterCombinersChunkBase::getMFBiasrgb(void) const
{
    return &_mfBiasrgb;
}

#ifdef OSG_1_GET_COMPAT
MFGLenum            *RegisterCombinersChunkBase::getMFBiasrgb        (void)
{
    return this->editMFBiasrgb        ();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFOutputABalpha(void)
{
    editMField(OutputABalphaFieldMask, _mfOutputABalpha);

    return &_mfOutputABalpha;
}

const MFGLenum *RegisterCombinersChunkBase::getMFOutputABalpha(void) const
{
    return &_mfOutputABalpha;
}

#ifdef OSG_1_GET_COMPAT
MFGLenum            *RegisterCombinersChunkBase::getMFOutputABalpha  (void)
{
    return this->editMFOutputABalpha  ();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFOutputCDalpha(void)
{
    editMField(OutputCDalphaFieldMask, _mfOutputCDalpha);

    return &_mfOutputCDalpha;
}

const MFGLenum *RegisterCombinersChunkBase::getMFOutputCDalpha(void) const
{
    return &_mfOutputCDalpha;
}

#ifdef OSG_1_GET_COMPAT
MFGLenum            *RegisterCombinersChunkBase::getMFOutputCDalpha  (void)
{
    return this->editMFOutputCDalpha  ();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFOutputSumalpha(void)
{
    editMField(OutputSumalphaFieldMask, _mfOutputSumalpha);

    return &_mfOutputSumalpha;
}

const MFGLenum *RegisterCombinersChunkBase::getMFOutputSumalpha(void) const
{
    return &_mfOutputSumalpha;
}

#ifdef OSG_1_GET_COMPAT
MFGLenum            *RegisterCombinersChunkBase::getMFOutputSumalpha (void)
{
    return this->editMFOutputSumalpha ();
}
#endif

MFUInt8 *RegisterCombinersChunkBase::editMFDotABrgb(void)
{
    editMField(DotABrgbFieldMask, _mfDotABrgb);

    return &_mfDotABrgb;
}

const MFUInt8 *RegisterCombinersChunkBase::getMFDotABrgb(void) const
{
    return &_mfDotABrgb;
}

#ifdef OSG_1_GET_COMPAT
MFUInt8             *RegisterCombinersChunkBase::getMFDotABrgb       (void)
{
    return this->editMFDotABrgb       ();
}
#endif

MFUInt8 *RegisterCombinersChunkBase::editMFDotCDrgb(void)
{
    editMField(DotCDrgbFieldMask, _mfDotCDrgb);

    return &_mfDotCDrgb;
}

const MFUInt8 *RegisterCombinersChunkBase::getMFDotCDrgb(void) const
{
    return &_mfDotCDrgb;
}

#ifdef OSG_1_GET_COMPAT
MFUInt8             *RegisterCombinersChunkBase::getMFDotCDrgb       (void)
{
    return this->editMFDotCDrgb       ();
}
#endif

MFUInt8 *RegisterCombinersChunkBase::editMFMuxSumrgb(void)
{
    editMField(MuxSumrgbFieldMask, _mfMuxSumrgb);

    return &_mfMuxSumrgb;
}

const MFUInt8 *RegisterCombinersChunkBase::getMFMuxSumrgb(void) const
{
    return &_mfMuxSumrgb;
}

#ifdef OSG_1_GET_COMPAT
MFUInt8             *RegisterCombinersChunkBase::getMFMuxSumrgb      (void)
{
    return this->editMFMuxSumrgb      ();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFScalealpha(void)
{
    editMField(ScalealphaFieldMask, _mfScalealpha);

    return &_mfScalealpha;
}

const MFGLenum *RegisterCombinersChunkBase::getMFScalealpha(void) const
{
    return &_mfScalealpha;
}

#ifdef OSG_1_GET_COMPAT
MFGLenum            *RegisterCombinersChunkBase::getMFScalealpha     (void)
{
    return this->editMFScalealpha     ();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFBiasalpha(void)
{
    editMField(BiasalphaFieldMask, _mfBiasalpha);

    return &_mfBiasalpha;
}

const MFGLenum *RegisterCombinersChunkBase::getMFBiasalpha(void) const
{
    return &_mfBiasalpha;
}

#ifdef OSG_1_GET_COMPAT
MFGLenum            *RegisterCombinersChunkBase::getMFBiasalpha      (void)
{
    return this->editMFBiasalpha      ();
}
#endif

MFUInt8 *RegisterCombinersChunkBase::editMFMuxSumalpha(void)
{
    editMField(MuxSumalphaFieldMask, _mfMuxSumalpha);

    return &_mfMuxSumalpha;
}

const MFUInt8 *RegisterCombinersChunkBase::getMFMuxSumalpha(void) const
{
    return &_mfMuxSumalpha;
}

#ifdef OSG_1_GET_COMPAT
MFUInt8             *RegisterCombinersChunkBase::getMFMuxSumalpha    (void)
{
    return this->editMFMuxSumalpha    ();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFVariableE(void)
{
    editMField(VariableEFieldMask, _mfVariableE);

    return &_mfVariableE;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableE(void) const
{
    return &_mfVariableE;
}

#ifdef OSG_1_GET_COMPAT
MFGLenum            *RegisterCombinersChunkBase::getMFVariableE      (void)
{
    return this->editMFVariableE      ();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFVariableF(void)
{
    editMField(VariableFFieldMask, _mfVariableF);

    return &_mfVariableF;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableF(void) const
{
    return &_mfVariableF;
}

#ifdef OSG_1_GET_COMPAT
MFGLenum            *RegisterCombinersChunkBase::getMFVariableF      (void)
{
    return this->editMFVariableF      ();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFVariableG(void)
{
    editMField(VariableGFieldMask, _mfVariableG);

    return &_mfVariableG;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableG(void) const
{
    return &_mfVariableG;
}

#ifdef OSG_1_GET_COMPAT
MFGLenum            *RegisterCombinersChunkBase::getMFVariableG      (void)
{
    return this->editMFVariableG      ();
}
#endif

MFColor4f *RegisterCombinersChunkBase::editMFCombinerColor0(void)
{
    editMField(CombinerColor0FieldMask, _mfCombinerColor0);

    return &_mfCombinerColor0;
}

const MFColor4f *RegisterCombinersChunkBase::getMFCombinerColor0(void) const
{
    return &_mfCombinerColor0;
}

#ifdef OSG_1_GET_COMPAT
MFColor4f           *RegisterCombinersChunkBase::getMFCombinerColor0 (void)
{
    return this->editMFCombinerColor0 ();
}
#endif

MFColor4f *RegisterCombinersChunkBase::editMFCombinerColor1(void)
{
    editMField(CombinerColor1FieldMask, _mfCombinerColor1);

    return &_mfCombinerColor1;
}

const MFColor4f *RegisterCombinersChunkBase::getMFCombinerColor1(void) const
{
    return &_mfCombinerColor1;
}

#ifdef OSG_1_GET_COMPAT
MFColor4f           *RegisterCombinersChunkBase::getMFCombinerColor1 (void)
{
    return this->editMFCombinerColor1 ();
}
#endif

SFUInt8 *RegisterCombinersChunkBase::editSFPerStageConstants(void)
{
    editSField(PerStageConstantsFieldMask);

    return &_sfPerStageConstants;
}

const SFUInt8 *RegisterCombinersChunkBase::getSFPerStageConstants(void) const
{
    return &_sfPerStageConstants;
}

#ifdef OSG_1_GET_COMPAT
SFUInt8             *RegisterCombinersChunkBase::getSFPerStageConstants(void)
{
    return this->editSFPerStageConstants();
}
#endif



/*********************************** Non-ptr code ********************************/
void RegisterCombinersChunkBase::pushToVariableArgb(const GLenum& value)
{
    editMField(VariableArgbFieldMask, _mfVariableArgb);
    _mfVariableArgb.push_back(value);
}

void RegisterCombinersChunkBase::insertIntoVariableArgb(UInt32                uiIndex,
                                                   const GLenum& value   )
{
    editMField(VariableArgbFieldMask, _mfVariableArgb);

    MFGLenum::iterator fieldIt = _mfVariableArgb.begin();

    fieldIt += uiIndex;

    _mfVariableArgb.insert(fieldIt, value);
}

void RegisterCombinersChunkBase::replaceInVariableArgb(UInt32                uiIndex,
                                                       const GLenum& value   )
{
    if(uiIndex >= _mfVariableArgb.size())
        return;

    editMField(VariableArgbFieldMask, _mfVariableArgb);

    _mfVariableArgb[uiIndex] = value;
}

void RegisterCombinersChunkBase::replaceInVariableArgb(const GLenum& pOldElem,
                                                        const GLenum& pNewElem)
{
    Int32  elemIdx = _mfVariableArgb.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(VariableArgbFieldMask, _mfVariableArgb);

        MFGLenum::iterator fieldIt = _mfVariableArgb.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void RegisterCombinersChunkBase::removeFromVariableArgb(UInt32 uiIndex)
{
    if(uiIndex < _mfVariableArgb.size())
    {
        editMField(VariableArgbFieldMask, _mfVariableArgb);

        MFGLenum::iterator fieldIt = _mfVariableArgb.begin();

        fieldIt += uiIndex;
        _mfVariableArgb.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::removeFromVariableArgb(const GLenum& value)
{
    Int32 iElemIdx = _mfVariableArgb.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(VariableArgbFieldMask, _mfVariableArgb);

        MFGLenum::iterator fieldIt = _mfVariableArgb.begin();

        fieldIt += iElemIdx;

        _mfVariableArgb.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::clearVariableArgb(void)
{
    editMField(VariableArgbFieldMask, _mfVariableArgb);

    _mfVariableArgb.clear();
}
/*********************************** Non-ptr code ********************************/
void RegisterCombinersChunkBase::pushToVariableBrgb(const GLenum& value)
{
    editMField(VariableBrgbFieldMask, _mfVariableBrgb);
    _mfVariableBrgb.push_back(value);
}

void RegisterCombinersChunkBase::insertIntoVariableBrgb(UInt32                uiIndex,
                                                   const GLenum& value   )
{
    editMField(VariableBrgbFieldMask, _mfVariableBrgb);

    MFGLenum::iterator fieldIt = _mfVariableBrgb.begin();

    fieldIt += uiIndex;

    _mfVariableBrgb.insert(fieldIt, value);
}

void RegisterCombinersChunkBase::replaceInVariableBrgb(UInt32                uiIndex,
                                                       const GLenum& value   )
{
    if(uiIndex >= _mfVariableBrgb.size())
        return;

    editMField(VariableBrgbFieldMask, _mfVariableBrgb);

    _mfVariableBrgb[uiIndex] = value;
}

void RegisterCombinersChunkBase::replaceInVariableBrgb(const GLenum& pOldElem,
                                                        const GLenum& pNewElem)
{
    Int32  elemIdx = _mfVariableBrgb.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(VariableBrgbFieldMask, _mfVariableBrgb);

        MFGLenum::iterator fieldIt = _mfVariableBrgb.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void RegisterCombinersChunkBase::removeFromVariableBrgb(UInt32 uiIndex)
{
    if(uiIndex < _mfVariableBrgb.size())
    {
        editMField(VariableBrgbFieldMask, _mfVariableBrgb);

        MFGLenum::iterator fieldIt = _mfVariableBrgb.begin();

        fieldIt += uiIndex;
        _mfVariableBrgb.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::removeFromVariableBrgb(const GLenum& value)
{
    Int32 iElemIdx = _mfVariableBrgb.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(VariableBrgbFieldMask, _mfVariableBrgb);

        MFGLenum::iterator fieldIt = _mfVariableBrgb.begin();

        fieldIt += iElemIdx;

        _mfVariableBrgb.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::clearVariableBrgb(void)
{
    editMField(VariableBrgbFieldMask, _mfVariableBrgb);

    _mfVariableBrgb.clear();
}
/*********************************** Non-ptr code ********************************/
void RegisterCombinersChunkBase::pushToVariableCrgb(const GLenum& value)
{
    editMField(VariableCrgbFieldMask, _mfVariableCrgb);
    _mfVariableCrgb.push_back(value);
}

void RegisterCombinersChunkBase::insertIntoVariableCrgb(UInt32                uiIndex,
                                                   const GLenum& value   )
{
    editMField(VariableCrgbFieldMask, _mfVariableCrgb);

    MFGLenum::iterator fieldIt = _mfVariableCrgb.begin();

    fieldIt += uiIndex;

    _mfVariableCrgb.insert(fieldIt, value);
}

void RegisterCombinersChunkBase::replaceInVariableCrgb(UInt32                uiIndex,
                                                       const GLenum& value   )
{
    if(uiIndex >= _mfVariableCrgb.size())
        return;

    editMField(VariableCrgbFieldMask, _mfVariableCrgb);

    _mfVariableCrgb[uiIndex] = value;
}

void RegisterCombinersChunkBase::replaceInVariableCrgb(const GLenum& pOldElem,
                                                        const GLenum& pNewElem)
{
    Int32  elemIdx = _mfVariableCrgb.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(VariableCrgbFieldMask, _mfVariableCrgb);

        MFGLenum::iterator fieldIt = _mfVariableCrgb.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void RegisterCombinersChunkBase::removeFromVariableCrgb(UInt32 uiIndex)
{
    if(uiIndex < _mfVariableCrgb.size())
    {
        editMField(VariableCrgbFieldMask, _mfVariableCrgb);

        MFGLenum::iterator fieldIt = _mfVariableCrgb.begin();

        fieldIt += uiIndex;
        _mfVariableCrgb.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::removeFromVariableCrgb(const GLenum& value)
{
    Int32 iElemIdx = _mfVariableCrgb.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(VariableCrgbFieldMask, _mfVariableCrgb);

        MFGLenum::iterator fieldIt = _mfVariableCrgb.begin();

        fieldIt += iElemIdx;

        _mfVariableCrgb.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::clearVariableCrgb(void)
{
    editMField(VariableCrgbFieldMask, _mfVariableCrgb);

    _mfVariableCrgb.clear();
}
/*********************************** Non-ptr code ********************************/
void RegisterCombinersChunkBase::pushToVariableDrgb(const GLenum& value)
{
    editMField(VariableDrgbFieldMask, _mfVariableDrgb);
    _mfVariableDrgb.push_back(value);
}

void RegisterCombinersChunkBase::insertIntoVariableDrgb(UInt32                uiIndex,
                                                   const GLenum& value   )
{
    editMField(VariableDrgbFieldMask, _mfVariableDrgb);

    MFGLenum::iterator fieldIt = _mfVariableDrgb.begin();

    fieldIt += uiIndex;

    _mfVariableDrgb.insert(fieldIt, value);
}

void RegisterCombinersChunkBase::replaceInVariableDrgb(UInt32                uiIndex,
                                                       const GLenum& value   )
{
    if(uiIndex >= _mfVariableDrgb.size())
        return;

    editMField(VariableDrgbFieldMask, _mfVariableDrgb);

    _mfVariableDrgb[uiIndex] = value;
}

void RegisterCombinersChunkBase::replaceInVariableDrgb(const GLenum& pOldElem,
                                                        const GLenum& pNewElem)
{
    Int32  elemIdx = _mfVariableDrgb.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(VariableDrgbFieldMask, _mfVariableDrgb);

        MFGLenum::iterator fieldIt = _mfVariableDrgb.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void RegisterCombinersChunkBase::removeFromVariableDrgb(UInt32 uiIndex)
{
    if(uiIndex < _mfVariableDrgb.size())
    {
        editMField(VariableDrgbFieldMask, _mfVariableDrgb);

        MFGLenum::iterator fieldIt = _mfVariableDrgb.begin();

        fieldIt += uiIndex;
        _mfVariableDrgb.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::removeFromVariableDrgb(const GLenum& value)
{
    Int32 iElemIdx = _mfVariableDrgb.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(VariableDrgbFieldMask, _mfVariableDrgb);

        MFGLenum::iterator fieldIt = _mfVariableDrgb.begin();

        fieldIt += iElemIdx;

        _mfVariableDrgb.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::clearVariableDrgb(void)
{
    editMField(VariableDrgbFieldMask, _mfVariableDrgb);

    _mfVariableDrgb.clear();
}
/*********************************** Non-ptr code ********************************/
void RegisterCombinersChunkBase::pushToVariableAalpha(const GLenum& value)
{
    editMField(VariableAalphaFieldMask, _mfVariableAalpha);
    _mfVariableAalpha.push_back(value);
}

void RegisterCombinersChunkBase::insertIntoVariableAalpha(UInt32                uiIndex,
                                                   const GLenum& value   )
{
    editMField(VariableAalphaFieldMask, _mfVariableAalpha);

    MFGLenum::iterator fieldIt = _mfVariableAalpha.begin();

    fieldIt += uiIndex;

    _mfVariableAalpha.insert(fieldIt, value);
}

void RegisterCombinersChunkBase::replaceInVariableAalpha(UInt32                uiIndex,
                                                       const GLenum& value   )
{
    if(uiIndex >= _mfVariableAalpha.size())
        return;

    editMField(VariableAalphaFieldMask, _mfVariableAalpha);

    _mfVariableAalpha[uiIndex] = value;
}

void RegisterCombinersChunkBase::replaceInVariableAalpha(const GLenum& pOldElem,
                                                        const GLenum& pNewElem)
{
    Int32  elemIdx = _mfVariableAalpha.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(VariableAalphaFieldMask, _mfVariableAalpha);

        MFGLenum::iterator fieldIt = _mfVariableAalpha.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void RegisterCombinersChunkBase::removeFromVariableAalpha(UInt32 uiIndex)
{
    if(uiIndex < _mfVariableAalpha.size())
    {
        editMField(VariableAalphaFieldMask, _mfVariableAalpha);

        MFGLenum::iterator fieldIt = _mfVariableAalpha.begin();

        fieldIt += uiIndex;
        _mfVariableAalpha.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::removeFromVariableAalpha(const GLenum& value)
{
    Int32 iElemIdx = _mfVariableAalpha.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(VariableAalphaFieldMask, _mfVariableAalpha);

        MFGLenum::iterator fieldIt = _mfVariableAalpha.begin();

        fieldIt += iElemIdx;

        _mfVariableAalpha.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::clearVariableAalpha(void)
{
    editMField(VariableAalphaFieldMask, _mfVariableAalpha);

    _mfVariableAalpha.clear();
}
/*********************************** Non-ptr code ********************************/
void RegisterCombinersChunkBase::pushToVariableBalpha(const GLenum& value)
{
    editMField(VariableBalphaFieldMask, _mfVariableBalpha);
    _mfVariableBalpha.push_back(value);
}

void RegisterCombinersChunkBase::insertIntoVariableBalpha(UInt32                uiIndex,
                                                   const GLenum& value   )
{
    editMField(VariableBalphaFieldMask, _mfVariableBalpha);

    MFGLenum::iterator fieldIt = _mfVariableBalpha.begin();

    fieldIt += uiIndex;

    _mfVariableBalpha.insert(fieldIt, value);
}

void RegisterCombinersChunkBase::replaceInVariableBalpha(UInt32                uiIndex,
                                                       const GLenum& value   )
{
    if(uiIndex >= _mfVariableBalpha.size())
        return;

    editMField(VariableBalphaFieldMask, _mfVariableBalpha);

    _mfVariableBalpha[uiIndex] = value;
}

void RegisterCombinersChunkBase::replaceInVariableBalpha(const GLenum& pOldElem,
                                                        const GLenum& pNewElem)
{
    Int32  elemIdx = _mfVariableBalpha.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(VariableBalphaFieldMask, _mfVariableBalpha);

        MFGLenum::iterator fieldIt = _mfVariableBalpha.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void RegisterCombinersChunkBase::removeFromVariableBalpha(UInt32 uiIndex)
{
    if(uiIndex < _mfVariableBalpha.size())
    {
        editMField(VariableBalphaFieldMask, _mfVariableBalpha);

        MFGLenum::iterator fieldIt = _mfVariableBalpha.begin();

        fieldIt += uiIndex;
        _mfVariableBalpha.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::removeFromVariableBalpha(const GLenum& value)
{
    Int32 iElemIdx = _mfVariableBalpha.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(VariableBalphaFieldMask, _mfVariableBalpha);

        MFGLenum::iterator fieldIt = _mfVariableBalpha.begin();

        fieldIt += iElemIdx;

        _mfVariableBalpha.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::clearVariableBalpha(void)
{
    editMField(VariableBalphaFieldMask, _mfVariableBalpha);

    _mfVariableBalpha.clear();
}
/*********************************** Non-ptr code ********************************/
void RegisterCombinersChunkBase::pushToVariableCalpha(const GLenum& value)
{
    editMField(VariableCalphaFieldMask, _mfVariableCalpha);
    _mfVariableCalpha.push_back(value);
}

void RegisterCombinersChunkBase::insertIntoVariableCalpha(UInt32                uiIndex,
                                                   const GLenum& value   )
{
    editMField(VariableCalphaFieldMask, _mfVariableCalpha);

    MFGLenum::iterator fieldIt = _mfVariableCalpha.begin();

    fieldIt += uiIndex;

    _mfVariableCalpha.insert(fieldIt, value);
}

void RegisterCombinersChunkBase::replaceInVariableCalpha(UInt32                uiIndex,
                                                       const GLenum& value   )
{
    if(uiIndex >= _mfVariableCalpha.size())
        return;

    editMField(VariableCalphaFieldMask, _mfVariableCalpha);

    _mfVariableCalpha[uiIndex] = value;
}

void RegisterCombinersChunkBase::replaceInVariableCalpha(const GLenum& pOldElem,
                                                        const GLenum& pNewElem)
{
    Int32  elemIdx = _mfVariableCalpha.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(VariableCalphaFieldMask, _mfVariableCalpha);

        MFGLenum::iterator fieldIt = _mfVariableCalpha.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void RegisterCombinersChunkBase::removeFromVariableCalpha(UInt32 uiIndex)
{
    if(uiIndex < _mfVariableCalpha.size())
    {
        editMField(VariableCalphaFieldMask, _mfVariableCalpha);

        MFGLenum::iterator fieldIt = _mfVariableCalpha.begin();

        fieldIt += uiIndex;
        _mfVariableCalpha.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::removeFromVariableCalpha(const GLenum& value)
{
    Int32 iElemIdx = _mfVariableCalpha.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(VariableCalphaFieldMask, _mfVariableCalpha);

        MFGLenum::iterator fieldIt = _mfVariableCalpha.begin();

        fieldIt += iElemIdx;

        _mfVariableCalpha.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::clearVariableCalpha(void)
{
    editMField(VariableCalphaFieldMask, _mfVariableCalpha);

    _mfVariableCalpha.clear();
}
/*********************************** Non-ptr code ********************************/
void RegisterCombinersChunkBase::pushToVariableDalpha(const GLenum& value)
{
    editMField(VariableDalphaFieldMask, _mfVariableDalpha);
    _mfVariableDalpha.push_back(value);
}

void RegisterCombinersChunkBase::insertIntoVariableDalpha(UInt32                uiIndex,
                                                   const GLenum& value   )
{
    editMField(VariableDalphaFieldMask, _mfVariableDalpha);

    MFGLenum::iterator fieldIt = _mfVariableDalpha.begin();

    fieldIt += uiIndex;

    _mfVariableDalpha.insert(fieldIt, value);
}

void RegisterCombinersChunkBase::replaceInVariableDalpha(UInt32                uiIndex,
                                                       const GLenum& value   )
{
    if(uiIndex >= _mfVariableDalpha.size())
        return;

    editMField(VariableDalphaFieldMask, _mfVariableDalpha);

    _mfVariableDalpha[uiIndex] = value;
}

void RegisterCombinersChunkBase::replaceInVariableDalpha(const GLenum& pOldElem,
                                                        const GLenum& pNewElem)
{
    Int32  elemIdx = _mfVariableDalpha.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(VariableDalphaFieldMask, _mfVariableDalpha);

        MFGLenum::iterator fieldIt = _mfVariableDalpha.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void RegisterCombinersChunkBase::removeFromVariableDalpha(UInt32 uiIndex)
{
    if(uiIndex < _mfVariableDalpha.size())
    {
        editMField(VariableDalphaFieldMask, _mfVariableDalpha);

        MFGLenum::iterator fieldIt = _mfVariableDalpha.begin();

        fieldIt += uiIndex;
        _mfVariableDalpha.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::removeFromVariableDalpha(const GLenum& value)
{
    Int32 iElemIdx = _mfVariableDalpha.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(VariableDalphaFieldMask, _mfVariableDalpha);

        MFGLenum::iterator fieldIt = _mfVariableDalpha.begin();

        fieldIt += iElemIdx;

        _mfVariableDalpha.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::clearVariableDalpha(void)
{
    editMField(VariableDalphaFieldMask, _mfVariableDalpha);

    _mfVariableDalpha.clear();
}
/*********************************** Non-ptr code ********************************/
void RegisterCombinersChunkBase::pushToOutputABrgb(const GLenum& value)
{
    editMField(OutputABrgbFieldMask, _mfOutputABrgb);
    _mfOutputABrgb.push_back(value);
}

void RegisterCombinersChunkBase::insertIntoOutputABrgb(UInt32                uiIndex,
                                                   const GLenum& value   )
{
    editMField(OutputABrgbFieldMask, _mfOutputABrgb);

    MFGLenum::iterator fieldIt = _mfOutputABrgb.begin();

    fieldIt += uiIndex;

    _mfOutputABrgb.insert(fieldIt, value);
}

void RegisterCombinersChunkBase::replaceInOutputABrgb(UInt32                uiIndex,
                                                       const GLenum& value   )
{
    if(uiIndex >= _mfOutputABrgb.size())
        return;

    editMField(OutputABrgbFieldMask, _mfOutputABrgb);

    _mfOutputABrgb[uiIndex] = value;
}

void RegisterCombinersChunkBase::replaceInOutputABrgb(const GLenum& pOldElem,
                                                        const GLenum& pNewElem)
{
    Int32  elemIdx = _mfOutputABrgb.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(OutputABrgbFieldMask, _mfOutputABrgb);

        MFGLenum::iterator fieldIt = _mfOutputABrgb.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void RegisterCombinersChunkBase::removeFromOutputABrgb(UInt32 uiIndex)
{
    if(uiIndex < _mfOutputABrgb.size())
    {
        editMField(OutputABrgbFieldMask, _mfOutputABrgb);

        MFGLenum::iterator fieldIt = _mfOutputABrgb.begin();

        fieldIt += uiIndex;
        _mfOutputABrgb.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::removeFromOutputABrgb(const GLenum& value)
{
    Int32 iElemIdx = _mfOutputABrgb.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(OutputABrgbFieldMask, _mfOutputABrgb);

        MFGLenum::iterator fieldIt = _mfOutputABrgb.begin();

        fieldIt += iElemIdx;

        _mfOutputABrgb.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::clearOutputABrgb(void)
{
    editMField(OutputABrgbFieldMask, _mfOutputABrgb);

    _mfOutputABrgb.clear();
}
/*********************************** Non-ptr code ********************************/
void RegisterCombinersChunkBase::pushToOutputCDrgb(const GLenum& value)
{
    editMField(OutputCDrgbFieldMask, _mfOutputCDrgb);
    _mfOutputCDrgb.push_back(value);
}

void RegisterCombinersChunkBase::insertIntoOutputCDrgb(UInt32                uiIndex,
                                                   const GLenum& value   )
{
    editMField(OutputCDrgbFieldMask, _mfOutputCDrgb);

    MFGLenum::iterator fieldIt = _mfOutputCDrgb.begin();

    fieldIt += uiIndex;

    _mfOutputCDrgb.insert(fieldIt, value);
}

void RegisterCombinersChunkBase::replaceInOutputCDrgb(UInt32                uiIndex,
                                                       const GLenum& value   )
{
    if(uiIndex >= _mfOutputCDrgb.size())
        return;

    editMField(OutputCDrgbFieldMask, _mfOutputCDrgb);

    _mfOutputCDrgb[uiIndex] = value;
}

void RegisterCombinersChunkBase::replaceInOutputCDrgb(const GLenum& pOldElem,
                                                        const GLenum& pNewElem)
{
    Int32  elemIdx = _mfOutputCDrgb.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(OutputCDrgbFieldMask, _mfOutputCDrgb);

        MFGLenum::iterator fieldIt = _mfOutputCDrgb.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void RegisterCombinersChunkBase::removeFromOutputCDrgb(UInt32 uiIndex)
{
    if(uiIndex < _mfOutputCDrgb.size())
    {
        editMField(OutputCDrgbFieldMask, _mfOutputCDrgb);

        MFGLenum::iterator fieldIt = _mfOutputCDrgb.begin();

        fieldIt += uiIndex;
        _mfOutputCDrgb.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::removeFromOutputCDrgb(const GLenum& value)
{
    Int32 iElemIdx = _mfOutputCDrgb.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(OutputCDrgbFieldMask, _mfOutputCDrgb);

        MFGLenum::iterator fieldIt = _mfOutputCDrgb.begin();

        fieldIt += iElemIdx;

        _mfOutputCDrgb.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::clearOutputCDrgb(void)
{
    editMField(OutputCDrgbFieldMask, _mfOutputCDrgb);

    _mfOutputCDrgb.clear();
}
/*********************************** Non-ptr code ********************************/
void RegisterCombinersChunkBase::pushToOutputSumrgb(const GLenum& value)
{
    editMField(OutputSumrgbFieldMask, _mfOutputSumrgb);
    _mfOutputSumrgb.push_back(value);
}

void RegisterCombinersChunkBase::insertIntoOutputSumrgb(UInt32                uiIndex,
                                                   const GLenum& value   )
{
    editMField(OutputSumrgbFieldMask, _mfOutputSumrgb);

    MFGLenum::iterator fieldIt = _mfOutputSumrgb.begin();

    fieldIt += uiIndex;

    _mfOutputSumrgb.insert(fieldIt, value);
}

void RegisterCombinersChunkBase::replaceInOutputSumrgb(UInt32                uiIndex,
                                                       const GLenum& value   )
{
    if(uiIndex >= _mfOutputSumrgb.size())
        return;

    editMField(OutputSumrgbFieldMask, _mfOutputSumrgb);

    _mfOutputSumrgb[uiIndex] = value;
}

void RegisterCombinersChunkBase::replaceInOutputSumrgb(const GLenum& pOldElem,
                                                        const GLenum& pNewElem)
{
    Int32  elemIdx = _mfOutputSumrgb.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(OutputSumrgbFieldMask, _mfOutputSumrgb);

        MFGLenum::iterator fieldIt = _mfOutputSumrgb.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void RegisterCombinersChunkBase::removeFromOutputSumrgb(UInt32 uiIndex)
{
    if(uiIndex < _mfOutputSumrgb.size())
    {
        editMField(OutputSumrgbFieldMask, _mfOutputSumrgb);

        MFGLenum::iterator fieldIt = _mfOutputSumrgb.begin();

        fieldIt += uiIndex;
        _mfOutputSumrgb.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::removeFromOutputSumrgb(const GLenum& value)
{
    Int32 iElemIdx = _mfOutputSumrgb.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(OutputSumrgbFieldMask, _mfOutputSumrgb);

        MFGLenum::iterator fieldIt = _mfOutputSumrgb.begin();

        fieldIt += iElemIdx;

        _mfOutputSumrgb.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::clearOutputSumrgb(void)
{
    editMField(OutputSumrgbFieldMask, _mfOutputSumrgb);

    _mfOutputSumrgb.clear();
}
/*********************************** Non-ptr code ********************************/
void RegisterCombinersChunkBase::pushToScalergb(const GLenum& value)
{
    editMField(ScalergbFieldMask, _mfScalergb);
    _mfScalergb.push_back(value);
}

void RegisterCombinersChunkBase::insertIntoScalergb(UInt32                uiIndex,
                                                   const GLenum& value   )
{
    editMField(ScalergbFieldMask, _mfScalergb);

    MFGLenum::iterator fieldIt = _mfScalergb.begin();

    fieldIt += uiIndex;

    _mfScalergb.insert(fieldIt, value);
}

void RegisterCombinersChunkBase::replaceInScalergb(UInt32                uiIndex,
                                                       const GLenum& value   )
{
    if(uiIndex >= _mfScalergb.size())
        return;

    editMField(ScalergbFieldMask, _mfScalergb);

    _mfScalergb[uiIndex] = value;
}

void RegisterCombinersChunkBase::replaceInScalergb(const GLenum& pOldElem,
                                                        const GLenum& pNewElem)
{
    Int32  elemIdx = _mfScalergb.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(ScalergbFieldMask, _mfScalergb);

        MFGLenum::iterator fieldIt = _mfScalergb.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void RegisterCombinersChunkBase::removeFromScalergb(UInt32 uiIndex)
{
    if(uiIndex < _mfScalergb.size())
    {
        editMField(ScalergbFieldMask, _mfScalergb);

        MFGLenum::iterator fieldIt = _mfScalergb.begin();

        fieldIt += uiIndex;
        _mfScalergb.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::removeFromScalergb(const GLenum& value)
{
    Int32 iElemIdx = _mfScalergb.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ScalergbFieldMask, _mfScalergb);

        MFGLenum::iterator fieldIt = _mfScalergb.begin();

        fieldIt += iElemIdx;

        _mfScalergb.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::clearScalergb(void)
{
    editMField(ScalergbFieldMask, _mfScalergb);

    _mfScalergb.clear();
}
/*********************************** Non-ptr code ********************************/
void RegisterCombinersChunkBase::pushToBiasrgb(const GLenum& value)
{
    editMField(BiasrgbFieldMask, _mfBiasrgb);
    _mfBiasrgb.push_back(value);
}

void RegisterCombinersChunkBase::insertIntoBiasrgb(UInt32                uiIndex,
                                                   const GLenum& value   )
{
    editMField(BiasrgbFieldMask, _mfBiasrgb);

    MFGLenum::iterator fieldIt = _mfBiasrgb.begin();

    fieldIt += uiIndex;

    _mfBiasrgb.insert(fieldIt, value);
}

void RegisterCombinersChunkBase::replaceInBiasrgb(UInt32                uiIndex,
                                                       const GLenum& value   )
{
    if(uiIndex >= _mfBiasrgb.size())
        return;

    editMField(BiasrgbFieldMask, _mfBiasrgb);

    _mfBiasrgb[uiIndex] = value;
}

void RegisterCombinersChunkBase::replaceInBiasrgb(const GLenum& pOldElem,
                                                        const GLenum& pNewElem)
{
    Int32  elemIdx = _mfBiasrgb.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(BiasrgbFieldMask, _mfBiasrgb);

        MFGLenum::iterator fieldIt = _mfBiasrgb.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void RegisterCombinersChunkBase::removeFromBiasrgb(UInt32 uiIndex)
{
    if(uiIndex < _mfBiasrgb.size())
    {
        editMField(BiasrgbFieldMask, _mfBiasrgb);

        MFGLenum::iterator fieldIt = _mfBiasrgb.begin();

        fieldIt += uiIndex;
        _mfBiasrgb.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::removeFromBiasrgb(const GLenum& value)
{
    Int32 iElemIdx = _mfBiasrgb.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(BiasrgbFieldMask, _mfBiasrgb);

        MFGLenum::iterator fieldIt = _mfBiasrgb.begin();

        fieldIt += iElemIdx;

        _mfBiasrgb.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::clearBiasrgb(void)
{
    editMField(BiasrgbFieldMask, _mfBiasrgb);

    _mfBiasrgb.clear();
}
/*********************************** Non-ptr code ********************************/
void RegisterCombinersChunkBase::pushToOutputABalpha(const GLenum& value)
{
    editMField(OutputABalphaFieldMask, _mfOutputABalpha);
    _mfOutputABalpha.push_back(value);
}

void RegisterCombinersChunkBase::insertIntoOutputABalpha(UInt32                uiIndex,
                                                   const GLenum& value   )
{
    editMField(OutputABalphaFieldMask, _mfOutputABalpha);

    MFGLenum::iterator fieldIt = _mfOutputABalpha.begin();

    fieldIt += uiIndex;

    _mfOutputABalpha.insert(fieldIt, value);
}

void RegisterCombinersChunkBase::replaceInOutputABalpha(UInt32                uiIndex,
                                                       const GLenum& value   )
{
    if(uiIndex >= _mfOutputABalpha.size())
        return;

    editMField(OutputABalphaFieldMask, _mfOutputABalpha);

    _mfOutputABalpha[uiIndex] = value;
}

void RegisterCombinersChunkBase::replaceInOutputABalpha(const GLenum& pOldElem,
                                                        const GLenum& pNewElem)
{
    Int32  elemIdx = _mfOutputABalpha.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(OutputABalphaFieldMask, _mfOutputABalpha);

        MFGLenum::iterator fieldIt = _mfOutputABalpha.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void RegisterCombinersChunkBase::removeFromOutputABalpha(UInt32 uiIndex)
{
    if(uiIndex < _mfOutputABalpha.size())
    {
        editMField(OutputABalphaFieldMask, _mfOutputABalpha);

        MFGLenum::iterator fieldIt = _mfOutputABalpha.begin();

        fieldIt += uiIndex;
        _mfOutputABalpha.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::removeFromOutputABalpha(const GLenum& value)
{
    Int32 iElemIdx = _mfOutputABalpha.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(OutputABalphaFieldMask, _mfOutputABalpha);

        MFGLenum::iterator fieldIt = _mfOutputABalpha.begin();

        fieldIt += iElemIdx;

        _mfOutputABalpha.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::clearOutputABalpha(void)
{
    editMField(OutputABalphaFieldMask, _mfOutputABalpha);

    _mfOutputABalpha.clear();
}
/*********************************** Non-ptr code ********************************/
void RegisterCombinersChunkBase::pushToOutputCDalpha(const GLenum& value)
{
    editMField(OutputCDalphaFieldMask, _mfOutputCDalpha);
    _mfOutputCDalpha.push_back(value);
}

void RegisterCombinersChunkBase::insertIntoOutputCDalpha(UInt32                uiIndex,
                                                   const GLenum& value   )
{
    editMField(OutputCDalphaFieldMask, _mfOutputCDalpha);

    MFGLenum::iterator fieldIt = _mfOutputCDalpha.begin();

    fieldIt += uiIndex;

    _mfOutputCDalpha.insert(fieldIt, value);
}

void RegisterCombinersChunkBase::replaceInOutputCDalpha(UInt32                uiIndex,
                                                       const GLenum& value   )
{
    if(uiIndex >= _mfOutputCDalpha.size())
        return;

    editMField(OutputCDalphaFieldMask, _mfOutputCDalpha);

    _mfOutputCDalpha[uiIndex] = value;
}

void RegisterCombinersChunkBase::replaceInOutputCDalpha(const GLenum& pOldElem,
                                                        const GLenum& pNewElem)
{
    Int32  elemIdx = _mfOutputCDalpha.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(OutputCDalphaFieldMask, _mfOutputCDalpha);

        MFGLenum::iterator fieldIt = _mfOutputCDalpha.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void RegisterCombinersChunkBase::removeFromOutputCDalpha(UInt32 uiIndex)
{
    if(uiIndex < _mfOutputCDalpha.size())
    {
        editMField(OutputCDalphaFieldMask, _mfOutputCDalpha);

        MFGLenum::iterator fieldIt = _mfOutputCDalpha.begin();

        fieldIt += uiIndex;
        _mfOutputCDalpha.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::removeFromOutputCDalpha(const GLenum& value)
{
    Int32 iElemIdx = _mfOutputCDalpha.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(OutputCDalphaFieldMask, _mfOutputCDalpha);

        MFGLenum::iterator fieldIt = _mfOutputCDalpha.begin();

        fieldIt += iElemIdx;

        _mfOutputCDalpha.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::clearOutputCDalpha(void)
{
    editMField(OutputCDalphaFieldMask, _mfOutputCDalpha);

    _mfOutputCDalpha.clear();
}
/*********************************** Non-ptr code ********************************/
void RegisterCombinersChunkBase::pushToOutputSumalpha(const GLenum& value)
{
    editMField(OutputSumalphaFieldMask, _mfOutputSumalpha);
    _mfOutputSumalpha.push_back(value);
}

void RegisterCombinersChunkBase::insertIntoOutputSumalpha(UInt32                uiIndex,
                                                   const GLenum& value   )
{
    editMField(OutputSumalphaFieldMask, _mfOutputSumalpha);

    MFGLenum::iterator fieldIt = _mfOutputSumalpha.begin();

    fieldIt += uiIndex;

    _mfOutputSumalpha.insert(fieldIt, value);
}

void RegisterCombinersChunkBase::replaceInOutputSumalpha(UInt32                uiIndex,
                                                       const GLenum& value   )
{
    if(uiIndex >= _mfOutputSumalpha.size())
        return;

    editMField(OutputSumalphaFieldMask, _mfOutputSumalpha);

    _mfOutputSumalpha[uiIndex] = value;
}

void RegisterCombinersChunkBase::replaceInOutputSumalpha(const GLenum& pOldElem,
                                                        const GLenum& pNewElem)
{
    Int32  elemIdx = _mfOutputSumalpha.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(OutputSumalphaFieldMask, _mfOutputSumalpha);

        MFGLenum::iterator fieldIt = _mfOutputSumalpha.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void RegisterCombinersChunkBase::removeFromOutputSumalpha(UInt32 uiIndex)
{
    if(uiIndex < _mfOutputSumalpha.size())
    {
        editMField(OutputSumalphaFieldMask, _mfOutputSumalpha);

        MFGLenum::iterator fieldIt = _mfOutputSumalpha.begin();

        fieldIt += uiIndex;
        _mfOutputSumalpha.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::removeFromOutputSumalpha(const GLenum& value)
{
    Int32 iElemIdx = _mfOutputSumalpha.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(OutputSumalphaFieldMask, _mfOutputSumalpha);

        MFGLenum::iterator fieldIt = _mfOutputSumalpha.begin();

        fieldIt += iElemIdx;

        _mfOutputSumalpha.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::clearOutputSumalpha(void)
{
    editMField(OutputSumalphaFieldMask, _mfOutputSumalpha);

    _mfOutputSumalpha.clear();
}
/*********************************** Non-ptr code ********************************/
void RegisterCombinersChunkBase::pushToDotABrgb(const UInt8& value)
{
    editMField(DotABrgbFieldMask, _mfDotABrgb);
    _mfDotABrgb.push_back(value);
}

void RegisterCombinersChunkBase::insertIntoDotABrgb(UInt32                uiIndex,
                                                   const UInt8& value   )
{
    editMField(DotABrgbFieldMask, _mfDotABrgb);

    MFUInt8::iterator fieldIt = _mfDotABrgb.begin();

    fieldIt += uiIndex;

    _mfDotABrgb.insert(fieldIt, value);
}

void RegisterCombinersChunkBase::replaceInDotABrgb(UInt32                uiIndex,
                                                       const UInt8& value   )
{
    if(uiIndex >= _mfDotABrgb.size())
        return;

    editMField(DotABrgbFieldMask, _mfDotABrgb);

    _mfDotABrgb[uiIndex] = value;
}

void RegisterCombinersChunkBase::replaceInDotABrgb(const UInt8& pOldElem,
                                                        const UInt8& pNewElem)
{
    Int32  elemIdx = _mfDotABrgb.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(DotABrgbFieldMask, _mfDotABrgb);

        MFUInt8::iterator fieldIt = _mfDotABrgb.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void RegisterCombinersChunkBase::removeFromDotABrgb(UInt32 uiIndex)
{
    if(uiIndex < _mfDotABrgb.size())
    {
        editMField(DotABrgbFieldMask, _mfDotABrgb);

        MFUInt8::iterator fieldIt = _mfDotABrgb.begin();

        fieldIt += uiIndex;
        _mfDotABrgb.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::removeFromDotABrgb(const UInt8& value)
{
    Int32 iElemIdx = _mfDotABrgb.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(DotABrgbFieldMask, _mfDotABrgb);

        MFUInt8::iterator fieldIt = _mfDotABrgb.begin();

        fieldIt += iElemIdx;

        _mfDotABrgb.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::clearDotABrgb(void)
{
    editMField(DotABrgbFieldMask, _mfDotABrgb);

    _mfDotABrgb.clear();
}
/*********************************** Non-ptr code ********************************/
void RegisterCombinersChunkBase::pushToDotCDrgb(const UInt8& value)
{
    editMField(DotCDrgbFieldMask, _mfDotCDrgb);
    _mfDotCDrgb.push_back(value);
}

void RegisterCombinersChunkBase::insertIntoDotCDrgb(UInt32                uiIndex,
                                                   const UInt8& value   )
{
    editMField(DotCDrgbFieldMask, _mfDotCDrgb);

    MFUInt8::iterator fieldIt = _mfDotCDrgb.begin();

    fieldIt += uiIndex;

    _mfDotCDrgb.insert(fieldIt, value);
}

void RegisterCombinersChunkBase::replaceInDotCDrgb(UInt32                uiIndex,
                                                       const UInt8& value   )
{
    if(uiIndex >= _mfDotCDrgb.size())
        return;

    editMField(DotCDrgbFieldMask, _mfDotCDrgb);

    _mfDotCDrgb[uiIndex] = value;
}

void RegisterCombinersChunkBase::replaceInDotCDrgb(const UInt8& pOldElem,
                                                        const UInt8& pNewElem)
{
    Int32  elemIdx = _mfDotCDrgb.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(DotCDrgbFieldMask, _mfDotCDrgb);

        MFUInt8::iterator fieldIt = _mfDotCDrgb.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void RegisterCombinersChunkBase::removeFromDotCDrgb(UInt32 uiIndex)
{
    if(uiIndex < _mfDotCDrgb.size())
    {
        editMField(DotCDrgbFieldMask, _mfDotCDrgb);

        MFUInt8::iterator fieldIt = _mfDotCDrgb.begin();

        fieldIt += uiIndex;
        _mfDotCDrgb.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::removeFromDotCDrgb(const UInt8& value)
{
    Int32 iElemIdx = _mfDotCDrgb.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(DotCDrgbFieldMask, _mfDotCDrgb);

        MFUInt8::iterator fieldIt = _mfDotCDrgb.begin();

        fieldIt += iElemIdx;

        _mfDotCDrgb.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::clearDotCDrgb(void)
{
    editMField(DotCDrgbFieldMask, _mfDotCDrgb);

    _mfDotCDrgb.clear();
}
/*********************************** Non-ptr code ********************************/
void RegisterCombinersChunkBase::pushToMuxSumrgb(const UInt8& value)
{
    editMField(MuxSumrgbFieldMask, _mfMuxSumrgb);
    _mfMuxSumrgb.push_back(value);
}

void RegisterCombinersChunkBase::insertIntoMuxSumrgb(UInt32                uiIndex,
                                                   const UInt8& value   )
{
    editMField(MuxSumrgbFieldMask, _mfMuxSumrgb);

    MFUInt8::iterator fieldIt = _mfMuxSumrgb.begin();

    fieldIt += uiIndex;

    _mfMuxSumrgb.insert(fieldIt, value);
}

void RegisterCombinersChunkBase::replaceInMuxSumrgb(UInt32                uiIndex,
                                                       const UInt8& value   )
{
    if(uiIndex >= _mfMuxSumrgb.size())
        return;

    editMField(MuxSumrgbFieldMask, _mfMuxSumrgb);

    _mfMuxSumrgb[uiIndex] = value;
}

void RegisterCombinersChunkBase::replaceInMuxSumrgb(const UInt8& pOldElem,
                                                        const UInt8& pNewElem)
{
    Int32  elemIdx = _mfMuxSumrgb.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(MuxSumrgbFieldMask, _mfMuxSumrgb);

        MFUInt8::iterator fieldIt = _mfMuxSumrgb.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void RegisterCombinersChunkBase::removeFromMuxSumrgb(UInt32 uiIndex)
{
    if(uiIndex < _mfMuxSumrgb.size())
    {
        editMField(MuxSumrgbFieldMask, _mfMuxSumrgb);

        MFUInt8::iterator fieldIt = _mfMuxSumrgb.begin();

        fieldIt += uiIndex;
        _mfMuxSumrgb.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::removeFromMuxSumrgb(const UInt8& value)
{
    Int32 iElemIdx = _mfMuxSumrgb.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(MuxSumrgbFieldMask, _mfMuxSumrgb);

        MFUInt8::iterator fieldIt = _mfMuxSumrgb.begin();

        fieldIt += iElemIdx;

        _mfMuxSumrgb.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::clearMuxSumrgb(void)
{
    editMField(MuxSumrgbFieldMask, _mfMuxSumrgb);

    _mfMuxSumrgb.clear();
}
/*********************************** Non-ptr code ********************************/
void RegisterCombinersChunkBase::pushToScalealpha(const GLenum& value)
{
    editMField(ScalealphaFieldMask, _mfScalealpha);
    _mfScalealpha.push_back(value);
}

void RegisterCombinersChunkBase::insertIntoScalealpha(UInt32                uiIndex,
                                                   const GLenum& value   )
{
    editMField(ScalealphaFieldMask, _mfScalealpha);

    MFGLenum::iterator fieldIt = _mfScalealpha.begin();

    fieldIt += uiIndex;

    _mfScalealpha.insert(fieldIt, value);
}

void RegisterCombinersChunkBase::replaceInScalealpha(UInt32                uiIndex,
                                                       const GLenum& value   )
{
    if(uiIndex >= _mfScalealpha.size())
        return;

    editMField(ScalealphaFieldMask, _mfScalealpha);

    _mfScalealpha[uiIndex] = value;
}

void RegisterCombinersChunkBase::replaceInScalealpha(const GLenum& pOldElem,
                                                        const GLenum& pNewElem)
{
    Int32  elemIdx = _mfScalealpha.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(ScalealphaFieldMask, _mfScalealpha);

        MFGLenum::iterator fieldIt = _mfScalealpha.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void RegisterCombinersChunkBase::removeFromScalealpha(UInt32 uiIndex)
{
    if(uiIndex < _mfScalealpha.size())
    {
        editMField(ScalealphaFieldMask, _mfScalealpha);

        MFGLenum::iterator fieldIt = _mfScalealpha.begin();

        fieldIt += uiIndex;
        _mfScalealpha.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::removeFromScalealpha(const GLenum& value)
{
    Int32 iElemIdx = _mfScalealpha.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ScalealphaFieldMask, _mfScalealpha);

        MFGLenum::iterator fieldIt = _mfScalealpha.begin();

        fieldIt += iElemIdx;

        _mfScalealpha.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::clearScalealpha(void)
{
    editMField(ScalealphaFieldMask, _mfScalealpha);

    _mfScalealpha.clear();
}
/*********************************** Non-ptr code ********************************/
void RegisterCombinersChunkBase::pushToBiasalpha(const GLenum& value)
{
    editMField(BiasalphaFieldMask, _mfBiasalpha);
    _mfBiasalpha.push_back(value);
}

void RegisterCombinersChunkBase::insertIntoBiasalpha(UInt32                uiIndex,
                                                   const GLenum& value   )
{
    editMField(BiasalphaFieldMask, _mfBiasalpha);

    MFGLenum::iterator fieldIt = _mfBiasalpha.begin();

    fieldIt += uiIndex;

    _mfBiasalpha.insert(fieldIt, value);
}

void RegisterCombinersChunkBase::replaceInBiasalpha(UInt32                uiIndex,
                                                       const GLenum& value   )
{
    if(uiIndex >= _mfBiasalpha.size())
        return;

    editMField(BiasalphaFieldMask, _mfBiasalpha);

    _mfBiasalpha[uiIndex] = value;
}

void RegisterCombinersChunkBase::replaceInBiasalpha(const GLenum& pOldElem,
                                                        const GLenum& pNewElem)
{
    Int32  elemIdx = _mfBiasalpha.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(BiasalphaFieldMask, _mfBiasalpha);

        MFGLenum::iterator fieldIt = _mfBiasalpha.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void RegisterCombinersChunkBase::removeFromBiasalpha(UInt32 uiIndex)
{
    if(uiIndex < _mfBiasalpha.size())
    {
        editMField(BiasalphaFieldMask, _mfBiasalpha);

        MFGLenum::iterator fieldIt = _mfBiasalpha.begin();

        fieldIt += uiIndex;
        _mfBiasalpha.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::removeFromBiasalpha(const GLenum& value)
{
    Int32 iElemIdx = _mfBiasalpha.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(BiasalphaFieldMask, _mfBiasalpha);

        MFGLenum::iterator fieldIt = _mfBiasalpha.begin();

        fieldIt += iElemIdx;

        _mfBiasalpha.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::clearBiasalpha(void)
{
    editMField(BiasalphaFieldMask, _mfBiasalpha);

    _mfBiasalpha.clear();
}
/*********************************** Non-ptr code ********************************/
void RegisterCombinersChunkBase::pushToMuxSumalpha(const UInt8& value)
{
    editMField(MuxSumalphaFieldMask, _mfMuxSumalpha);
    _mfMuxSumalpha.push_back(value);
}

void RegisterCombinersChunkBase::insertIntoMuxSumalpha(UInt32                uiIndex,
                                                   const UInt8& value   )
{
    editMField(MuxSumalphaFieldMask, _mfMuxSumalpha);

    MFUInt8::iterator fieldIt = _mfMuxSumalpha.begin();

    fieldIt += uiIndex;

    _mfMuxSumalpha.insert(fieldIt, value);
}

void RegisterCombinersChunkBase::replaceInMuxSumalpha(UInt32                uiIndex,
                                                       const UInt8& value   )
{
    if(uiIndex >= _mfMuxSumalpha.size())
        return;

    editMField(MuxSumalphaFieldMask, _mfMuxSumalpha);

    _mfMuxSumalpha[uiIndex] = value;
}

void RegisterCombinersChunkBase::replaceInMuxSumalpha(const UInt8& pOldElem,
                                                        const UInt8& pNewElem)
{
    Int32  elemIdx = _mfMuxSumalpha.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(MuxSumalphaFieldMask, _mfMuxSumalpha);

        MFUInt8::iterator fieldIt = _mfMuxSumalpha.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void RegisterCombinersChunkBase::removeFromMuxSumalpha(UInt32 uiIndex)
{
    if(uiIndex < _mfMuxSumalpha.size())
    {
        editMField(MuxSumalphaFieldMask, _mfMuxSumalpha);

        MFUInt8::iterator fieldIt = _mfMuxSumalpha.begin();

        fieldIt += uiIndex;
        _mfMuxSumalpha.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::removeFromMuxSumalpha(const UInt8& value)
{
    Int32 iElemIdx = _mfMuxSumalpha.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(MuxSumalphaFieldMask, _mfMuxSumalpha);

        MFUInt8::iterator fieldIt = _mfMuxSumalpha.begin();

        fieldIt += iElemIdx;

        _mfMuxSumalpha.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::clearMuxSumalpha(void)
{
    editMField(MuxSumalphaFieldMask, _mfMuxSumalpha);

    _mfMuxSumalpha.clear();
}
/*********************************** Non-ptr code ********************************/
void RegisterCombinersChunkBase::pushToVariableE(const GLenum& value)
{
    editMField(VariableEFieldMask, _mfVariableE);
    _mfVariableE.push_back(value);
}

void RegisterCombinersChunkBase::insertIntoVariableE(UInt32                uiIndex,
                                                   const GLenum& value   )
{
    editMField(VariableEFieldMask, _mfVariableE);

    MFGLenum::iterator fieldIt = _mfVariableE.begin();

    fieldIt += uiIndex;

    _mfVariableE.insert(fieldIt, value);
}

void RegisterCombinersChunkBase::replaceInVariableE(UInt32                uiIndex,
                                                       const GLenum& value   )
{
    if(uiIndex >= _mfVariableE.size())
        return;

    editMField(VariableEFieldMask, _mfVariableE);

    _mfVariableE[uiIndex] = value;
}

void RegisterCombinersChunkBase::replaceInVariableE(const GLenum& pOldElem,
                                                        const GLenum& pNewElem)
{
    Int32  elemIdx = _mfVariableE.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(VariableEFieldMask, _mfVariableE);

        MFGLenum::iterator fieldIt = _mfVariableE.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void RegisterCombinersChunkBase::removeFromVariableE(UInt32 uiIndex)
{
    if(uiIndex < _mfVariableE.size())
    {
        editMField(VariableEFieldMask, _mfVariableE);

        MFGLenum::iterator fieldIt = _mfVariableE.begin();

        fieldIt += uiIndex;
        _mfVariableE.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::removeFromVariableE(const GLenum& value)
{
    Int32 iElemIdx = _mfVariableE.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(VariableEFieldMask, _mfVariableE);

        MFGLenum::iterator fieldIt = _mfVariableE.begin();

        fieldIt += iElemIdx;

        _mfVariableE.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::clearVariableE(void)
{
    editMField(VariableEFieldMask, _mfVariableE);

    _mfVariableE.clear();
}
/*********************************** Non-ptr code ********************************/
void RegisterCombinersChunkBase::pushToVariableF(const GLenum& value)
{
    editMField(VariableFFieldMask, _mfVariableF);
    _mfVariableF.push_back(value);
}

void RegisterCombinersChunkBase::insertIntoVariableF(UInt32                uiIndex,
                                                   const GLenum& value   )
{
    editMField(VariableFFieldMask, _mfVariableF);

    MFGLenum::iterator fieldIt = _mfVariableF.begin();

    fieldIt += uiIndex;

    _mfVariableF.insert(fieldIt, value);
}

void RegisterCombinersChunkBase::replaceInVariableF(UInt32                uiIndex,
                                                       const GLenum& value   )
{
    if(uiIndex >= _mfVariableF.size())
        return;

    editMField(VariableFFieldMask, _mfVariableF);

    _mfVariableF[uiIndex] = value;
}

void RegisterCombinersChunkBase::replaceInVariableF(const GLenum& pOldElem,
                                                        const GLenum& pNewElem)
{
    Int32  elemIdx = _mfVariableF.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(VariableFFieldMask, _mfVariableF);

        MFGLenum::iterator fieldIt = _mfVariableF.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void RegisterCombinersChunkBase::removeFromVariableF(UInt32 uiIndex)
{
    if(uiIndex < _mfVariableF.size())
    {
        editMField(VariableFFieldMask, _mfVariableF);

        MFGLenum::iterator fieldIt = _mfVariableF.begin();

        fieldIt += uiIndex;
        _mfVariableF.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::removeFromVariableF(const GLenum& value)
{
    Int32 iElemIdx = _mfVariableF.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(VariableFFieldMask, _mfVariableF);

        MFGLenum::iterator fieldIt = _mfVariableF.begin();

        fieldIt += iElemIdx;

        _mfVariableF.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::clearVariableF(void)
{
    editMField(VariableFFieldMask, _mfVariableF);

    _mfVariableF.clear();
}
/*********************************** Non-ptr code ********************************/
void RegisterCombinersChunkBase::pushToVariableG(const GLenum& value)
{
    editMField(VariableGFieldMask, _mfVariableG);
    _mfVariableG.push_back(value);
}

void RegisterCombinersChunkBase::insertIntoVariableG(UInt32                uiIndex,
                                                   const GLenum& value   )
{
    editMField(VariableGFieldMask, _mfVariableG);

    MFGLenum::iterator fieldIt = _mfVariableG.begin();

    fieldIt += uiIndex;

    _mfVariableG.insert(fieldIt, value);
}

void RegisterCombinersChunkBase::replaceInVariableG(UInt32                uiIndex,
                                                       const GLenum& value   )
{
    if(uiIndex >= _mfVariableG.size())
        return;

    editMField(VariableGFieldMask, _mfVariableG);

    _mfVariableG[uiIndex] = value;
}

void RegisterCombinersChunkBase::replaceInVariableG(const GLenum& pOldElem,
                                                        const GLenum& pNewElem)
{
    Int32  elemIdx = _mfVariableG.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(VariableGFieldMask, _mfVariableG);

        MFGLenum::iterator fieldIt = _mfVariableG.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void RegisterCombinersChunkBase::removeFromVariableG(UInt32 uiIndex)
{
    if(uiIndex < _mfVariableG.size())
    {
        editMField(VariableGFieldMask, _mfVariableG);

        MFGLenum::iterator fieldIt = _mfVariableG.begin();

        fieldIt += uiIndex;
        _mfVariableG.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::removeFromVariableG(const GLenum& value)
{
    Int32 iElemIdx = _mfVariableG.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(VariableGFieldMask, _mfVariableG);

        MFGLenum::iterator fieldIt = _mfVariableG.begin();

        fieldIt += iElemIdx;

        _mfVariableG.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::clearVariableG(void)
{
    editMField(VariableGFieldMask, _mfVariableG);

    _mfVariableG.clear();
}
/*********************************** Non-ptr code ********************************/
void RegisterCombinersChunkBase::pushToCombinerColor0(const Color4f& value)
{
    editMField(CombinerColor0FieldMask, _mfCombinerColor0);
    _mfCombinerColor0.push_back(value);
}

void RegisterCombinersChunkBase::insertIntoCombinerColor0(UInt32                uiIndex,
                                                   const Color4f& value   )
{
    editMField(CombinerColor0FieldMask, _mfCombinerColor0);

    MFColor4f::iterator fieldIt = _mfCombinerColor0.begin();

    fieldIt += uiIndex;

    _mfCombinerColor0.insert(fieldIt, value);
}

void RegisterCombinersChunkBase::replaceInCombinerColor0(UInt32                uiIndex,
                                                       const Color4f& value   )
{
    if(uiIndex >= _mfCombinerColor0.size())
        return;

    editMField(CombinerColor0FieldMask, _mfCombinerColor0);

    _mfCombinerColor0[uiIndex] = value;
}

void RegisterCombinersChunkBase::replaceInCombinerColor0(const Color4f& pOldElem,
                                                        const Color4f& pNewElem)
{
    Int32  elemIdx = _mfCombinerColor0.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(CombinerColor0FieldMask, _mfCombinerColor0);

        MFColor4f::iterator fieldIt = _mfCombinerColor0.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void RegisterCombinersChunkBase::removeFromCombinerColor0(UInt32 uiIndex)
{
    if(uiIndex < _mfCombinerColor0.size())
    {
        editMField(CombinerColor0FieldMask, _mfCombinerColor0);

        MFColor4f::iterator fieldIt = _mfCombinerColor0.begin();

        fieldIt += uiIndex;
        _mfCombinerColor0.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::removeFromCombinerColor0(const Color4f& value)
{
    Int32 iElemIdx = _mfCombinerColor0.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(CombinerColor0FieldMask, _mfCombinerColor0);

        MFColor4f::iterator fieldIt = _mfCombinerColor0.begin();

        fieldIt += iElemIdx;

        _mfCombinerColor0.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::clearCombinerColor0(void)
{
    editMField(CombinerColor0FieldMask, _mfCombinerColor0);

    _mfCombinerColor0.clear();
}
/*********************************** Non-ptr code ********************************/
void RegisterCombinersChunkBase::pushToCombinerColor1(const Color4f& value)
{
    editMField(CombinerColor1FieldMask, _mfCombinerColor1);
    _mfCombinerColor1.push_back(value);
}

void RegisterCombinersChunkBase::insertIntoCombinerColor1(UInt32                uiIndex,
                                                   const Color4f& value   )
{
    editMField(CombinerColor1FieldMask, _mfCombinerColor1);

    MFColor4f::iterator fieldIt = _mfCombinerColor1.begin();

    fieldIt += uiIndex;

    _mfCombinerColor1.insert(fieldIt, value);
}

void RegisterCombinersChunkBase::replaceInCombinerColor1(UInt32                uiIndex,
                                                       const Color4f& value   )
{
    if(uiIndex >= _mfCombinerColor1.size())
        return;

    editMField(CombinerColor1FieldMask, _mfCombinerColor1);

    _mfCombinerColor1[uiIndex] = value;
}

void RegisterCombinersChunkBase::replaceInCombinerColor1(const Color4f& pOldElem,
                                                        const Color4f& pNewElem)
{
    Int32  elemIdx = _mfCombinerColor1.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(CombinerColor1FieldMask, _mfCombinerColor1);

        MFColor4f::iterator fieldIt = _mfCombinerColor1.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void RegisterCombinersChunkBase::removeFromCombinerColor1(UInt32 uiIndex)
{
    if(uiIndex < _mfCombinerColor1.size())
    {
        editMField(CombinerColor1FieldMask, _mfCombinerColor1);

        MFColor4f::iterator fieldIt = _mfCombinerColor1.begin();

        fieldIt += uiIndex;
        _mfCombinerColor1.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::removeFromCombinerColor1(const Color4f& value)
{
    Int32 iElemIdx = _mfCombinerColor1.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(CombinerColor1FieldMask, _mfCombinerColor1);

        MFColor4f::iterator fieldIt = _mfCombinerColor1.begin();

        fieldIt += iElemIdx;

        _mfCombinerColor1.erase(fieldIt);
    }
}

void RegisterCombinersChunkBase::clearCombinerColor1(void)
{
    editMField(CombinerColor1FieldMask, _mfCombinerColor1);

    _mfCombinerColor1.clear();
}


/*------------------------------ access -----------------------------------*/

UInt32 RegisterCombinersChunkBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (Color0FieldMask & whichField))
    {
        returnValue += _sfColor0.getBinSize();
    }
    if(FieldBits::NoField != (Color1FieldMask & whichField))
    {
        returnValue += _sfColor1.getBinSize();
    }
    if(FieldBits::NoField != (ColorSumClampFieldMask & whichField))
    {
        returnValue += _sfColorSumClamp.getBinSize();
    }
    if(FieldBits::NoField != (VariableArgbFieldMask & whichField))
    {
        returnValue += _mfVariableArgb.getBinSize();
    }
    if(FieldBits::NoField != (VariableBrgbFieldMask & whichField))
    {
        returnValue += _mfVariableBrgb.getBinSize();
    }
    if(FieldBits::NoField != (VariableCrgbFieldMask & whichField))
    {
        returnValue += _mfVariableCrgb.getBinSize();
    }
    if(FieldBits::NoField != (VariableDrgbFieldMask & whichField))
    {
        returnValue += _mfVariableDrgb.getBinSize();
    }
    if(FieldBits::NoField != (VariableAalphaFieldMask & whichField))
    {
        returnValue += _mfVariableAalpha.getBinSize();
    }
    if(FieldBits::NoField != (VariableBalphaFieldMask & whichField))
    {
        returnValue += _mfVariableBalpha.getBinSize();
    }
    if(FieldBits::NoField != (VariableCalphaFieldMask & whichField))
    {
        returnValue += _mfVariableCalpha.getBinSize();
    }
    if(FieldBits::NoField != (VariableDalphaFieldMask & whichField))
    {
        returnValue += _mfVariableDalpha.getBinSize();
    }
    if(FieldBits::NoField != (OutputABrgbFieldMask & whichField))
    {
        returnValue += _mfOutputABrgb.getBinSize();
    }
    if(FieldBits::NoField != (OutputCDrgbFieldMask & whichField))
    {
        returnValue += _mfOutputCDrgb.getBinSize();
    }
    if(FieldBits::NoField != (OutputSumrgbFieldMask & whichField))
    {
        returnValue += _mfOutputSumrgb.getBinSize();
    }
    if(FieldBits::NoField != (ScalergbFieldMask & whichField))
    {
        returnValue += _mfScalergb.getBinSize();
    }
    if(FieldBits::NoField != (BiasrgbFieldMask & whichField))
    {
        returnValue += _mfBiasrgb.getBinSize();
    }
    if(FieldBits::NoField != (OutputABalphaFieldMask & whichField))
    {
        returnValue += _mfOutputABalpha.getBinSize();
    }
    if(FieldBits::NoField != (OutputCDalphaFieldMask & whichField))
    {
        returnValue += _mfOutputCDalpha.getBinSize();
    }
    if(FieldBits::NoField != (OutputSumalphaFieldMask & whichField))
    {
        returnValue += _mfOutputSumalpha.getBinSize();
    }
    if(FieldBits::NoField != (DotABrgbFieldMask & whichField))
    {
        returnValue += _mfDotABrgb.getBinSize();
    }
    if(FieldBits::NoField != (DotCDrgbFieldMask & whichField))
    {
        returnValue += _mfDotCDrgb.getBinSize();
    }
    if(FieldBits::NoField != (MuxSumrgbFieldMask & whichField))
    {
        returnValue += _mfMuxSumrgb.getBinSize();
    }
    if(FieldBits::NoField != (ScalealphaFieldMask & whichField))
    {
        returnValue += _mfScalealpha.getBinSize();
    }
    if(FieldBits::NoField != (BiasalphaFieldMask & whichField))
    {
        returnValue += _mfBiasalpha.getBinSize();
    }
    if(FieldBits::NoField != (MuxSumalphaFieldMask & whichField))
    {
        returnValue += _mfMuxSumalpha.getBinSize();
    }
    if(FieldBits::NoField != (VariableEFieldMask & whichField))
    {
        returnValue += _mfVariableE.getBinSize();
    }
    if(FieldBits::NoField != (VariableFFieldMask & whichField))
    {
        returnValue += _mfVariableF.getBinSize();
    }
    if(FieldBits::NoField != (VariableGFieldMask & whichField))
    {
        returnValue += _mfVariableG.getBinSize();
    }
    if(FieldBits::NoField != (CombinerColor0FieldMask & whichField))
    {
        returnValue += _mfCombinerColor0.getBinSize();
    }
    if(FieldBits::NoField != (CombinerColor1FieldMask & whichField))
    {
        returnValue += _mfCombinerColor1.getBinSize();
    }
    if(FieldBits::NoField != (PerStageConstantsFieldMask & whichField))
    {
        returnValue += _sfPerStageConstants.getBinSize();
    }

    return returnValue;
}

void RegisterCombinersChunkBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (Color0FieldMask & whichField))
    {
        _sfColor0.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Color1FieldMask & whichField))
    {
        _sfColor1.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ColorSumClampFieldMask & whichField))
    {
        _sfColorSumClamp.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableArgbFieldMask & whichField))
    {
        _mfVariableArgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableBrgbFieldMask & whichField))
    {
        _mfVariableBrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableCrgbFieldMask & whichField))
    {
        _mfVariableCrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableDrgbFieldMask & whichField))
    {
        _mfVariableDrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableAalphaFieldMask & whichField))
    {
        _mfVariableAalpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableBalphaFieldMask & whichField))
    {
        _mfVariableBalpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableCalphaFieldMask & whichField))
    {
        _mfVariableCalpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableDalphaFieldMask & whichField))
    {
        _mfVariableDalpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OutputABrgbFieldMask & whichField))
    {
        _mfOutputABrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OutputCDrgbFieldMask & whichField))
    {
        _mfOutputCDrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OutputSumrgbFieldMask & whichField))
    {
        _mfOutputSumrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ScalergbFieldMask & whichField))
    {
        _mfScalergb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BiasrgbFieldMask & whichField))
    {
        _mfBiasrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OutputABalphaFieldMask & whichField))
    {
        _mfOutputABalpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OutputCDalphaFieldMask & whichField))
    {
        _mfOutputCDalpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OutputSumalphaFieldMask & whichField))
    {
        _mfOutputSumalpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DotABrgbFieldMask & whichField))
    {
        _mfDotABrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DotCDrgbFieldMask & whichField))
    {
        _mfDotCDrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MuxSumrgbFieldMask & whichField))
    {
        _mfMuxSumrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ScalealphaFieldMask & whichField))
    {
        _mfScalealpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BiasalphaFieldMask & whichField))
    {
        _mfBiasalpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MuxSumalphaFieldMask & whichField))
    {
        _mfMuxSumalpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableEFieldMask & whichField))
    {
        _mfVariableE.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableFFieldMask & whichField))
    {
        _mfVariableF.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableGFieldMask & whichField))
    {
        _mfVariableG.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CombinerColor0FieldMask & whichField))
    {
        _mfCombinerColor0.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CombinerColor1FieldMask & whichField))
    {
        _mfCombinerColor1.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PerStageConstantsFieldMask & whichField))
    {
        _sfPerStageConstants.copyToBin(pMem);
    }
}

void RegisterCombinersChunkBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (Color0FieldMask & whichField))
    {
        _sfColor0.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Color1FieldMask & whichField))
    {
        _sfColor1.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ColorSumClampFieldMask & whichField))
    {
        _sfColorSumClamp.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableArgbFieldMask & whichField))
    {
        _mfVariableArgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableBrgbFieldMask & whichField))
    {
        _mfVariableBrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableCrgbFieldMask & whichField))
    {
        _mfVariableCrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableDrgbFieldMask & whichField))
    {
        _mfVariableDrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableAalphaFieldMask & whichField))
    {
        _mfVariableAalpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableBalphaFieldMask & whichField))
    {
        _mfVariableBalpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableCalphaFieldMask & whichField))
    {
        _mfVariableCalpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableDalphaFieldMask & whichField))
    {
        _mfVariableDalpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OutputABrgbFieldMask & whichField))
    {
        _mfOutputABrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OutputCDrgbFieldMask & whichField))
    {
        _mfOutputCDrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OutputSumrgbFieldMask & whichField))
    {
        _mfOutputSumrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ScalergbFieldMask & whichField))
    {
        _mfScalergb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BiasrgbFieldMask & whichField))
    {
        _mfBiasrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OutputABalphaFieldMask & whichField))
    {
        _mfOutputABalpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OutputCDalphaFieldMask & whichField))
    {
        _mfOutputCDalpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OutputSumalphaFieldMask & whichField))
    {
        _mfOutputSumalpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DotABrgbFieldMask & whichField))
    {
        _mfDotABrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DotCDrgbFieldMask & whichField))
    {
        _mfDotCDrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MuxSumrgbFieldMask & whichField))
    {
        _mfMuxSumrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ScalealphaFieldMask & whichField))
    {
        _mfScalealpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BiasalphaFieldMask & whichField))
    {
        _mfBiasalpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MuxSumalphaFieldMask & whichField))
    {
        _mfMuxSumalpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableEFieldMask & whichField))
    {
        _mfVariableE.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableFFieldMask & whichField))
    {
        _mfVariableF.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableGFieldMask & whichField))
    {
        _mfVariableG.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CombinerColor0FieldMask & whichField))
    {
        _mfCombinerColor0.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CombinerColor1FieldMask & whichField))
    {
        _mfCombinerColor1.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PerStageConstantsFieldMask & whichField))
    {
        _sfPerStageConstants.copyFromBin(pMem);
    }
}

//! create a new instance of the class
RegisterCombinersChunkPtr RegisterCombinersChunkBase::create(void)
{
    RegisterCombinersChunkPtr fc;

    if(getClassType().getPrototype() != NullFC)
    {
        fc = dynamic_cast<RegisterCombinersChunk::ObjPtr>(
            getClassType().getPrototype()-> shallowCopy());
    }

    return fc;
}

//! create an empty new instance of the class, do not copy the prototype
RegisterCombinersChunkPtr RegisterCombinersChunkBase::createEmpty(void)
{
    RegisterCombinersChunkPtr returnValue;

    newPtr<RegisterCombinersChunk>(returnValue);

    return returnValue;
}

FieldContainerPtr RegisterCombinersChunkBase::shallowCopy(void) const
{
    RegisterCombinersChunkPtr returnValue;

    newPtr(returnValue, dynamic_cast<const RegisterCombinersChunk *>(this));

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

RegisterCombinersChunkBase::RegisterCombinersChunkBase(void) :
    Inherited(),
    _sfColor0                 (),
    _sfColor1                 (),
    _sfColorSumClamp          (bool(false)),
    _mfVariableArgb           (),
    _mfVariableBrgb           (),
    _mfVariableCrgb           (),
    _mfVariableDrgb           (),
    _mfVariableAalpha         (),
    _mfVariableBalpha         (),
    _mfVariableCalpha         (),
    _mfVariableDalpha         (),
    _mfOutputABrgb            (),
    _mfOutputCDrgb            (),
    _mfOutputSumrgb           (),
    _mfScalergb               (),
    _mfBiasrgb                (),
    _mfOutputABalpha          (),
    _mfOutputCDalpha          (),
    _mfOutputSumalpha         (),
    _mfDotABrgb               (),
    _mfDotCDrgb               (),
    _mfMuxSumrgb              (),
    _mfScalealpha             (),
    _mfBiasalpha              (),
    _mfMuxSumalpha            (),
    _mfVariableE              (),
    _mfVariableF              (),
    _mfVariableG              (),
    _mfCombinerColor0         (),
    _mfCombinerColor1         (),
    _sfPerStageConstants      ()
{
}

RegisterCombinersChunkBase::RegisterCombinersChunkBase(const RegisterCombinersChunkBase &source) :
    Inherited(source),
    _sfColor0                 (source._sfColor0                 ),
    _sfColor1                 (source._sfColor1                 ),
    _sfColorSumClamp          (source._sfColorSumClamp          ),
    _mfVariableArgb           (source._mfVariableArgb           ),
    _mfVariableBrgb           (source._mfVariableBrgb           ),
    _mfVariableCrgb           (source._mfVariableCrgb           ),
    _mfVariableDrgb           (source._mfVariableDrgb           ),
    _mfVariableAalpha         (source._mfVariableAalpha         ),
    _mfVariableBalpha         (source._mfVariableBalpha         ),
    _mfVariableCalpha         (source._mfVariableCalpha         ),
    _mfVariableDalpha         (source._mfVariableDalpha         ),
    _mfOutputABrgb            (source._mfOutputABrgb            ),
    _mfOutputCDrgb            (source._mfOutputCDrgb            ),
    _mfOutputSumrgb           (source._mfOutputSumrgb           ),
    _mfScalergb               (source._mfScalergb               ),
    _mfBiasrgb                (source._mfBiasrgb                ),
    _mfOutputABalpha          (source._mfOutputABalpha          ),
    _mfOutputCDalpha          (source._mfOutputCDalpha          ),
    _mfOutputSumalpha         (source._mfOutputSumalpha         ),
    _mfDotABrgb               (source._mfDotABrgb               ),
    _mfDotCDrgb               (source._mfDotCDrgb               ),
    _mfMuxSumrgb              (source._mfMuxSumrgb              ),
    _mfScalealpha             (source._mfScalealpha             ),
    _mfBiasalpha              (source._mfBiasalpha              ),
    _mfMuxSumalpha            (source._mfMuxSumalpha            ),
    _mfVariableE              (source._mfVariableE              ),
    _mfVariableF              (source._mfVariableF              ),
    _mfVariableG              (source._mfVariableG              ),
    _mfCombinerColor0         (source._mfCombinerColor0         ),
    _mfCombinerColor1         (source._mfCombinerColor1         ),
    _sfPerStageConstants      (source._sfPerStageConstants      )
{
}


/*-------------------------- destructors ----------------------------------*/

RegisterCombinersChunkBase::~RegisterCombinersChunkBase(void)
{
}


GetFieldHandlePtr RegisterCombinersChunkBase::getHandleColor0          (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfColor0, 
             this->getType().getFieldDesc(Color0FieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleColor0         (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfColor0, 
             this->getType().getFieldDesc(Color0FieldId)));

    editSField(Color0FieldMask);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleColor1          (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfColor1, 
             this->getType().getFieldDesc(Color1FieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleColor1         (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfColor1, 
             this->getType().getFieldDesc(Color1FieldId)));

    editSField(Color1FieldMask);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleColorSumClamp   (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfColorSumClamp, 
             this->getType().getFieldDesc(ColorSumClampFieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleColorSumClamp  (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfColorSumClamp, 
             this->getType().getFieldDesc(ColorSumClampFieldId)));

    editSField(ColorSumClampFieldMask);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleVariableArgb    (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfVariableArgb, 
             this->getType().getFieldDesc(VariableArgbFieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleVariableArgb   (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfVariableArgb, 
             this->getType().getFieldDesc(VariableArgbFieldId)));

    editMField(VariableArgbFieldMask, _mfVariableArgb);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleVariableBrgb    (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfVariableBrgb, 
             this->getType().getFieldDesc(VariableBrgbFieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleVariableBrgb   (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfVariableBrgb, 
             this->getType().getFieldDesc(VariableBrgbFieldId)));

    editMField(VariableBrgbFieldMask, _mfVariableBrgb);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleVariableCrgb    (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfVariableCrgb, 
             this->getType().getFieldDesc(VariableCrgbFieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleVariableCrgb   (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfVariableCrgb, 
             this->getType().getFieldDesc(VariableCrgbFieldId)));

    editMField(VariableCrgbFieldMask, _mfVariableCrgb);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleVariableDrgb    (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfVariableDrgb, 
             this->getType().getFieldDesc(VariableDrgbFieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleVariableDrgb   (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfVariableDrgb, 
             this->getType().getFieldDesc(VariableDrgbFieldId)));

    editMField(VariableDrgbFieldMask, _mfVariableDrgb);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleVariableAalpha  (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfVariableAalpha, 
             this->getType().getFieldDesc(VariableAalphaFieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleVariableAalpha (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfVariableAalpha, 
             this->getType().getFieldDesc(VariableAalphaFieldId)));

    editMField(VariableAalphaFieldMask, _mfVariableAalpha);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleVariableBalpha  (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfVariableBalpha, 
             this->getType().getFieldDesc(VariableBalphaFieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleVariableBalpha (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfVariableBalpha, 
             this->getType().getFieldDesc(VariableBalphaFieldId)));

    editMField(VariableBalphaFieldMask, _mfVariableBalpha);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleVariableCalpha  (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfVariableCalpha, 
             this->getType().getFieldDesc(VariableCalphaFieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleVariableCalpha (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfVariableCalpha, 
             this->getType().getFieldDesc(VariableCalphaFieldId)));

    editMField(VariableCalphaFieldMask, _mfVariableCalpha);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleVariableDalpha  (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfVariableDalpha, 
             this->getType().getFieldDesc(VariableDalphaFieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleVariableDalpha (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfVariableDalpha, 
             this->getType().getFieldDesc(VariableDalphaFieldId)));

    editMField(VariableDalphaFieldMask, _mfVariableDalpha);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleOutputABrgb     (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfOutputABrgb, 
             this->getType().getFieldDesc(OutputABrgbFieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleOutputABrgb    (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfOutputABrgb, 
             this->getType().getFieldDesc(OutputABrgbFieldId)));

    editMField(OutputABrgbFieldMask, _mfOutputABrgb);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleOutputCDrgb     (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfOutputCDrgb, 
             this->getType().getFieldDesc(OutputCDrgbFieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleOutputCDrgb    (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfOutputCDrgb, 
             this->getType().getFieldDesc(OutputCDrgbFieldId)));

    editMField(OutputCDrgbFieldMask, _mfOutputCDrgb);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleOutputSumrgb    (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfOutputSumrgb, 
             this->getType().getFieldDesc(OutputSumrgbFieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleOutputSumrgb   (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfOutputSumrgb, 
             this->getType().getFieldDesc(OutputSumrgbFieldId)));

    editMField(OutputSumrgbFieldMask, _mfOutputSumrgb);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleScalergb        (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfScalergb, 
             this->getType().getFieldDesc(ScalergbFieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleScalergb       (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfScalergb, 
             this->getType().getFieldDesc(ScalergbFieldId)));

    editMField(ScalergbFieldMask, _mfScalergb);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleBiasrgb         (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfBiasrgb, 
             this->getType().getFieldDesc(BiasrgbFieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleBiasrgb        (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfBiasrgb, 
             this->getType().getFieldDesc(BiasrgbFieldId)));

    editMField(BiasrgbFieldMask, _mfBiasrgb);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleOutputABalpha   (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfOutputABalpha, 
             this->getType().getFieldDesc(OutputABalphaFieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleOutputABalpha  (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfOutputABalpha, 
             this->getType().getFieldDesc(OutputABalphaFieldId)));

    editMField(OutputABalphaFieldMask, _mfOutputABalpha);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleOutputCDalpha   (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfOutputCDalpha, 
             this->getType().getFieldDesc(OutputCDalphaFieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleOutputCDalpha  (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfOutputCDalpha, 
             this->getType().getFieldDesc(OutputCDalphaFieldId)));

    editMField(OutputCDalphaFieldMask, _mfOutputCDalpha);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleOutputSumalpha  (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfOutputSumalpha, 
             this->getType().getFieldDesc(OutputSumalphaFieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleOutputSumalpha (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfOutputSumalpha, 
             this->getType().getFieldDesc(OutputSumalphaFieldId)));

    editMField(OutputSumalphaFieldMask, _mfOutputSumalpha);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleDotABrgb        (void) const
{
    MFUInt8::GetHandlePtr returnValue(
        new  MFUInt8::GetHandle(
             &_mfDotABrgb, 
             this->getType().getFieldDesc(DotABrgbFieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleDotABrgb       (void)
{
    MFUInt8::EditHandlePtr returnValue(
        new  MFUInt8::EditHandle(
             &_mfDotABrgb, 
             this->getType().getFieldDesc(DotABrgbFieldId)));

    editMField(DotABrgbFieldMask, _mfDotABrgb);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleDotCDrgb        (void) const
{
    MFUInt8::GetHandlePtr returnValue(
        new  MFUInt8::GetHandle(
             &_mfDotCDrgb, 
             this->getType().getFieldDesc(DotCDrgbFieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleDotCDrgb       (void)
{
    MFUInt8::EditHandlePtr returnValue(
        new  MFUInt8::EditHandle(
             &_mfDotCDrgb, 
             this->getType().getFieldDesc(DotCDrgbFieldId)));

    editMField(DotCDrgbFieldMask, _mfDotCDrgb);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleMuxSumrgb       (void) const
{
    MFUInt8::GetHandlePtr returnValue(
        new  MFUInt8::GetHandle(
             &_mfMuxSumrgb, 
             this->getType().getFieldDesc(MuxSumrgbFieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleMuxSumrgb      (void)
{
    MFUInt8::EditHandlePtr returnValue(
        new  MFUInt8::EditHandle(
             &_mfMuxSumrgb, 
             this->getType().getFieldDesc(MuxSumrgbFieldId)));

    editMField(MuxSumrgbFieldMask, _mfMuxSumrgb);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleScalealpha      (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfScalealpha, 
             this->getType().getFieldDesc(ScalealphaFieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleScalealpha     (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfScalealpha, 
             this->getType().getFieldDesc(ScalealphaFieldId)));

    editMField(ScalealphaFieldMask, _mfScalealpha);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleBiasalpha       (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfBiasalpha, 
             this->getType().getFieldDesc(BiasalphaFieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleBiasalpha      (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfBiasalpha, 
             this->getType().getFieldDesc(BiasalphaFieldId)));

    editMField(BiasalphaFieldMask, _mfBiasalpha);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleMuxSumalpha     (void) const
{
    MFUInt8::GetHandlePtr returnValue(
        new  MFUInt8::GetHandle(
             &_mfMuxSumalpha, 
             this->getType().getFieldDesc(MuxSumalphaFieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleMuxSumalpha    (void)
{
    MFUInt8::EditHandlePtr returnValue(
        new  MFUInt8::EditHandle(
             &_mfMuxSumalpha, 
             this->getType().getFieldDesc(MuxSumalphaFieldId)));

    editMField(MuxSumalphaFieldMask, _mfMuxSumalpha);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleVariableE       (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfVariableE, 
             this->getType().getFieldDesc(VariableEFieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleVariableE      (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfVariableE, 
             this->getType().getFieldDesc(VariableEFieldId)));

    editMField(VariableEFieldMask, _mfVariableE);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleVariableF       (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfVariableF, 
             this->getType().getFieldDesc(VariableFFieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleVariableF      (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfVariableF, 
             this->getType().getFieldDesc(VariableFFieldId)));

    editMField(VariableFFieldMask, _mfVariableF);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleVariableG       (void) const
{
    MFGLenum::GetHandlePtr returnValue(
        new  MFGLenum::GetHandle(
             &_mfVariableG, 
             this->getType().getFieldDesc(VariableGFieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleVariableG      (void)
{
    MFGLenum::EditHandlePtr returnValue(
        new  MFGLenum::EditHandle(
             &_mfVariableG, 
             this->getType().getFieldDesc(VariableGFieldId)));

    editMField(VariableGFieldMask, _mfVariableG);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleCombinerColor0  (void) const
{
    MFColor4f::GetHandlePtr returnValue(
        new  MFColor4f::GetHandle(
             &_mfCombinerColor0, 
             this->getType().getFieldDesc(CombinerColor0FieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleCombinerColor0 (void)
{
    MFColor4f::EditHandlePtr returnValue(
        new  MFColor4f::EditHandle(
             &_mfCombinerColor0, 
             this->getType().getFieldDesc(CombinerColor0FieldId)));

    editMField(CombinerColor0FieldMask, _mfCombinerColor0);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandleCombinerColor1  (void) const
{
    MFColor4f::GetHandlePtr returnValue(
        new  MFColor4f::GetHandle(
             &_mfCombinerColor1, 
             this->getType().getFieldDesc(CombinerColor1FieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandleCombinerColor1 (void)
{
    MFColor4f::EditHandlePtr returnValue(
        new  MFColor4f::EditHandle(
             &_mfCombinerColor1, 
             this->getType().getFieldDesc(CombinerColor1FieldId)));

    editMField(CombinerColor1FieldMask, _mfCombinerColor1);

    return returnValue;
}

GetFieldHandlePtr RegisterCombinersChunkBase::getHandlePerStageConstants (void) const
{
    SFUInt8::GetHandlePtr returnValue(
        new  SFUInt8::GetHandle(
             &_sfPerStageConstants, 
             this->getType().getFieldDesc(PerStageConstantsFieldId)));

    return returnValue;
}

EditFieldHandlePtr RegisterCombinersChunkBase::editHandlePerStageConstants(void)
{
    SFUInt8::EditHandlePtr returnValue(
        new  SFUInt8::EditHandle(
             &_sfPerStageConstants, 
             this->getType().getFieldDesc(PerStageConstantsFieldId)));

    editSField(PerStageConstantsFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void RegisterCombinersChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<RegisterCombinersChunkBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr RegisterCombinersChunkBase::createAspectCopy(void) const
{
    RegisterCombinersChunkPtr returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const RegisterCombinersChunk *>(this));

    return returnValue;
}
#endif

void RegisterCombinersChunkBase::resolveLinks(void)
{
    Inherited::resolveLinks();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfVariableArgb.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfVariableBrgb.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfVariableCrgb.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfVariableDrgb.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfVariableAalpha.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfVariableBalpha.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfVariableCalpha.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfVariableDalpha.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfOutputABrgb.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfOutputCDrgb.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfOutputSumrgb.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfScalergb.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfBiasrgb.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfOutputABalpha.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfOutputCDalpha.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfOutputSumalpha.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfDotABrgb.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfDotCDrgb.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfMuxSumrgb.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfScalealpha.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfBiasalpha.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfMuxSumalpha.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfVariableE.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfVariableF.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfVariableG.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfCombinerColor0.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfCombinerColor1.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
}


#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<RegisterCombinersChunkPtr>::_type("RegisterCombinersChunkPtr", "StateChunkPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(RegisterCombinersChunkPtr)

OSG_SFIELDTYPE_INST(FieldContainerPtrSField, RegisterCombinersChunkPtr, 0);

OSG_FIELD_DLLEXPORT_DEF2(FieldContainerPtrSField, RegisterCombinersChunkPtr, 0);

OSG_MFIELDTYPE_INST(FieldContainerPtrMField, RegisterCombinersChunkPtr, 0);

OSG_FIELD_DLLEXPORT_DEF2(FieldContainerPtrMField, RegisterCombinersChunkPtr, 0);

OSG_END_NAMESPACE
