/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class RegisterCombinersChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEREGISTERCOMBINERSCHUNKINST

#include <stdlib.h>
#include <stdio.h>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>




#include "OSGRegisterCombinersChunkBase.h"
#include "OSGRegisterCombinersChunk.h"

OSG_USING_NAMESPACE

// Field descriptions

/*! \var Color4f RegisterCombinersChunkBase::_sfColor0
    
*/
/*! \var Color4f RegisterCombinersChunkBase::_sfColor1
    
*/
/*! \var bool RegisterCombinersChunkBase::_sfColorSumClamp
    
*/
/*! \var GLenum RegisterCombinersChunkBase::_mfVariableArgb
    	input,mapping,component Usage triples for variable A, RGB part

*/
/*! \var GLenum RegisterCombinersChunkBase::_mfVariableBrgb
    
*/
/*! \var GLenum RegisterCombinersChunkBase::_mfVariableCrgb
    
*/
/*! \var GLenum RegisterCombinersChunkBase::_mfVariableDrgb
    
*/
/*! \var GLenum RegisterCombinersChunkBase::_mfVariableAalpha
    
*/
/*! \var GLenum RegisterCombinersChunkBase::_mfVariableBalpha
    
*/
/*! \var GLenum RegisterCombinersChunkBase::_mfVariableCalpha
    
*/
/*! \var GLenum RegisterCombinersChunkBase::_mfVariableDalpha
    
*/
/*! \var GLenum RegisterCombinersChunkBase::_mfOutputABrgb
    
*/
/*! \var GLenum RegisterCombinersChunkBase::_mfOutputCDrgb
    
*/
/*! \var GLenum RegisterCombinersChunkBase::_mfOutputSumrgb
    
*/
/*! \var GLenum RegisterCombinersChunkBase::_mfScalergb
    
*/
/*! \var GLenum RegisterCombinersChunkBase::_mfBiasrgb
    
*/
/*! \var GLenum RegisterCombinersChunkBase::_mfOutputABalpha
    
*/
/*! \var GLenum RegisterCombinersChunkBase::_mfOutputCDalpha
    
*/
/*! \var GLenum RegisterCombinersChunkBase::_mfOutputSumalpha
    
*/
/*! \var UInt8 RegisterCombinersChunkBase::_mfDotABrgb
    
*/
/*! \var UInt8 RegisterCombinersChunkBase::_mfDotCDrgb
    
*/
/*! \var UInt8 RegisterCombinersChunkBase::_mfMuxSumrgb
    
*/
/*! \var GLenum RegisterCombinersChunkBase::_mfScalealpha
    
*/
/*! \var GLenum RegisterCombinersChunkBase::_mfBiasalpha
    
*/
/*! \var UInt8 RegisterCombinersChunkBase::_mfMuxSumalpha
    
*/
/*! \var GLenum RegisterCombinersChunkBase::_mfVariableE
    
*/
/*! \var GLenum RegisterCombinersChunkBase::_mfVariableF
    
*/
/*! \var GLenum RegisterCombinersChunkBase::_mfVariableG
    
*/
/*! \var Color4f RegisterCombinersChunkBase::_mfCombinerColor0
    
*/
/*! \var Color4f RegisterCombinersChunkBase::_mfCombinerColor1
    
*/
/*! \var UInt8 RegisterCombinersChunkBase::_sfPerStageConstants
    
*/

void RegisterCombinersChunkBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL; 


#ifdef OSG_1_COMPAT
    typedef const SFColor4f *(RegisterCombinersChunkBase::*GetSFColor0F)(void) const;

    GetSFColor0F GetSFColor0 = &RegisterCombinersChunkBase::getSFColor0;
#endif

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(), 
        "color0", 
        "",
        Color0FieldId, Color0FieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editSFColor0),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFColor0));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getSFColor0));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFColor4f *(RegisterCombinersChunkBase::*GetSFColor1F)(void) const;

    GetSFColor1F GetSFColor1 = &RegisterCombinersChunkBase::getSFColor1;
#endif

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(), 
        "color1", 
        "",
        Color1FieldId, Color1FieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editSFColor1),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFColor1));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getSFColor1));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFBool *(RegisterCombinersChunkBase::*GetSFColorSumClampF)(void) const;

    GetSFColorSumClampF GetSFColorSumClamp = &RegisterCombinersChunkBase::getSFColorSumClamp;
#endif

    pDesc = new SFBool::Description(
        SFBool::getClassType(), 
        "colorSumClamp", 
        "",
        ColorSumClampFieldId, ColorSumClampFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editSFColorSumClamp),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFColorSumClamp));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getSFColorSumClamp));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFGLenum *(RegisterCombinersChunkBase::*GetMFVariableArgbF)(void) const;

    GetMFVariableArgbF GetMFVariableArgb = &RegisterCombinersChunkBase::getMFVariableArgb;
#endif

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(), 
        "variableArgb", 
        "	input,mapping,component Usage triples for variable A, RGB part\n",
        VariableArgbFieldId, VariableArgbFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editMFVariableArgb),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFVariableArgb));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getMFVariableArgb));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFGLenum *(RegisterCombinersChunkBase::*GetMFVariableBrgbF)(void) const;

    GetMFVariableBrgbF GetMFVariableBrgb = &RegisterCombinersChunkBase::getMFVariableBrgb;
#endif

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(), 
        "variableBrgb", 
        "",
        VariableBrgbFieldId, VariableBrgbFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editMFVariableBrgb),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFVariableBrgb));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getMFVariableBrgb));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFGLenum *(RegisterCombinersChunkBase::*GetMFVariableCrgbF)(void) const;

    GetMFVariableCrgbF GetMFVariableCrgb = &RegisterCombinersChunkBase::getMFVariableCrgb;
#endif

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(), 
        "variableCrgb", 
        "",
        VariableCrgbFieldId, VariableCrgbFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editMFVariableCrgb),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFVariableCrgb));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getMFVariableCrgb));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFGLenum *(RegisterCombinersChunkBase::*GetMFVariableDrgbF)(void) const;

    GetMFVariableDrgbF GetMFVariableDrgb = &RegisterCombinersChunkBase::getMFVariableDrgb;
#endif

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(), 
        "variableDrgb", 
        "",
        VariableDrgbFieldId, VariableDrgbFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editMFVariableDrgb),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFVariableDrgb));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getMFVariableDrgb));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFGLenum *(RegisterCombinersChunkBase::*GetMFVariableAalphaF)(void) const;

    GetMFVariableAalphaF GetMFVariableAalpha = &RegisterCombinersChunkBase::getMFVariableAalpha;
#endif

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(), 
        "variableAalpha", 
        "",
        VariableAalphaFieldId, VariableAalphaFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editMFVariableAalpha),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFVariableAalpha));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getMFVariableAalpha));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFGLenum *(RegisterCombinersChunkBase::*GetMFVariableBalphaF)(void) const;

    GetMFVariableBalphaF GetMFVariableBalpha = &RegisterCombinersChunkBase::getMFVariableBalpha;
#endif

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(), 
        "variableBalpha", 
        "",
        VariableBalphaFieldId, VariableBalphaFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editMFVariableBalpha),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFVariableBalpha));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getMFVariableBalpha));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFGLenum *(RegisterCombinersChunkBase::*GetMFVariableCalphaF)(void) const;

    GetMFVariableCalphaF GetMFVariableCalpha = &RegisterCombinersChunkBase::getMFVariableCalpha;
#endif

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(), 
        "variableCalpha", 
        "",
        VariableCalphaFieldId, VariableCalphaFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editMFVariableCalpha),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFVariableCalpha));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getMFVariableCalpha));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFGLenum *(RegisterCombinersChunkBase::*GetMFVariableDalphaF)(void) const;

    GetMFVariableDalphaF GetMFVariableDalpha = &RegisterCombinersChunkBase::getMFVariableDalpha;
#endif

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(), 
        "variableDalpha", 
        "",
        VariableDalphaFieldId, VariableDalphaFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editMFVariableDalpha),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFVariableDalpha));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getMFVariableDalpha));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFGLenum *(RegisterCombinersChunkBase::*GetMFOutputABrgbF)(void) const;

    GetMFOutputABrgbF GetMFOutputABrgb = &RegisterCombinersChunkBase::getMFOutputABrgb;
#endif

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(), 
        "outputABrgb", 
        "",
        OutputABrgbFieldId, OutputABrgbFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editMFOutputABrgb),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFOutputABrgb));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getMFOutputABrgb));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFGLenum *(RegisterCombinersChunkBase::*GetMFOutputCDrgbF)(void) const;

    GetMFOutputCDrgbF GetMFOutputCDrgb = &RegisterCombinersChunkBase::getMFOutputCDrgb;
#endif

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(), 
        "outputCDrgb", 
        "",
        OutputCDrgbFieldId, OutputCDrgbFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editMFOutputCDrgb),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFOutputCDrgb));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getMFOutputCDrgb));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFGLenum *(RegisterCombinersChunkBase::*GetMFOutputSumrgbF)(void) const;

    GetMFOutputSumrgbF GetMFOutputSumrgb = &RegisterCombinersChunkBase::getMFOutputSumrgb;
#endif

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(), 
        "outputSumrgb", 
        "",
        OutputSumrgbFieldId, OutputSumrgbFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editMFOutputSumrgb),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFOutputSumrgb));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getMFOutputSumrgb));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFGLenum *(RegisterCombinersChunkBase::*GetMFScalergbF)(void) const;

    GetMFScalergbF GetMFScalergb = &RegisterCombinersChunkBase::getMFScalergb;
#endif

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(), 
        "scalergb", 
        "",
        ScalergbFieldId, ScalergbFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editMFScalergb),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFScalergb));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getMFScalergb));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFGLenum *(RegisterCombinersChunkBase::*GetMFBiasrgbF)(void) const;

    GetMFBiasrgbF GetMFBiasrgb = &RegisterCombinersChunkBase::getMFBiasrgb;
#endif

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(), 
        "biasrgb", 
        "",
        BiasrgbFieldId, BiasrgbFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editMFBiasrgb),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFBiasrgb));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getMFBiasrgb));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFGLenum *(RegisterCombinersChunkBase::*GetMFOutputABalphaF)(void) const;

    GetMFOutputABalphaF GetMFOutputABalpha = &RegisterCombinersChunkBase::getMFOutputABalpha;
#endif

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(), 
        "outputABalpha", 
        "",
        OutputABalphaFieldId, OutputABalphaFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editMFOutputABalpha),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFOutputABalpha));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getMFOutputABalpha));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFGLenum *(RegisterCombinersChunkBase::*GetMFOutputCDalphaF)(void) const;

    GetMFOutputCDalphaF GetMFOutputCDalpha = &RegisterCombinersChunkBase::getMFOutputCDalpha;
#endif

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(), 
        "outputCDalpha", 
        "",
        OutputCDalphaFieldId, OutputCDalphaFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editMFOutputCDalpha),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFOutputCDalpha));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getMFOutputCDalpha));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFGLenum *(RegisterCombinersChunkBase::*GetMFOutputSumalphaF)(void) const;

    GetMFOutputSumalphaF GetMFOutputSumalpha = &RegisterCombinersChunkBase::getMFOutputSumalpha;
#endif

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(), 
        "outputSumalpha", 
        "",
        OutputSumalphaFieldId, OutputSumalphaFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editMFOutputSumalpha),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFOutputSumalpha));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getMFOutputSumalpha));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFUInt8 *(RegisterCombinersChunkBase::*GetMFDotABrgbF)(void) const;

    GetMFDotABrgbF GetMFDotABrgb = &RegisterCombinersChunkBase::getMFDotABrgb;
#endif

    pDesc = new MFUInt8::Description(
        MFUInt8::getClassType(), 
        "dotABrgb", 
        "",
        DotABrgbFieldId, DotABrgbFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editMFDotABrgb),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFDotABrgb));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getMFDotABrgb));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFUInt8 *(RegisterCombinersChunkBase::*GetMFDotCDrgbF)(void) const;

    GetMFDotCDrgbF GetMFDotCDrgb = &RegisterCombinersChunkBase::getMFDotCDrgb;
#endif

    pDesc = new MFUInt8::Description(
        MFUInt8::getClassType(), 
        "dotCDrgb", 
        "",
        DotCDrgbFieldId, DotCDrgbFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editMFDotCDrgb),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFDotCDrgb));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getMFDotCDrgb));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFUInt8 *(RegisterCombinersChunkBase::*GetMFMuxSumrgbF)(void) const;

    GetMFMuxSumrgbF GetMFMuxSumrgb = &RegisterCombinersChunkBase::getMFMuxSumrgb;
#endif

    pDesc = new MFUInt8::Description(
        MFUInt8::getClassType(), 
        "muxSumrgb", 
        "",
        MuxSumrgbFieldId, MuxSumrgbFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editMFMuxSumrgb),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFMuxSumrgb));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getMFMuxSumrgb));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFGLenum *(RegisterCombinersChunkBase::*GetMFScalealphaF)(void) const;

    GetMFScalealphaF GetMFScalealpha = &RegisterCombinersChunkBase::getMFScalealpha;
#endif

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(), 
        "scalealpha", 
        "",
        ScalealphaFieldId, ScalealphaFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editMFScalealpha),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFScalealpha));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getMFScalealpha));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFGLenum *(RegisterCombinersChunkBase::*GetMFBiasalphaF)(void) const;

    GetMFBiasalphaF GetMFBiasalpha = &RegisterCombinersChunkBase::getMFBiasalpha;
#endif

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(), 
        "biasalpha", 
        "",
        BiasalphaFieldId, BiasalphaFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editMFBiasalpha),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFBiasalpha));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getMFBiasalpha));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFUInt8 *(RegisterCombinersChunkBase::*GetMFMuxSumalphaF)(void) const;

    GetMFMuxSumalphaF GetMFMuxSumalpha = &RegisterCombinersChunkBase::getMFMuxSumalpha;
#endif

    pDesc = new MFUInt8::Description(
        MFUInt8::getClassType(), 
        "muxSumalpha", 
        "",
        MuxSumalphaFieldId, MuxSumalphaFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editMFMuxSumalpha),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFMuxSumalpha));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getMFMuxSumalpha));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFGLenum *(RegisterCombinersChunkBase::*GetMFVariableEF)(void) const;

    GetMFVariableEF GetMFVariableE = &RegisterCombinersChunkBase::getMFVariableE;
#endif

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(), 
        "variableE", 
        "",
        VariableEFieldId, VariableEFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editMFVariableE),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFVariableE));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getMFVariableE));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFGLenum *(RegisterCombinersChunkBase::*GetMFVariableFF)(void) const;

    GetMFVariableFF GetMFVariableF = &RegisterCombinersChunkBase::getMFVariableF;
#endif

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(), 
        "variableF", 
        "",
        VariableFFieldId, VariableFFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editMFVariableF),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFVariableF));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getMFVariableF));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFGLenum *(RegisterCombinersChunkBase::*GetMFVariableGF)(void) const;

    GetMFVariableGF GetMFVariableG = &RegisterCombinersChunkBase::getMFVariableG;
#endif

    pDesc = new MFGLenum::Description(
        MFGLenum::getClassType(), 
        "variableG", 
        "",
        VariableGFieldId, VariableGFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editMFVariableG),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFVariableG));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getMFVariableG));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFColor4f *(RegisterCombinersChunkBase::*GetMFCombinerColor0F)(void) const;

    GetMFCombinerColor0F GetMFCombinerColor0 = &RegisterCombinersChunkBase::getMFCombinerColor0;
#endif

    pDesc = new MFColor4f::Description(
        MFColor4f::getClassType(), 
        "combinerColor0", 
        "",
        CombinerColor0FieldId, CombinerColor0FieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editMFCombinerColor0),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFCombinerColor0));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getMFCombinerColor0));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFColor4f *(RegisterCombinersChunkBase::*GetMFCombinerColor1F)(void) const;

    GetMFCombinerColor1F GetMFCombinerColor1 = &RegisterCombinersChunkBase::getMFCombinerColor1;
#endif

    pDesc = new MFColor4f::Description(
        MFColor4f::getClassType(), 
        "combinerColor1", 
        "",
        CombinerColor1FieldId, CombinerColor1FieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editMFCombinerColor1),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFCombinerColor1));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getMFCombinerColor1));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFUInt8 *(RegisterCombinersChunkBase::*GetSFPerStageConstantsF)(void) const;

    GetSFPerStageConstantsF GetSFPerStageConstants = &RegisterCombinersChunkBase::getSFPerStageConstants;
#endif

    pDesc = new SFUInt8::Description(
        SFUInt8::getClassType(), 
        "perStageConstants", 
        "",
        PerStageConstantsFieldId, PerStageConstantsFieldMask,
        true,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&RegisterCombinersChunkBase::editSFPerStageConstants),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFPerStageConstants));
#else
        reinterpret_cast<FieldGetMethodSig >(&RegisterCombinersChunkBase::getSFPerStageConstants));
#endif

    oType.addInitialDesc(pDesc);
}


RegisterCombinersChunkBase::TypeObject RegisterCombinersChunkBase::_type(true,
    RegisterCombinersChunkBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &RegisterCombinersChunkBase::createEmpty,
    RegisterCombinersChunk::initMethod,
    (InitalInsertDescFunc) &RegisterCombinersChunkBase::classDescInserter,
    false,
    "<?xml version=\"1.0\"?>\n"
"\n"
"<FieldContainer\n"
"	name=\"RegisterCombinersChunk\"\n"
"	parent=\"StateChunk\"\n"
"	library=\"State\"\n"
"	pointerfieldtypes=\"both\"\n"
"	structure=\"concrete\"\n"
"	systemcomponent=\"true\"\n"
"	parentsystemcomponent=\"true\"\n"
"	decoratable=\"false\"\n"
">\n"
"	<Field\n"
"		name=\"color0\"\n"
"		type=\"Color4f\"\n"
"		cardinality=\"single\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"color1\"\n"
"		type=\"Color4f\"\n"
"		cardinality=\"single\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"colorSumClamp\"\n"
"		type=\"bool\"\n"
"		cardinality=\"single\"\n"
"		visibility=\"external\"\n"
"		defaultValue=\"false\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"variableArgb\"\n"
"		type=\"GLenum\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	input,mapping,component Usage triples for variable A, RGB part\n"
"	</Field>\n"
"	<Field\n"
"		name=\"variableBrgb\"\n"
"		type=\"GLenum\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"variableCrgb\"\n"
"		type=\"GLenum\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"variableDrgb\"\n"
"		type=\"GLenum\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"variableAalpha\"\n"
"		type=\"GLenum\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"variableBalpha\"\n"
"		type=\"GLenum\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"variableCalpha\"\n"
"		type=\"GLenum\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"variableDalpha\"\n"
"		type=\"GLenum\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"outputABrgb\"\n"
"		type=\"GLenum\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"outputCDrgb\"\n"
"		type=\"GLenum\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"outputSumrgb\"\n"
"		type=\"GLenum\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"scalergb\"\n"
"		type=\"GLenum\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"biasrgb\"\n"
"		type=\"GLenum\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"outputABalpha\"\n"
"		type=\"GLenum\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"outputCDalpha\"\n"
"		type=\"GLenum\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"outputSumalpha\"\n"
"		type=\"GLenum\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"dotABrgb\"\n"
"		type=\"UInt8\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"dotCDrgb\"\n"
"		type=\"UInt8\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"muxSumrgb\"\n"
"		type=\"UInt8\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"scalealpha\"\n"
"		type=\"GLenum\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"biasalpha\"\n"
"		type=\"GLenum\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"muxSumalpha\"\n"
"		type=\"UInt8\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"variableE\"\n"
"		type=\"GLenum\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"variableF\"\n"
"		type=\"GLenum\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"variableG\"\n"
"		type=\"GLenum\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"combinerColor0\"\n"
"		type=\"Color4f\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"combinerColor1\"\n"
"		type=\"Color4f\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"	<Field\n"
"		name=\"perStageConstants\"\n"
"		type=\"UInt8\"\n"
"		cardinality=\"single\"\n"
"		visibility=\"internal\"\n"
"		access=\"public\"\n"
"	>\n"
"	</Field>\n"
"</FieldContainer>\n"
,
    "" 
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &RegisterCombinersChunkBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &RegisterCombinersChunkBase::getType(void) const 
{
    return _type;
} 

UInt32 RegisterCombinersChunkBase::getContainerSize(void) const 
{ 
    return sizeof(RegisterCombinersChunk); 
}

/*------------------------- decorator get ------------------------------*/


SFColor4f *RegisterCombinersChunkBase::editSFColor0(void)
{
    editSField(Color0FieldMask);

    return &_sfColor0;
}

const SFColor4f *RegisterCombinersChunkBase::getSFColor0(void) const
{
    return &_sfColor0;
}

#ifdef OSG_1_COMPAT
SFColor4f *RegisterCombinersChunkBase::getSFColor0(void)
{
    return this->editSFColor0();
}
#endif

SFColor4f *RegisterCombinersChunkBase::editSFColor1(void)
{
    editSField(Color1FieldMask);

    return &_sfColor1;
}

const SFColor4f *RegisterCombinersChunkBase::getSFColor1(void) const
{
    return &_sfColor1;
}

#ifdef OSG_1_COMPAT
SFColor4f *RegisterCombinersChunkBase::getSFColor1(void)
{
    return this->editSFColor1();
}
#endif

SFBool *RegisterCombinersChunkBase::editSFColorSumClamp(void)
{
    editSField(ColorSumClampFieldMask);

    return &_sfColorSumClamp;
}

const SFBool *RegisterCombinersChunkBase::getSFColorSumClamp(void) const
{
    return &_sfColorSumClamp;
}

#ifdef OSG_1_COMPAT
SFBool *RegisterCombinersChunkBase::getSFColorSumClamp(void)
{
    return this->editSFColorSumClamp();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFVariableArgb(void)
{
    editMField(VariableArgbFieldMask, _mfVariableArgb);

    return &_mfVariableArgb;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableArgb(void) const
{
    return &_mfVariableArgb;
}

#ifdef OSG_1_COMPAT
MFGLenum *RegisterCombinersChunkBase::getMFVariableArgb(void)
{
    return this->editMFVariableArgb();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFVariableBrgb(void)
{
    editMField(VariableBrgbFieldMask, _mfVariableBrgb);

    return &_mfVariableBrgb;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableBrgb(void) const
{
    return &_mfVariableBrgb;
}

#ifdef OSG_1_COMPAT
MFGLenum *RegisterCombinersChunkBase::getMFVariableBrgb(void)
{
    return this->editMFVariableBrgb();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFVariableCrgb(void)
{
    editMField(VariableCrgbFieldMask, _mfVariableCrgb);

    return &_mfVariableCrgb;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableCrgb(void) const
{
    return &_mfVariableCrgb;
}

#ifdef OSG_1_COMPAT
MFGLenum *RegisterCombinersChunkBase::getMFVariableCrgb(void)
{
    return this->editMFVariableCrgb();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFVariableDrgb(void)
{
    editMField(VariableDrgbFieldMask, _mfVariableDrgb);

    return &_mfVariableDrgb;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableDrgb(void) const
{
    return &_mfVariableDrgb;
}

#ifdef OSG_1_COMPAT
MFGLenum *RegisterCombinersChunkBase::getMFVariableDrgb(void)
{
    return this->editMFVariableDrgb();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFVariableAalpha(void)
{
    editMField(VariableAalphaFieldMask, _mfVariableAalpha);

    return &_mfVariableAalpha;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableAalpha(void) const
{
    return &_mfVariableAalpha;
}

#ifdef OSG_1_COMPAT
MFGLenum *RegisterCombinersChunkBase::getMFVariableAalpha(void)
{
    return this->editMFVariableAalpha();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFVariableBalpha(void)
{
    editMField(VariableBalphaFieldMask, _mfVariableBalpha);

    return &_mfVariableBalpha;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableBalpha(void) const
{
    return &_mfVariableBalpha;
}

#ifdef OSG_1_COMPAT
MFGLenum *RegisterCombinersChunkBase::getMFVariableBalpha(void)
{
    return this->editMFVariableBalpha();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFVariableCalpha(void)
{
    editMField(VariableCalphaFieldMask, _mfVariableCalpha);

    return &_mfVariableCalpha;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableCalpha(void) const
{
    return &_mfVariableCalpha;
}

#ifdef OSG_1_COMPAT
MFGLenum *RegisterCombinersChunkBase::getMFVariableCalpha(void)
{
    return this->editMFVariableCalpha();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFVariableDalpha(void)
{
    editMField(VariableDalphaFieldMask, _mfVariableDalpha);

    return &_mfVariableDalpha;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableDalpha(void) const
{
    return &_mfVariableDalpha;
}

#ifdef OSG_1_COMPAT
MFGLenum *RegisterCombinersChunkBase::getMFVariableDalpha(void)
{
    return this->editMFVariableDalpha();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFOutputABrgb(void)
{
    editMField(OutputABrgbFieldMask, _mfOutputABrgb);

    return &_mfOutputABrgb;
}

const MFGLenum *RegisterCombinersChunkBase::getMFOutputABrgb(void) const
{
    return &_mfOutputABrgb;
}

#ifdef OSG_1_COMPAT
MFGLenum *RegisterCombinersChunkBase::getMFOutputABrgb(void)
{
    return this->editMFOutputABrgb();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFOutputCDrgb(void)
{
    editMField(OutputCDrgbFieldMask, _mfOutputCDrgb);

    return &_mfOutputCDrgb;
}

const MFGLenum *RegisterCombinersChunkBase::getMFOutputCDrgb(void) const
{
    return &_mfOutputCDrgb;
}

#ifdef OSG_1_COMPAT
MFGLenum *RegisterCombinersChunkBase::getMFOutputCDrgb(void)
{
    return this->editMFOutputCDrgb();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFOutputSumrgb(void)
{
    editMField(OutputSumrgbFieldMask, _mfOutputSumrgb);

    return &_mfOutputSumrgb;
}

const MFGLenum *RegisterCombinersChunkBase::getMFOutputSumrgb(void) const
{
    return &_mfOutputSumrgb;
}

#ifdef OSG_1_COMPAT
MFGLenum *RegisterCombinersChunkBase::getMFOutputSumrgb(void)
{
    return this->editMFOutputSumrgb();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFScalergb(void)
{
    editMField(ScalergbFieldMask, _mfScalergb);

    return &_mfScalergb;
}

const MFGLenum *RegisterCombinersChunkBase::getMFScalergb(void) const
{
    return &_mfScalergb;
}

#ifdef OSG_1_COMPAT
MFGLenum *RegisterCombinersChunkBase::getMFScalergb(void)
{
    return this->editMFScalergb();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFBiasrgb(void)
{
    editMField(BiasrgbFieldMask, _mfBiasrgb);

    return &_mfBiasrgb;
}

const MFGLenum *RegisterCombinersChunkBase::getMFBiasrgb(void) const
{
    return &_mfBiasrgb;
}

#ifdef OSG_1_COMPAT
MFGLenum *RegisterCombinersChunkBase::getMFBiasrgb(void)
{
    return this->editMFBiasrgb();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFOutputABalpha(void)
{
    editMField(OutputABalphaFieldMask, _mfOutputABalpha);

    return &_mfOutputABalpha;
}

const MFGLenum *RegisterCombinersChunkBase::getMFOutputABalpha(void) const
{
    return &_mfOutputABalpha;
}

#ifdef OSG_1_COMPAT
MFGLenum *RegisterCombinersChunkBase::getMFOutputABalpha(void)
{
    return this->editMFOutputABalpha();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFOutputCDalpha(void)
{
    editMField(OutputCDalphaFieldMask, _mfOutputCDalpha);

    return &_mfOutputCDalpha;
}

const MFGLenum *RegisterCombinersChunkBase::getMFOutputCDalpha(void) const
{
    return &_mfOutputCDalpha;
}

#ifdef OSG_1_COMPAT
MFGLenum *RegisterCombinersChunkBase::getMFOutputCDalpha(void)
{
    return this->editMFOutputCDalpha();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFOutputSumalpha(void)
{
    editMField(OutputSumalphaFieldMask, _mfOutputSumalpha);

    return &_mfOutputSumalpha;
}

const MFGLenum *RegisterCombinersChunkBase::getMFOutputSumalpha(void) const
{
    return &_mfOutputSumalpha;
}

#ifdef OSG_1_COMPAT
MFGLenum *RegisterCombinersChunkBase::getMFOutputSumalpha(void)
{
    return this->editMFOutputSumalpha();
}
#endif

MFUInt8 *RegisterCombinersChunkBase::editMFDotABrgb(void)
{
    editMField(DotABrgbFieldMask, _mfDotABrgb);

    return &_mfDotABrgb;
}

const MFUInt8 *RegisterCombinersChunkBase::getMFDotABrgb(void) const
{
    return &_mfDotABrgb;
}

#ifdef OSG_1_COMPAT
MFUInt8 *RegisterCombinersChunkBase::getMFDotABrgb(void)
{
    return this->editMFDotABrgb();
}
#endif

MFUInt8 *RegisterCombinersChunkBase::editMFDotCDrgb(void)
{
    editMField(DotCDrgbFieldMask, _mfDotCDrgb);

    return &_mfDotCDrgb;
}

const MFUInt8 *RegisterCombinersChunkBase::getMFDotCDrgb(void) const
{
    return &_mfDotCDrgb;
}

#ifdef OSG_1_COMPAT
MFUInt8 *RegisterCombinersChunkBase::getMFDotCDrgb(void)
{
    return this->editMFDotCDrgb();
}
#endif

MFUInt8 *RegisterCombinersChunkBase::editMFMuxSumrgb(void)
{
    editMField(MuxSumrgbFieldMask, _mfMuxSumrgb);

    return &_mfMuxSumrgb;
}

const MFUInt8 *RegisterCombinersChunkBase::getMFMuxSumrgb(void) const
{
    return &_mfMuxSumrgb;
}

#ifdef OSG_1_COMPAT
MFUInt8 *RegisterCombinersChunkBase::getMFMuxSumrgb(void)
{
    return this->editMFMuxSumrgb();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFScalealpha(void)
{
    editMField(ScalealphaFieldMask, _mfScalealpha);

    return &_mfScalealpha;
}

const MFGLenum *RegisterCombinersChunkBase::getMFScalealpha(void) const
{
    return &_mfScalealpha;
}

#ifdef OSG_1_COMPAT
MFGLenum *RegisterCombinersChunkBase::getMFScalealpha(void)
{
    return this->editMFScalealpha();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFBiasalpha(void)
{
    editMField(BiasalphaFieldMask, _mfBiasalpha);

    return &_mfBiasalpha;
}

const MFGLenum *RegisterCombinersChunkBase::getMFBiasalpha(void) const
{
    return &_mfBiasalpha;
}

#ifdef OSG_1_COMPAT
MFGLenum *RegisterCombinersChunkBase::getMFBiasalpha(void)
{
    return this->editMFBiasalpha();
}
#endif

MFUInt8 *RegisterCombinersChunkBase::editMFMuxSumalpha(void)
{
    editMField(MuxSumalphaFieldMask, _mfMuxSumalpha);

    return &_mfMuxSumalpha;
}

const MFUInt8 *RegisterCombinersChunkBase::getMFMuxSumalpha(void) const
{
    return &_mfMuxSumalpha;
}

#ifdef OSG_1_COMPAT
MFUInt8 *RegisterCombinersChunkBase::getMFMuxSumalpha(void)
{
    return this->editMFMuxSumalpha();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFVariableE(void)
{
    editMField(VariableEFieldMask, _mfVariableE);

    return &_mfVariableE;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableE(void) const
{
    return &_mfVariableE;
}

#ifdef OSG_1_COMPAT
MFGLenum *RegisterCombinersChunkBase::getMFVariableE(void)
{
    return this->editMFVariableE();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFVariableF(void)
{
    editMField(VariableFFieldMask, _mfVariableF);

    return &_mfVariableF;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableF(void) const
{
    return &_mfVariableF;
}

#ifdef OSG_1_COMPAT
MFGLenum *RegisterCombinersChunkBase::getMFVariableF(void)
{
    return this->editMFVariableF();
}
#endif

MFGLenum *RegisterCombinersChunkBase::editMFVariableG(void)
{
    editMField(VariableGFieldMask, _mfVariableG);

    return &_mfVariableG;
}

const MFGLenum *RegisterCombinersChunkBase::getMFVariableG(void) const
{
    return &_mfVariableG;
}

#ifdef OSG_1_COMPAT
MFGLenum *RegisterCombinersChunkBase::getMFVariableG(void)
{
    return this->editMFVariableG();
}
#endif

MFColor4f *RegisterCombinersChunkBase::editMFCombinerColor0(void)
{
    editMField(CombinerColor0FieldMask, _mfCombinerColor0);

    return &_mfCombinerColor0;
}

const MFColor4f *RegisterCombinersChunkBase::getMFCombinerColor0(void) const
{
    return &_mfCombinerColor0;
}

#ifdef OSG_1_COMPAT
MFColor4f *RegisterCombinersChunkBase::getMFCombinerColor0(void)
{
    return this->editMFCombinerColor0();
}
#endif

MFColor4f *RegisterCombinersChunkBase::editMFCombinerColor1(void)
{
    editMField(CombinerColor1FieldMask, _mfCombinerColor1);

    return &_mfCombinerColor1;
}

const MFColor4f *RegisterCombinersChunkBase::getMFCombinerColor1(void) const
{
    return &_mfCombinerColor1;
}

#ifdef OSG_1_COMPAT
MFColor4f *RegisterCombinersChunkBase::getMFCombinerColor1(void)
{
    return this->editMFCombinerColor1();
}
#endif

SFUInt8 *RegisterCombinersChunkBase::editSFPerStageConstants(void)
{
    editSField(PerStageConstantsFieldMask);

    return &_sfPerStageConstants;
}

const SFUInt8 *RegisterCombinersChunkBase::getSFPerStageConstants(void) const
{
    return &_sfPerStageConstants;
}

#ifdef OSG_1_COMPAT
SFUInt8 *RegisterCombinersChunkBase::getSFPerStageConstants(void)
{
    return this->editSFPerStageConstants();
}
#endif



/*------------------------------ access -----------------------------------*/

UInt32 RegisterCombinersChunkBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (Color0FieldMask & whichField))
    {
        returnValue += _sfColor0.getBinSize();
    }
    if(FieldBits::NoField != (Color1FieldMask & whichField))
    {
        returnValue += _sfColor1.getBinSize();
    }
    if(FieldBits::NoField != (ColorSumClampFieldMask & whichField))
    {
        returnValue += _sfColorSumClamp.getBinSize();
    }
    if(FieldBits::NoField != (VariableArgbFieldMask & whichField))
    {
        returnValue += _mfVariableArgb.getBinSize();
    }
    if(FieldBits::NoField != (VariableBrgbFieldMask & whichField))
    {
        returnValue += _mfVariableBrgb.getBinSize();
    }
    if(FieldBits::NoField != (VariableCrgbFieldMask & whichField))
    {
        returnValue += _mfVariableCrgb.getBinSize();
    }
    if(FieldBits::NoField != (VariableDrgbFieldMask & whichField))
    {
        returnValue += _mfVariableDrgb.getBinSize();
    }
    if(FieldBits::NoField != (VariableAalphaFieldMask & whichField))
    {
        returnValue += _mfVariableAalpha.getBinSize();
    }
    if(FieldBits::NoField != (VariableBalphaFieldMask & whichField))
    {
        returnValue += _mfVariableBalpha.getBinSize();
    }
    if(FieldBits::NoField != (VariableCalphaFieldMask & whichField))
    {
        returnValue += _mfVariableCalpha.getBinSize();
    }
    if(FieldBits::NoField != (VariableDalphaFieldMask & whichField))
    {
        returnValue += _mfVariableDalpha.getBinSize();
    }
    if(FieldBits::NoField != (OutputABrgbFieldMask & whichField))
    {
        returnValue += _mfOutputABrgb.getBinSize();
    }
    if(FieldBits::NoField != (OutputCDrgbFieldMask & whichField))
    {
        returnValue += _mfOutputCDrgb.getBinSize();
    }
    if(FieldBits::NoField != (OutputSumrgbFieldMask & whichField))
    {
        returnValue += _mfOutputSumrgb.getBinSize();
    }
    if(FieldBits::NoField != (ScalergbFieldMask & whichField))
    {
        returnValue += _mfScalergb.getBinSize();
    }
    if(FieldBits::NoField != (BiasrgbFieldMask & whichField))
    {
        returnValue += _mfBiasrgb.getBinSize();
    }
    if(FieldBits::NoField != (OutputABalphaFieldMask & whichField))
    {
        returnValue += _mfOutputABalpha.getBinSize();
    }
    if(FieldBits::NoField != (OutputCDalphaFieldMask & whichField))
    {
        returnValue += _mfOutputCDalpha.getBinSize();
    }
    if(FieldBits::NoField != (OutputSumalphaFieldMask & whichField))
    {
        returnValue += _mfOutputSumalpha.getBinSize();
    }
    if(FieldBits::NoField != (DotABrgbFieldMask & whichField))
    {
        returnValue += _mfDotABrgb.getBinSize();
    }
    if(FieldBits::NoField != (DotCDrgbFieldMask & whichField))
    {
        returnValue += _mfDotCDrgb.getBinSize();
    }
    if(FieldBits::NoField != (MuxSumrgbFieldMask & whichField))
    {
        returnValue += _mfMuxSumrgb.getBinSize();
    }
    if(FieldBits::NoField != (ScalealphaFieldMask & whichField))
    {
        returnValue += _mfScalealpha.getBinSize();
    }
    if(FieldBits::NoField != (BiasalphaFieldMask & whichField))
    {
        returnValue += _mfBiasalpha.getBinSize();
    }
    if(FieldBits::NoField != (MuxSumalphaFieldMask & whichField))
    {
        returnValue += _mfMuxSumalpha.getBinSize();
    }
    if(FieldBits::NoField != (VariableEFieldMask & whichField))
    {
        returnValue += _mfVariableE.getBinSize();
    }
    if(FieldBits::NoField != (VariableFFieldMask & whichField))
    {
        returnValue += _mfVariableF.getBinSize();
    }
    if(FieldBits::NoField != (VariableGFieldMask & whichField))
    {
        returnValue += _mfVariableG.getBinSize();
    }
    if(FieldBits::NoField != (CombinerColor0FieldMask & whichField))
    {
        returnValue += _mfCombinerColor0.getBinSize();
    }
    if(FieldBits::NoField != (CombinerColor1FieldMask & whichField))
    {
        returnValue += _mfCombinerColor1.getBinSize();
    }
    if(FieldBits::NoField != (PerStageConstantsFieldMask & whichField))
    {
        returnValue += _sfPerStageConstants.getBinSize();
    }

    return returnValue;
}

void RegisterCombinersChunkBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (Color0FieldMask & whichField))
    {
        _sfColor0.copyToBin(pMem);
    }
    if(FieldBits::NoField != (Color1FieldMask & whichField))
    {
        _sfColor1.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ColorSumClampFieldMask & whichField))
    {
        _sfColorSumClamp.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableArgbFieldMask & whichField))
    {
        _mfVariableArgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableBrgbFieldMask & whichField))
    {
        _mfVariableBrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableCrgbFieldMask & whichField))
    {
        _mfVariableCrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableDrgbFieldMask & whichField))
    {
        _mfVariableDrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableAalphaFieldMask & whichField))
    {
        _mfVariableAalpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableBalphaFieldMask & whichField))
    {
        _mfVariableBalpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableCalphaFieldMask & whichField))
    {
        _mfVariableCalpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableDalphaFieldMask & whichField))
    {
        _mfVariableDalpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OutputABrgbFieldMask & whichField))
    {
        _mfOutputABrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OutputCDrgbFieldMask & whichField))
    {
        _mfOutputCDrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OutputSumrgbFieldMask & whichField))
    {
        _mfOutputSumrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ScalergbFieldMask & whichField))
    {
        _mfScalergb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BiasrgbFieldMask & whichField))
    {
        _mfBiasrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OutputABalphaFieldMask & whichField))
    {
        _mfOutputABalpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OutputCDalphaFieldMask & whichField))
    {
        _mfOutputCDalpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OutputSumalphaFieldMask & whichField))
    {
        _mfOutputSumalpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DotABrgbFieldMask & whichField))
    {
        _mfDotABrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DotCDrgbFieldMask & whichField))
    {
        _mfDotCDrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MuxSumrgbFieldMask & whichField))
    {
        _mfMuxSumrgb.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ScalealphaFieldMask & whichField))
    {
        _mfScalealpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BiasalphaFieldMask & whichField))
    {
        _mfBiasalpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MuxSumalphaFieldMask & whichField))
    {
        _mfMuxSumalpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableEFieldMask & whichField))
    {
        _mfVariableE.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableFFieldMask & whichField))
    {
        _mfVariableF.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VariableGFieldMask & whichField))
    {
        _mfVariableG.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CombinerColor0FieldMask & whichField))
    {
        _mfCombinerColor0.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CombinerColor1FieldMask & whichField))
    {
        _mfCombinerColor1.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PerStageConstantsFieldMask & whichField))
    {
        _sfPerStageConstants.copyToBin(pMem);
    }
}

void RegisterCombinersChunkBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (Color0FieldMask & whichField))
    {
        _sfColor0.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (Color1FieldMask & whichField))
    {
        _sfColor1.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ColorSumClampFieldMask & whichField))
    {
        _sfColorSumClamp.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableArgbFieldMask & whichField))
    {
        _mfVariableArgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableBrgbFieldMask & whichField))
    {
        _mfVariableBrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableCrgbFieldMask & whichField))
    {
        _mfVariableCrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableDrgbFieldMask & whichField))
    {
        _mfVariableDrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableAalphaFieldMask & whichField))
    {
        _mfVariableAalpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableBalphaFieldMask & whichField))
    {
        _mfVariableBalpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableCalphaFieldMask & whichField))
    {
        _mfVariableCalpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableDalphaFieldMask & whichField))
    {
        _mfVariableDalpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OutputABrgbFieldMask & whichField))
    {
        _mfOutputABrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OutputCDrgbFieldMask & whichField))
    {
        _mfOutputCDrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OutputSumrgbFieldMask & whichField))
    {
        _mfOutputSumrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ScalergbFieldMask & whichField))
    {
        _mfScalergb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BiasrgbFieldMask & whichField))
    {
        _mfBiasrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OutputABalphaFieldMask & whichField))
    {
        _mfOutputABalpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OutputCDalphaFieldMask & whichField))
    {
        _mfOutputCDalpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OutputSumalphaFieldMask & whichField))
    {
        _mfOutputSumalpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DotABrgbFieldMask & whichField))
    {
        _mfDotABrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DotCDrgbFieldMask & whichField))
    {
        _mfDotCDrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MuxSumrgbFieldMask & whichField))
    {
        _mfMuxSumrgb.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ScalealphaFieldMask & whichField))
    {
        _mfScalealpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BiasalphaFieldMask & whichField))
    {
        _mfBiasalpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MuxSumalphaFieldMask & whichField))
    {
        _mfMuxSumalpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableEFieldMask & whichField))
    {
        _mfVariableE.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableFFieldMask & whichField))
    {
        _mfVariableF.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VariableGFieldMask & whichField))
    {
        _mfVariableG.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CombinerColor0FieldMask & whichField))
    {
        _mfCombinerColor0.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CombinerColor1FieldMask & whichField))
    {
        _mfCombinerColor1.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PerStageConstantsFieldMask & whichField))
    {
        _sfPerStageConstants.copyFromBin(pMem);
    }
}

//! create an empty new instance of the class, do not copy the prototype
RegisterCombinersChunkPtr RegisterCombinersChunkBase::createEmpty(void) 
{ 
    RegisterCombinersChunkPtr returnValue; 
    
    newPtr<RegisterCombinersChunk>(returnValue); 

    return returnValue; 
}

FieldContainerPtr RegisterCombinersChunkBase::shallowCopy(void) const 
{ 
    RegisterCombinersChunkPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const RegisterCombinersChunk *>(this)); 

    return returnValue; 
}



/*------------------------- constructors ----------------------------------*/

RegisterCombinersChunkBase::RegisterCombinersChunkBase(void) :
    Inherited(),
    _sfColor0(),
    _sfColor1(),
    _sfColorSumClamp(bool(false)),
    _mfVariableArgb(),
    _mfVariableBrgb(),
    _mfVariableCrgb(),
    _mfVariableDrgb(),
    _mfVariableAalpha(),
    _mfVariableBalpha(),
    _mfVariableCalpha(),
    _mfVariableDalpha(),
    _mfOutputABrgb(),
    _mfOutputCDrgb(),
    _mfOutputSumrgb(),
    _mfScalergb(),
    _mfBiasrgb(),
    _mfOutputABalpha(),
    _mfOutputCDalpha(),
    _mfOutputSumalpha(),
    _mfDotABrgb(),
    _mfDotCDrgb(),
    _mfMuxSumrgb(),
    _mfScalealpha(),
    _mfBiasalpha(),
    _mfMuxSumalpha(),
    _mfVariableE(),
    _mfVariableF(),
    _mfVariableG(),
    _mfCombinerColor0(),
    _mfCombinerColor1(),
    _sfPerStageConstants()
{
}

RegisterCombinersChunkBase::RegisterCombinersChunkBase(const RegisterCombinersChunkBase &source) :
    Inherited(source),
    _sfColor0(source._sfColor0),
    _sfColor1(source._sfColor1),
    _sfColorSumClamp(source._sfColorSumClamp),
    _mfVariableArgb(source._mfVariableArgb),
    _mfVariableBrgb(source._mfVariableBrgb),
    _mfVariableCrgb(source._mfVariableCrgb),
    _mfVariableDrgb(source._mfVariableDrgb),
    _mfVariableAalpha(source._mfVariableAalpha),
    _mfVariableBalpha(source._mfVariableBalpha),
    _mfVariableCalpha(source._mfVariableCalpha),
    _mfVariableDalpha(source._mfVariableDalpha),
    _mfOutputABrgb(source._mfOutputABrgb),
    _mfOutputCDrgb(source._mfOutputCDrgb),
    _mfOutputSumrgb(source._mfOutputSumrgb),
    _mfScalergb(source._mfScalergb),
    _mfBiasrgb(source._mfBiasrgb),
    _mfOutputABalpha(source._mfOutputABalpha),
    _mfOutputCDalpha(source._mfOutputCDalpha),
    _mfOutputSumalpha(source._mfOutputSumalpha),
    _mfDotABrgb(source._mfDotABrgb),
    _mfDotCDrgb(source._mfDotCDrgb),
    _mfMuxSumrgb(source._mfMuxSumrgb),
    _mfScalealpha(source._mfScalealpha),
    _mfBiasalpha(source._mfBiasalpha),
    _mfMuxSumalpha(source._mfMuxSumalpha),
    _mfVariableE(source._mfVariableE),
    _mfVariableF(source._mfVariableF),
    _mfVariableG(source._mfVariableG),
    _mfCombinerColor0(source._mfCombinerColor0),
    _mfCombinerColor1(source._mfCombinerColor1),
    _sfPerStageConstants(source._sfPerStageConstants)
{
}

/*-------------------------- destructors ----------------------------------*/

RegisterCombinersChunkBase::~RegisterCombinersChunkBase(void)
{
}


#ifdef OSG_MT_FIELDCONTAINERPTR
void RegisterCombinersChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo,
                                        UInt32             uiCopyOffset)
{
    this->execSync(static_cast<RegisterCombinersChunkBase *>(&oFrom),
                   whichField, 
                   syncMode, 
                   uiSyncInfo,
                   uiCopyOffset);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
void RegisterCombinersChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<RegisterCombinersChunkBase *>(&oFrom), 
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif

#if 0
void RegisterCombinersChunkBase::execBeginEditV(ConstFieldMaskArg whichField,
                                       UInt32            uiAspect,
                                       UInt32            uiContainerSize)
{
    this->execBeginEdit(whichField, uiAspect, uiContainerSize);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr RegisterCombinersChunkBase::createAspectCopy(void) const
{
    RegisterCombinersChunkPtr returnValue; 

    newAspectCopy(returnValue, 
                  dynamic_cast<const RegisterCombinersChunk *>(this)); 

    return returnValue; 
}
#endif

void RegisterCombinersChunkBase::resolveLinks(void)
{
    Inherited::resolveLinks();
}


#include "OSGSField.ins"
#include "OSGMField.ins"

#if defined(OSG_TMPL_STATIC_MEMBER_NEEDS_FUNCTION_INSTANTIATION) || \
    defined(OSG_TMPL_STATIC_MEMBER_NEEDS_CLASS_INSTANTIATION   )

#include "OSGSFieldFuncs.ins"
#include "OSGMFieldFuncs.ins"
#endif

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<RegisterCombinersChunkPtr>::_type("RegisterCombinersChunkPtr", "StateChunkPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(RegisterCombinersChunkPtr)

OSG_FIELD_DLLEXPORT_DEF1(SField, RegisterCombinersChunkPtr);
OSG_FIELD_DLLEXPORT_DEF1(MField, RegisterCombinersChunkPtr);

OSG_END_NAMESPACE


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id$";
    static Char8 cvsid_hpp       [] = OSGREGISTERCOMBINERSCHUNKBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGREGISTERCOMBINERSCHUNKBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGREGISTERCOMBINERSCHUNKFIELDS_HEADER_CVSID;
}
