/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SimpleSHLChunk
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGSIMPLESHLCHUNKBASE_H_
#define _OSGSIMPLESHLCHUNKBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGSystemDef.h"

//#include "OSGBaseTypes.h"

#include "OSGShaderProgramChunk.h" // Parent

#include "OSGBaseFields.h"              // VertexProgram type
#include "OSGSysFields.h"               // CgFrontEnd type
#include "OSGShaderProgramVariablesFields.h" // Variables type

#include "OSGSimpleSHLChunkFields.h"

OSG_BEGIN_NAMESPACE

class SimpleSHLChunk;

//! \brief SimpleSHLChunk Base Class.

class OSG_SYSTEM_DLLMAPPING SimpleSHLChunkBase : public ShaderProgramChunk
{
  public:

    typedef ShaderProgramChunk Inherited;
    typedef ShaderProgramChunk ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(SimpleSHLChunk);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        VertexProgramFieldId = Inherited::NextFieldId,
        GeometryProgramFieldId = VertexProgramFieldId + 1,
        FragmentProgramFieldId = GeometryProgramFieldId + 1,
        CgFrontEndFieldId = FragmentProgramFieldId + 1,
        VariablesFieldId = CgFrontEndFieldId + 1,
        VariableLocationsFieldId = VariablesFieldId + 1,
        ProceduralVariableLocationsFieldId = VariableLocationsFieldId + 1,
        GLIdFieldId = ProceduralVariableLocationsFieldId + 1,
        PointSizeFieldId = GLIdFieldId + 1,
        NextFieldId = PointSizeFieldId + 1
    };

    static const OSG::BitVector VertexProgramFieldMask =
        (TypeTraits<BitVector>::One << VertexProgramFieldId);
    static const OSG::BitVector GeometryProgramFieldMask =
        (TypeTraits<BitVector>::One << GeometryProgramFieldId);
    static const OSG::BitVector FragmentProgramFieldMask =
        (TypeTraits<BitVector>::One << FragmentProgramFieldId);
    static const OSG::BitVector CgFrontEndFieldMask =
        (TypeTraits<BitVector>::One << CgFrontEndFieldId);
    static const OSG::BitVector VariablesFieldMask =
        (TypeTraits<BitVector>::One << VariablesFieldId);
    static const OSG::BitVector VariableLocationsFieldMask =
        (TypeTraits<BitVector>::One << VariableLocationsFieldId);
    static const OSG::BitVector ProceduralVariableLocationsFieldMask =
        (TypeTraits<BitVector>::One << ProceduralVariableLocationsFieldId);
    static const OSG::BitVector GLIdFieldMask =
        (TypeTraits<BitVector>::One << GLIdFieldId);
    static const OSG::BitVector PointSizeFieldMask =
        (TypeTraits<BitVector>::One << PointSizeFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFString          SFVertexProgramType;
    typedef SFString          SFGeometryProgramType;
    typedef SFString          SFFragmentProgramType;
    typedef SFBool            SFCgFrontEndType;
    typedef SFUnrecChildShaderProgramVariablesPtr SFVariablesType;
    typedef MFInt32           MFVariableLocationsType;
    typedef MFInt32           MFProceduralVariableLocationsType;
    typedef SFUInt32          SFGLIdType;
    typedef SFBool            SFPointSizeType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFString            *editSFVertexProgram  (void);
            const SFString            *getSFVertexProgram   (void) const;

                  SFString            *editSFGeometryProgram(void);
            const SFString            *getSFGeometryProgram (void) const;

                  SFString            *editSFFragmentProgram(void);
            const SFString            *getSFFragmentProgram (void) const;

                  SFBool              *editSFCgFrontEnd     (void);
            const SFBool              *getSFCgFrontEnd      (void) const;
            const SFUnrecChildShaderProgramVariablesPtr *getSFVariables      (void) const;
                  SFUnrecChildShaderProgramVariablesPtr *editSFVariables      (void);

                  SFUInt32            *editSFGLId           (void);
            const SFUInt32            *getSFGLId            (void) const;

                  SFBool              *editSFPointSize      (void);
            const SFBool              *getSFPointSize       (void) const;


                  std::string         &editVertexProgram  (void);
            const std::string         &getVertexProgram   (void) const;

                  std::string         &editGeometryProgram(void);
            const std::string         &getGeometryProgram (void) const;

                  std::string         &editFragmentProgram(void);
            const std::string         &getFragmentProgram (void) const;

                  bool                &editCgFrontEnd     (void);
                  bool                 getCgFrontEnd      (void) const;

                  ShaderProgramVariables * getVariables      (void) const;

                  UInt32              &editGLId           (void);
                  UInt32               getGLId            (void) const;

                  bool                &editPointSize      (void);
                  bool                 getPointSize       (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setVertexProgram  (const std::string &value);
            void setGeometryProgram(const std::string &value);
            void setFragmentProgram(const std::string &value);
            void setCgFrontEnd     (const bool value);
            void setVariables      (ShaderProgramVariables * const value);
            void setGLId           (const UInt32 value);
            void setPointSize      (const bool value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  SimpleSHLChunkTransitPtr  create          (void);
    static  SimpleSHLChunk           *createEmpty     (void);

    static  SimpleSHLChunkTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  SimpleSHLChunk            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  SimpleSHLChunkTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFString          _sfVertexProgram;
    SFString          _sfGeometryProgram;
    SFString          _sfFragmentProgram;
    SFBool            _sfCgFrontEnd;
    SFUnrecChildShaderProgramVariablesPtr _sfVariables;
    MFInt32           _mfVariableLocations;
    MFInt32           _mfProceduralVariableLocations;
    SFUInt32          _sfGLId;
    SFBool            _sfPointSize;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    SimpleSHLChunkBase(void);
    SimpleSHLChunkBase(const SimpleSHLChunkBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~SimpleSHLChunkBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const SimpleSHLChunk *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name Child linking                                                */
    /*! \{                                                                 */

    virtual bool unlinkChild(FieldContainer * const pChild,
                             UInt16           const childFieldId);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleVertexProgram   (void) const;
    EditFieldHandlePtr editHandleVertexProgram  (void);
    GetFieldHandlePtr  getHandleGeometryProgram (void) const;
    EditFieldHandlePtr editHandleGeometryProgram(void);
    GetFieldHandlePtr  getHandleFragmentProgram (void) const;
    EditFieldHandlePtr editHandleFragmentProgram(void);
    GetFieldHandlePtr  getHandleCgFrontEnd      (void) const;
    EditFieldHandlePtr editHandleCgFrontEnd     (void);
    GetFieldHandlePtr  getHandleVariables       (void) const;
    EditFieldHandlePtr editHandleVariables      (void);
    GetFieldHandlePtr  getHandleVariableLocations (void) const;
    EditFieldHandlePtr editHandleVariableLocations(void);
    GetFieldHandlePtr  getHandleProceduralVariableLocations (void) const;
    EditFieldHandlePtr editHandleProceduralVariableLocations(void);
    GetFieldHandlePtr  getHandleGLId            (void) const;
    EditFieldHandlePtr editHandleGLId           (void);
    GetFieldHandlePtr  getHandlePointSize       (void) const;
    EditFieldHandlePtr editHandlePointSize      (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  MFInt32             *editMFVariableLocations(void);
            const MFInt32             *getMFVariableLocations (void) const;

                  MFInt32             *editMFProceduralVariableLocations(void);
            const MFInt32             *getMFProceduralVariableLocations (void) const;


                  Int32               &editVariableLocations(const UInt32 index);
                  Int32                getVariableLocations (const UInt32 index) const;

                  Int32               &editProceduralVariableLocations(const UInt32 index);
                  Int32                getProceduralVariableLocations (const UInt32 index) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      SimpleSHLChunkBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const SimpleSHLChunkBase &source);
};

typedef SimpleSHLChunkBase *SimpleSHLChunkBaseP;

OSG_END_NAMESPACE

#endif /* _OSGSIMPLESHLCHUNKBASE_H_ */
