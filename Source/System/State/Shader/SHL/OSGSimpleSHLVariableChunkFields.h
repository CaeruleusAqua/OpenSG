/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGSIMPLESHLVARIABLECHUNKFIELDS_H_
#define _OSGSIMPLESHLVARIABLECHUNKFIELDS_H_
#ifdef __sgi
#pragma once
#endif

#include "OSGConfig.h"
#include "OSGSystemDef.h"

#include "OSGFieldContainerFields.h"
#include "OSGPointerSField.h"
#include "OSGPointerMField.h"


OSG_BEGIN_NAMESPACE

class SimpleSHLVariableChunk;

#if !defined(OSG_DO_DOC) // created as a dummy class, remove to prevent doubles
//! SimpleSHLVariableChunkPtr

OSG_GEN_CONTAINERPTR(SimpleSHLVariableChunk);

#endif

#if !defined(OSG_DO_DOC) || (OSG_DOC_LEVEL >= 3)
/*! \ingroup GrpSystemFieldTraits
 */
#if !defined(OSG_DOC_DEV_TRAITS)
/*! \hideinhierarchy */
#endif

template <>
struct FieldTraits<SimpleSHLVariableChunk *> :
    public FieldTraitsFCPtrBase<SimpleSHLVariableChunk *>
{
  private:

    static DataType             _type;

  public:

    typedef FieldTraits<SimpleSHLVariableChunk *>  Self;

    enum                        { Convertible = NotConvertible };

    static OSG_SYSTEM_DLLMAPPING DataType &getType(void);

    template<typename RefCountPolicy> inline
    static const Char8    *getSName     (void);

//    static const char *getSName(void) { return "SFSimpleSHLVariableChunkPtr"; }
    template<typename RefCountPolicy> inline
    static const Char8    *getMName     (void);

//    static const char *getMName(void) { return "MFSimpleSHLVariableChunkPtr"; }
};

template<> inline
const Char8 *FieldTraits<SimpleSHLVariableChunk *, 0>::getSName<RecordedRefCountPolicy>(void)
{
    return "SFRecSimpleSHLVariableChunkPtr"; 
}

template<> inline
const Char8 *FieldTraits<SimpleSHLVariableChunk *, 0>::getSName<UnrecordedRefCountPolicy>(void)
{
    return "SFUnrecSimpleSHLVariableChunkPtr"; 
}

template<> inline
const Char8 *FieldTraits<SimpleSHLVariableChunk *, 0>::getSName<WeakRefCountPolicy>(void)
{
    return "SFWeakSimpleSHLVariableChunkPtr"; 
}

template<> inline
const Char8 *FieldTraits<SimpleSHLVariableChunk *, 0>::getSName<NoRefCountPolicy>(void)
{
    return "SFUnrefdSimpleSHLVariableChunkPtr"; 
}

template<> inline
const Char8 *FieldTraits<SimpleSHLVariableChunk *, 0>::getMName<RecordedRefCountPolicy>(void)
{
    return "MFRecSimpleSHLVariableChunkPtr"; 
}

template<> inline
const Char8 *FieldTraits<SimpleSHLVariableChunk *, 0>::getMName<UnrecordedRefCountPolicy>(void)
{
    return "MFUnrecSimpleSHLVariableChunkPtr"; 
}

template<> inline
const Char8 *FieldTraits<SimpleSHLVariableChunk *, 0>::getMName<WeakRefCountPolicy>(void)
{
    return "MFWeakSimpleSHLVariableChunkPtr"; 
}

template<> inline
const Char8 *FieldTraits<SimpleSHLVariableChunk *, 0>::getMName<NoRefCountPolicy>(void)
{
    return "MFUnrefdSimpleSHLVariableChunkPtr"; 
}

#if !defined(OSG_DOC_DEV_TRAITS)
/*! \class  FieldTraitsTemplateBase<SimpleSHLVariableChunkPtr, 0>
    \hideinhierarchy
 */
#endif

#endif // !defined(OSG_DO_DOC) || (OSG_DOC_LEVEL >= 3)


#if !defined(OSG_DO_DOC) || defined(OSG_DOC_FIELD_TYPEDEFS)
/*! \ingroup GrpSystemFieldSingle */

typedef PointerSField<SimpleSHLVariableChunk *,
                      RecordedRefCountPolicy  > SFRecSimpleSHLVariableChunkPtr;
typedef PointerSField<SimpleSHLVariableChunk *,
                      UnrecordedRefCountPolicy> SFUnrecSimpleSHLVariableChunkPtr;
typedef PointerSField<SimpleSHLVariableChunk *,
                      WeakRefCountPolicy      > SFWeakSimpleSHLVariableChunkPtr;
typedef PointerSField<SimpleSHLVariableChunk *,
                      NoRefCountPolicy        > SFUncountedSimpleSHLVariableChunkPtr;
#endif


#if !defined(OSG_DO_DOC) || defined(OSG_DOC_FIELD_TYPEDEFS)
/*! \ingroup GrpSystemFieldMulti */

typedef PointerMField<SimpleSHLVariableChunk *,
                      RecordedRefCountPolicy  > MFRecSimpleSHLVariableChunkPtr;
typedef PointerMField<SimpleSHLVariableChunk *,
                      UnrecordedRefCountPolicy> MFUnrecSimpleSHLVariableChunkPtr;
typedef PointerMField<SimpleSHLVariableChunk *,
                      WeakRefCountPolicy      > MFWeakSimpleSHLVariableChunkPtr;
typedef PointerMField<SimpleSHLVariableChunk *,
                      NoRefCountPolicy        > MFUncountedSimpleSHLVariableChunkPtr;
#endif


OSG_END_NAMESPACE

#endif /* _OSGSIMPLESHLVARIABLECHUNKFIELDS_H_ */
