/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGSHADERPROGRAMVARIABLESFIELDS_H_
#define _OSGSHADERPROGRAMVARIABLESFIELDS_H_
#ifdef __sgi
#pragma once
#endif

#include "OSGConfig.h"
#include "OSGSystemDef.h"

#include "OSGFieldContainerFields.h"
#include "OSGPointerSField.h"
#include "OSGPointerMField.h"


OSG_BEGIN_NAMESPACE

class ShaderProgramVariables;

OSG_GEN_CONTAINERPTR(ShaderProgramVariables);

/*! \ingroup GrpSystemShaderFieldTraits
    \ingroup GrpLibOSGSystem
 */
template <>
struct FieldTraits<ShaderProgramVariables *> :
    public FieldTraitsFCPtrBase<ShaderProgramVariables *>
{
  private:

    static DataType             _type;

  public:

    typedef FieldTraits<ShaderProgramVariables *>  Self;

    enum                        { Convertible = NotConvertible };

    static OSG_SYSTEM_DLLMAPPING DataType &getType(void);

    template<typename RefCountPolicy> inline
    static const Char8    *getSName     (void);

//    static const char *getSName(void) { return "SFShaderProgramVariablesPtr"; }
    template<typename RefCountPolicy> inline
    static const Char8    *getMName     (void);

//    static const char *getMName(void) { return "MFShaderProgramVariablesPtr"; }
};

template<> inline
const Char8 *FieldTraits<ShaderProgramVariables *, 0>::getSName<RecordedRefCountPolicy>(void)
{
    return "SFRecShaderProgramVariablesPtr"; 
}

template<> inline
const Char8 *FieldTraits<ShaderProgramVariables *, 0>::getSName<UnrecordedRefCountPolicy>(void)
{
    return "SFUnrecShaderProgramVariablesPtr"; 
}

template<> inline
const Char8 *FieldTraits<ShaderProgramVariables *, 0>::getSName<WeakRefCountPolicy>(void)
{
    return "SFWeakShaderProgramVariablesPtr"; 
}

template<> inline
const Char8 *FieldTraits<ShaderProgramVariables *, 0>::getSName<NoRefCountPolicy>(void)
{
    return "SFUnrefdShaderProgramVariablesPtr"; 
}

template<> inline
const Char8 *FieldTraits<ShaderProgramVariables *, 0>::getMName<RecordedRefCountPolicy>(void)
{
    return "MFRecShaderProgramVariablesPtr"; 
}

template<> inline
const Char8 *FieldTraits<ShaderProgramVariables *, 0>::getMName<UnrecordedRefCountPolicy>(void)
{
    return "MFUnrecShaderProgramVariablesPtr"; 
}

template<> inline
const Char8 *FieldTraits<ShaderProgramVariables *, 0>::getMName<WeakRefCountPolicy>(void)
{
    return "MFWeakShaderProgramVariablesPtr"; 
}

template<> inline
const Char8 *FieldTraits<ShaderProgramVariables *, 0>::getMName<NoRefCountPolicy>(void)
{
    return "MFUnrefdShaderProgramVariablesPtr"; 
}


class FieldContainer;

/*! \ingroup GrpSystemShaderFieldTraits
 */
template <>
struct FieldTraits<ShaderProgramVariables *, 1> :
    public FieldTraitsFCPtrBase<ShaderProgramVariables *, 1>
{
  private:

  public:

    typedef FieldContainer            *ParentType;
    typedef FieldTraits<ShaderProgramVariables *, 1>  Self;

    static const FieldType::Cardinality eParentCard = FieldType::MultiField;

    enum                        { Convertible = NotConvertible };

    static OSG_SYSTEM_DLLMAPPING DataType &getType(void);

    template<typename RefCountPolicy> inline
    static const Char8    *getSName     (void);

//    static const char *getSName(void) { return "SFShaderProgramVariablesPtr"; }
    template<typename RefCountPolicy> inline
    static const Char8    *getMName     (void);

//    static const char *getMName(void) { return "MFShaderProgramVariablesPtr"; }
};

template<> inline
const Char8 *FieldTraits<ShaderProgramVariables *, 1>::getSName<RecordedRefCountPolicy>(void)
{
    return "SFRecChildShaderProgramVariablesPtr"; 
}

template<> inline
const Char8 *FieldTraits<ShaderProgramVariables *, 1>::getSName<UnrecordedRefCountPolicy>(void)
{
    return "SFUnrecChildShaderProgramVariablesPtr"; 
}

template<> inline
const Char8 *FieldTraits<ShaderProgramVariables *, 1>::getSName<WeakRefCountPolicy>(void)
{
    return "SFWeakChildShaderProgramVariablesPtr"; 
}

template<> inline
const Char8 *FieldTraits<ShaderProgramVariables *, 1>::getSName<NoRefCountPolicy>(void)
{
    return "SFUnrefdChildShaderProgramVariablesPtr"; 
}

template<> inline
const Char8 *FieldTraits<ShaderProgramVariables *, 1>::getMName<RecordedRefCountPolicy>(void)
{
    return "MFRecChildShaderProgramVariablesPtr"; 
}

template<> inline
const Char8 *FieldTraits<ShaderProgramVariables *, 1>::getMName<UnrecordedRefCountPolicy>(void)
{
    return "MFUnrecChildShaderProgramVariablesPtr"; 
}

template<> inline
const Char8 *FieldTraits<ShaderProgramVariables *, 1>::getMName<WeakRefCountPolicy>(void)
{
    return "MFWeakChildShaderProgramVariablesPtr"; 
}

template<> inline
const Char8 *FieldTraits<ShaderProgramVariables *, 1>::getMName<NoRefCountPolicy>(void)
{
    return "MFUnrefdChildShaderProgramVariablesPtr"; 
}


#ifndef DOXYGEN_SHOULD_SKIP_THIS
/*! \ingroup GrpSystemShaderFieldSFields */
typedef PointerSField<ShaderProgramVariables *,
                      RecordedRefCountPolicy  > SFRecShaderProgramVariablesPtr;
/*! \ingroup GrpSystemShaderFieldSFields */
typedef PointerSField<ShaderProgramVariables *,
                      UnrecordedRefCountPolicy> SFUnrecShaderProgramVariablesPtr;
/*! \ingroup GrpSystemShaderFieldSFields */
typedef PointerSField<ShaderProgramVariables *,
                      WeakRefCountPolicy      > SFWeakShaderProgramVariablesPtr;
/*! \ingroup GrpSystemShaderFieldSFields */
typedef PointerSField<ShaderProgramVariables *,
                      NoRefCountPolicy        > SFUncountedShaderProgramVariablesPtr;


/*! \ingroup GrpSystemShaderFieldMFields */
typedef PointerMField<ShaderProgramVariables *,
                      RecordedRefCountPolicy  > MFRecShaderProgramVariablesPtr;
/*! \ingroup GrpSystemShaderFieldMFields */
typedef PointerMField<ShaderProgramVariables *,
                      UnrecordedRefCountPolicy> MFUnrecShaderProgramVariablesPtr;
/*! \ingroup GrpSystemShaderFieldMFields */
typedef PointerMField<ShaderProgramVariables *,
                      WeakRefCountPolicy      > MFWeakShaderProgramVariablesPtr;
/*! \ingroup GrpSystemShaderFieldMFields */
typedef PointerMField<ShaderProgramVariables *,
                      NoRefCountPolicy        > MFUncountedShaderProgramVariablesPtr;



/*! \ingroup GrpSystemShaderFieldSFields */
typedef ChildPointerSField<
          ShaderProgramVariables *, 
          UnrecordedRefCountPolicy,
          1             > SFUnrecChildShaderProgramVariablesPtr;



#else // these are the doxygen hacks

/*! \ingroup GrpSystemShaderFieldSFields \ingroup GrpLibOSGSystem */
struct SFRecShaderProgramVariablesPtr : 
    public PointerSField<ShaderProgramVariables *,
                         RecordedRefCountPolicy> {};
/*! \ingroup GrpSystemShaderFieldSFields \ingroup GrpLibOSGSystem */
struct SFUnrecShaderProgramVariablesPtr : 
    public PointerSField<ShaderProgramVariables *,
                         UnrecordedRefCountPolicy> {};
/*! \ingroup GrpSystemShaderFieldSFields \ingroup GrpLibOSGSystem */
struct SFWeakShaderProgramVariablesPtr :
    public PointerSField<ShaderProgramVariables *,
                         WeakRefCountPolicy> {};
/*! \ingroup GrpSystemShaderFieldSFields \ingroup GrpLibOSGSystem */
struct SFUncountedShaderProgramVariablesPtr :
    public PointerSField<ShaderProgramVariables *,
                         NoRefCountPolicy> {};


/*! \ingroup GrpSystemShaderFieldMFields \ingroup GrpLibOSGSystem */
struct MFRecShaderProgramVariablesPtr :
    public PointerMField<ShaderProgramVariables *,
                         RecordedRefCountPolicy  > {};
/*! \ingroup GrpSystemShaderFieldMFields \ingroup GrpLibOSGSystem */
struct MFUnrecShaderProgramVariablesPtr :
    public PointerMField<ShaderProgramVariables *,
                         UnrecordedRefCountPolicy> {};
/*! \ingroup GrpSystemShaderFieldMFields \ingroup GrpLibOSGSystem */
struct MFWeakShaderProgramVariablesPtr :
    public PointerMField<ShaderProgramVariables *,
                         WeakRefCountPolicy      > {};
/*! \ingroup GrpSystemShaderFieldMFields \ingroup GrpLibOSGSystem */
struct MFUncountedShaderProgramVariablesPtr :
    public PointerMField<ShaderProgramVariables *,
                         NoRefCountPolicy        > {};



/*! \ingroup GrpSystemShaderFieldSFields \ingroup GrpLibOSGSystem */
struct SFUnrecChildShaderProgramVariablesPtr :
    public ChildPointerSField<
        ShaderProgramVariables *, 
        UnrecordedRefCountPolicy,
        1             > {};


#endif // these are the doxygen hacks

OSG_END_NAMESPACE

#endif /* _OSGSHADERPROGRAMVARIABLESFIELDS_H_ */
