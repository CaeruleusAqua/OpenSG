/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PointChunk
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGPOINTCHUNKBASE_H_
#define _OSGPOINTCHUNKBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGStateDef.h"

//#include "OSGBaseTypes.h"

#include "OSGStateChunk.h" // Parent

#include "OSGSysFields.h"               // Size type
#include "OSGBaseFields.h"              // RMode type

#include "OSGPointChunkFields.h"

OSG_BEGIN_NAMESPACE


class PointChunk;

//! \brief PointChunk Base Class.

class OSG_STATE_DLLMAPPING PointChunkBase : public StateChunk
{
  public:

    typedef StateChunk Inherited;
    typedef StateChunk ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(PointChunk);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        SizeFieldId = Inherited::NextFieldId,
        SmoothFieldId = SizeFieldId + 1,
        MinSizeFieldId = SmoothFieldId + 1,
        MaxSizeFieldId = MinSizeFieldId + 1,
        ConstantAttenuationFieldId = MaxSizeFieldId + 1,
        LinearAttenuationFieldId = ConstantAttenuationFieldId + 1,
        QuadraticAttenuationFieldId = LinearAttenuationFieldId + 1,
        FadeThresholdFieldId = QuadraticAttenuationFieldId + 1,
        SpriteFieldId = FadeThresholdFieldId + 1,
        RModeFieldId = SpriteFieldId + 1,
        NextFieldId = RModeFieldId + 1
    };

    static const OSG::BitVector SizeFieldMask =
        (TypeTraits<BitVector>::One << SizeFieldId);
    static const OSG::BitVector SmoothFieldMask =
        (TypeTraits<BitVector>::One << SmoothFieldId);
    static const OSG::BitVector MinSizeFieldMask =
        (TypeTraits<BitVector>::One << MinSizeFieldId);
    static const OSG::BitVector MaxSizeFieldMask =
        (TypeTraits<BitVector>::One << MaxSizeFieldId);
    static const OSG::BitVector ConstantAttenuationFieldMask =
        (TypeTraits<BitVector>::One << ConstantAttenuationFieldId);
    static const OSG::BitVector LinearAttenuationFieldMask =
        (TypeTraits<BitVector>::One << LinearAttenuationFieldId);
    static const OSG::BitVector QuadraticAttenuationFieldMask =
        (TypeTraits<BitVector>::One << QuadraticAttenuationFieldId);
    static const OSG::BitVector FadeThresholdFieldMask =
        (TypeTraits<BitVector>::One << FadeThresholdFieldId);
    static const OSG::BitVector SpriteFieldMask =
        (TypeTraits<BitVector>::One << SpriteFieldId);
    static const OSG::BitVector RModeFieldMask =
        (TypeTraits<BitVector>::One << RModeFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFReal32          SFSizeType;
    typedef SFBool            SFSmoothType;
    typedef SFReal32          SFMinSizeType;
    typedef SFReal32          SFMaxSizeType;
    typedef SFReal32          SFConstantAttenuationType;
    typedef SFReal32          SFLinearAttenuationType;
    typedef SFReal32          SFQuadraticAttenuationType;
    typedef SFReal32          SFFadeThresholdType;
    typedef SFBool            SFSpriteType;
    typedef SFGLenum          SFRModeType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFReal32            *editSFSize           (void);
            const SFReal32            *getSFSize            (void) const;

                  SFBool              *editSFSmooth         (void);
            const SFBool              *getSFSmooth          (void) const;

                  SFReal32            *editSFMinSize        (void);
            const SFReal32            *getSFMinSize         (void) const;

                  SFReal32            *editSFMaxSize        (void);
            const SFReal32            *getSFMaxSize         (void) const;

                  SFReal32            *editSFConstantAttenuation(void);
            const SFReal32            *getSFConstantAttenuation (void) const;

                  SFReal32            *editSFLinearAttenuation(void);
            const SFReal32            *getSFLinearAttenuation (void) const;

                  SFReal32            *editSFQuadraticAttenuation(void);
            const SFReal32            *getSFQuadraticAttenuation (void) const;

                  SFReal32            *editSFFadeThreshold  (void);
            const SFReal32            *getSFFadeThreshold   (void) const;

                  SFBool              *editSFSprite         (void);
            const SFBool              *getSFSprite          (void) const;

                  SFGLenum            *editSFRMode          (void);
            const SFGLenum            *getSFRMode           (void) const;


                  Real32              &editSize           (void);
                  Real32               getSize            (void) const;

                  bool                &editSmooth         (void);
                  bool                 getSmooth          (void) const;

                  Real32              &editMinSize        (void);
                  Real32               getMinSize         (void) const;

                  Real32              &editMaxSize        (void);
                  Real32               getMaxSize         (void) const;

                  Real32              &editConstantAttenuation(void);
                  Real32               getConstantAttenuation (void) const;

                  Real32              &editLinearAttenuation(void);
                  Real32               getLinearAttenuation (void) const;

                  Real32              &editQuadraticAttenuation(void);
                  Real32               getQuadraticAttenuation (void) const;

                  Real32              &editFadeThreshold  (void);
                  Real32               getFadeThreshold   (void) const;

                  bool                &editSprite         (void);
                  bool                 getSprite          (void) const;

                  GLenum              &editRMode          (void);
            const GLenum              &getRMode           (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setSize           (const Real32 value);
            void setSmooth         (const bool value);
            void setMinSize        (const Real32 value);
            void setMaxSize        (const Real32 value);
            void setConstantAttenuation(const Real32 value);
            void setLinearAttenuation(const Real32 value);
            void setQuadraticAttenuation(const Real32 value);
            void setFadeThreshold  (const Real32 value);
            void setSprite         (const bool value);
            void setRMode          (const GLenum &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual SizeT  getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  PointChunkTransitPtr  create          (void);
    static  PointChunk           *createEmpty     (void);

    static  PointChunkTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  PointChunk            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  PointChunkTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFReal32          _sfSize;
    SFBool            _sfSmooth;
    SFReal32          _sfMinSize;
    SFReal32          _sfMaxSize;
    SFReal32          _sfConstantAttenuation;
    SFReal32          _sfLinearAttenuation;
    SFReal32          _sfQuadraticAttenuation;
    SFReal32          _sfFadeThreshold;
    SFBool            _sfSprite;
    SFGLenum          _sfRMode;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    PointChunkBase(void);
    PointChunkBase(const PointChunkBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~PointChunkBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleSize            (void) const;
    EditFieldHandlePtr editHandleSize           (void);
    GetFieldHandlePtr  getHandleSmooth          (void) const;
    EditFieldHandlePtr editHandleSmooth         (void);
    GetFieldHandlePtr  getHandleMinSize         (void) const;
    EditFieldHandlePtr editHandleMinSize        (void);
    GetFieldHandlePtr  getHandleMaxSize         (void) const;
    EditFieldHandlePtr editHandleMaxSize        (void);
    GetFieldHandlePtr  getHandleConstantAttenuation (void) const;
    EditFieldHandlePtr editHandleConstantAttenuation(void);
    GetFieldHandlePtr  getHandleLinearAttenuation (void) const;
    EditFieldHandlePtr editHandleLinearAttenuation(void);
    GetFieldHandlePtr  getHandleQuadraticAttenuation (void) const;
    EditFieldHandlePtr editHandleQuadraticAttenuation(void);
    GetFieldHandlePtr  getHandleFadeThreshold   (void) const;
    EditFieldHandlePtr editHandleFadeThreshold  (void);
    GetFieldHandlePtr  getHandleSprite          (void) const;
    EditFieldHandlePtr editHandleSprite         (void);
    GetFieldHandlePtr  getHandleRMode           (void) const;
    EditFieldHandlePtr editHandleRMode          (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      PointChunkBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const PointChunkBase &source);
};

typedef PointChunkBase *PointChunkBaseP;

OSG_END_NAMESPACE

#endif /* _OSGPOINTCHUNKBASE_H_ */
