/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class StencilChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESTENCILCHUNKINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>


#include "OSGGL.h"                        // StencilFunc default header
#include "OSGGL.h"                        // StencilOpFail default header
#include "OSGGL.h"                        // StencilOpZFail default header
#include "OSGGL.h"                        // StencilOpZPass default header


#include "OSGStencilChunkBase.h"
#include "OSGStencilChunk.h"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::StencilChunk
    The stencil chunk handles OpenGL stencil tests by wrapping glStencilFunc() and glStencilOp().
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var GLenum          StencilChunkBase::_sfStencilFunc
    The stencilFunc defines how fragments which do not fulfill a certain condition are handled.
    See glStencilFunc() for details. GL_NONE is used to disable stencil.
*/

/*! \var Int32           StencilChunkBase::_sfStencilValue
    The stencilFunc defines how fragments which do not fulfill a certain condition are handled.
    See glStencilFunc() for details. GL_NONE is used to disable stencil.
*/

/*! \var UInt32          StencilChunkBase::_sfStencilMask
    The stencilFunc defines how fragments which do not fulfill a certain condition are handled.
    See glStencilFunc() for details. GL_NONE is used to disable stencil.
*/

/*! \var GLenum          StencilChunkBase::_sfStencilOpFail
    The stencilFunc defines how fragments which do not fulfill a certain condition are handled.
    See glStencilFunc() for details. GL_NONE is used to disable stencil.
*/

/*! \var GLenum          StencilChunkBase::_sfStencilOpZFail
    The stencilFunc defines how fragments which do not fulfill a certain condition are handled.
    See glStencilFunc() for details. GL_NONE is used to disable stencil.
*/

/*! \var GLenum          StencilChunkBase::_sfStencilOpZPass
    The stencilFunc defines how fragments which do not fulfill a certain condition are handled.
    See glStencilFunc() for details. GL_NONE is used to disable stencil.
*/

/*! \var Int32           StencilChunkBase::_sfClearBuffer
    Clear buffer on activate(1) or deactivate(2).
*/

/*! \var UInt32          StencilChunkBase::_sfBitMask
    Controls writing of individual bits in stencil planes, with 0 means write protected and 1 write enabled.
*/


void StencilChunkBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(StencilChunkBase::*GetSFStencilFuncF)(void) const;

    GetSFStencilFuncF GetSFStencilFunc = &StencilChunkBase::getSFStencilFunc;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "stencilFunc",
        "The stencilFunc defines how fragments which do not fulfill a certain condition are handled.\n"
        "See glStencilFunc() for details. GL_NONE is used to disable stencil.\n",
        StencilFuncFieldId, StencilFuncFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&StencilChunkBase::editSFStencilFunc),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFStencilFunc));
#else
        reinterpret_cast<FieldGetMethodSig >(&StencilChunkBase::getSFStencilFunc));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFInt32 *(StencilChunkBase::*GetSFStencilValueF)(void) const;

    GetSFStencilValueF GetSFStencilValue = &StencilChunkBase::getSFStencilValue;
#endif

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "stencilValue",
        "The stencilFunc defines how fragments which do not fulfill a certain condition are handled.\n"
        "See glStencilFunc() for details. GL_NONE is used to disable stencil.\n",
        StencilValueFieldId, StencilValueFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&StencilChunkBase::editSFStencilValue),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFStencilValue));
#else
        reinterpret_cast<FieldGetMethodSig >(&StencilChunkBase::getSFStencilValue));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFUInt32 *(StencilChunkBase::*GetSFStencilMaskF)(void) const;

    GetSFStencilMaskF GetSFStencilMask = &StencilChunkBase::getSFStencilMask;
#endif

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "stencilMask",
        "The stencilFunc defines how fragments which do not fulfill a certain condition are handled.\n"
        "See glStencilFunc() for details. GL_NONE is used to disable stencil.\n",
        StencilMaskFieldId, StencilMaskFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&StencilChunkBase::editSFStencilMask),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFStencilMask));
#else
        reinterpret_cast<FieldGetMethodSig >(&StencilChunkBase::getSFStencilMask));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(StencilChunkBase::*GetSFStencilOpFailF)(void) const;

    GetSFStencilOpFailF GetSFStencilOpFail = &StencilChunkBase::getSFStencilOpFail;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "stencilOpFail",
        "The stencilFunc defines how fragments which do not fulfill a certain condition are handled.\n"
        "See glStencilFunc() for details. GL_NONE is used to disable stencil.\n",
        StencilOpFailFieldId, StencilOpFailFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&StencilChunkBase::editSFStencilOpFail),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFStencilOpFail));
#else
        reinterpret_cast<FieldGetMethodSig >(&StencilChunkBase::getSFStencilOpFail));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(StencilChunkBase::*GetSFStencilOpZFailF)(void) const;

    GetSFStencilOpZFailF GetSFStencilOpZFail = &StencilChunkBase::getSFStencilOpZFail;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "stencilOpZFail",
        "The stencilFunc defines how fragments which do not fulfill a certain condition are handled.\n"
        "See glStencilFunc() for details. GL_NONE is used to disable stencil.\n",
        StencilOpZFailFieldId, StencilOpZFailFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&StencilChunkBase::editSFStencilOpZFail),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFStencilOpZFail));
#else
        reinterpret_cast<FieldGetMethodSig >(&StencilChunkBase::getSFStencilOpZFail));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFGLenum *(StencilChunkBase::*GetSFStencilOpZPassF)(void) const;

    GetSFStencilOpZPassF GetSFStencilOpZPass = &StencilChunkBase::getSFStencilOpZPass;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "stencilOpZPass",
        "The stencilFunc defines how fragments which do not fulfill a certain condition are handled.\n"
        "See glStencilFunc() for details. GL_NONE is used to disable stencil.\n",
        StencilOpZPassFieldId, StencilOpZPassFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&StencilChunkBase::editSFStencilOpZPass),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFStencilOpZPass));
#else
        reinterpret_cast<FieldGetMethodSig >(&StencilChunkBase::getSFStencilOpZPass));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFInt32 *(StencilChunkBase::*GetSFClearBufferF)(void) const;

    GetSFClearBufferF GetSFClearBuffer = &StencilChunkBase::getSFClearBuffer;
#endif

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "clearBuffer",
        "Clear buffer on activate(1) or deactivate(2).\n",
        ClearBufferFieldId, ClearBufferFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&StencilChunkBase::editSFClearBuffer),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFClearBuffer));
#else
        reinterpret_cast<FieldGetMethodSig >(&StencilChunkBase::getSFClearBuffer));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFUInt32 *(StencilChunkBase::*GetSFBitMaskF)(void) const;

    GetSFBitMaskF GetSFBitMask = &StencilChunkBase::getSFBitMask;
#endif

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "bitMask",
        "Controls writing of individual bits in stencil planes, with 0 means write protected and 1 write enabled.\n",
        BitMaskFieldId, BitMaskFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&StencilChunkBase::editSFBitMask),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFBitMask));
#else
        reinterpret_cast<FieldGetMethodSig >(&StencilChunkBase::getSFBitMask));
#endif

    oType.addInitialDesc(pDesc);
}


StencilChunkBase::TypeObject StencilChunkBase::_type(
    StencilChunkBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &StencilChunkBase::createEmpty,
    StencilChunk::initMethod,
    (InitalInsertDescFunc) &StencilChunkBase::classDescInserter,
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"StencilChunk\"\n"
    "\tparent=\"StateChunk\"\n"
    "\tlibrary=\"State\"\n"
    "\tpointerfieldtypes=\"none\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"false\"\n"
    ">\n"
    "The stencil chunk handles OpenGL stencil tests by wrapping glStencilFunc() and glStencilOp().\n"
    "\t<Field\n"
    "\t\tname=\"stencilFunc\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_NONE\"\n"
    "\t\tdefaultHeader=\"OSGGL.h\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe stencilFunc defines how fragments which do not fulfill a certain condition are handled.\n"
    "        See glStencilFunc() for details. GL_NONE is used to disable stencil.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"stencilValue\"\n"
    "\t\ttype=\"Int32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe stencilFunc defines how fragments which do not fulfill a certain condition are handled.\n"
    "        See glStencilFunc() for details. GL_NONE is used to disable stencil.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"stencilMask\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0x1\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe stencilFunc defines how fragments which do not fulfill a certain condition are handled.\n"
    "        See glStencilFunc() for details. GL_NONE is used to disable stencil.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"stencilOpFail\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_KEEP\"\n"
    "\t\tdefaultHeader=\"OSGGL.h\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe stencilFunc defines how fragments which do not fulfill a certain condition are handled.\n"
    "        See glStencilFunc() for details. GL_NONE is used to disable stencil.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"stencilOpZFail\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_KEEP\"\n"
    "\t\tdefaultHeader=\"OSGGL.h\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe stencilFunc defines how fragments which do not fulfill a certain condition are handled.\n"
    "        See glStencilFunc() for details. GL_NONE is used to disable stencil.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"stencilOpZPass\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_KEEP\"\n"
    "\t\tdefaultHeader=\"OSGGL.h\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe stencilFunc defines how fragments which do not fulfill a certain condition are handled.\n"
    "        See glStencilFunc() for details. GL_NONE is used to disable stencil.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"clearBuffer\"\n"
    "\t\ttype=\"Int32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tClear buffer on activate(1) or deactivate(2).\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"bitMask\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0xFFFFFFFF\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tControls writing of individual bits in stencil planes, with 0 means write protected and 1 write enabled.\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "The stencil chunk handles OpenGL stencil tests by wrapping glStencilFunc() and glStencilOp().\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &StencilChunkBase::getType(void)
{
    return _type;
}

const FieldContainerType &StencilChunkBase::getType(void) const
{
    return _type;
}

UInt32 StencilChunkBase::getContainerSize(void) const
{
    return sizeof(StencilChunk);
}

/*------------------------- decorator get ------------------------------*/


SFGLenum *StencilChunkBase::editSFStencilFunc(void)
{
    editSField(StencilFuncFieldMask);

    return &_sfStencilFunc;
}

const SFGLenum *StencilChunkBase::getSFStencilFunc(void) const
{
    return &_sfStencilFunc;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *StencilChunkBase::getSFStencilFunc    (void)
{
    return this->editSFStencilFunc    ();
}
#endif

SFInt32 *StencilChunkBase::editSFStencilValue(void)
{
    editSField(StencilValueFieldMask);

    return &_sfStencilValue;
}

const SFInt32 *StencilChunkBase::getSFStencilValue(void) const
{
    return &_sfStencilValue;
}

#ifdef OSG_1_GET_COMPAT
SFInt32             *StencilChunkBase::getSFStencilValue   (void)
{
    return this->editSFStencilValue   ();
}
#endif

SFUInt32 *StencilChunkBase::editSFStencilMask(void)
{
    editSField(StencilMaskFieldMask);

    return &_sfStencilMask;
}

const SFUInt32 *StencilChunkBase::getSFStencilMask(void) const
{
    return &_sfStencilMask;
}

#ifdef OSG_1_GET_COMPAT
SFUInt32            *StencilChunkBase::getSFStencilMask    (void)
{
    return this->editSFStencilMask    ();
}
#endif

SFGLenum *StencilChunkBase::editSFStencilOpFail(void)
{
    editSField(StencilOpFailFieldMask);

    return &_sfStencilOpFail;
}

const SFGLenum *StencilChunkBase::getSFStencilOpFail(void) const
{
    return &_sfStencilOpFail;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *StencilChunkBase::getSFStencilOpFail  (void)
{
    return this->editSFStencilOpFail  ();
}
#endif

SFGLenum *StencilChunkBase::editSFStencilOpZFail(void)
{
    editSField(StencilOpZFailFieldMask);

    return &_sfStencilOpZFail;
}

const SFGLenum *StencilChunkBase::getSFStencilOpZFail(void) const
{
    return &_sfStencilOpZFail;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *StencilChunkBase::getSFStencilOpZFail (void)
{
    return this->editSFStencilOpZFail ();
}
#endif

SFGLenum *StencilChunkBase::editSFStencilOpZPass(void)
{
    editSField(StencilOpZPassFieldMask);

    return &_sfStencilOpZPass;
}

const SFGLenum *StencilChunkBase::getSFStencilOpZPass(void) const
{
    return &_sfStencilOpZPass;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *StencilChunkBase::getSFStencilOpZPass (void)
{
    return this->editSFStencilOpZPass ();
}
#endif

SFInt32 *StencilChunkBase::editSFClearBuffer(void)
{
    editSField(ClearBufferFieldMask);

    return &_sfClearBuffer;
}

const SFInt32 *StencilChunkBase::getSFClearBuffer(void) const
{
    return &_sfClearBuffer;
}

#ifdef OSG_1_GET_COMPAT
SFInt32             *StencilChunkBase::getSFClearBuffer    (void)
{
    return this->editSFClearBuffer    ();
}
#endif

SFUInt32 *StencilChunkBase::editSFBitMask(void)
{
    editSField(BitMaskFieldMask);

    return &_sfBitMask;
}

const SFUInt32 *StencilChunkBase::getSFBitMask(void) const
{
    return &_sfBitMask;
}

#ifdef OSG_1_GET_COMPAT
SFUInt32            *StencilChunkBase::getSFBitMask        (void)
{
    return this->editSFBitMask        ();
}
#endif





/*------------------------------ access -----------------------------------*/

UInt32 StencilChunkBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (StencilFuncFieldMask & whichField))
    {
        returnValue += _sfStencilFunc.getBinSize();
    }
    if(FieldBits::NoField != (StencilValueFieldMask & whichField))
    {
        returnValue += _sfStencilValue.getBinSize();
    }
    if(FieldBits::NoField != (StencilMaskFieldMask & whichField))
    {
        returnValue += _sfStencilMask.getBinSize();
    }
    if(FieldBits::NoField != (StencilOpFailFieldMask & whichField))
    {
        returnValue += _sfStencilOpFail.getBinSize();
    }
    if(FieldBits::NoField != (StencilOpZFailFieldMask & whichField))
    {
        returnValue += _sfStencilOpZFail.getBinSize();
    }
    if(FieldBits::NoField != (StencilOpZPassFieldMask & whichField))
    {
        returnValue += _sfStencilOpZPass.getBinSize();
    }
    if(FieldBits::NoField != (ClearBufferFieldMask & whichField))
    {
        returnValue += _sfClearBuffer.getBinSize();
    }
    if(FieldBits::NoField != (BitMaskFieldMask & whichField))
    {
        returnValue += _sfBitMask.getBinSize();
    }

    return returnValue;
}

void StencilChunkBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (StencilFuncFieldMask & whichField))
    {
        _sfStencilFunc.copyToBin(pMem);
    }
    if(FieldBits::NoField != (StencilValueFieldMask & whichField))
    {
        _sfStencilValue.copyToBin(pMem);
    }
    if(FieldBits::NoField != (StencilMaskFieldMask & whichField))
    {
        _sfStencilMask.copyToBin(pMem);
    }
    if(FieldBits::NoField != (StencilOpFailFieldMask & whichField))
    {
        _sfStencilOpFail.copyToBin(pMem);
    }
    if(FieldBits::NoField != (StencilOpZFailFieldMask & whichField))
    {
        _sfStencilOpZFail.copyToBin(pMem);
    }
    if(FieldBits::NoField != (StencilOpZPassFieldMask & whichField))
    {
        _sfStencilOpZPass.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ClearBufferFieldMask & whichField))
    {
        _sfClearBuffer.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BitMaskFieldMask & whichField))
    {
        _sfBitMask.copyToBin(pMem);
    }
}

void StencilChunkBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (StencilFuncFieldMask & whichField))
    {
        _sfStencilFunc.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (StencilValueFieldMask & whichField))
    {
        _sfStencilValue.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (StencilMaskFieldMask & whichField))
    {
        _sfStencilMask.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (StencilOpFailFieldMask & whichField))
    {
        _sfStencilOpFail.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (StencilOpZFailFieldMask & whichField))
    {
        _sfStencilOpZFail.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (StencilOpZPassFieldMask & whichField))
    {
        _sfStencilOpZPass.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ClearBufferFieldMask & whichField))
    {
        _sfClearBuffer.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BitMaskFieldMask & whichField))
    {
        _sfBitMask.copyFromBin(pMem);
    }
}

//! create a new instance of the class
StencilChunkPtr StencilChunkBase::create(void)
{
    StencilChunkPtr fc;

    if(getClassType().getPrototype() != NullFC)
    {
        fc = dynamic_cast<StencilChunk::ObjPtr>(
            getClassType().getPrototype()-> shallowCopy());
    }

    return fc;
}

//! create an empty new instance of the class, do not copy the prototype
StencilChunkPtr StencilChunkBase::createEmpty(void)
{
    StencilChunkPtr returnValue;

    newPtr<StencilChunk>(returnValue);

    return returnValue;
}

FieldContainerPtr StencilChunkBase::shallowCopy(void) const
{
    StencilChunkPtr returnValue;

    newPtr(returnValue, dynamic_cast<const StencilChunk *>(this));

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

StencilChunkBase::StencilChunkBase(void) :
    Inherited(),
    _sfStencilFunc            (GLenum(GL_NONE)),
    _sfStencilValue           (Int32(0)),
    _sfStencilMask            (UInt32(0x1)),
    _sfStencilOpFail          (GLenum(GL_KEEP)),
    _sfStencilOpZFail         (GLenum(GL_KEEP)),
    _sfStencilOpZPass         (GLenum(GL_KEEP)),
    _sfClearBuffer            (Int32(0)),
    _sfBitMask                (UInt32(0xFFFFFFFF))
{
}

StencilChunkBase::StencilChunkBase(const StencilChunkBase &source) :
    Inherited(source),
    _sfStencilFunc            (source._sfStencilFunc            ),
    _sfStencilValue           (source._sfStencilValue           ),
    _sfStencilMask            (source._sfStencilMask            ),
    _sfStencilOpFail          (source._sfStencilOpFail          ),
    _sfStencilOpZFail         (source._sfStencilOpZFail         ),
    _sfStencilOpZPass         (source._sfStencilOpZPass         ),
    _sfClearBuffer            (source._sfClearBuffer            ),
    _sfBitMask                (source._sfBitMask                )
{
}


/*-------------------------- destructors ----------------------------------*/

StencilChunkBase::~StencilChunkBase(void)
{
}


#ifdef OSG_MT_CPTR_ASPECT
void StencilChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<StencilChunkBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr StencilChunkBase::createAspectCopy(void) const
{
    StencilChunkPtr returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const StencilChunk *>(this));

    return returnValue;
}
#endif

void StencilChunkBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<StencilChunkPtr>::_type("StencilChunkPtr", "StateChunkPtr");
#endif


OSG_END_NAMESPACE
