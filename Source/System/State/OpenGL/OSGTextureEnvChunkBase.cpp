/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextureEnvChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILETEXTUREENVCHUNKINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>


#include <OSGGL.h>                        // EnvMode default header
#include <OSGGL.h>                        // EnvCombineRGB default header
#include <OSGGL.h>                        // EnvCombineAlpha default header
#include <OSGGL.h>                        // EnvSource0RGB default header
#include <OSGGLEXT.h>                     // EnvSource1RGB default header
#include <OSGGLEXT.h>                     // EnvSource2RGB default header
#include <OSGGL.h>                        // EnvSource0Alpha default header
#include <OSGGLEXT.h>                     // EnvSource1Alpha default header
#include <OSGGLEXT.h>                     // EnvSource2Alpha default header
#include <OSGGL.h>                        // EnvOperand0RGB default header
#include <OSGGL.h>                        // EnvOperand1RGB default header
#include <OSGGL.h>                        // EnvOperand2RGB default header
#include <OSGGL.h>                        // EnvOperand0Alpha default header
#include <OSGGL.h>                        // EnvOperand1Alpha default header
#include <OSGGL.h>                        // EnvOperand2Alpha default header
#include <OSGGL.h>                        // PointSprite default header
#include <OSGGL.h>                        // ShaderOperation default header
#include <OSGGL.h>                        // ShaderInput default header
#include <OSGGL.h>                        // ShaderRGBADotProduct default header


#include "OSGTextureEnvChunkBase.h"
#include "OSGTextureEnvChunk.h"

#include "boost/bind.hpp"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::TextureEnvChunk
    \ingroup GrpSystemState
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var GLenum          TextureEnvChunkBase::_sfEnvMode
    Texture environment mode, default GL_REPLACE.
*/

/*! \var Color4r         TextureEnvChunkBase::_sfEnvColor
    Texture environment color default transparent black.
*/

/*! \var GLenum          TextureEnvChunkBase::_sfEnvCombineRGB
    Texture environment rgb combine mode, default GL_MODULATE.
*/

/*! \var GLenum          TextureEnvChunkBase::_sfEnvCombineAlpha
    Texture environment alpha combine mode, default GL_MODULATE.
*/

/*! \var Real32          TextureEnvChunkBase::_sfEnvScaleRGB
    Texture environment combine rgb scale factor, default 1.f.
*/

/*! \var Real32          TextureEnvChunkBase::_sfEnvScaleAlpha
    Texture environment combine alpha scale factor, default 1.f.
*/

/*! \var GLenum          TextureEnvChunkBase::_sfEnvSource0RGB
    Texture environment combine source 0 rgb, default GL_TEXTURE.
*/

/*! \var GLenum          TextureEnvChunkBase::_sfEnvSource1RGB
    Texture environment combine source 1 rgb, default GL_PREVIOUS_EXT.
*/

/*! \var GLenum          TextureEnvChunkBase::_sfEnvSource2RGB
    Texture environment combine source 2 rgb, default GL_CONSTANT_EXT.
*/

/*! \var GLenum          TextureEnvChunkBase::_sfEnvSource0Alpha
    Texture environment combine source 0 alpha, default GL_TEXTURE.
*/

/*! \var GLenum          TextureEnvChunkBase::_sfEnvSource1Alpha
    Texture environment combine source 1 alpha, default GL_PREVIOUS_EXT.
*/

/*! \var GLenum          TextureEnvChunkBase::_sfEnvSource2Alpha
    Texture environment combine source 2 alpha, default GL_CONSTANT_EXT.
*/

/*! \var GLenum          TextureEnvChunkBase::_sfEnvOperand0RGB
    Texture environment combine operand 0 rgb, default GL_SRC_COLOR.
*/

/*! \var GLenum          TextureEnvChunkBase::_sfEnvOperand1RGB
    Texture environment combine operand 1 rgb, default GL_SRC_COLOR.
*/

/*! \var GLenum          TextureEnvChunkBase::_sfEnvOperand2RGB
    Texture environment combine operand 2 rgb, default GL_SRC_ALPHA.
*/

/*! \var GLenum          TextureEnvChunkBase::_sfEnvOperand0Alpha
    Texture environment combine operand 0 alpha, default GL_SRC_ALPHA.
*/

/*! \var GLenum          TextureEnvChunkBase::_sfEnvOperand1Alpha
    Texture environment combine operand 1 alpha, default GL_SRC_ALPHA.
*/

/*! \var GLenum          TextureEnvChunkBase::_sfEnvOperand2Alpha
    Texture environment combine operand 2 alpha, default GL_SRC_ALPHA.
*/

/*! \var bool            TextureEnvChunkBase::_sfPointSprite
    Flag to use this texture for Point Sprites.
*/

/*! \var GLenum          TextureEnvChunkBase::_sfShaderOperation
    Shader operation of this texture unit, default GL_NONE. If unit 0 uses
    GL_NONE, shading is switched off. (GL_SHADER_OPERATION_NV).
*/

/*! \var GLenum          TextureEnvChunkBase::_sfShaderInput
    Input texture unit for this shader's operation. (GL_TEXTURE_SHADER_NV)
*/

/*! \var Real32          TextureEnvChunkBase::_mfShaderOffsetMatrix
    The 2x2 transformation matrix for offset textures. (GL_OFFSET_TEXTURE_MATRIX_NV)
*/

/*! \var Real32          TextureEnvChunkBase::_sfShaderOffsetScale
    The scaling factor for scaled offset textures. (GL_OFFSET_TEXTURE_SCALE_NV)
*/

/*! \var Real32          TextureEnvChunkBase::_sfShaderOffsetBias
    The bias factor for scaled offset textures. (GL_OFFSET_TEXTURE_BIAS_NV)
*/

/*! \var GLenum          TextureEnvChunkBase::_sfShaderRGBADotProduct
    The RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV value.
*/

/*! \var UInt8           TextureEnvChunkBase::_sfShaderCullModes
    The CULL_MODES_NV value, coded into a single byte. The first 4 bits of
    the byte are used to indicate the wnated cull modes, a value of 0 
    signifies GL_LESS, a value of 1 GL_GEQUAL. Bit 0 (mask 1) is used for 
    the S coordinate, bit 1 (mask 2) for T, bit 2 (mask 4) for R and bit 4 
    (mask 8) for Q.
*/

/*! \var Vec3r           TextureEnvChunkBase::_sfShaderConstEye
    The CONST_EYE_NV value, i.e. the constant eye position used by the 
    DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV shader.
*/

/*! \var Real32          TextureEnvChunkBase::_sfLodBias
    Bias of LOD calculation for texture access.
*/


void TextureEnvChunkBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envMode",
        "Texture environment mode, default GL_REPLACE.\n",
        EnvModeFieldId, EnvModeFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureEnvChunkBase::editHandleEnvMode),
        static_cast<FieldGetMethodSig >(&TextureEnvChunkBase::getHandleEnvMode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4r::Description(
        SFColor4r::getClassType(),
        "envColor",
        "Texture environment color default transparent black.\n",
        EnvColorFieldId, EnvColorFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureEnvChunkBase::editHandleEnvColor),
        static_cast<FieldGetMethodSig >(&TextureEnvChunkBase::getHandleEnvColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envCombineRGB",
        "Texture environment rgb combine mode, default GL_MODULATE.\n",
        EnvCombineRGBFieldId, EnvCombineRGBFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureEnvChunkBase::editHandleEnvCombineRGB),
        static_cast<FieldGetMethodSig >(&TextureEnvChunkBase::getHandleEnvCombineRGB));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envCombineAlpha",
        "Texture environment alpha combine mode, default GL_MODULATE.\n",
        EnvCombineAlphaFieldId, EnvCombineAlphaFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureEnvChunkBase::editHandleEnvCombineAlpha),
        static_cast<FieldGetMethodSig >(&TextureEnvChunkBase::getHandleEnvCombineAlpha));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "envScaleRGB",
        "Texture environment combine rgb scale factor, default 1.f.\n",
        EnvScaleRGBFieldId, EnvScaleRGBFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureEnvChunkBase::editHandleEnvScaleRGB),
        static_cast<FieldGetMethodSig >(&TextureEnvChunkBase::getHandleEnvScaleRGB));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "envScaleAlpha",
        "Texture environment combine alpha scale factor, default 1.f.\n",
        EnvScaleAlphaFieldId, EnvScaleAlphaFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureEnvChunkBase::editHandleEnvScaleAlpha),
        static_cast<FieldGetMethodSig >(&TextureEnvChunkBase::getHandleEnvScaleAlpha));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envSource0RGB",
        "Texture environment combine source 0 rgb, default GL_TEXTURE.\n",
        EnvSource0RGBFieldId, EnvSource0RGBFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureEnvChunkBase::editHandleEnvSource0RGB),
        static_cast<FieldGetMethodSig >(&TextureEnvChunkBase::getHandleEnvSource0RGB));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envSource1RGB",
        "Texture environment combine source 1 rgb, default GL_PREVIOUS_EXT.\n",
        EnvSource1RGBFieldId, EnvSource1RGBFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureEnvChunkBase::editHandleEnvSource1RGB),
        static_cast<FieldGetMethodSig >(&TextureEnvChunkBase::getHandleEnvSource1RGB));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envSource2RGB",
        "Texture environment combine source 2 rgb, default GL_CONSTANT_EXT.\n",
        EnvSource2RGBFieldId, EnvSource2RGBFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureEnvChunkBase::editHandleEnvSource2RGB),
        static_cast<FieldGetMethodSig >(&TextureEnvChunkBase::getHandleEnvSource2RGB));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envSource0Alpha",
        "Texture environment combine source 0 alpha, default GL_TEXTURE.\n",
        EnvSource0AlphaFieldId, EnvSource0AlphaFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureEnvChunkBase::editHandleEnvSource0Alpha),
        static_cast<FieldGetMethodSig >(&TextureEnvChunkBase::getHandleEnvSource0Alpha));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envSource1Alpha",
        "Texture environment combine source 1 alpha, default GL_PREVIOUS_EXT.\n",
        EnvSource1AlphaFieldId, EnvSource1AlphaFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureEnvChunkBase::editHandleEnvSource1Alpha),
        static_cast<FieldGetMethodSig >(&TextureEnvChunkBase::getHandleEnvSource1Alpha));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envSource2Alpha",
        "Texture environment combine source 2 alpha, default GL_CONSTANT_EXT.\n",
        EnvSource2AlphaFieldId, EnvSource2AlphaFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureEnvChunkBase::editHandleEnvSource2Alpha),
        static_cast<FieldGetMethodSig >(&TextureEnvChunkBase::getHandleEnvSource2Alpha));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envOperand0RGB",
        "Texture environment combine operand 0 rgb, default GL_SRC_COLOR.\n",
        EnvOperand0RGBFieldId, EnvOperand0RGBFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureEnvChunkBase::editHandleEnvOperand0RGB),
        static_cast<FieldGetMethodSig >(&TextureEnvChunkBase::getHandleEnvOperand0RGB));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envOperand1RGB",
        "Texture environment combine operand 1 rgb, default GL_SRC_COLOR.\n",
        EnvOperand1RGBFieldId, EnvOperand1RGBFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureEnvChunkBase::editHandleEnvOperand1RGB),
        static_cast<FieldGetMethodSig >(&TextureEnvChunkBase::getHandleEnvOperand1RGB));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envOperand2RGB",
        "Texture environment combine operand 2 rgb, default GL_SRC_ALPHA.\n",
        EnvOperand2RGBFieldId, EnvOperand2RGBFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureEnvChunkBase::editHandleEnvOperand2RGB),
        static_cast<FieldGetMethodSig >(&TextureEnvChunkBase::getHandleEnvOperand2RGB));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envOperand0Alpha",
        "Texture environment combine operand 0 alpha, default GL_SRC_ALPHA.\n",
        EnvOperand0AlphaFieldId, EnvOperand0AlphaFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureEnvChunkBase::editHandleEnvOperand0Alpha),
        static_cast<FieldGetMethodSig >(&TextureEnvChunkBase::getHandleEnvOperand0Alpha));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envOperand1Alpha",
        "Texture environment combine operand 1 alpha, default GL_SRC_ALPHA.\n",
        EnvOperand1AlphaFieldId, EnvOperand1AlphaFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureEnvChunkBase::editHandleEnvOperand1Alpha),
        static_cast<FieldGetMethodSig >(&TextureEnvChunkBase::getHandleEnvOperand1Alpha));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envOperand2Alpha",
        "Texture environment combine operand 2 alpha, default GL_SRC_ALPHA.\n",
        EnvOperand2AlphaFieldId, EnvOperand2AlphaFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureEnvChunkBase::editHandleEnvOperand2Alpha),
        static_cast<FieldGetMethodSig >(&TextureEnvChunkBase::getHandleEnvOperand2Alpha));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "pointSprite",
        "Flag to use this texture for Point Sprites.\n",
        PointSpriteFieldId, PointSpriteFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureEnvChunkBase::editHandlePointSprite),
        static_cast<FieldGetMethodSig >(&TextureEnvChunkBase::getHandlePointSprite));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "shaderOperation",
        "Shader operation of this texture unit, default GL_NONE. If unit 0 uses\n"
        "GL_NONE, shading is switched off. (GL_SHADER_OPERATION_NV).\n",
        ShaderOperationFieldId, ShaderOperationFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureEnvChunkBase::editHandleShaderOperation),
        static_cast<FieldGetMethodSig >(&TextureEnvChunkBase::getHandleShaderOperation));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "shaderInput",
        "Input texture unit for this shader's operation. (GL_TEXTURE_SHADER_NV)\n",
        ShaderInputFieldId, ShaderInputFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureEnvChunkBase::editHandleShaderInput),
        static_cast<FieldGetMethodSig >(&TextureEnvChunkBase::getHandleShaderInput));

    oType.addInitialDesc(pDesc);

    pDesc = new MFReal32::Description(
        MFReal32::getClassType(),
        "shaderOffsetMatrix",
        "The 2x2 transformation matrix for offset textures. (GL_OFFSET_TEXTURE_MATRIX_NV)\n",
        ShaderOffsetMatrixFieldId, ShaderOffsetMatrixFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureEnvChunkBase::editHandleShaderOffsetMatrix),
        static_cast<FieldGetMethodSig >(&TextureEnvChunkBase::getHandleShaderOffsetMatrix));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "shaderOffsetScale",
        "The scaling factor for scaled offset textures. (GL_OFFSET_TEXTURE_SCALE_NV)\n",
        ShaderOffsetScaleFieldId, ShaderOffsetScaleFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureEnvChunkBase::editHandleShaderOffsetScale),
        static_cast<FieldGetMethodSig >(&TextureEnvChunkBase::getHandleShaderOffsetScale));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "shaderOffsetBias",
        "The bias factor for scaled offset textures. (GL_OFFSET_TEXTURE_BIAS_NV)\n",
        ShaderOffsetBiasFieldId, ShaderOffsetBiasFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureEnvChunkBase::editHandleShaderOffsetBias),
        static_cast<FieldGetMethodSig >(&TextureEnvChunkBase::getHandleShaderOffsetBias));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "shaderRGBADotProduct",
        "The RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV value.\n",
        ShaderRGBADotProductFieldId, ShaderRGBADotProductFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureEnvChunkBase::editHandleShaderRGBADotProduct),
        static_cast<FieldGetMethodSig >(&TextureEnvChunkBase::getHandleShaderRGBADotProduct));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt8::Description(
        SFUInt8::getClassType(),
        "shaderCullModes",
        "The CULL_MODES_NV value, coded into a single byte. The first 4 bits of\n"
        "the byte are used to indicate the wnated cull modes, a value of 0 \n"
        "signifies GL_LESS, a value of 1 GL_GEQUAL. Bit 0 (mask 1) is used for \n"
        "the S coordinate, bit 1 (mask 2) for T, bit 2 (mask 4) for R and bit 4 \n"
        "(mask 8) for Q.\n",
        ShaderCullModesFieldId, ShaderCullModesFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureEnvChunkBase::editHandleShaderCullModes),
        static_cast<FieldGetMethodSig >(&TextureEnvChunkBase::getHandleShaderCullModes));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3r::Description(
        SFVec3r::getClassType(),
        "shaderConstEye",
        "The CONST_EYE_NV value, i.e. the constant eye position used by the \n"
        "DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV shader.\n",
        ShaderConstEyeFieldId, ShaderConstEyeFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureEnvChunkBase::editHandleShaderConstEye),
        static_cast<FieldGetMethodSig >(&TextureEnvChunkBase::getHandleShaderConstEye));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "lodBias",
        "Bias of LOD calculation for texture access.\n",
        LodBiasFieldId, LodBiasFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureEnvChunkBase::editHandleLodBias),
        static_cast<FieldGetMethodSig >(&TextureEnvChunkBase::getHandleLodBias));

    oType.addInitialDesc(pDesc);
}


TextureEnvChunkBase::TypeObject TextureEnvChunkBase::_type(
    TextureEnvChunkBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &TextureEnvChunkBase::createEmptyLocal,
    TextureEnvChunk::initMethod,
    TextureEnvChunk::exitMethod,
    (InitalInsertDescFunc) &TextureEnvChunkBase::classDescInserter,
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"TextureEnvChunk\"\n"
    "\tparent=\"StateChunk\"\n"
    "\tlibrary=\"State\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"false\"\n"
    ">\n"
    "\\ingroup GrpSystemState\n"
    "\t<Field\n"
    "\t\tname=\"envMode\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_REPLACE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "                potential_values=\"GL_MODULATE, GL_DECAL, GL_BLEND, GL_REPLACE, GL_ADD, GL_COMBINE\"\n"
    "\t>\n"
    "        Texture environment mode, default GL_REPLACE.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envColor\"\n"
    "\t\ttype=\"Color4r\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.f,0.f,0.f,0.f\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment color default transparent black.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envCombineRGB\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_MODULATE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "                potential_values=\"GL_REPLACE, GL_MODULATE, GL_ADD, GL_ADD_SIGNED, GL_INTERPOLATE, GL_SUBTRACT, GL_DOT3_RGB, GL_DOT3_RGBA\"\n"
    "\t>\n"
    "        Texture environment rgb combine mode, default GL_MODULATE.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envCombineAlpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_MODULATE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "                potential_values=\"GL_REPLACE, GL_MODULATE, GL_ADD, GL_ADD_SIGNED, GL_INTERPOLATE, GL_SUBTRACT\"\n"
    "\t>\n"
    "        Texture environment alpha combine mode, default GL_MODULATE.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envScaleRGB\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1.0f\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine rgb scale factor, default 1.f.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envScaleAlpha\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1.0f\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine alpha scale factor, default 1.f.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envSource0RGB\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_TEXTURE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine source 0 rgb, default GL_TEXTURE.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envSource1RGB\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_PREVIOUS_EXT\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGLEXT.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine source 1 rgb, default GL_PREVIOUS_EXT.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envSource2RGB\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_CONSTANT_EXT\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGLEXT.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine source 2 rgb, default GL_CONSTANT_EXT.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envSource0Alpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_TEXTURE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine source 0 alpha, default GL_TEXTURE.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envSource1Alpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_PREVIOUS_EXT\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGLEXT.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine source 1 alpha, default GL_PREVIOUS_EXT.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envSource2Alpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_CONSTANT_EXT\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGLEXT.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine source 2 alpha, default GL_CONSTANT_EXT.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envOperand0RGB\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_SRC_COLOR\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine operand 0 rgb, default GL_SRC_COLOR.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envOperand1RGB\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_SRC_COLOR\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine operand 1 rgb, default GL_SRC_COLOR.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envOperand2RGB\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_SRC_ALPHA\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine operand 2 rgb, default GL_SRC_ALPHA.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envOperand0Alpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_SRC_ALPHA\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine operand 0 alpha, default GL_SRC_ALPHA.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envOperand1Alpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_SRC_ALPHA\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine operand 1 alpha, default GL_SRC_ALPHA.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envOperand2Alpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_SRC_ALPHA\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine operand 2 alpha, default GL_SRC_ALPHA.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"pointSprite\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"GL_FALSE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t>\n"
    "        Flag to use this texture for Point Sprites.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shaderOperation\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"GL_NONE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t>\n"
    "        Shader operation of this texture unit, default GL_NONE. If unit 0 uses\n"
    "        GL_NONE, shading is switched off. (GL_SHADER_OPERATION_NV).\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shaderInput\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"GL_NONE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t>\n"
    "        Input texture unit for this shader's operation. (GL_TEXTURE_SHADER_NV)\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shaderOffsetMatrix\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        The 2x2 transformation matrix for offset textures. (GL_OFFSET_TEXTURE_MATRIX_NV)\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shaderOffsetScale\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1.f\"\n"
    "\t>\n"
    "        The scaling factor for scaled offset textures. (GL_OFFSET_TEXTURE_SCALE_NV)\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shaderOffsetBias\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.f\"\n"
    "\t>\n"
    "        The bias factor for scaled offset textures. (GL_OFFSET_TEXTURE_BIAS_NV)\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shaderRGBADotProduct\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"GL_NONE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t>\n"
    "        The RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV value.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shaderCullModes\"\n"
    "\t\ttype=\"UInt8\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t>\n"
    "        The CULL_MODES_NV value, coded into a single byte. The first 4 bits of\n"
    "        the byte are used to indicate the wnated cull modes, a value of 0 \n"
    "        signifies GL_LESS, a value of 1 GL_GEQUAL. Bit 0 (mask 1) is used for \n"
    "        the S coordinate, bit 1 (mask 2) for T, bit 2 (mask 4) for R and bit 4 \n"
    "        (mask 8) for Q.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shaderConstEye\"\n"
    "\t\ttype=\"Vec3r\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        The CONST_EYE_NV value, i.e. the constant eye position used by the \n"
    "        DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV shader.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"lodBias\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.f\"\n"
    "\t\tdefaultHeader=\"\"\n"
    "\t>\n"
    "        Bias of LOD calculation for texture access.\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "\\ingroup GrpSystemState\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &TextureEnvChunkBase::getType(void)
{
    return _type;
}

const FieldContainerType &TextureEnvChunkBase::getType(void) const
{
    return _type;
}

UInt32 TextureEnvChunkBase::getContainerSize(void) const
{
    return sizeof(TextureEnvChunk);
}

/*------------------------- decorator get ------------------------------*/


SFGLenum *TextureEnvChunkBase::editSFEnvMode(void)
{
    editSField(EnvModeFieldMask);

    return &_sfEnvMode;
}

const SFGLenum *TextureEnvChunkBase::getSFEnvMode(void) const
{
    return &_sfEnvMode;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureEnvChunkBase::getSFEnvMode        (void)
{
    return this->editSFEnvMode        ();
}
#endif

SFColor4r *TextureEnvChunkBase::editSFEnvColor(void)
{
    editSField(EnvColorFieldMask);

    return &_sfEnvColor;
}

const SFColor4r *TextureEnvChunkBase::getSFEnvColor(void) const
{
    return &_sfEnvColor;
}

#ifdef OSG_1_GET_COMPAT
SFColor4r           *TextureEnvChunkBase::getSFEnvColor       (void)
{
    return this->editSFEnvColor       ();
}
#endif

SFGLenum *TextureEnvChunkBase::editSFEnvCombineRGB(void)
{
    editSField(EnvCombineRGBFieldMask);

    return &_sfEnvCombineRGB;
}

const SFGLenum *TextureEnvChunkBase::getSFEnvCombineRGB(void) const
{
    return &_sfEnvCombineRGB;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureEnvChunkBase::getSFEnvCombineRGB  (void)
{
    return this->editSFEnvCombineRGB  ();
}
#endif

SFGLenum *TextureEnvChunkBase::editSFEnvCombineAlpha(void)
{
    editSField(EnvCombineAlphaFieldMask);

    return &_sfEnvCombineAlpha;
}

const SFGLenum *TextureEnvChunkBase::getSFEnvCombineAlpha(void) const
{
    return &_sfEnvCombineAlpha;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureEnvChunkBase::getSFEnvCombineAlpha(void)
{
    return this->editSFEnvCombineAlpha();
}
#endif

SFReal32 *TextureEnvChunkBase::editSFEnvScaleRGB(void)
{
    editSField(EnvScaleRGBFieldMask);

    return &_sfEnvScaleRGB;
}

const SFReal32 *TextureEnvChunkBase::getSFEnvScaleRGB(void) const
{
    return &_sfEnvScaleRGB;
}

#ifdef OSG_1_GET_COMPAT
SFReal32            *TextureEnvChunkBase::getSFEnvScaleRGB    (void)
{
    return this->editSFEnvScaleRGB    ();
}
#endif

SFReal32 *TextureEnvChunkBase::editSFEnvScaleAlpha(void)
{
    editSField(EnvScaleAlphaFieldMask);

    return &_sfEnvScaleAlpha;
}

const SFReal32 *TextureEnvChunkBase::getSFEnvScaleAlpha(void) const
{
    return &_sfEnvScaleAlpha;
}

#ifdef OSG_1_GET_COMPAT
SFReal32            *TextureEnvChunkBase::getSFEnvScaleAlpha  (void)
{
    return this->editSFEnvScaleAlpha  ();
}
#endif

SFGLenum *TextureEnvChunkBase::editSFEnvSource0RGB(void)
{
    editSField(EnvSource0RGBFieldMask);

    return &_sfEnvSource0RGB;
}

const SFGLenum *TextureEnvChunkBase::getSFEnvSource0RGB(void) const
{
    return &_sfEnvSource0RGB;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureEnvChunkBase::getSFEnvSource0RGB  (void)
{
    return this->editSFEnvSource0RGB  ();
}
#endif

SFGLenum *TextureEnvChunkBase::editSFEnvSource1RGB(void)
{
    editSField(EnvSource1RGBFieldMask);

    return &_sfEnvSource1RGB;
}

const SFGLenum *TextureEnvChunkBase::getSFEnvSource1RGB(void) const
{
    return &_sfEnvSource1RGB;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureEnvChunkBase::getSFEnvSource1RGB  (void)
{
    return this->editSFEnvSource1RGB  ();
}
#endif

SFGLenum *TextureEnvChunkBase::editSFEnvSource2RGB(void)
{
    editSField(EnvSource2RGBFieldMask);

    return &_sfEnvSource2RGB;
}

const SFGLenum *TextureEnvChunkBase::getSFEnvSource2RGB(void) const
{
    return &_sfEnvSource2RGB;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureEnvChunkBase::getSFEnvSource2RGB  (void)
{
    return this->editSFEnvSource2RGB  ();
}
#endif

SFGLenum *TextureEnvChunkBase::editSFEnvSource0Alpha(void)
{
    editSField(EnvSource0AlphaFieldMask);

    return &_sfEnvSource0Alpha;
}

const SFGLenum *TextureEnvChunkBase::getSFEnvSource0Alpha(void) const
{
    return &_sfEnvSource0Alpha;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureEnvChunkBase::getSFEnvSource0Alpha(void)
{
    return this->editSFEnvSource0Alpha();
}
#endif

SFGLenum *TextureEnvChunkBase::editSFEnvSource1Alpha(void)
{
    editSField(EnvSource1AlphaFieldMask);

    return &_sfEnvSource1Alpha;
}

const SFGLenum *TextureEnvChunkBase::getSFEnvSource1Alpha(void) const
{
    return &_sfEnvSource1Alpha;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureEnvChunkBase::getSFEnvSource1Alpha(void)
{
    return this->editSFEnvSource1Alpha();
}
#endif

SFGLenum *TextureEnvChunkBase::editSFEnvSource2Alpha(void)
{
    editSField(EnvSource2AlphaFieldMask);

    return &_sfEnvSource2Alpha;
}

const SFGLenum *TextureEnvChunkBase::getSFEnvSource2Alpha(void) const
{
    return &_sfEnvSource2Alpha;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureEnvChunkBase::getSFEnvSource2Alpha(void)
{
    return this->editSFEnvSource2Alpha();
}
#endif

SFGLenum *TextureEnvChunkBase::editSFEnvOperand0RGB(void)
{
    editSField(EnvOperand0RGBFieldMask);

    return &_sfEnvOperand0RGB;
}

const SFGLenum *TextureEnvChunkBase::getSFEnvOperand0RGB(void) const
{
    return &_sfEnvOperand0RGB;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureEnvChunkBase::getSFEnvOperand0RGB (void)
{
    return this->editSFEnvOperand0RGB ();
}
#endif

SFGLenum *TextureEnvChunkBase::editSFEnvOperand1RGB(void)
{
    editSField(EnvOperand1RGBFieldMask);

    return &_sfEnvOperand1RGB;
}

const SFGLenum *TextureEnvChunkBase::getSFEnvOperand1RGB(void) const
{
    return &_sfEnvOperand1RGB;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureEnvChunkBase::getSFEnvOperand1RGB (void)
{
    return this->editSFEnvOperand1RGB ();
}
#endif

SFGLenum *TextureEnvChunkBase::editSFEnvOperand2RGB(void)
{
    editSField(EnvOperand2RGBFieldMask);

    return &_sfEnvOperand2RGB;
}

const SFGLenum *TextureEnvChunkBase::getSFEnvOperand2RGB(void) const
{
    return &_sfEnvOperand2RGB;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureEnvChunkBase::getSFEnvOperand2RGB (void)
{
    return this->editSFEnvOperand2RGB ();
}
#endif

SFGLenum *TextureEnvChunkBase::editSFEnvOperand0Alpha(void)
{
    editSField(EnvOperand0AlphaFieldMask);

    return &_sfEnvOperand0Alpha;
}

const SFGLenum *TextureEnvChunkBase::getSFEnvOperand0Alpha(void) const
{
    return &_sfEnvOperand0Alpha;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureEnvChunkBase::getSFEnvOperand0Alpha(void)
{
    return this->editSFEnvOperand0Alpha();
}
#endif

SFGLenum *TextureEnvChunkBase::editSFEnvOperand1Alpha(void)
{
    editSField(EnvOperand1AlphaFieldMask);

    return &_sfEnvOperand1Alpha;
}

const SFGLenum *TextureEnvChunkBase::getSFEnvOperand1Alpha(void) const
{
    return &_sfEnvOperand1Alpha;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureEnvChunkBase::getSFEnvOperand1Alpha(void)
{
    return this->editSFEnvOperand1Alpha();
}
#endif

SFGLenum *TextureEnvChunkBase::editSFEnvOperand2Alpha(void)
{
    editSField(EnvOperand2AlphaFieldMask);

    return &_sfEnvOperand2Alpha;
}

const SFGLenum *TextureEnvChunkBase::getSFEnvOperand2Alpha(void) const
{
    return &_sfEnvOperand2Alpha;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureEnvChunkBase::getSFEnvOperand2Alpha(void)
{
    return this->editSFEnvOperand2Alpha();
}
#endif

SFBool *TextureEnvChunkBase::editSFPointSprite(void)
{
    editSField(PointSpriteFieldMask);

    return &_sfPointSprite;
}

const SFBool *TextureEnvChunkBase::getSFPointSprite(void) const
{
    return &_sfPointSprite;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *TextureEnvChunkBase::getSFPointSprite    (void)
{
    return this->editSFPointSprite    ();
}
#endif

SFGLenum *TextureEnvChunkBase::editSFShaderOperation(void)
{
    editSField(ShaderOperationFieldMask);

    return &_sfShaderOperation;
}

const SFGLenum *TextureEnvChunkBase::getSFShaderOperation(void) const
{
    return &_sfShaderOperation;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureEnvChunkBase::getSFShaderOperation(void)
{
    return this->editSFShaderOperation();
}
#endif

SFGLenum *TextureEnvChunkBase::editSFShaderInput(void)
{
    editSField(ShaderInputFieldMask);

    return &_sfShaderInput;
}

const SFGLenum *TextureEnvChunkBase::getSFShaderInput(void) const
{
    return &_sfShaderInput;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureEnvChunkBase::getSFShaderInput    (void)
{
    return this->editSFShaderInput    ();
}
#endif

MFReal32 *TextureEnvChunkBase::editMFShaderOffsetMatrix(void)
{
    editMField(ShaderOffsetMatrixFieldMask, _mfShaderOffsetMatrix);

    return &_mfShaderOffsetMatrix;
}

const MFReal32 *TextureEnvChunkBase::getMFShaderOffsetMatrix(void) const
{
    return &_mfShaderOffsetMatrix;
}

#ifdef OSG_1_GET_COMPAT
MFReal32            *TextureEnvChunkBase::getMFShaderOffsetMatrix(void)
{
    return this->editMFShaderOffsetMatrix();
}
#endif

SFReal32 *TextureEnvChunkBase::editSFShaderOffsetScale(void)
{
    editSField(ShaderOffsetScaleFieldMask);

    return &_sfShaderOffsetScale;
}

const SFReal32 *TextureEnvChunkBase::getSFShaderOffsetScale(void) const
{
    return &_sfShaderOffsetScale;
}

#ifdef OSG_1_GET_COMPAT
SFReal32            *TextureEnvChunkBase::getSFShaderOffsetScale(void)
{
    return this->editSFShaderOffsetScale();
}
#endif

SFReal32 *TextureEnvChunkBase::editSFShaderOffsetBias(void)
{
    editSField(ShaderOffsetBiasFieldMask);

    return &_sfShaderOffsetBias;
}

const SFReal32 *TextureEnvChunkBase::getSFShaderOffsetBias(void) const
{
    return &_sfShaderOffsetBias;
}

#ifdef OSG_1_GET_COMPAT
SFReal32            *TextureEnvChunkBase::getSFShaderOffsetBias(void)
{
    return this->editSFShaderOffsetBias();
}
#endif

SFGLenum *TextureEnvChunkBase::editSFShaderRGBADotProduct(void)
{
    editSField(ShaderRGBADotProductFieldMask);

    return &_sfShaderRGBADotProduct;
}

const SFGLenum *TextureEnvChunkBase::getSFShaderRGBADotProduct(void) const
{
    return &_sfShaderRGBADotProduct;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *TextureEnvChunkBase::getSFShaderRGBADotProduct(void)
{
    return this->editSFShaderRGBADotProduct();
}
#endif

SFUInt8 *TextureEnvChunkBase::editSFShaderCullModes(void)
{
    editSField(ShaderCullModesFieldMask);

    return &_sfShaderCullModes;
}

const SFUInt8 *TextureEnvChunkBase::getSFShaderCullModes(void) const
{
    return &_sfShaderCullModes;
}

#ifdef OSG_1_GET_COMPAT
SFUInt8             *TextureEnvChunkBase::getSFShaderCullModes(void)
{
    return this->editSFShaderCullModes();
}
#endif

SFVec3r *TextureEnvChunkBase::editSFShaderConstEye(void)
{
    editSField(ShaderConstEyeFieldMask);

    return &_sfShaderConstEye;
}

const SFVec3r *TextureEnvChunkBase::getSFShaderConstEye(void) const
{
    return &_sfShaderConstEye;
}

#ifdef OSG_1_GET_COMPAT
SFVec3r             *TextureEnvChunkBase::getSFShaderConstEye (void)
{
    return this->editSFShaderConstEye ();
}
#endif

SFReal32 *TextureEnvChunkBase::editSFLodBias(void)
{
    editSField(LodBiasFieldMask);

    return &_sfLodBias;
}

const SFReal32 *TextureEnvChunkBase::getSFLodBias(void) const
{
    return &_sfLodBias;
}

#ifdef OSG_1_GET_COMPAT
SFReal32            *TextureEnvChunkBase::getSFLodBias        (void)
{
    return this->editSFLodBias        ();
}
#endif



/*********************************** Non-ptr code ********************************/
void TextureEnvChunkBase::pushToShaderOffsetMatrix(const Real32& value)
{
    editMField(ShaderOffsetMatrixFieldMask, _mfShaderOffsetMatrix);
    _mfShaderOffsetMatrix.push_back(value);
}

void TextureEnvChunkBase::insertIntoShaderOffsetMatrix(UInt32                uiIndex,
                                                   const Real32& value   )
{
    editMField(ShaderOffsetMatrixFieldMask, _mfShaderOffsetMatrix);

    MFReal32::iterator fieldIt = _mfShaderOffsetMatrix.begin();

    fieldIt += uiIndex;

    _mfShaderOffsetMatrix.insert(fieldIt, value);
}

void TextureEnvChunkBase::replaceInShaderOffsetMatrix(UInt32                uiIndex,
                                                       const Real32& value   )
{
    if(uiIndex >= _mfShaderOffsetMatrix.size())
        return;

    editMField(ShaderOffsetMatrixFieldMask, _mfShaderOffsetMatrix);

    _mfShaderOffsetMatrix[uiIndex] = value;
}

void TextureEnvChunkBase::replaceInShaderOffsetMatrix(const Real32& pOldElem,
                                                        const Real32& pNewElem)
{
    Int32  elemIdx = _mfShaderOffsetMatrix.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(ShaderOffsetMatrixFieldMask, _mfShaderOffsetMatrix);

        MFReal32::iterator fieldIt = _mfShaderOffsetMatrix.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void TextureEnvChunkBase::removeFromShaderOffsetMatrix(UInt32 uiIndex)
{
    if(uiIndex < _mfShaderOffsetMatrix.size())
    {
        editMField(ShaderOffsetMatrixFieldMask, _mfShaderOffsetMatrix);

        MFReal32::iterator fieldIt = _mfShaderOffsetMatrix.begin();

        fieldIt += uiIndex;
        _mfShaderOffsetMatrix.erase(fieldIt);
    }
}

void TextureEnvChunkBase::removeFromShaderOffsetMatrix(const Real32& value)
{
    Int32 iElemIdx = _mfShaderOffsetMatrix.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ShaderOffsetMatrixFieldMask, _mfShaderOffsetMatrix);

        MFReal32::iterator fieldIt = _mfShaderOffsetMatrix.begin();

        fieldIt += iElemIdx;

        _mfShaderOffsetMatrix.erase(fieldIt);
    }
}

void TextureEnvChunkBase::clearShaderOffsetMatrix(void)
{
    editMField(ShaderOffsetMatrixFieldMask, _mfShaderOffsetMatrix);

    _mfShaderOffsetMatrix.clear();
}


/*------------------------------ access -----------------------------------*/

UInt32 TextureEnvChunkBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (EnvModeFieldMask & whichField))
    {
        returnValue += _sfEnvMode.getBinSize();
    }
    if(FieldBits::NoField != (EnvColorFieldMask & whichField))
    {
        returnValue += _sfEnvColor.getBinSize();
    }
    if(FieldBits::NoField != (EnvCombineRGBFieldMask & whichField))
    {
        returnValue += _sfEnvCombineRGB.getBinSize();
    }
    if(FieldBits::NoField != (EnvCombineAlphaFieldMask & whichField))
    {
        returnValue += _sfEnvCombineAlpha.getBinSize();
    }
    if(FieldBits::NoField != (EnvScaleRGBFieldMask & whichField))
    {
        returnValue += _sfEnvScaleRGB.getBinSize();
    }
    if(FieldBits::NoField != (EnvScaleAlphaFieldMask & whichField))
    {
        returnValue += _sfEnvScaleAlpha.getBinSize();
    }
    if(FieldBits::NoField != (EnvSource0RGBFieldMask & whichField))
    {
        returnValue += _sfEnvSource0RGB.getBinSize();
    }
    if(FieldBits::NoField != (EnvSource1RGBFieldMask & whichField))
    {
        returnValue += _sfEnvSource1RGB.getBinSize();
    }
    if(FieldBits::NoField != (EnvSource2RGBFieldMask & whichField))
    {
        returnValue += _sfEnvSource2RGB.getBinSize();
    }
    if(FieldBits::NoField != (EnvSource0AlphaFieldMask & whichField))
    {
        returnValue += _sfEnvSource0Alpha.getBinSize();
    }
    if(FieldBits::NoField != (EnvSource1AlphaFieldMask & whichField))
    {
        returnValue += _sfEnvSource1Alpha.getBinSize();
    }
    if(FieldBits::NoField != (EnvSource2AlphaFieldMask & whichField))
    {
        returnValue += _sfEnvSource2Alpha.getBinSize();
    }
    if(FieldBits::NoField != (EnvOperand0RGBFieldMask & whichField))
    {
        returnValue += _sfEnvOperand0RGB.getBinSize();
    }
    if(FieldBits::NoField != (EnvOperand1RGBFieldMask & whichField))
    {
        returnValue += _sfEnvOperand1RGB.getBinSize();
    }
    if(FieldBits::NoField != (EnvOperand2RGBFieldMask & whichField))
    {
        returnValue += _sfEnvOperand2RGB.getBinSize();
    }
    if(FieldBits::NoField != (EnvOperand0AlphaFieldMask & whichField))
    {
        returnValue += _sfEnvOperand0Alpha.getBinSize();
    }
    if(FieldBits::NoField != (EnvOperand1AlphaFieldMask & whichField))
    {
        returnValue += _sfEnvOperand1Alpha.getBinSize();
    }
    if(FieldBits::NoField != (EnvOperand2AlphaFieldMask & whichField))
    {
        returnValue += _sfEnvOperand2Alpha.getBinSize();
    }
    if(FieldBits::NoField != (PointSpriteFieldMask & whichField))
    {
        returnValue += _sfPointSprite.getBinSize();
    }
    if(FieldBits::NoField != (ShaderOperationFieldMask & whichField))
    {
        returnValue += _sfShaderOperation.getBinSize();
    }
    if(FieldBits::NoField != (ShaderInputFieldMask & whichField))
    {
        returnValue += _sfShaderInput.getBinSize();
    }
    if(FieldBits::NoField != (ShaderOffsetMatrixFieldMask & whichField))
    {
        returnValue += _mfShaderOffsetMatrix.getBinSize();
    }
    if(FieldBits::NoField != (ShaderOffsetScaleFieldMask & whichField))
    {
        returnValue += _sfShaderOffsetScale.getBinSize();
    }
    if(FieldBits::NoField != (ShaderOffsetBiasFieldMask & whichField))
    {
        returnValue += _sfShaderOffsetBias.getBinSize();
    }
    if(FieldBits::NoField != (ShaderRGBADotProductFieldMask & whichField))
    {
        returnValue += _sfShaderRGBADotProduct.getBinSize();
    }
    if(FieldBits::NoField != (ShaderCullModesFieldMask & whichField))
    {
        returnValue += _sfShaderCullModes.getBinSize();
    }
    if(FieldBits::NoField != (ShaderConstEyeFieldMask & whichField))
    {
        returnValue += _sfShaderConstEye.getBinSize();
    }
    if(FieldBits::NoField != (LodBiasFieldMask & whichField))
    {
        returnValue += _sfLodBias.getBinSize();
    }

    return returnValue;
}

void TextureEnvChunkBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (EnvModeFieldMask & whichField))
    {
        _sfEnvMode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvColorFieldMask & whichField))
    {
        _sfEnvColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvCombineRGBFieldMask & whichField))
    {
        _sfEnvCombineRGB.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvCombineAlphaFieldMask & whichField))
    {
        _sfEnvCombineAlpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvScaleRGBFieldMask & whichField))
    {
        _sfEnvScaleRGB.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvScaleAlphaFieldMask & whichField))
    {
        _sfEnvScaleAlpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource0RGBFieldMask & whichField))
    {
        _sfEnvSource0RGB.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource1RGBFieldMask & whichField))
    {
        _sfEnvSource1RGB.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource2RGBFieldMask & whichField))
    {
        _sfEnvSource2RGB.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource0AlphaFieldMask & whichField))
    {
        _sfEnvSource0Alpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource1AlphaFieldMask & whichField))
    {
        _sfEnvSource1Alpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource2AlphaFieldMask & whichField))
    {
        _sfEnvSource2Alpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand0RGBFieldMask & whichField))
    {
        _sfEnvOperand0RGB.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand1RGBFieldMask & whichField))
    {
        _sfEnvOperand1RGB.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand2RGBFieldMask & whichField))
    {
        _sfEnvOperand2RGB.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand0AlphaFieldMask & whichField))
    {
        _sfEnvOperand0Alpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand1AlphaFieldMask & whichField))
    {
        _sfEnvOperand1Alpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand2AlphaFieldMask & whichField))
    {
        _sfEnvOperand2Alpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PointSpriteFieldMask & whichField))
    {
        _sfPointSprite.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShaderOperationFieldMask & whichField))
    {
        _sfShaderOperation.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShaderInputFieldMask & whichField))
    {
        _sfShaderInput.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShaderOffsetMatrixFieldMask & whichField))
    {
        _mfShaderOffsetMatrix.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShaderOffsetScaleFieldMask & whichField))
    {
        _sfShaderOffsetScale.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShaderOffsetBiasFieldMask & whichField))
    {
        _sfShaderOffsetBias.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShaderRGBADotProductFieldMask & whichField))
    {
        _sfShaderRGBADotProduct.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShaderCullModesFieldMask & whichField))
    {
        _sfShaderCullModes.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShaderConstEyeFieldMask & whichField))
    {
        _sfShaderConstEye.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LodBiasFieldMask & whichField))
    {
        _sfLodBias.copyToBin(pMem);
    }
}

void TextureEnvChunkBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (EnvModeFieldMask & whichField))
    {
        _sfEnvMode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvColorFieldMask & whichField))
    {
        _sfEnvColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvCombineRGBFieldMask & whichField))
    {
        _sfEnvCombineRGB.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvCombineAlphaFieldMask & whichField))
    {
        _sfEnvCombineAlpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvScaleRGBFieldMask & whichField))
    {
        _sfEnvScaleRGB.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvScaleAlphaFieldMask & whichField))
    {
        _sfEnvScaleAlpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource0RGBFieldMask & whichField))
    {
        _sfEnvSource0RGB.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource1RGBFieldMask & whichField))
    {
        _sfEnvSource1RGB.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource2RGBFieldMask & whichField))
    {
        _sfEnvSource2RGB.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource0AlphaFieldMask & whichField))
    {
        _sfEnvSource0Alpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource1AlphaFieldMask & whichField))
    {
        _sfEnvSource1Alpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource2AlphaFieldMask & whichField))
    {
        _sfEnvSource2Alpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand0RGBFieldMask & whichField))
    {
        _sfEnvOperand0RGB.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand1RGBFieldMask & whichField))
    {
        _sfEnvOperand1RGB.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand2RGBFieldMask & whichField))
    {
        _sfEnvOperand2RGB.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand0AlphaFieldMask & whichField))
    {
        _sfEnvOperand0Alpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand1AlphaFieldMask & whichField))
    {
        _sfEnvOperand1Alpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand2AlphaFieldMask & whichField))
    {
        _sfEnvOperand2Alpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PointSpriteFieldMask & whichField))
    {
        _sfPointSprite.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShaderOperationFieldMask & whichField))
    {
        _sfShaderOperation.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShaderInputFieldMask & whichField))
    {
        _sfShaderInput.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShaderOffsetMatrixFieldMask & whichField))
    {
        _mfShaderOffsetMatrix.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShaderOffsetScaleFieldMask & whichField))
    {
        _sfShaderOffsetScale.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShaderOffsetBiasFieldMask & whichField))
    {
        _sfShaderOffsetBias.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShaderRGBADotProductFieldMask & whichField))
    {
        _sfShaderRGBADotProduct.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShaderCullModesFieldMask & whichField))
    {
        _sfShaderCullModes.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShaderConstEyeFieldMask & whichField))
    {
        _sfShaderConstEye.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LodBiasFieldMask & whichField))
    {
        _sfLodBias.copyFromBin(pMem);
    }
}

//! create a new instance of the class
TextureEnvChunkTransitPtr TextureEnvChunkBase::create(void)
{
    TextureEnvChunkTransitPtr fc;

    if(getClassType().getPrototype() != NullFC)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<TextureEnvChunk>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
TextureEnvChunkTransitPtr TextureEnvChunkBase::createLocal(BitVector bFlags)
{
    TextureEnvChunkTransitPtr fc;

    if(getClassType().getPrototype() != NullFC)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<TextureEnvChunk>(tmpPtr);
    }

    return fc;
}

//! create an empty new instance of the class, do not copy the prototype
TextureEnvChunkPtr TextureEnvChunkBase::createEmpty(void)
{
    TextureEnvChunkPtr returnValue;

    newPtr<TextureEnvChunk>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &= 
        ~Thread::getCurrentLocalFlags(); 

    return returnValue;
}

TextureEnvChunkPtr TextureEnvChunkBase::createEmptyLocal(BitVector bFlags)
{
    TextureEnvChunkPtr returnValue;

    newPtr<TextureEnvChunk>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr TextureEnvChunkBase::shallowCopy(void) const
{
    TextureEnvChunkPtr tmpPtr;

    newPtr(tmpPtr, 
           dynamic_cast<const TextureEnvChunk *>(this), 
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}

FieldContainerTransitPtr TextureEnvChunkBase::shallowCopyLocal(
    BitVector bFlags) const
{
    TextureEnvChunkPtr tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TextureEnvChunk *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

TextureEnvChunkBase::TextureEnvChunkBase(void) :
    Inherited(),
    _sfEnvMode                (GLenum(GL_REPLACE)),
    _sfEnvColor               (Color4r(0.f,0.f,0.f,0.f)),
    _sfEnvCombineRGB          (GLenum(GL_MODULATE)),
    _sfEnvCombineAlpha        (GLenum(GL_MODULATE)),
    _sfEnvScaleRGB            (Real32(1.0f)),
    _sfEnvScaleAlpha          (Real32(1.0f)),
    _sfEnvSource0RGB          (GLenum(GL_TEXTURE)),
    _sfEnvSource1RGB          (GLenum(GL_PREVIOUS_EXT)),
    _sfEnvSource2RGB          (GLenum(GL_CONSTANT_EXT)),
    _sfEnvSource0Alpha        (GLenum(GL_TEXTURE)),
    _sfEnvSource1Alpha        (GLenum(GL_PREVIOUS_EXT)),
    _sfEnvSource2Alpha        (GLenum(GL_CONSTANT_EXT)),
    _sfEnvOperand0RGB         (GLenum(GL_SRC_COLOR)),
    _sfEnvOperand1RGB         (GLenum(GL_SRC_COLOR)),
    _sfEnvOperand2RGB         (GLenum(GL_SRC_ALPHA)),
    _sfEnvOperand0Alpha       (GLenum(GL_SRC_ALPHA)),
    _sfEnvOperand1Alpha       (GLenum(GL_SRC_ALPHA)),
    _sfEnvOperand2Alpha       (GLenum(GL_SRC_ALPHA)),
    _sfPointSprite            (bool(GL_FALSE)),
    _sfShaderOperation        (GLenum(GL_NONE)),
    _sfShaderInput            (GLenum(GL_NONE)),
    _mfShaderOffsetMatrix     (),
    _sfShaderOffsetScale      (Real32(1.f)),
    _sfShaderOffsetBias       (Real32(0.f)),
    _sfShaderRGBADotProduct   (GLenum(GL_NONE)),
    _sfShaderCullModes        (UInt8(0)),
    _sfShaderConstEye         (),
    _sfLodBias                (Real32(0.f))
{
}

TextureEnvChunkBase::TextureEnvChunkBase(const TextureEnvChunkBase &source) :
    Inherited(source),
    _sfEnvMode                (source._sfEnvMode                ),
    _sfEnvColor               (source._sfEnvColor               ),
    _sfEnvCombineRGB          (source._sfEnvCombineRGB          ),
    _sfEnvCombineAlpha        (source._sfEnvCombineAlpha        ),
    _sfEnvScaleRGB            (source._sfEnvScaleRGB            ),
    _sfEnvScaleAlpha          (source._sfEnvScaleAlpha          ),
    _sfEnvSource0RGB          (source._sfEnvSource0RGB          ),
    _sfEnvSource1RGB          (source._sfEnvSource1RGB          ),
    _sfEnvSource2RGB          (source._sfEnvSource2RGB          ),
    _sfEnvSource0Alpha        (source._sfEnvSource0Alpha        ),
    _sfEnvSource1Alpha        (source._sfEnvSource1Alpha        ),
    _sfEnvSource2Alpha        (source._sfEnvSource2Alpha        ),
    _sfEnvOperand0RGB         (source._sfEnvOperand0RGB         ),
    _sfEnvOperand1RGB         (source._sfEnvOperand1RGB         ),
    _sfEnvOperand2RGB         (source._sfEnvOperand2RGB         ),
    _sfEnvOperand0Alpha       (source._sfEnvOperand0Alpha       ),
    _sfEnvOperand1Alpha       (source._sfEnvOperand1Alpha       ),
    _sfEnvOperand2Alpha       (source._sfEnvOperand2Alpha       ),
    _sfPointSprite            (source._sfPointSprite            ),
    _sfShaderOperation        (source._sfShaderOperation        ),
    _sfShaderInput            (source._sfShaderInput            ),
    _mfShaderOffsetMatrix     (source._mfShaderOffsetMatrix     ),
    _sfShaderOffsetScale      (source._sfShaderOffsetScale      ),
    _sfShaderOffsetBias       (source._sfShaderOffsetBias       ),
    _sfShaderRGBADotProduct   (source._sfShaderRGBADotProduct   ),
    _sfShaderCullModes        (source._sfShaderCullModes        ),
    _sfShaderConstEye         (source._sfShaderConstEye         ),
    _sfLodBias                (source._sfLodBias                )
{
}


/*-------------------------- destructors ----------------------------------*/

TextureEnvChunkBase::~TextureEnvChunkBase(void)
{
}


GetFieldHandlePtr TextureEnvChunkBase::getHandleEnvMode         (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvMode, 
             this->getType().getFieldDesc(EnvModeFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureEnvChunkBase::editHandleEnvMode        (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvMode, 
             this->getType().getFieldDesc(EnvModeFieldId)));

    editSField(EnvModeFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureEnvChunkBase::getHandleEnvColor        (void) const
{
    SFColor4r::GetHandlePtr returnValue(
        new  SFColor4r::GetHandle(
             &_sfEnvColor, 
             this->getType().getFieldDesc(EnvColorFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureEnvChunkBase::editHandleEnvColor       (void)
{
    SFColor4r::EditHandlePtr returnValue(
        new  SFColor4r::EditHandle(
             &_sfEnvColor, 
             this->getType().getFieldDesc(EnvColorFieldId)));

    editSField(EnvColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureEnvChunkBase::getHandleEnvCombineRGB   (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvCombineRGB, 
             this->getType().getFieldDesc(EnvCombineRGBFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureEnvChunkBase::editHandleEnvCombineRGB  (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvCombineRGB, 
             this->getType().getFieldDesc(EnvCombineRGBFieldId)));

    editSField(EnvCombineRGBFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureEnvChunkBase::getHandleEnvCombineAlpha (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvCombineAlpha, 
             this->getType().getFieldDesc(EnvCombineAlphaFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureEnvChunkBase::editHandleEnvCombineAlpha(void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvCombineAlpha, 
             this->getType().getFieldDesc(EnvCombineAlphaFieldId)));

    editSField(EnvCombineAlphaFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureEnvChunkBase::getHandleEnvScaleRGB     (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfEnvScaleRGB, 
             this->getType().getFieldDesc(EnvScaleRGBFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureEnvChunkBase::editHandleEnvScaleRGB    (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfEnvScaleRGB, 
             this->getType().getFieldDesc(EnvScaleRGBFieldId)));

    editSField(EnvScaleRGBFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureEnvChunkBase::getHandleEnvScaleAlpha   (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfEnvScaleAlpha, 
             this->getType().getFieldDesc(EnvScaleAlphaFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureEnvChunkBase::editHandleEnvScaleAlpha  (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfEnvScaleAlpha, 
             this->getType().getFieldDesc(EnvScaleAlphaFieldId)));

    editSField(EnvScaleAlphaFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureEnvChunkBase::getHandleEnvSource0RGB   (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvSource0RGB, 
             this->getType().getFieldDesc(EnvSource0RGBFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureEnvChunkBase::editHandleEnvSource0RGB  (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvSource0RGB, 
             this->getType().getFieldDesc(EnvSource0RGBFieldId)));

    editSField(EnvSource0RGBFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureEnvChunkBase::getHandleEnvSource1RGB   (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvSource1RGB, 
             this->getType().getFieldDesc(EnvSource1RGBFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureEnvChunkBase::editHandleEnvSource1RGB  (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvSource1RGB, 
             this->getType().getFieldDesc(EnvSource1RGBFieldId)));

    editSField(EnvSource1RGBFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureEnvChunkBase::getHandleEnvSource2RGB   (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvSource2RGB, 
             this->getType().getFieldDesc(EnvSource2RGBFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureEnvChunkBase::editHandleEnvSource2RGB  (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvSource2RGB, 
             this->getType().getFieldDesc(EnvSource2RGBFieldId)));

    editSField(EnvSource2RGBFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureEnvChunkBase::getHandleEnvSource0Alpha (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvSource0Alpha, 
             this->getType().getFieldDesc(EnvSource0AlphaFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureEnvChunkBase::editHandleEnvSource0Alpha(void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvSource0Alpha, 
             this->getType().getFieldDesc(EnvSource0AlphaFieldId)));

    editSField(EnvSource0AlphaFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureEnvChunkBase::getHandleEnvSource1Alpha (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvSource1Alpha, 
             this->getType().getFieldDesc(EnvSource1AlphaFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureEnvChunkBase::editHandleEnvSource1Alpha(void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvSource1Alpha, 
             this->getType().getFieldDesc(EnvSource1AlphaFieldId)));

    editSField(EnvSource1AlphaFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureEnvChunkBase::getHandleEnvSource2Alpha (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvSource2Alpha, 
             this->getType().getFieldDesc(EnvSource2AlphaFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureEnvChunkBase::editHandleEnvSource2Alpha(void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvSource2Alpha, 
             this->getType().getFieldDesc(EnvSource2AlphaFieldId)));

    editSField(EnvSource2AlphaFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureEnvChunkBase::getHandleEnvOperand0RGB  (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvOperand0RGB, 
             this->getType().getFieldDesc(EnvOperand0RGBFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureEnvChunkBase::editHandleEnvOperand0RGB (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvOperand0RGB, 
             this->getType().getFieldDesc(EnvOperand0RGBFieldId)));

    editSField(EnvOperand0RGBFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureEnvChunkBase::getHandleEnvOperand1RGB  (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvOperand1RGB, 
             this->getType().getFieldDesc(EnvOperand1RGBFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureEnvChunkBase::editHandleEnvOperand1RGB (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvOperand1RGB, 
             this->getType().getFieldDesc(EnvOperand1RGBFieldId)));

    editSField(EnvOperand1RGBFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureEnvChunkBase::getHandleEnvOperand2RGB  (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvOperand2RGB, 
             this->getType().getFieldDesc(EnvOperand2RGBFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureEnvChunkBase::editHandleEnvOperand2RGB (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvOperand2RGB, 
             this->getType().getFieldDesc(EnvOperand2RGBFieldId)));

    editSField(EnvOperand2RGBFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureEnvChunkBase::getHandleEnvOperand0Alpha (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvOperand0Alpha, 
             this->getType().getFieldDesc(EnvOperand0AlphaFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureEnvChunkBase::editHandleEnvOperand0Alpha(void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvOperand0Alpha, 
             this->getType().getFieldDesc(EnvOperand0AlphaFieldId)));

    editSField(EnvOperand0AlphaFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureEnvChunkBase::getHandleEnvOperand1Alpha (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvOperand1Alpha, 
             this->getType().getFieldDesc(EnvOperand1AlphaFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureEnvChunkBase::editHandleEnvOperand1Alpha(void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvOperand1Alpha, 
             this->getType().getFieldDesc(EnvOperand1AlphaFieldId)));

    editSField(EnvOperand1AlphaFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureEnvChunkBase::getHandleEnvOperand2Alpha (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvOperand2Alpha, 
             this->getType().getFieldDesc(EnvOperand2AlphaFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureEnvChunkBase::editHandleEnvOperand2Alpha(void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvOperand2Alpha, 
             this->getType().getFieldDesc(EnvOperand2AlphaFieldId)));

    editSField(EnvOperand2AlphaFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureEnvChunkBase::getHandlePointSprite     (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfPointSprite, 
             this->getType().getFieldDesc(PointSpriteFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureEnvChunkBase::editHandlePointSprite    (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfPointSprite, 
             this->getType().getFieldDesc(PointSpriteFieldId)));

    editSField(PointSpriteFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureEnvChunkBase::getHandleShaderOperation (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfShaderOperation, 
             this->getType().getFieldDesc(ShaderOperationFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureEnvChunkBase::editHandleShaderOperation(void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfShaderOperation, 
             this->getType().getFieldDesc(ShaderOperationFieldId)));

    editSField(ShaderOperationFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureEnvChunkBase::getHandleShaderInput     (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfShaderInput, 
             this->getType().getFieldDesc(ShaderInputFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureEnvChunkBase::editHandleShaderInput    (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfShaderInput, 
             this->getType().getFieldDesc(ShaderInputFieldId)));

    editSField(ShaderInputFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureEnvChunkBase::getHandleShaderOffsetMatrix (void) const
{
    MFReal32::GetHandlePtr returnValue(
        new  MFReal32::GetHandle(
             &_mfShaderOffsetMatrix, 
             this->getType().getFieldDesc(ShaderOffsetMatrixFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureEnvChunkBase::editHandleShaderOffsetMatrix(void)
{
    MFReal32::EditHandlePtr returnValue(
        new  MFReal32::EditHandle(
             &_mfShaderOffsetMatrix, 
             this->getType().getFieldDesc(ShaderOffsetMatrixFieldId)));

    editMField(ShaderOffsetMatrixFieldMask, _mfShaderOffsetMatrix);

    return returnValue;
}

GetFieldHandlePtr TextureEnvChunkBase::getHandleShaderOffsetScale (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfShaderOffsetScale, 
             this->getType().getFieldDesc(ShaderOffsetScaleFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureEnvChunkBase::editHandleShaderOffsetScale(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfShaderOffsetScale, 
             this->getType().getFieldDesc(ShaderOffsetScaleFieldId)));

    editSField(ShaderOffsetScaleFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureEnvChunkBase::getHandleShaderOffsetBias (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfShaderOffsetBias, 
             this->getType().getFieldDesc(ShaderOffsetBiasFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureEnvChunkBase::editHandleShaderOffsetBias(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfShaderOffsetBias, 
             this->getType().getFieldDesc(ShaderOffsetBiasFieldId)));

    editSField(ShaderOffsetBiasFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureEnvChunkBase::getHandleShaderRGBADotProduct (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfShaderRGBADotProduct, 
             this->getType().getFieldDesc(ShaderRGBADotProductFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureEnvChunkBase::editHandleShaderRGBADotProduct(void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfShaderRGBADotProduct, 
             this->getType().getFieldDesc(ShaderRGBADotProductFieldId)));

    editSField(ShaderRGBADotProductFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureEnvChunkBase::getHandleShaderCullModes (void) const
{
    SFUInt8::GetHandlePtr returnValue(
        new  SFUInt8::GetHandle(
             &_sfShaderCullModes, 
             this->getType().getFieldDesc(ShaderCullModesFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureEnvChunkBase::editHandleShaderCullModes(void)
{
    SFUInt8::EditHandlePtr returnValue(
        new  SFUInt8::EditHandle(
             &_sfShaderCullModes, 
             this->getType().getFieldDesc(ShaderCullModesFieldId)));

    editSField(ShaderCullModesFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureEnvChunkBase::getHandleShaderConstEye  (void) const
{
    SFVec3r::GetHandlePtr returnValue(
        new  SFVec3r::GetHandle(
             &_sfShaderConstEye, 
             this->getType().getFieldDesc(ShaderConstEyeFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureEnvChunkBase::editHandleShaderConstEye (void)
{
    SFVec3r::EditHandlePtr returnValue(
        new  SFVec3r::EditHandle(
             &_sfShaderConstEye, 
             this->getType().getFieldDesc(ShaderConstEyeFieldId)));

    editSField(ShaderConstEyeFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureEnvChunkBase::getHandleLodBias         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfLodBias, 
             this->getType().getFieldDesc(LodBiasFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureEnvChunkBase::editHandleLodBias        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfLodBias, 
             this->getType().getFieldDesc(LodBiasFieldId)));

    editSField(LodBiasFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void TextureEnvChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<TextureEnvChunkBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr TextureEnvChunkBase::createAspectCopy(void) const
{
    TextureEnvChunkPtr returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const TextureEnvChunk *>(this));

    return returnValue;
}
#endif

void TextureEnvChunkBase::resolveLinks(void)
{
    Inherited::resolveLinks();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfShaderOffsetMatrix.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
}


#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<TextureEnvChunkPtr>::_type("TextureEnvChunkPtr", "StateChunkPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(TextureEnvChunkPtr)

OSG_SFIELDTYPE_INST(FieldContainerPtrSField, 
                    TextureEnvChunkPtr, 
                    RecordedRefCounts,
                    0);

OSG_FIELD_DLLEXPORT_DEF3(FieldContainerPtrSField, 
                         TextureEnvChunkPtr, 
                         RecordedRefCounts,
                         0);

OSG_MFIELDTYPE_INST(FieldContainerPtrMField, 
                    TextureEnvChunkPtr, 
                    RecordedRefCounts,
                    0);

OSG_FIELD_DLLEXPORT_DEF3(FieldContainerPtrMField, 
                         TextureEnvChunkPtr, 
                         RecordedRefCounts,
                         0);

OSG_END_NAMESPACE
