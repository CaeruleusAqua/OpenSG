/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ProgramChunk
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGPROGRAMCHUNKBASE_H_
#define _OSGPROGRAMCHUNKBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGStateDef.h"

#include "OSGBaseTypes.h"

#include "OSGStateChunk.h" // Parent

#include "OSGStringFields.h" // Program type
#include "OSGVec4fFields.h" // ParamValues type
#include "OSGStringFields.h" // ParamNames type
#include "OSGUInt32Fields.h" // GLId type

#include "OSGProgramChunkFields.h"

OSG_BEGIN_NAMESPACE

class ProgramChunk;

//! \brief ProgramChunk Base Class.

class OSG_STATE_DLLMAPPING ProgramChunkBase : public StateChunk
{
  public:

    typedef StateChunk Inherited;
    typedef StateChunk ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    typedef PointerFwdBuilder<StateChunkPtr,
                              StateChunkConstPtr,
                              ProgramChunk>::ObjPtr         ObjPtr;
    typedef PointerFwdBuilder<StateChunkPtr,
                              StateChunkConstPtr,
                              ProgramChunk>::ObjPtrConst    ObjPtrConst;
    typedef PointerFwdBuilder<StateChunkPtr,
                              StateChunkConstPtr,
                              ProgramChunk>::ObjConstPtr    ObjConstPtr;
    typedef PointerFwdBuilder<StateChunkPtr,
                              StateChunkConstPtr,
                              ProgramChunk>::ObjPtrArg      ObjPtrArg;
    typedef PointerFwdBuilder<StateChunkPtr,
                              StateChunkConstPtr,
                              ProgramChunk>::ObjConstPtrArg ObjConstPtrArg;
    typedef PointerFwdBuilder<StateChunkPtr,
                              StateChunkConstPtr,
                              ProgramChunk>::ObjPtrConstArg ObjPtrConstArg;

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        ProgramFieldId = Inherited::NextFieldId,
        ParamValuesFieldId = ProgramFieldId + 1,
        ParamNamesFieldId = ParamValuesFieldId + 1,
        GLIdFieldId = ParamNamesFieldId + 1,
        NextFieldId = GLIdFieldId + 1
    };

    static const OSG::BitVector ProgramFieldMask =
        (TypeTraits<BitVector>::One << ProgramFieldId);
    static const OSG::BitVector ParamValuesFieldMask =
        (TypeTraits<BitVector>::One << ParamValuesFieldId);
    static const OSG::BitVector ParamNamesFieldMask =
        (TypeTraits<BitVector>::One << ParamNamesFieldId);
    static const OSG::BitVector GLIdFieldMask =
        (TypeTraits<BitVector>::One << GLIdFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


#ifdef OSG_1_COMPAT
                  SFString            *getSFProgram         (void);
#endif
                  SFString            *editSFProgram        (void);
            const SFString            *getSFProgram         (void) const;

#ifdef OSG_1_COMPAT
                  MFVec4f             *getMFParamValues     (void);
#endif
                  MFVec4f             *editMFParamValues    (void);
            const MFVec4f             *getMFParamValues     (void) const;

#ifdef OSG_1_COMPAT
                  MFString            *getMFParamNames      (void);
#endif
                  MFString            *editMFParamNames     (void);
            const MFString            *getMFParamNames      (void) const;


#ifdef OSG_1_COMPAT
                  std::string         &getProgram         (void);
#endif
                  std::string         &editProgram        (void);
            const std::string         &getProgram         (void) const;

#ifdef OSG_1_COMPAT
                  Vec4f               &getParamValues     (const UInt32 index);
                  MFVec4f             &getParamValues    (void);
#endif
                  Vec4f               &editParamValues    (const UInt32 index);
            const Vec4f               &getParamValues     (const UInt32 index) const;
                  MFVec4f             &editParamValues    (void);
            const MFVec4f             &getParamValues    (void) const;

#ifdef OSG_1_COMPAT
                  std::string         &getParamNames      (const UInt32 index);
                  MFString            &getParamNames     (void);
#endif
                  std::string         &editParamNames     (const UInt32 index);
            const std::string         &getParamNames      (const UInt32 index) const;
                  MFString            &editParamNames     (void);
            const MFString            &getParamNames     (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setProgram        (const std::string &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */


    void pushToParamValues                 (const Vec4f     &value   );
    void insertIntoParamValues             (      UInt32     uiIndex,
                                            const Vec4f     &value   );
    void replaceInParamValues              (      UInt32     uiIndex,
                                            const Vec4f     &value   );
    void replaceInParamValues              (const Vec4f     &pOldElem,
                                            const Vec4f     &pNewElem);
    void removeFromParamValues             (      UInt32     uiIndex );
    void removeFromParamValues             (const Vec4f     &value   );
    void clearParamValues                  (      void               );



    void pushToParamNames                  (const std::string&value   );
    void insertIntoParamNames              (      UInt32     uiIndex,
                                            const std::string&value   );
    void replaceInParamNames               (      UInt32     uiIndex,
                                            const std::string&value   );
    void replaceInParamNames               (const std::string&pOldElem,
                                            const std::string&pNewElem);
    void removeFromParamNames              (      UInt32     uiIndex );
    void removeFromParamNames              (const std::string&value   );
    void clearParamNames                   (      void               );


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static void   classDescInserter(TypeObject &oType);
    static Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFString          _sfProgram;
    MFVec4f           _mfParamValues;
    MFString          _mfParamNames;
    SFUInt32          _sfGLId;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ProgramChunkBase(void);
    ProgramChunkBase(const ProgramChunkBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ProgramChunkBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


#ifdef OSG_1_COMPAT
                  SFUInt32            *getSFGLId            (void);
#endif
                  SFUInt32            *editSFGLId           (void);
            const SFUInt32            *getSFGLId            (void) const;


#ifdef OSG_1_COMPAT
                  UInt32              &getGLId            (void);
#endif
                  UInt32              &editGLId           (void);
            const UInt32              &getGLId            (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setGLId           (const UInt32 &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */




    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_FIELDCONTAINERPTR
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo,
                                 UInt32             uiCopyOffset);

            void execSync (      ProgramChunkBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo,
                                 UInt32             uiCopyOffset);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      ProgramChunkBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

#if 0
    virtual void execBeginEditV(ConstFieldMaskArg whichField,
                                UInt32            uiAspect,
                                UInt32            uiContainerSize);

            void execBeginEdit (ConstFieldMaskArg whichField,
                                UInt32            uiAspect,
                                UInt32            uiContainerSize);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ProgramChunkBase &source);
};

typedef ProgramChunkBase *ProgramChunkBaseP;

/** Type specific RefPtr type for ProgramChunk. */
typedef RefPtr<ProgramChunkPtr> ProgramChunkRefPtr;

typedef boost::mpl::if_<
    boost::mpl::bool_<ProgramChunkBase::isNodeCore>,
    CoredNodePtr<ProgramChunk>,
    FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC>::type

        ProgramChunkNodePtr;

OSG_END_NAMESPACE

#endif /* _OSGPROGRAMCHUNKBASE_H_ */
