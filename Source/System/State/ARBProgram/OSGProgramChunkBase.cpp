/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ProgramChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEPROGRAMCHUNKINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>




#include "OSGProgramChunkBase.h"
#include "OSGProgramChunk.h"

OSG_USING_NAMESPACE

// Field descriptions

/*! \var std::string ProgramChunkBase::_sfProgram
    	The program source code.

*/
/*! \var Vec4f ProgramChunkBase::_mfParamValues
    	Program Parameters

*/
/*! \var std::string ProgramChunkBase::_mfParamNames
    	Symbolic names for the program parameters.

*/
/*! \var UInt32 ProgramChunkBase::_sfGLId
    	The OpenGL ID of the program.

*/

void ProgramChunkBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL; 


#ifdef OSG_1_COMPAT
    typedef const SFString *(ProgramChunkBase::*GetSFProgramF)(void) const;

    GetSFProgramF GetSFProgram = &ProgramChunkBase::getSFProgram;
#endif

    pDesc = new SFString::Description(
        SFString::getClassType(), 
        "program", 
        ProgramFieldId, ProgramFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&ProgramChunkBase::editSFProgram),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFProgram));
#else
        reinterpret_cast<FieldGetMethodSig >(&ProgramChunkBase::getSFProgram));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFVec4f *(ProgramChunkBase::*GetMFParamValuesF)(void) const;

    GetMFParamValuesF GetMFParamValues = &ProgramChunkBase::getMFParamValues;
#endif

    pDesc = new MFVec4f::Description(
        MFVec4f::getClassType(), 
        "paramValues", 
        ParamValuesFieldId, ParamValuesFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&ProgramChunkBase::editMFParamValues),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFParamValues));
#else
        reinterpret_cast<FieldGetMethodSig >(&ProgramChunkBase::getMFParamValues));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFString *(ProgramChunkBase::*GetMFParamNamesF)(void) const;

    GetMFParamNamesF GetMFParamNames = &ProgramChunkBase::getMFParamNames;
#endif

    pDesc = new MFString::Description(
        MFString::getClassType(), 
        "paramNames", 
        ParamNamesFieldId, ParamNamesFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&ProgramChunkBase::editMFParamNames),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFParamNames));
#else
        reinterpret_cast<FieldGetMethodSig >(&ProgramChunkBase::getMFParamNames));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFUInt32 *(ProgramChunkBase::*GetSFGLIdF)(void) const;

    GetSFGLIdF GetSFGLId = &ProgramChunkBase::getSFGLId;
#endif

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(), 
        "GLId", 
        GLIdFieldId, GLIdFieldMask,
        true,
        (Field::FClusterLocal),
        reinterpret_cast<FieldEditMethodSig>(&ProgramChunkBase::editSFGLId),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFGLId));
#else
        reinterpret_cast<FieldGetMethodSig >(&ProgramChunkBase::getSFGLId));
#endif

    oType.addInitialDesc(pDesc);
}


ProgramChunkBase::TypeObject ProgramChunkBase::_type(true,
    ProgramChunkBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL, 
    ProgramChunk::initMethod,
    (InitalInsertDescFunc) &ProgramChunkBase::classDescInserter,
    false);

/*------------------------------ get -----------------------------------*/

FieldContainerType &ProgramChunkBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &ProgramChunkBase::getType(void) const 
{
    return _type;
} 

UInt32 ProgramChunkBase::getContainerSize(void) const 
{ 
    return sizeof(ProgramChunk); 
}

/*------------------------- decorator get ------------------------------*/


SFString *ProgramChunkBase::editSFProgram(void)
{
    editSField(ProgramFieldMask);

    return &_sfProgram;
}

const SFString *ProgramChunkBase::getSFProgram(void) const
{
    return &_sfProgram;
}

#ifdef OSG_1_COMPAT
SFString *ProgramChunkBase::getSFProgram(void)
{
    return this->editSFProgram();
}
#endif

MFVec4f *ProgramChunkBase::editMFParamValues(void)
{
    editMField(ParamValuesFieldMask, _mfParamValues);

    return &_mfParamValues;
}

const MFVec4f *ProgramChunkBase::getMFParamValues(void) const
{
    return &_mfParamValues;
}

#ifdef OSG_1_COMPAT
MFVec4f *ProgramChunkBase::getMFParamValues(void)
{
    return this->editMFParamValues();
}
#endif

MFString *ProgramChunkBase::editMFParamNames(void)
{
    editMField(ParamNamesFieldMask, _mfParamNames);

    return &_mfParamNames;
}

const MFString *ProgramChunkBase::getMFParamNames(void) const
{
    return &_mfParamNames;
}

#ifdef OSG_1_COMPAT
MFString *ProgramChunkBase::getMFParamNames(void)
{
    return this->editMFParamNames();
}
#endif

SFUInt32 *ProgramChunkBase::editSFGLId(void)
{
    editSField(GLIdFieldMask);

    return &_sfGLId;
}

const SFUInt32 *ProgramChunkBase::getSFGLId(void) const
{
    return &_sfGLId;
}

#ifdef OSG_1_COMPAT
SFUInt32 *ProgramChunkBase::getSFGLId(void)
{
    return this->editSFGLId();
}
#endif



/*------------------------------ access -----------------------------------*/

UInt32 ProgramChunkBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ProgramFieldMask & whichField))
    {
        returnValue += _sfProgram.getBinSize();
    }
    if(FieldBits::NoField != (ParamValuesFieldMask & whichField))
    {
        returnValue += _mfParamValues.getBinSize();
    }
    if(FieldBits::NoField != (ParamNamesFieldMask & whichField))
    {
        returnValue += _mfParamNames.getBinSize();
    }
    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        returnValue += _sfGLId.getBinSize();
    }

    return returnValue;
}

void ProgramChunkBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ProgramFieldMask & whichField))
    {
        _sfProgram.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ParamValuesFieldMask & whichField))
    {
        _mfParamValues.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ParamNamesFieldMask & whichField))
    {
        _mfParamNames.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        _sfGLId.copyToBin(pMem);
    }
}

void ProgramChunkBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ProgramFieldMask & whichField))
    {
        _sfProgram.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ParamValuesFieldMask & whichField))
    {
        _mfParamValues.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ParamNamesFieldMask & whichField))
    {
        _mfParamNames.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        _sfGLId.copyFromBin(pMem);
    }
}



/*------------------------- constructors ----------------------------------*/

ProgramChunkBase::ProgramChunkBase(void) :
    Inherited(),
    _sfProgram(),
    _mfParamValues(),
    _mfParamNames(),
    _sfGLId(UInt32(0))
{
}

ProgramChunkBase::ProgramChunkBase(const ProgramChunkBase &source) :
    Inherited(source),
    _sfProgram(source._sfProgram),
    _mfParamValues(source._mfParamValues),
    _mfParamNames(source._mfParamNames),
    _sfGLId(source._sfGLId)
{
}

/*-------------------------- destructors ----------------------------------*/

ProgramChunkBase::~ProgramChunkBase(void)
{
}


#ifdef OSG_MT_FIELDCONTAINERPTR
void ProgramChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo,
                                        UInt32             uiCopyOffset)
{
    this->execSync(static_cast<ProgramChunkBase *>(&oFrom),
                   whichField, 
                   syncMode, 
                   uiSyncInfo,
                   uiCopyOffset);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
void ProgramChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<ProgramChunkBase *>(&oFrom), 
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif

#if 0
void ProgramChunkBase::execBeginEditV(ConstFieldMaskArg whichField,
                                       UInt32            uiAspect,
                                       UInt32            uiContainerSize)
{
    this->execBeginEdit(whichField, uiAspect, uiContainerSize);
}
#endif


void ProgramChunkBase::resolveLinks(void)
{
    Inherited::resolveLinks();
}


#include "OSGSField.ins"
#include "OSGMField.ins"

#if defined(OSG_TMPL_STATIC_MEMBER_NEEDS_FUNCTION_INSTANTIATION) || \
    defined(OSG_TMPL_STATIC_MEMBER_NEEDS_CLASS_INSTANTIATION   )

#include "OSGSFieldFuncs.ins"
#include "OSGMFieldFuncs.ins"
#endif

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<ProgramChunkPtr>::_type("ProgramChunkPtr", "StateChunkPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(ProgramChunkPtr)

OSG_FIELD_DLLEXPORT_DEF1(SField, ProgramChunkPtr);
OSG_FIELD_DLLEXPORT_DEF1(MField, ProgramChunkPtr);

OSG_END_NAMESPACE


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id$";
    static Char8 cvsid_hpp       [] = OSGPROGRAMCHUNKBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGPROGRAMCHUNKBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGPROGRAMCHUNKFIELDS_HEADER_CVSID;
}
