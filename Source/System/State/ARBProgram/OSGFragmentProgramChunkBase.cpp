/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class FragmentProgramChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEFRAGMENTPROGRAMCHUNKINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>




#include "OSGFragmentProgramChunkBase.h"
#include "OSGFragmentProgramChunk.h"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::FragmentProgramChunk
    \ingroup GrpSystemState

    See \ref PageSystemFragmentProgramChunk for a description.
 */


FragmentProgramChunkBase::TypeObject FragmentProgramChunkBase::_type(true,
    FragmentProgramChunkBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &FragmentProgramChunkBase::createEmpty,
    FragmentProgramChunk::initMethod,
    NULL,
    false,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"FragmentProgramChunk\"\n"
    "\tparent=\"ProgramChunk\"\n"
    "\tlibrary=\"State\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    ">\n"
    "\\ingroup GrpSystemState\n"
    "\n"
    "See \\ref PageSystemFragmentProgramChunk for a description.\n"
    "\n"
    "The FragmentProgramChunk implements Fragment Programs as specified in the\n"
    "GL_ARB_fragment_program extension. It is just a special version of the\n"
    "OSG::ProgramChunk, which contains the whole public interface.\n"
    "</FieldContainer>\n",
    "\\ingroup GrpSystemState\n"
    "\n"
    "See \\ref PageSystemFragmentProgramChunk for a description.\n"
    "\n"
    "The FragmentProgramChunk implements Fragment Programs as specified in the\n"
    "GL_ARB_fragment_program extension. It is just a special version of the\n"
    "OSG::ProgramChunk, which contains the whole public interface.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &FragmentProgramChunkBase::getType(void)
{
    return _type;
}

const FieldContainerType &FragmentProgramChunkBase::getType(void) const
{
    return _type;
}

UInt32 FragmentProgramChunkBase::getContainerSize(void) const
{
    return sizeof(FragmentProgramChunk);
}

/*------------------------- decorator get ------------------------------*/






/*------------------------------ access -----------------------------------*/

UInt32 FragmentProgramChunkBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);


    return returnValue;
}

void FragmentProgramChunkBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

}

void FragmentProgramChunkBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

}

//! create an empty new instance of the class, do not copy the prototype
FragmentProgramChunkPtr FragmentProgramChunkBase::createEmpty(void)
{
    FragmentProgramChunkPtr returnValue;

    newPtr<FragmentProgramChunk>(returnValue);

    return returnValue;
}

FieldContainerPtr FragmentProgramChunkBase::shallowCopy(void) const
{
    FragmentProgramChunkPtr returnValue;

    newPtr(returnValue, dynamic_cast<const FragmentProgramChunk *>(this));

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

FragmentProgramChunkBase::FragmentProgramChunkBase(void) :
    Inherited()
{
}

FragmentProgramChunkBase::FragmentProgramChunkBase(const FragmentProgramChunkBase &source) :
    Inherited(source)
{
}

/*-------------------------- destructors ----------------------------------*/

FragmentProgramChunkBase::~FragmentProgramChunkBase(void)
{
}


#ifdef OSG_MT_FIELDCONTAINERPTR
void FragmentProgramChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo,
                                        UInt32             uiCopyOffset)
{
    this->execSync(static_cast<FragmentProgramChunkBase *>(&oFrom),
                   whichField,
                   syncMode,
                   uiSyncInfo,
                   uiCopyOffset);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
void FragmentProgramChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<FragmentProgramChunkBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif

#if 0
void FragmentProgramChunkBase::execBeginEditV(ConstFieldMaskArg whichField,
                                       UInt32            uiAspect,
                                       UInt32            uiContainerSize)
{
    this->execBeginEdit(whichField, uiAspect, uiContainerSize);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr FragmentProgramChunkBase::createAspectCopy(void) const
{
    FragmentProgramChunkPtr returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const FragmentProgramChunk *>(this));

    return returnValue;
}
#endif

void FragmentProgramChunkBase::resolveLinks(void)
{
    Inherited::resolveLinks();
}


OSG_END_NAMESPACE

#include "OSGSField.ins"
#include "OSGMField.ins"

#if defined(OSG_TMPL_STATIC_MEMBER_NEEDS_FUNCTION_INSTANTIATION) || \
    defined(OSG_TMPL_STATIC_MEMBER_NEEDS_CLASS_INSTANTIATION   )

#include "OSGSFieldFuncs.ins"
#include "OSGMFieldFuncs.ins"
#endif

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<FragmentProgramChunkPtr>::_type("FragmentProgramChunkPtr", "ProgramChunkPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(FragmentProgramChunkPtr)

OSG_FIELD_DLLEXPORT_DEF1(SField, FragmentProgramChunkPtr);
OSG_FIELD_DLLEXPORT_DEF1(MField, FragmentProgramChunkPtr);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id$";
    static Char8 cvsid_hpp       [] = OSGFRAGMENTPROGRAMCHUNKBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGFRAGMENTPROGRAMCHUNKBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGFRAGMENTPROGRAMCHUNKFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE
