/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ShaderParameterChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESHADERPARAMETERCHUNKINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>



#include <OSGShaderParameter.h> // Parameters Class

#include "OSGShaderParameterChunkBase.h"
#include "OSGShaderParameterChunk.h"

OSG_USING_NAMESPACE

// Field descriptions

/*! \var ShaderParameterPtr ShaderParameterChunkBase::_mfParameters
    	parameter list

*/

void ShaderParameterChunkBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL; 


    pDesc = new MFShaderParameterPtr::Description(
        MFShaderParameterPtr::getClassType(), 
        "parameters", 
        ParametersFieldId, ParametersFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&ShaderParameterChunkBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&ShaderParameterChunkBase::getMFParameters));

    oType.addInitialDesc(pDesc);
}


ShaderParameterChunkBase::TypeObject ShaderParameterChunkBase::_type(true,
    ShaderParameterChunkBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL, 
    ShaderParameterChunk::initMethod,
    (InitalInsertDescFunc) &ShaderParameterChunkBase::classDescInserter,
    false);

/*------------------------------ get -----------------------------------*/

FieldContainerType &ShaderParameterChunkBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &ShaderParameterChunkBase::getType(void) const 
{
    return _type;
} 

UInt32 ShaderParameterChunkBase::getContainerSize(void) const 
{ 
    return sizeof(ShaderParameterChunk); 
}

/*------------------------- decorator get ------------------------------*/


//! Get the ShaderParameterChunk::_mfParameters field.
const MFShaderParameterPtr *ShaderParameterChunkBase::getMFParameters(void) const
{
    return &_mfParameters;
}


void ShaderParameterChunkBase::pushToField(      FieldContainerPtrConstArg pNewElement,
                                    const UInt32                    uiFieldId  )
{
    Inherited::pushToField(pNewElement, uiFieldId);

    if(uiFieldId == ParametersFieldId)
    {
        static_cast<ShaderParameterChunk *>(this)->addParameter(
            cast_dynamic<ShaderParameterPtr>(pNewElement));
    }
}

void ShaderParameterChunkBase::insertIntoMField(const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::insertIntoMField(uiIndex, pNewElement, uiFieldId);

    if(uiFieldId == ParametersFieldId)
    {
        static_cast<ShaderParameterChunk *>(this)->insertParameter(
            uiIndex,
            cast_dynamic<ShaderParameterPtr>(pNewElement));
    }
}

void ShaderParameterChunkBase::replaceInMField (const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::replaceInMField(uiIndex, pNewElement, uiFieldId);

    if(uiFieldId == ParametersFieldId)
    {
        static_cast<ShaderParameterChunk *>(this)->replaceParameter(
            uiIndex,
            cast_dynamic<ShaderParameterPtr>(pNewElement));
    }
}

void ShaderParameterChunkBase::replaceInMField (      FieldContainerPtrConstArg pOldElement,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::replaceInMField(pOldElement, pNewElement, uiFieldId);

    if(uiFieldId == ParametersFieldId)
    {
        static_cast<ShaderParameterChunk *>(this)->replaceParameterBy(
            cast_dynamic<ShaderParameterPtr>(pOldElement),
            cast_dynamic<ShaderParameterPtr>(pNewElement));
    }
}

void ShaderParameterChunkBase::removeFromMField(const UInt32 uiIndex,
                                         const UInt32 uiFieldId)
{
    Inherited::removeFromMField(uiIndex, uiFieldId);

    if(uiFieldId == ParametersFieldId)
    {
        static_cast<ShaderParameterChunk *>(this)->subParameter(
            uiIndex);
    }
}

void ShaderParameterChunkBase::removeFromMField(      FieldContainerPtrConstArg pElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::removeFromMField(pElement, uiFieldId);

    if(uiFieldId == ParametersFieldId)
    {
        static_cast<ShaderParameterChunk *>(this)->subParameter(
            cast_dynamic<ShaderParameterPtr>(pElement));
    }
}

void ShaderParameterChunkBase::clearField(const UInt32 uiFieldId)
{
    Inherited::clearField(uiFieldId);

    if(uiFieldId == ParametersFieldId)
    {
        static_cast<ShaderParameterChunk *>(this)->clearParameters();
    }
}

void ShaderParameterChunkBase::addParameter(ShaderParameterPtrConstArg value)
{
    if(value == NullFC)
        return;

    editMField(ParametersFieldMask, _mfParameters);

    addRef(value);

    _mfParameters.push_back(value);
}

void ShaderParameterChunkBase::insertParameter(UInt32                uiIndex,
                                             ShaderParameterPtrConstArg value   )
{
    if(value == NullFC)
        return;

    editMField(ParametersFieldMask, _mfParameters);

    MFShaderParameterPtr::iterator fieldIt = _mfParameters.begin();

    addRef(value);

    fieldIt += uiIndex;

    _mfParameters.insert(fieldIt, value);
}

void ShaderParameterChunkBase::replaceParameter(UInt32                uiIndex,
                                                 ShaderParameterPtrConstArg value   )
{
    if(value == NullFC)
        return;

    if(uiIndex >= _mfParameters.size())
        return;

    editMField(ParametersFieldMask, _mfParameters);

    addRef(value);

    subRef(_mfParameters[uiIndex]);

    _mfParameters[uiIndex] = value;
}

void ShaderParameterChunkBase::replaceParameterBy(ShaderParameterPtrConstArg pOldElem,
                                                  ShaderParameterPtrConstArg pNewElem)
{
    if(pNewElem == NullFC)
        return;

    Int32  elemIdx = _mfParameters.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(ParametersFieldMask, _mfParameters);

        MFShaderParameterPtr::iterator fieldIt = _mfParameters.begin();

        fieldIt += elemIdx;

        addRef(pNewElem);
        subRef(pOldElem);

        (*fieldIt) = pNewElem;
    }
}

void ShaderParameterChunkBase::subParameter(UInt32 uiIndex)
{
    if(uiIndex < _mfParameters.size())
    {
        editMField(ParametersFieldMask, _mfParameters);

        MFShaderParameterPtr::iterator fieldIt = _mfParameters.begin();

        fieldIt += uiIndex;

        subRef(*fieldIt);

        _mfParameters.erase(fieldIt);
    }
}

void ShaderParameterChunkBase::subParameter(ShaderParameterPtrConstArg value)
{
    Int32 iElemIdx = _mfParameters.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ParametersFieldMask, _mfParameters);

        MFShaderParameterPtr::iterator fieldIt = _mfParameters.begin();

        fieldIt += iElemIdx;

        subRef(*fieldIt);

        _mfParameters.erase(fieldIt);
    }
}
void ShaderParameterChunkBase::clearParameters(void)
{
    editMField(ParametersFieldMask, _mfParameters);

    MFShaderParameterPtr::iterator       fieldIt  = _mfParameters.begin();
    MFShaderParameterPtr::const_iterator fieldEnd = _mfParameters.end  ();

    while(fieldIt != fieldEnd)
    {
        subRef(*fieldIt);

        ++fieldIt;
    }

    _mfParameters.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 ShaderParameterChunkBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ParametersFieldMask & whichField))
    {
        returnValue += _mfParameters.getBinSize();
    }

    return returnValue;
}

void ShaderParameterChunkBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ParametersFieldMask & whichField))
    {
        _mfParameters.copyToBin(pMem);
    }
}

void ShaderParameterChunkBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ParametersFieldMask & whichField))
    {
        _mfParameters.copyFromBin(pMem);
    }
}



/*------------------------- constructors ----------------------------------*/

ShaderParameterChunkBase::ShaderParameterChunkBase(void) :
    Inherited(),
    _mfParameters()
{
}

ShaderParameterChunkBase::ShaderParameterChunkBase(const ShaderParameterChunkBase &source) :
    Inherited(source),
    _mfParameters()
{
}

/*-------------------------- destructors ----------------------------------*/

ShaderParameterChunkBase::~ShaderParameterChunkBase(void)
{
}

void ShaderParameterChunkBase::onCreate(const ShaderParameterChunk *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {

        MFShaderParameterPtr::const_iterator ParametersIt  = 
            source->_mfParameters.begin();
        MFShaderParameterPtr::const_iterator ParametersEnd = 
            source->_mfParameters.end  ();

        while(ParametersIt != ParametersEnd)
        {
            this->addParameter(*ParametersIt);

            ++ParametersIt;
        }
    }
}

#ifdef OSG_MT_FIELDCONTAINERPTR
void ShaderParameterChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo,
                                        UInt32             uiCopyOffset)
{
    this->execSync(static_cast<ShaderParameterChunkBase *>(&oFrom),
                   whichField, 
                   syncMode, 
                   uiSyncInfo,
                   uiCopyOffset);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
void ShaderParameterChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<ShaderParameterChunkBase *>(&oFrom), 
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif

#if 0
void ShaderParameterChunkBase::execBeginEditV(ConstFieldMaskArg whichField,
                                       UInt32            uiAspect,
                                       UInt32            uiContainerSize)
{
    this->execBeginEdit(whichField, uiAspect, uiContainerSize);
}
#endif


void ShaderParameterChunkBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<ShaderParameterChunk *>(this)->clearParameters();
}


#include "OSGSField.ins"
#include "OSGMField.ins"

#if defined(OSG_TMPL_STATIC_MEMBER_NEEDS_FUNCTION_INSTANTIATION) || \
    defined(OSG_TMPL_STATIC_MEMBER_NEEDS_CLASS_INSTANTIATION   )

#include "OSGSFieldFuncs.ins"
#include "OSGMFieldFuncs.ins"
#endif

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<ShaderParameterChunkPtr>::_type("ShaderParameterChunkPtr", "StateChunkPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(ShaderParameterChunkPtr)

OSG_FIELD_DLLEXPORT_DEF1(SField, ShaderParameterChunkPtr);
OSG_FIELD_DLLEXPORT_DEF1(MField, ShaderParameterChunkPtr);

OSG_END_NAMESPACE


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: $";
    static Char8 cvsid_hpp       [] = OSGSHADERPARAMETERCHUNKBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGSHADERPARAMETERCHUNKBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGSHADERPARAMETERCHUNKFIELDS_HEADER_CVSID;
}
