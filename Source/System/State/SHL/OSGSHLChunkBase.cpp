/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SHLChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESHLCHUNKINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>




#include "OSGSHLChunkBase.h"
#include "OSGSHLChunk.h"

OSG_USING_NAMESPACE

// Field descriptions

/*! \var bool SHLChunkBase::_sfCgFrontEnd
    
*/
/*! \var bool SHLChunkBase::_sfPointSize
            Flag to set whether the shader can change the point size.

*/
/*! \var UInt32 SHLChunkBase::_sfGLId
    
*/

void SHLChunkBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL; 


#ifdef OSG_1_COMPAT
    typedef const SFBool *(SHLChunkBase::*GetSFCgFrontEndF)(void) const;

    GetSFCgFrontEndF GetSFCgFrontEnd = &SHLChunkBase::getSFCgFrontEnd;
#endif

    pDesc = new SFBool::Description(
        SFBool::getClassType(), 
        "cgFrontEnd", 
        CgFrontEndFieldId, CgFrontEndFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&SHLChunkBase::editSFCgFrontEnd),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFCgFrontEnd));
#else
        reinterpret_cast<FieldGetMethodSig >(&SHLChunkBase::getSFCgFrontEnd));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFBool *(SHLChunkBase::*GetSFPointSizeF)(void) const;

    GetSFPointSizeF GetSFPointSize = &SHLChunkBase::getSFPointSize;
#endif

    pDesc = new SFBool::Description(
        SFBool::getClassType(), 
        "pointSize", 
        PointSizeFieldId, PointSizeFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&SHLChunkBase::editSFPointSize),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFPointSize));
#else
        reinterpret_cast<FieldGetMethodSig >(&SHLChunkBase::getSFPointSize));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFUInt32 *(SHLChunkBase::*GetSFGLIdF)(void) const;

    GetSFGLIdF GetSFGLId = &SHLChunkBase::getSFGLId;
#endif

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(), 
        "GLId", 
        GLIdFieldId, GLIdFieldMask,
        true,
        (Field::FClusterLocal),
        reinterpret_cast<FieldEditMethodSig>(&SHLChunkBase::editSFGLId),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFGLId));
#else
        reinterpret_cast<FieldGetMethodSig >(&SHLChunkBase::getSFGLId));
#endif

    oType.addInitialDesc(pDesc);
}


SHLChunkBase::TypeObject SHLChunkBase::_type(true,
    SHLChunkBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &SHLChunkBase::createEmpty,
    SHLChunk::initMethod,
    (InitalInsertDescFunc) &SHLChunkBase::classDescInserter,
    false);

/*------------------------------ get -----------------------------------*/

FieldContainerType &SHLChunkBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &SHLChunkBase::getType(void) const 
{
    return _type;
} 

UInt32 SHLChunkBase::getContainerSize(void) const 
{ 
    return sizeof(SHLChunk); 
}

/*------------------------- decorator get ------------------------------*/


SFBool *SHLChunkBase::editSFCgFrontEnd(void)
{
    editSField(CgFrontEndFieldMask);

    return &_sfCgFrontEnd;
}

const SFBool *SHLChunkBase::getSFCgFrontEnd(void) const
{
    return &_sfCgFrontEnd;
}

SFBool *SHLChunkBase::editSFPointSize(void)
{
    editSField(PointSizeFieldMask);

    return &_sfPointSize;
}

const SFBool *SHLChunkBase::getSFPointSize(void) const
{
    return &_sfPointSize;
}

SFUInt32 *SHLChunkBase::editSFGLId(void)
{
    editSField(GLIdFieldMask);

    return &_sfGLId;
}

const SFUInt32 *SHLChunkBase::getSFGLId(void) const
{
    return &_sfGLId;
}



/*------------------------------ access -----------------------------------*/

UInt32 SHLChunkBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (CgFrontEndFieldMask & whichField))
    {
        returnValue += _sfCgFrontEnd.getBinSize();
    }
    if(FieldBits::NoField != (PointSizeFieldMask & whichField))
    {
        returnValue += _sfPointSize.getBinSize();
    }
    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        returnValue += _sfGLId.getBinSize();
    }

    return returnValue;
}

void SHLChunkBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (CgFrontEndFieldMask & whichField))
    {
        _sfCgFrontEnd.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PointSizeFieldMask & whichField))
    {
        _sfPointSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        _sfGLId.copyToBin(pMem);
    }
}

void SHLChunkBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (CgFrontEndFieldMask & whichField))
    {
        _sfCgFrontEnd.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PointSizeFieldMask & whichField))
    {
        _sfPointSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        _sfGLId.copyFromBin(pMem);
    }
}

//! create an empty new instance of the class, do not copy the prototype
SHLChunkPtr SHLChunkBase::createEmpty(void) 
{ 
    SHLChunkPtr returnValue; 
    
    newPtr<SHLChunk>(returnValue); 

    return returnValue; 
}

FieldContainerPtr SHLChunkBase::shallowCopy(void) const 
{ 
    SHLChunkPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const SHLChunk *>(this)); 

    return returnValue; 
}



/*------------------------- constructors ----------------------------------*/

SHLChunkBase::SHLChunkBase(void) :
    Inherited(),
    _sfCgFrontEnd(bool(false)),
    _sfPointSize(bool(false)),
    _sfGLId()
{
}

SHLChunkBase::SHLChunkBase(const SHLChunkBase &source) :
    Inherited(source),
    _sfCgFrontEnd(source._sfCgFrontEnd),
    _sfPointSize(source._sfPointSize),
    _sfGLId(source._sfGLId)
{
}

/*-------------------------- destructors ----------------------------------*/

SHLChunkBase::~SHLChunkBase(void)
{
}


#ifdef OSG_MT_FIELDCONTAINERPTR
void SHLChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo,
                                        UInt32             uiCopyOffset)
{
    this->execSync(static_cast<SHLChunkBase *>(&oFrom),
                   whichField, 
                   syncMode, 
                   uiSyncInfo,
                   uiCopyOffset);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
void SHLChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<SHLChunkBase *>(&oFrom), 
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif

#if 0
void SHLChunkBase::execBeginEditV(ConstFieldMaskArg whichField,
                                       UInt32            uiAspect,
                                       UInt32            uiContainerSize)
{
    this->execBeginEdit(whichField, uiAspect, uiContainerSize);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr SHLChunkBase::createAspectCopy(void) const
{
    SHLChunkPtr returnValue; 

    newAspectCopy(returnValue, 
                  dynamic_cast<const SHLChunk *>(this)); 

    return returnValue; 
}
#endif

void SHLChunkBase::resolveLinks(void)
{
    Inherited::resolveLinks();
}


#include "OSGSField.ins"
#include "OSGMField.ins"

#if defined(OSG_TMPL_STATIC_MEMBER_NEEDS_FUNCTION_INSTANTIATION) || \
    defined(OSG_TMPL_STATIC_MEMBER_NEEDS_CLASS_INSTANTIATION   )

#include "OSGSFieldFuncs.ins"
#include "OSGMFieldFuncs.ins"
#endif

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<SHLChunkPtr>::_type("SHLChunkPtr", "ShaderChunkPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(SHLChunkPtr)

OSG_FIELD_DLLEXPORT_DEF1(SField, SHLChunkPtr);
OSG_FIELD_DLLEXPORT_DEF1(MField, SHLChunkPtr);

OSG_END_NAMESPACE


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: $";
    static Char8 cvsid_hpp       [] = OSGSHLCHUNKBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGSHLCHUNKBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGSHLCHUNKFIELDS_HEADER_CVSID;
}
