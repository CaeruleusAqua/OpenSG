/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SimpleShadowMapEngineData!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESIMPLESHADOWMAPENGINEDATAINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>



#include <OSGCamera.h> // Camera Class
#include <OSGTextureObjChunk.h> // TexChunk Class
#include <OSGTextureBuffer.h> // TexBuffer Class
#include <OSGLightChunk.h> // LightChunk Class
#include <OSGBlendChunk.h> // BlendChunk Class
#include <OSGTexGenChunk.h> // TexGenChunk Class
#include <OSGPolygonChunk.h> // PolyChunk Class

#include "OSGSimpleShadowMapEngineDataBase.h"
#include "OSGSimpleShadowMapEngineData.h"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::SimpleShadowMapEngineData
    Data use for rendering by the SimpleShadowmap stage
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var CameraPtr       SimpleShadowMapEngineDataBase::_sfCamera
    
*/

/*! \var TextureObjChunkPtr SimpleShadowMapEngineDataBase::_sfTexChunk
    
*/

/*! \var TextureBufferPtr SimpleShadowMapEngineDataBase::_sfTexBuffer
    
*/

/*! \var LightChunkPtr   SimpleShadowMapEngineDataBase::_sfLightChunk
    
*/

/*! \var BlendChunkPtr   SimpleShadowMapEngineDataBase::_sfBlendChunk
    
*/

/*! \var TexGenChunkPtr  SimpleShadowMapEngineDataBase::_sfTexGenChunk
    
*/

/*! \var PolygonChunkPtr SimpleShadowMapEngineDataBase::_sfPolyChunk
    
*/


void SimpleShadowMapEngineDataBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFCameraPtr::Description(
        SFCameraPtr::getClassType(),
        "camera",
        "",
        CameraFieldId, CameraFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&SimpleShadowMapEngineDataBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&SimpleShadowMapEngineDataBase::getSFCamera));

    oType.addInitialDesc(pDesc);

    pDesc = new SFTextureObjChunkPtr::Description(
        SFTextureObjChunkPtr::getClassType(),
        "texChunk",
        "",
        TexChunkFieldId, TexChunkFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&SimpleShadowMapEngineDataBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&SimpleShadowMapEngineDataBase::getSFTexChunk));

    oType.addInitialDesc(pDesc);

    pDesc = new SFTextureBufferPtr::Description(
        SFTextureBufferPtr::getClassType(),
        "texBuffer",
        "",
        TexBufferFieldId, TexBufferFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&SimpleShadowMapEngineDataBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&SimpleShadowMapEngineDataBase::getSFTexBuffer));

    oType.addInitialDesc(pDesc);

    pDesc = new SFLightChunkPtr::Description(
        SFLightChunkPtr::getClassType(),
        "lightChunk",
        "",
        LightChunkFieldId, LightChunkFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&SimpleShadowMapEngineDataBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&SimpleShadowMapEngineDataBase::getSFLightChunk));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBlendChunkPtr::Description(
        SFBlendChunkPtr::getClassType(),
        "blendChunk",
        "",
        BlendChunkFieldId, BlendChunkFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&SimpleShadowMapEngineDataBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&SimpleShadowMapEngineDataBase::getSFBlendChunk));

    oType.addInitialDesc(pDesc);

    pDesc = new SFTexGenChunkPtr::Description(
        SFTexGenChunkPtr::getClassType(),
        "texGenChunk",
        "",
        TexGenChunkFieldId, TexGenChunkFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&SimpleShadowMapEngineDataBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&SimpleShadowMapEngineDataBase::getSFTexGenChunk));

    oType.addInitialDesc(pDesc);

    pDesc = new SFPolygonChunkPtr::Description(
        SFPolygonChunkPtr::getClassType(),
        "polyChunk",
        "",
        PolyChunkFieldId, PolyChunkFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&SimpleShadowMapEngineDataBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&SimpleShadowMapEngineDataBase::getSFPolyChunk));

    oType.addInitialDesc(pDesc);
}


SimpleShadowMapEngineDataBase::TypeObject SimpleShadowMapEngineDataBase::_type(
    SimpleShadowMapEngineDataBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (ProtoBundleCreateF) &SimpleShadowMapEngineDataBase::createEmpty,
    SimpleShadowMapEngineData::initMethod,
    (InitalInsertDescFunc) &SimpleShadowMapEngineDataBase::classDescInserter,
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"SimpleShadowMapEngineData\"\n"
    "    parent=\"StageData\"\n"
    "    library=\"Group\"\n"
    "    pointerfieldtypes=\"none\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    ">\n"
    "Data use for rendering by the SimpleShadowmap stage\n"
    "\t<Field\n"
    "\t\tname=\"camera\"\n"
    "\t\ttype=\"CameraPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NullFC\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"texChunk\"\n"
    "\t\ttype=\"TextureObjChunkPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NullFC\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"texBuffer\"\n"
    "\t\ttype=\"TextureBufferPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NullFC\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"lightChunk\"\n"
    "\t\ttype=\"LightChunkPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NullFC\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"blendChunk\"\n"
    "\t\ttype=\"BlendChunkPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NullFC\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"texGenChunk\"\n"
    "\t\ttype=\"TexGenChunkPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NullFC\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"polyChunk\"\n"
    "\t\ttype=\"PolygonChunkPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NullFC\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "Data use for rendering by the SimpleShadowmap stage\n"
    );

/*------------------------------ get -----------------------------------*/

FieldBundleType &SimpleShadowMapEngineDataBase::getType(void)
{
    return _type;
}

const FieldBundleType &SimpleShadowMapEngineDataBase::getType(void) const
{
    return _type;
}

UInt32 SimpleShadowMapEngineDataBase::getContainerSize(void) const
{
    return sizeof(SimpleShadowMapEngineData);
}

/*------------------------- decorator get ------------------------------*/


//! Get the SimpleShadowMapEngineData::_sfCamera field.
const SFCameraPtr *SimpleShadowMapEngineDataBase::getSFCamera(void) const
{
    return &_sfCamera;
}

//! Get the SimpleShadowMapEngineData::_sfTexChunk field.
const SFTextureObjChunkPtr *SimpleShadowMapEngineDataBase::getSFTexChunk(void) const
{
    return &_sfTexChunk;
}

//! Get the SimpleShadowMapEngineData::_sfTexBuffer field.
const SFTextureBufferPtr *SimpleShadowMapEngineDataBase::getSFTexBuffer(void) const
{
    return &_sfTexBuffer;
}

//! Get the SimpleShadowMapEngineData::_sfLightChunk field.
const SFLightChunkPtr *SimpleShadowMapEngineDataBase::getSFLightChunk(void) const
{
    return &_sfLightChunk;
}

//! Get the SimpleShadowMapEngineData::_sfBlendChunk field.
const SFBlendChunkPtr *SimpleShadowMapEngineDataBase::getSFBlendChunk(void) const
{
    return &_sfBlendChunk;
}

//! Get the SimpleShadowMapEngineData::_sfTexGenChunk field.
const SFTexGenChunkPtr *SimpleShadowMapEngineDataBase::getSFTexGenChunk(void) const
{
    return &_sfTexGenChunk;
}

//! Get the SimpleShadowMapEngineData::_sfPolyChunk field.
const SFPolygonChunkPtr *SimpleShadowMapEngineDataBase::getSFPolyChunk(void) const
{
    return &_sfPolyChunk;
}


void SimpleShadowMapEngineDataBase::pushToField(      FieldBundlePConstArg pNewElement,
                                    const UInt32               uiFieldId  )
{
    Inherited::pushToField(pNewElement, uiFieldId);

#if 0
    if(uiFieldId == CameraFieldId)
    {
        static_cast<SimpleShadowMapEngineData *>(this)->setCamera(
            cast_dynamic<CameraPtr>(pNewElement));
    }
    if(uiFieldId == TexChunkFieldId)
    {
        static_cast<SimpleShadowMapEngineData *>(this)->setTexChunk(
            cast_dynamic<TextureObjChunkPtr>(pNewElement));
    }
    if(uiFieldId == TexBufferFieldId)
    {
        static_cast<SimpleShadowMapEngineData *>(this)->setTexBuffer(
            cast_dynamic<TextureBufferPtr>(pNewElement));
    }
    if(uiFieldId == LightChunkFieldId)
    {
        static_cast<SimpleShadowMapEngineData *>(this)->setLightChunk(
            cast_dynamic<LightChunkPtr>(pNewElement));
    }
    if(uiFieldId == BlendChunkFieldId)
    {
        static_cast<SimpleShadowMapEngineData *>(this)->setBlendChunk(
            cast_dynamic<BlendChunkPtr>(pNewElement));
    }
    if(uiFieldId == TexGenChunkFieldId)
    {
        static_cast<SimpleShadowMapEngineData *>(this)->setTexGenChunk(
            cast_dynamic<TexGenChunkPtr>(pNewElement));
    }
    if(uiFieldId == PolyChunkFieldId)
    {
        static_cast<SimpleShadowMapEngineData *>(this)->setPolyChunk(
            cast_dynamic<PolygonChunkPtr>(pNewElement));
    }
#endif
}

void SimpleShadowMapEngineDataBase::insertIntoMField(const UInt32               uiIndex,
                                               FieldBundlePConstArg pNewElement,
                                         const UInt32               uiFieldId  )
{
    Inherited::insertIntoMField(uiIndex, pNewElement, uiFieldId);
#if 0
#endif
}

void SimpleShadowMapEngineDataBase::replaceInMField (const UInt32               uiIndex,
                                               FieldBundlePConstArg pNewElement,
                                         const UInt32               uiFieldId)
{
    Inherited::replaceInMField(uiIndex, pNewElement, uiFieldId);

#if 0
#endif
}

void SimpleShadowMapEngineDataBase::replaceInMField (      FieldBundlePConstArg pOldElement,
                                               FieldBundlePConstArg pNewElement,
                                         const UInt32               uiFieldId  )
{
    Inherited::replaceInMField(pOldElement, pNewElement, uiFieldId);
#if 0
#endif
}

void SimpleShadowMapEngineDataBase::removeFromMField(const UInt32 uiIndex,
                                         const UInt32 uiFieldId)
{
    Inherited::removeFromMField(uiIndex, uiFieldId);

#if 0
#endif
}

void SimpleShadowMapEngineDataBase::removeFromMField(      FieldBundlePConstArg pElement,
                                         const UInt32               uiFieldId)
{
    Inherited::removeFromMField(pElement, uiFieldId);

#if 0
#endif
}

void SimpleShadowMapEngineDataBase::clearField(const UInt32 uiFieldId)
{
    Inherited::clearField(uiFieldId);

#if 0 
    if(uiFieldId == CameraFieldId)
    {
        static_cast<SimpleShadowMapEngineData *>(this)->setCamera(NullFC);
    }
    if(uiFieldId == TexChunkFieldId)
    {
        static_cast<SimpleShadowMapEngineData *>(this)->setTexChunk(NullFC);
    }
    if(uiFieldId == TexBufferFieldId)
    {
        static_cast<SimpleShadowMapEngineData *>(this)->setTexBuffer(NullFC);
    }
    if(uiFieldId == LightChunkFieldId)
    {
        static_cast<SimpleShadowMapEngineData *>(this)->setLightChunk(NullFC);
    }
    if(uiFieldId == BlendChunkFieldId)
    {
        static_cast<SimpleShadowMapEngineData *>(this)->setBlendChunk(NullFC);
    }
    if(uiFieldId == TexGenChunkFieldId)
    {
        static_cast<SimpleShadowMapEngineData *>(this)->setTexGenChunk(NullFC);
    }
    if(uiFieldId == PolyChunkFieldId)
    {
        static_cast<SimpleShadowMapEngineData *>(this)->setPolyChunk(NullFC);
    }
#endif
}



/*------------------------------ access -----------------------------------*/

UInt32 SimpleShadowMapEngineDataBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (CameraFieldMask & whichField))
    {
        returnValue += _sfCamera.getBinSize();
    }
    if(FieldBits::NoField != (TexChunkFieldMask & whichField))
    {
        returnValue += _sfTexChunk.getBinSize();
    }
    if(FieldBits::NoField != (TexBufferFieldMask & whichField))
    {
        returnValue += _sfTexBuffer.getBinSize();
    }
    if(FieldBits::NoField != (LightChunkFieldMask & whichField))
    {
        returnValue += _sfLightChunk.getBinSize();
    }
    if(FieldBits::NoField != (BlendChunkFieldMask & whichField))
    {
        returnValue += _sfBlendChunk.getBinSize();
    }
    if(FieldBits::NoField != (TexGenChunkFieldMask & whichField))
    {
        returnValue += _sfTexGenChunk.getBinSize();
    }
    if(FieldBits::NoField != (PolyChunkFieldMask & whichField))
    {
        returnValue += _sfPolyChunk.getBinSize();
    }

    return returnValue;
}

void SimpleShadowMapEngineDataBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (CameraFieldMask & whichField))
    {
        _sfCamera.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TexChunkFieldMask & whichField))
    {
        _sfTexChunk.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TexBufferFieldMask & whichField))
    {
        _sfTexBuffer.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LightChunkFieldMask & whichField))
    {
        _sfLightChunk.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BlendChunkFieldMask & whichField))
    {
        _sfBlendChunk.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TexGenChunkFieldMask & whichField))
    {
        _sfTexGenChunk.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PolyChunkFieldMask & whichField))
    {
        _sfPolyChunk.copyToBin(pMem);
    }
}

void SimpleShadowMapEngineDataBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (CameraFieldMask & whichField))
    {
        _sfCamera.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TexChunkFieldMask & whichField))
    {
        _sfTexChunk.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TexBufferFieldMask & whichField))
    {
        _sfTexBuffer.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LightChunkFieldMask & whichField))
    {
        _sfLightChunk.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BlendChunkFieldMask & whichField))
    {
        _sfBlendChunk.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TexGenChunkFieldMask & whichField))
    {
        _sfTexGenChunk.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PolyChunkFieldMask & whichField))
    {
        _sfPolyChunk.copyFromBin(pMem);
    }
}

//! create an empty new instance of the class, do not copy the prototype
SimpleShadowMapEngineDataP SimpleShadowMapEngineDataBase::createEmpty(void)
{
    SimpleShadowMapEngineDataP returnValue;

    newPtr<SimpleShadowMapEngineData>(returnValue);

    return returnValue;
}

FieldBundleP SimpleShadowMapEngineDataBase::shallowCopy(void) const
{
    SimpleShadowMapEngineDataP returnValue;

    newPtr(returnValue, dynamic_cast<const SimpleShadowMapEngineData *>(this));

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

SimpleShadowMapEngineDataBase::SimpleShadowMapEngineDataBase(void) :
    Inherited(),
    _sfCamera                 (CameraPtr(NullFC)),
    _sfTexChunk               (TextureObjChunkPtr(NullFC)),
    _sfTexBuffer              (TextureBufferPtr(NullFC)),
    _sfLightChunk             (LightChunkPtr(NullFC)),
    _sfBlendChunk             (BlendChunkPtr(NullFC)),
    _sfTexGenChunk            (TexGenChunkPtr(NullFC)),
    _sfPolyChunk              (PolygonChunkPtr(NullFC))
{
}

SimpleShadowMapEngineDataBase::SimpleShadowMapEngineDataBase(const SimpleShadowMapEngineDataBase &source) :
    Inherited(source),
    _sfCamera                 (),
    _sfTexChunk               (),
    _sfTexBuffer              (),
    _sfLightChunk             (),
    _sfBlendChunk             (),
    _sfTexGenChunk            (),
    _sfPolyChunk              ()
{
}

/*-------------------------- destructors ----------------------------------*/

SimpleShadowMapEngineDataBase::~SimpleShadowMapEngineDataBase(void)
{
}

void SimpleShadowMapEngineDataBase::onCreate(const SimpleShadowMapEngineData *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {

        this->setCamera(source->getCamera());

        this->setTexChunk(source->getTexChunk());

        this->setTexBuffer(source->getTexBuffer());

        this->setLightChunk(source->getLightChunk());

        this->setBlendChunk(source->getBlendChunk());

        this->setTexGenChunk(source->getTexGenChunk());

        this->setPolyChunk(source->getPolyChunk());
    }
}

void SimpleShadowMapEngineDataBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<SimpleShadowMapEngineData *>(this)->setCamera(NullFC);

    static_cast<SimpleShadowMapEngineData *>(this)->setTexChunk(NullFC);

    static_cast<SimpleShadowMapEngineData *>(this)->setTexBuffer(NullFC);

    static_cast<SimpleShadowMapEngineData *>(this)->setLightChunk(NullFC);

    static_cast<SimpleShadowMapEngineData *>(this)->setBlendChunk(NullFC);

    static_cast<SimpleShadowMapEngineData *>(this)->setTexGenChunk(NullFC);

    static_cast<SimpleShadowMapEngineData *>(this)->setPolyChunk(NullFC);
}


#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<SimpleShadowMapEngineDataP>::_type("SimpleShadowMapEngineDataP", "StageDataP");
#endif



OSG_END_NAMESPACE
