/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class HDRStageData!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEHDRSTAGEDATAINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>



#include <OSGChunkMaterial.h> // ToneMappingMaterial Class
#include <OSGFrameBufferObject.h> // BlurRenderTarget Class
#include <OSGChunkMaterial.h> // BlurMaterial Class
#include <OSGSHLChunk.h> // HBlurShader Class
#include <OSGSHLChunk.h> // VBlurShader Class
#include <OSGFrameBufferObject.h> // ShrinkRenderTarget Class
#include <OSGChunkMaterial.h> // ShrinkMaterial Class

#include "OSGHDRStageDataBase.h"
#include "OSGHDRStageData.h"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::HDRStageData
    Data use for rendering by the HDR stage
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var ChunkMaterialPtr HDRStageDataBase::_sfToneMappingMaterial
    
*/

/*! \var FrameBufferObjectPtr HDRStageDataBase::_sfBlurRenderTarget
    
*/

/*! \var ChunkMaterialPtr HDRStageDataBase::_sfBlurMaterial
    
*/

/*! \var SHLChunkPtr     HDRStageDataBase::_sfHBlurShader
    
*/

/*! \var SHLChunkPtr     HDRStageDataBase::_sfVBlurShader
    
*/

/*! \var UInt32          HDRStageDataBase::_sfWidth
    
*/

/*! \var UInt32          HDRStageDataBase::_sfHeight
    
*/

/*! \var FrameBufferObjectPtr HDRStageDataBase::_sfShrinkRenderTarget
    
*/

/*! \var ChunkMaterialPtr HDRStageDataBase::_sfShrinkMaterial
    
*/


void HDRStageDataBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFChunkMaterialPtr::Description(
        SFChunkMaterialPtr::getClassType(),
        "toneMappingMaterial",
        "",
        ToneMappingMaterialFieldId, ToneMappingMaterialFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&HDRStageDataBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&HDRStageDataBase::getSFToneMappingMaterial));

    oType.addInitialDesc(pDesc);

    pDesc = new SFFrameBufferObjectPtr::Description(
        SFFrameBufferObjectPtr::getClassType(),
        "blurRenderTarget",
        "",
        BlurRenderTargetFieldId, BlurRenderTargetFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&HDRStageDataBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&HDRStageDataBase::getSFBlurRenderTarget));

    oType.addInitialDesc(pDesc);

    pDesc = new SFChunkMaterialPtr::Description(
        SFChunkMaterialPtr::getClassType(),
        "blurMaterial",
        "",
        BlurMaterialFieldId, BlurMaterialFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&HDRStageDataBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&HDRStageDataBase::getSFBlurMaterial));

    oType.addInitialDesc(pDesc);

    pDesc = new SFSHLChunkPtr::Description(
        SFSHLChunkPtr::getClassType(),
        "hBlurShader",
        "",
        HBlurShaderFieldId, HBlurShaderFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&HDRStageDataBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&HDRStageDataBase::getSFHBlurShader));

    oType.addInitialDesc(pDesc);

    pDesc = new SFSHLChunkPtr::Description(
        SFSHLChunkPtr::getClassType(),
        "vBlurShader",
        "",
        VBlurShaderFieldId, VBlurShaderFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&HDRStageDataBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&HDRStageDataBase::getSFVBlurShader));

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFUInt32 *(HDRStageDataBase::*GetSFWidthF)(void) const;

    GetSFWidthF GetSFWidth = &HDRStageDataBase::getSFWidth;
#endif

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "width",
        "",
        WidthFieldId, WidthFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&HDRStageDataBase::editSFWidth),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFWidth));
#else
        reinterpret_cast<FieldGetMethodSig >(&HDRStageDataBase::getSFWidth));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFUInt32 *(HDRStageDataBase::*GetSFHeightF)(void) const;

    GetSFHeightF GetSFHeight = &HDRStageDataBase::getSFHeight;
#endif

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "height",
        "",
        HeightFieldId, HeightFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&HDRStageDataBase::editSFHeight),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFHeight));
#else
        reinterpret_cast<FieldGetMethodSig >(&HDRStageDataBase::getSFHeight));
#endif

    oType.addInitialDesc(pDesc);

    pDesc = new SFFrameBufferObjectPtr::Description(
        SFFrameBufferObjectPtr::getClassType(),
        "shrinkRenderTarget",
        "",
        ShrinkRenderTargetFieldId, ShrinkRenderTargetFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&HDRStageDataBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&HDRStageDataBase::getSFShrinkRenderTarget));

    oType.addInitialDesc(pDesc);

    pDesc = new SFChunkMaterialPtr::Description(
        SFChunkMaterialPtr::getClassType(),
        "shrinkMaterial",
        "",
        ShrinkMaterialFieldId, ShrinkMaterialFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&HDRStageDataBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&HDRStageDataBase::getSFShrinkMaterial));

    oType.addInitialDesc(pDesc);
}


HDRStageDataBase::TypeObject HDRStageDataBase::_type(
    HDRStageDataBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (ProtoBundleCreateF) &HDRStageDataBase::createEmpty,
    HDRStageData::initMethod,
    (InitalInsertDescFunc) &HDRStageDataBase::classDescInserter,
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"HDRStageData\"\n"
    "    parent=\"StageData\"\n"
    "    library=\"Group\"\n"
    "    pointerfieldtypes=\"none\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    ">\n"
    "Data use for rendering by the HDR stage\n"
    "\t<Field\n"
    "\t\tname=\"toneMappingMaterial\"\n"
    "\t\ttype=\"ChunkMaterialPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NullFC\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"blurRenderTarget\"\n"
    "\t\ttype=\"FrameBufferObjectPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NullFC\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"blurMaterial\"\n"
    "\t\ttype=\"ChunkMaterialPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NullFC\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"hBlurShader\"\n"
    "\t\ttype=\"SHLChunkPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NullFC\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"vBlurShader\"\n"
    "\t\ttype=\"SHLChunkPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NullFC\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "    <Field\n"
    "\t\tname=\"width\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\taccess=\"public\"\n"
    "    >\n"
    "    </Field>\n"
    "    <Field\n"
    "\t\tname=\"height\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\taccess=\"public\"\n"
    "    >\n"
    "    </Field>\n"
    "\t<Field\n"
    "\t\tname=\"shrinkRenderTarget\"\n"
    "\t\ttype=\"FrameBufferObjectPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NullFC\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shrinkMaterial\"\n"
    "\t\ttype=\"ChunkMaterialPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NullFC\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "Data use for rendering by the HDR stage\n"
    );

/*------------------------------ get -----------------------------------*/

FieldBundleType &HDRStageDataBase::getType(void)
{
    return _type;
}

const FieldBundleType &HDRStageDataBase::getType(void) const
{
    return _type;
}

UInt32 HDRStageDataBase::getContainerSize(void) const
{
    return sizeof(HDRStageData);
}

/*------------------------- decorator get ------------------------------*/


//! Get the HDRStageData::_sfToneMappingMaterial field.
const SFChunkMaterialPtr *HDRStageDataBase::getSFToneMappingMaterial(void) const
{
    return &_sfToneMappingMaterial;
}

//! Get the HDRStageData::_sfBlurRenderTarget field.
const SFFrameBufferObjectPtr *HDRStageDataBase::getSFBlurRenderTarget(void) const
{
    return &_sfBlurRenderTarget;
}

//! Get the HDRStageData::_sfBlurMaterial field.
const SFChunkMaterialPtr *HDRStageDataBase::getSFBlurMaterial(void) const
{
    return &_sfBlurMaterial;
}

//! Get the HDRStageData::_sfHBlurShader field.
const SFSHLChunkPtr *HDRStageDataBase::getSFHBlurShader(void) const
{
    return &_sfHBlurShader;
}

//! Get the HDRStageData::_sfVBlurShader field.
const SFSHLChunkPtr *HDRStageDataBase::getSFVBlurShader(void) const
{
    return &_sfVBlurShader;
}

SFUInt32 *HDRStageDataBase::editSFWidth(void)
{
    editSField(WidthFieldMask);

    return &_sfWidth;
}

const SFUInt32 *HDRStageDataBase::getSFWidth(void) const
{
    return &_sfWidth;
}

#ifdef OSG_1_GET_COMPAT
SFUInt32            *HDRStageDataBase::getSFWidth          (void)
{
    return this->editSFWidth          ();
}
#endif

SFUInt32 *HDRStageDataBase::editSFHeight(void)
{
    editSField(HeightFieldMask);

    return &_sfHeight;
}

const SFUInt32 *HDRStageDataBase::getSFHeight(void) const
{
    return &_sfHeight;
}

#ifdef OSG_1_GET_COMPAT
SFUInt32            *HDRStageDataBase::getSFHeight         (void)
{
    return this->editSFHeight         ();
}
#endif

//! Get the HDRStageData::_sfShrinkRenderTarget field.
const SFFrameBufferObjectPtr *HDRStageDataBase::getSFShrinkRenderTarget(void) const
{
    return &_sfShrinkRenderTarget;
}

//! Get the HDRStageData::_sfShrinkMaterial field.
const SFChunkMaterialPtr *HDRStageDataBase::getSFShrinkMaterial(void) const
{
    return &_sfShrinkMaterial;
}


void HDRStageDataBase::pushToField(      FieldBundlePConstArg pNewElement,
                                    const UInt32               uiFieldId  )
{
    Inherited::pushToField(pNewElement, uiFieldId);

#if 0
    if(uiFieldId == ToneMappingMaterialFieldId)
    {
        static_cast<HDRStageData *>(this)->setToneMappingMaterial(
            cast_dynamic<ChunkMaterialPtr>(pNewElement));
    }
    if(uiFieldId == BlurRenderTargetFieldId)
    {
        static_cast<HDRStageData *>(this)->setBlurRenderTarget(
            cast_dynamic<FrameBufferObjectPtr>(pNewElement));
    }
    if(uiFieldId == BlurMaterialFieldId)
    {
        static_cast<HDRStageData *>(this)->setBlurMaterial(
            cast_dynamic<ChunkMaterialPtr>(pNewElement));
    }
    if(uiFieldId == HBlurShaderFieldId)
    {
        static_cast<HDRStageData *>(this)->setHBlurShader(
            cast_dynamic<SHLChunkPtr>(pNewElement));
    }
    if(uiFieldId == VBlurShaderFieldId)
    {
        static_cast<HDRStageData *>(this)->setVBlurShader(
            cast_dynamic<SHLChunkPtr>(pNewElement));
    }
    if(uiFieldId == ShrinkRenderTargetFieldId)
    {
        static_cast<HDRStageData *>(this)->setShrinkRenderTarget(
            cast_dynamic<FrameBufferObjectPtr>(pNewElement));
    }
    if(uiFieldId == ShrinkMaterialFieldId)
    {
        static_cast<HDRStageData *>(this)->setShrinkMaterial(
            cast_dynamic<ChunkMaterialPtr>(pNewElement));
    }
#endif
}

void HDRStageDataBase::insertIntoMField(const UInt32               uiIndex,
                                               FieldBundlePConstArg pNewElement,
                                         const UInt32               uiFieldId  )
{
    Inherited::insertIntoMField(uiIndex, pNewElement, uiFieldId);
#if 0
#endif
}

void HDRStageDataBase::replaceInMField (const UInt32               uiIndex,
                                               FieldBundlePConstArg pNewElement,
                                         const UInt32               uiFieldId)
{
    Inherited::replaceInMField(uiIndex, pNewElement, uiFieldId);

#if 0
#endif
}

void HDRStageDataBase::replaceInMField (      FieldBundlePConstArg pOldElement,
                                               FieldBundlePConstArg pNewElement,
                                         const UInt32               uiFieldId  )
{
    Inherited::replaceInMField(pOldElement, pNewElement, uiFieldId);
#if 0
#endif
}

void HDRStageDataBase::removeFromMField(const UInt32 uiIndex,
                                         const UInt32 uiFieldId)
{
    Inherited::removeFromMField(uiIndex, uiFieldId);

#if 0
#endif
}

void HDRStageDataBase::removeFromMField(      FieldBundlePConstArg pElement,
                                         const UInt32               uiFieldId)
{
    Inherited::removeFromMField(pElement, uiFieldId);

#if 0
#endif
}

void HDRStageDataBase::clearField(const UInt32 uiFieldId)
{
    Inherited::clearField(uiFieldId);

#if 0 
    if(uiFieldId == ToneMappingMaterialFieldId)
    {
        static_cast<HDRStageData *>(this)->setToneMappingMaterial(NullFC);
    }
    if(uiFieldId == BlurRenderTargetFieldId)
    {
        static_cast<HDRStageData *>(this)->setBlurRenderTarget(NullFC);
    }
    if(uiFieldId == BlurMaterialFieldId)
    {
        static_cast<HDRStageData *>(this)->setBlurMaterial(NullFC);
    }
    if(uiFieldId == HBlurShaderFieldId)
    {
        static_cast<HDRStageData *>(this)->setHBlurShader(NullFC);
    }
    if(uiFieldId == VBlurShaderFieldId)
    {
        static_cast<HDRStageData *>(this)->setVBlurShader(NullFC);
    }
    if(uiFieldId == ShrinkRenderTargetFieldId)
    {
        static_cast<HDRStageData *>(this)->setShrinkRenderTarget(NullFC);
    }
    if(uiFieldId == ShrinkMaterialFieldId)
    {
        static_cast<HDRStageData *>(this)->setShrinkMaterial(NullFC);
    }
#endif
}



/*------------------------------ access -----------------------------------*/

UInt32 HDRStageDataBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ToneMappingMaterialFieldMask & whichField))
    {
        returnValue += _sfToneMappingMaterial.getBinSize();
    }
    if(FieldBits::NoField != (BlurRenderTargetFieldMask & whichField))
    {
        returnValue += _sfBlurRenderTarget.getBinSize();
    }
    if(FieldBits::NoField != (BlurMaterialFieldMask & whichField))
    {
        returnValue += _sfBlurMaterial.getBinSize();
    }
    if(FieldBits::NoField != (HBlurShaderFieldMask & whichField))
    {
        returnValue += _sfHBlurShader.getBinSize();
    }
    if(FieldBits::NoField != (VBlurShaderFieldMask & whichField))
    {
        returnValue += _sfVBlurShader.getBinSize();
    }
    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        returnValue += _sfWidth.getBinSize();
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        returnValue += _sfHeight.getBinSize();
    }
    if(FieldBits::NoField != (ShrinkRenderTargetFieldMask & whichField))
    {
        returnValue += _sfShrinkRenderTarget.getBinSize();
    }
    if(FieldBits::NoField != (ShrinkMaterialFieldMask & whichField))
    {
        returnValue += _sfShrinkMaterial.getBinSize();
    }

    return returnValue;
}

void HDRStageDataBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ToneMappingMaterialFieldMask & whichField))
    {
        _sfToneMappingMaterial.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BlurRenderTargetFieldMask & whichField))
    {
        _sfBlurRenderTarget.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BlurMaterialFieldMask & whichField))
    {
        _sfBlurMaterial.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HBlurShaderFieldMask & whichField))
    {
        _sfHBlurShader.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VBlurShaderFieldMask & whichField))
    {
        _sfVBlurShader.copyToBin(pMem);
    }
    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        _sfWidth.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        _sfHeight.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShrinkRenderTargetFieldMask & whichField))
    {
        _sfShrinkRenderTarget.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShrinkMaterialFieldMask & whichField))
    {
        _sfShrinkMaterial.copyToBin(pMem);
    }
}

void HDRStageDataBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ToneMappingMaterialFieldMask & whichField))
    {
        _sfToneMappingMaterial.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BlurRenderTargetFieldMask & whichField))
    {
        _sfBlurRenderTarget.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BlurMaterialFieldMask & whichField))
    {
        _sfBlurMaterial.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HBlurShaderFieldMask & whichField))
    {
        _sfHBlurShader.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VBlurShaderFieldMask & whichField))
    {
        _sfVBlurShader.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        _sfWidth.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        _sfHeight.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShrinkRenderTargetFieldMask & whichField))
    {
        _sfShrinkRenderTarget.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShrinkMaterialFieldMask & whichField))
    {
        _sfShrinkMaterial.copyFromBin(pMem);
    }
}

//! create an empty new instance of the class, do not copy the prototype
HDRStageDataP HDRStageDataBase::createEmpty(void)
{
    HDRStageDataP returnValue;

    newPtr<HDRStageData>(returnValue);

    return returnValue;
}

FieldBundleP HDRStageDataBase::shallowCopy(void) const
{
    HDRStageDataP returnValue;

    newPtr(returnValue, dynamic_cast<const HDRStageData *>(this));

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

HDRStageDataBase::HDRStageDataBase(void) :
    Inherited(),
    _sfToneMappingMaterial    (ChunkMaterialPtr(NullFC)),
    _sfBlurRenderTarget       (FrameBufferObjectPtr(NullFC)),
    _sfBlurMaterial           (ChunkMaterialPtr(NullFC)),
    _sfHBlurShader            (SHLChunkPtr(NullFC)),
    _sfVBlurShader            (SHLChunkPtr(NullFC)),
    _sfWidth                  (UInt32(0)),
    _sfHeight                 (UInt32(0)),
    _sfShrinkRenderTarget     (FrameBufferObjectPtr(NullFC)),
    _sfShrinkMaterial         (ChunkMaterialPtr(NullFC))
{
}

HDRStageDataBase::HDRStageDataBase(const HDRStageDataBase &source) :
    Inherited(source),
    _sfToneMappingMaterial    (),
    _sfBlurRenderTarget       (),
    _sfBlurMaterial           (),
    _sfHBlurShader            (),
    _sfVBlurShader            (),
    _sfWidth                  (source._sfWidth                  ),
    _sfHeight                 (source._sfHeight                 ),
    _sfShrinkRenderTarget     (),
    _sfShrinkMaterial         ()
{
}

/*-------------------------- destructors ----------------------------------*/

HDRStageDataBase::~HDRStageDataBase(void)
{
}

void HDRStageDataBase::onCreate(const HDRStageData *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {

        this->setToneMappingMaterial(source->getToneMappingMaterial());

        this->setBlurRenderTarget(source->getBlurRenderTarget());

        this->setBlurMaterial(source->getBlurMaterial());

        this->setHBlurShader(source->getHBlurShader());

        this->setVBlurShader(source->getVBlurShader());

        this->setShrinkRenderTarget(source->getShrinkRenderTarget());

        this->setShrinkMaterial(source->getShrinkMaterial());
    }
}

void HDRStageDataBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<HDRStageData *>(this)->setToneMappingMaterial(NullFC);

    static_cast<HDRStageData *>(this)->setBlurRenderTarget(NullFC);

    static_cast<HDRStageData *>(this)->setBlurMaterial(NullFC);

    static_cast<HDRStageData *>(this)->setHBlurShader(NullFC);

    static_cast<HDRStageData *>(this)->setVBlurShader(NullFC);

    static_cast<HDRStageData *>(this)->setShrinkRenderTarget(NullFC);

    static_cast<HDRStageData *>(this)->setShrinkMaterial(NullFC);
}


#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<HDRStageDataP>::_type("HDRStageDataP", "StageDataP");
#endif



OSG_END_NAMESPACE
