/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class CubeMapGeneratorStageData!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILECUBEMAPGENERATORSTAGEDATAINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>
#include "boost/bind.hpp"

#include <OSGConfig.h>




#include "OSGCubeMapGeneratorStageDataBase.h"
#include "OSGCubeMapGeneratorStageData.h"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::CubeMapGeneratorStageData
    Data use for rendering by the cubemap generator stage
 */


CubeMapGeneratorStageDataBase::TypeObject CubeMapGeneratorStageDataBase::_type(
    CubeMapGeneratorStageDataBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (ProtoBundleCreateF) &CubeMapGeneratorStageDataBase::createEmpty,
    CubeMapGeneratorStageData::initMethod,
    NULL,
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"CubeMapGeneratorStageData\"\n"
    "    parent=\"StageData\"\n"
    "    library=\"Group\"\n"
    "    pointerfieldtypes=\"none\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    ">\n"
    "Data use for rendering by the cubemap generator stage\n"
    "</FieldContainer>\n",
    "Data use for rendering by the cubemap generator stage\n"
    );

/*------------------------------ get -----------------------------------*/

FieldBundleType &CubeMapGeneratorStageDataBase::getType(void)
{
    return _type;
}

const FieldBundleType &CubeMapGeneratorStageDataBase::getType(void) const
{
    return _type;
}

UInt32 CubeMapGeneratorStageDataBase::getContainerSize(void) const
{
    return sizeof(CubeMapGeneratorStageData);
}

/*------------------------- decorator get ------------------------------*/






/*------------------------------ access -----------------------------------*/

UInt32 CubeMapGeneratorStageDataBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);


    return returnValue;
}

void CubeMapGeneratorStageDataBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

}

void CubeMapGeneratorStageDataBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

}

//! create an empty new instance of the class, do not copy the prototype
CubeMapGeneratorStageDataP CubeMapGeneratorStageDataBase::createEmpty(void)
{
    CubeMapGeneratorStageDataP returnValue;

    newPtr<CubeMapGeneratorStageData>(returnValue);

    return returnValue;
}

FieldBundleP CubeMapGeneratorStageDataBase::shallowCopy(void) const
{
    CubeMapGeneratorStageDataP returnValue;

    newPtr(returnValue, dynamic_cast<const CubeMapGeneratorStageData *>(this));

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

CubeMapGeneratorStageDataBase::CubeMapGeneratorStageDataBase(void) :
    Inherited()
{
}

CubeMapGeneratorStageDataBase::CubeMapGeneratorStageDataBase(const CubeMapGeneratorStageDataBase &source) :
    Inherited(source)
{
}

/*-------------------------- destructors ----------------------------------*/

CubeMapGeneratorStageDataBase::~CubeMapGeneratorStageDataBase(void)
{
}


void CubeMapGeneratorStageDataBase::resolveLinks(void)
{
    Inherited::resolveLinks();
}



#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<CubeMapGeneratorStageDataP>::_type("CubeMapGeneratorStageDataP", "StageDataP");
#endif



OSG_END_NAMESPACE
