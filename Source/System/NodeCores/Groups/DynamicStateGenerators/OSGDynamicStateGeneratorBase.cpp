/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DynamicStateGenerator!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEDYNAMICSTATEGENERATORINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>



#include <OSGFrameBufferObject.h> // RenderTarget Class

#include "OSGDynamicStateGeneratorBase.h"
#include "OSGDynamicStateGenerator.h"

#include "boost/bind.hpp"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::DynamicStateGenerator
    Base for dynamic materials like dynamic cube env maps
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var FrameBufferObjectPtr DynamicStateGeneratorBase::_sfRenderTarget
    The FBO to target for rendering this subtree.
*/


void DynamicStateGeneratorBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;

    Inherited::classDescInserter(oType);


    pDesc = new SFFrameBufferObjectPtr::Description(
        SFFrameBufferObjectPtr::getClassType(),
        "renderTarget",
        "The FBO to target for rendering this subtree.\n",
        RenderTargetFieldId, RenderTargetFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&DynamicStateGeneratorBase::editHandleRenderTarget),
        static_cast<FieldGetMethodSig >(&DynamicStateGeneratorBase::getHandleRenderTarget));

    oType.addInitialDesc(pDesc);
}


DynamicStateGeneratorBase::TypeObject DynamicStateGeneratorBase::_type(
    DynamicStateGeneratorBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &DynamicStateGeneratorBase::createEmpty,
    DynamicStateGenerator::initMethod,
    (InitalInsertDescFunc) &DynamicStateGeneratorBase::classDescInserter,
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "        name=\"DynamicStateGenerator\"\n"
    "        parent=\"ChunkOverrideGroup\"\n"
    "        mixinparent=\"DynamicStateGeneratorParent\"\n"
    "        library=\"Group\"\n"
    "        pointerfieldtypes=\"both\"\n"
    "        structure=\"concrete\"\n"
    "        systemcomponent=\"true\"\n"
    "        parentsystemcomponent=\"true\"\n"
    "        decoratable=\"false\"\n"
    "        useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"true\"\n"
    ">\n"
    "Base for dynamic materials like dynamic cube env maps\n"
    "        <Field\n"
    "                name=\"renderTarget\"\n"
    "                type=\"FrameBufferObjectPtr\"\n"
    "                cardinality=\"single\"\n"
    "                visibility=\"external\"\n"
    "                defaultValue=\"NullFC\"\n"
    "                access=\"protected\"\n"
    "        >\n"
    "        The FBO to target for rendering this subtree.\n"
    "        </Field>\n"
    "</FieldContainer>\n",
    "Base for dynamic materials like dynamic cube env maps\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &DynamicStateGeneratorBase::getType(void)
{
    return _type;
}

const FieldContainerType &DynamicStateGeneratorBase::getType(void) const
{
    return _type;
}

UInt32 DynamicStateGeneratorBase::getContainerSize(void) const
{
    return sizeof(DynamicStateGenerator);
}

/*------------------------- decorator get ------------------------------*/


//! Get the DynamicStateGenerator::_sfRenderTarget field.
const SFFrameBufferObjectPtr *DynamicStateGeneratorBase::getSFRenderTarget(void) const
{
    return &_sfRenderTarget;
}





/*------------------------------ access -----------------------------------*/

UInt32 DynamicStateGeneratorBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (RenderTargetFieldMask & whichField))
    {
        returnValue += _sfRenderTarget.getBinSize();
    }

    return returnValue;
}

void DynamicStateGeneratorBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (RenderTargetFieldMask & whichField))
    {
        _sfRenderTarget.copyToBin(pMem);
    }
}

void DynamicStateGeneratorBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (RenderTargetFieldMask & whichField))
    {
        _sfRenderTarget.copyFromBin(pMem);
    }
}

//! create a new instance of the class
DynamicStateGeneratorPtr DynamicStateGeneratorBase::create(void)
{
    DynamicStateGeneratorPtr fc;

    if(getClassType().getPrototype() != NullFC)
    {
        fc = dynamic_cast<DynamicStateGenerator::ObjPtr>(
            getClassType().getPrototype()-> shallowCopy());
    }

    return fc;
}

//! create an empty new instance of the class, do not copy the prototype
DynamicStateGeneratorPtr DynamicStateGeneratorBase::createEmpty(void)
{
    DynamicStateGeneratorPtr returnValue;

    newPtr<DynamicStateGenerator>(returnValue);

    return returnValue;
}

FieldContainerPtr DynamicStateGeneratorBase::shallowCopy(void) const
{
    DynamicStateGeneratorPtr returnValue;

    newPtr(returnValue, dynamic_cast<const DynamicStateGenerator *>(this));

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

DynamicStateGeneratorBase::DynamicStateGeneratorBase(void) :
    Inherited(),
    _sfRenderTarget           (FrameBufferObjectPtr(NullFC))
{
}

DynamicStateGeneratorBase::DynamicStateGeneratorBase(const DynamicStateGeneratorBase &source) :
    Inherited(source),
    _sfRenderTarget           (NullFC)
{
}


/*-------------------------- destructors ----------------------------------*/

DynamicStateGeneratorBase::~DynamicStateGeneratorBase(void)
{
}

void DynamicStateGeneratorBase::onCreate(const DynamicStateGenerator *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {

        this->setRenderTarget(source->getRenderTarget());
    }
}

GetFieldHandlePtr DynamicStateGeneratorBase::getHandleRenderTarget    (void) const
{
    SFFrameBufferObjectPtr::GetHandlePtr returnValue(
        new  SFFrameBufferObjectPtr::GetHandle(
             &_sfRenderTarget, 
             this->getType().getFieldDesc(RenderTargetFieldId)));

    return returnValue;
}

EditFieldHandlePtr DynamicStateGeneratorBase::editHandleRenderTarget   (void)
{
    SFFrameBufferObjectPtr::EditHandlePtr returnValue(
        new  SFFrameBufferObjectPtr::EditHandle(
             &_sfRenderTarget, 
             this->getType().getFieldDesc(RenderTargetFieldId)));

    returnValue->setSetMethod(boost::bind(&DynamicStateGenerator::setRenderTarget, 
                                          static_cast<DynamicStateGenerator *>(this), _1));

    editSField(RenderTargetFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void DynamicStateGeneratorBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<DynamicStateGeneratorBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr DynamicStateGeneratorBase::createAspectCopy(void) const
{
    DynamicStateGeneratorPtr returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const DynamicStateGenerator *>(this));

    return returnValue;
}
#endif

void DynamicStateGeneratorBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<DynamicStateGenerator *>(this)->setRenderTarget(NullFC);


}


OSG_END_NAMESPACE

#include "OSGSFieldAdaptor.ins"
#include "OSGMFieldAdaptor.ins"

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<DynamicStateGeneratorPtr>::_type("DynamicStateGeneratorPtr", "ChunkOverrideGroupPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(DynamicStateGeneratorPtr)

OSG_FIELD_DLLEXPORT_DEF2(SFieldAdaptor, DynamicStateGeneratorPtr, SFFieldContainerPtr);
OSG_FIELD_DLLEXPORT_DEF2(MFieldAdaptor, DynamicStateGeneratorPtr, MFFieldContainerPtr);

OSG_END_NAMESPACE
