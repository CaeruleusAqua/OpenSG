/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ColorDisplayFilter
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGCOLORDISPLAYFILTERBASE_H_
#define _OSGCOLORDISPLAYFILTERBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGEffectGroupsDef.h"

//#include "OSGBaseTypes.h"

#include "OSGDisplayFilter.h" // Parent

#include "OSGSysFields.h"               // Gamma type
#include "OSGMathFields.h"              // Matrix type
#include "OSGBaseFields.h"              // ColorTable type
#include "OSGImageFields.h"             // TableImage type
#include "OSGSimpleSHLChunkFields.h"    // FilterShader type

#include "OSGColorDisplayFilterFields.h"

OSG_BEGIN_NAMESPACE


class ColorDisplayFilter;

//! \brief ColorDisplayFilter Base Class.

class OSG_EFFECTGROUPS_DLLMAPPING ColorDisplayFilterBase : public DisplayFilter
{
  public:

    typedef DisplayFilter Inherited;
    typedef DisplayFilter ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(ColorDisplayFilter);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        GammaFieldId = Inherited::NextFieldId,
        MatrixFieldId = GammaFieldId + 1,
        ColorTableWidthFieldId = MatrixFieldId + 1,
        ColorTableHeightFieldId = ColorTableWidthFieldId + 1,
        ColorTableDepthFieldId = ColorTableHeightFieldId + 1,
        ColorTableFieldId = ColorTableDepthFieldId + 1,
        TableImageFieldId = ColorTableFieldId + 1,
        FilterShaderFieldId = TableImageFieldId + 1,
        NextFieldId = FilterShaderFieldId + 1
    };

    static const OSG::BitVector GammaFieldMask =
        (TypeTraits<BitVector>::One << GammaFieldId);
    static const OSG::BitVector MatrixFieldMask =
        (TypeTraits<BitVector>::One << MatrixFieldId);
    static const OSG::BitVector ColorTableWidthFieldMask =
        (TypeTraits<BitVector>::One << ColorTableWidthFieldId);
    static const OSG::BitVector ColorTableHeightFieldMask =
        (TypeTraits<BitVector>::One << ColorTableHeightFieldId);
    static const OSG::BitVector ColorTableDepthFieldMask =
        (TypeTraits<BitVector>::One << ColorTableDepthFieldId);
    static const OSG::BitVector ColorTableFieldMask =
        (TypeTraits<BitVector>::One << ColorTableFieldId);
    static const OSG::BitVector TableImageFieldMask =
        (TypeTraits<BitVector>::One << TableImageFieldId);
    static const OSG::BitVector FilterShaderFieldMask =
        (TypeTraits<BitVector>::One << FilterShaderFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFReal32          SFGammaType;
    typedef SFMatrix          SFMatrixType;
    typedef SFUInt32          SFColorTableWidthType;
    typedef SFUInt32          SFColorTableHeightType;
    typedef SFUInt32          SFColorTableDepthType;
    typedef MFColor3f         MFColorTableType;
    typedef SFUnrecImagePtr   SFTableImageType;
    typedef SFUnrecSimpleSHLChunkPtr SFFilterShaderType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFReal32            *editSFGamma          (void);
            const SFReal32            *getSFGamma           (void) const;

                  SFMatrix            *editSFMatrix         (void);
            const SFMatrix            *getSFMatrix          (void) const;

                  SFUInt32            *editSFColorTableWidth(void);
            const SFUInt32            *getSFColorTableWidth (void) const;

                  SFUInt32            *editSFColorTableHeight(void);
            const SFUInt32            *getSFColorTableHeight (void) const;

                  SFUInt32            *editSFColorTableDepth(void);
            const SFUInt32            *getSFColorTableDepth (void) const;

                  MFColor3f           *editMFColorTable     (void);
            const MFColor3f           *getMFColorTable      (void) const;


                  Real32              &editGamma          (void);
                  Real32               getGamma           (void) const;

                  Matrix              &editMatrix         (void);
            const Matrix              &getMatrix          (void) const;

                  UInt32              &editColorTableWidth(void);
                  UInt32               getColorTableWidth (void) const;

                  UInt32              &editColorTableHeight(void);
                  UInt32               getColorTableHeight (void) const;

                  UInt32              &editColorTableDepth(void);
                  UInt32               getColorTableDepth (void) const;

                  Color3f             &editColorTable     (const UInt32 index);
            const Color3f             &getColorTable      (const UInt32 index) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setGamma          (const Real32 value);
            void setMatrix         (const Matrix &value);
            void setColorTableWidth(const UInt32 value);
            void setColorTableHeight(const UInt32 value);
            void setColorTableDepth(const UInt32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual SizeT  getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  ColorDisplayFilterTransitPtr  create          (void);
    static  ColorDisplayFilter           *createEmpty     (void);

    static  ColorDisplayFilterTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  ColorDisplayFilter            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  ColorDisplayFilterTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFReal32          _sfGamma;
    SFMatrix          _sfMatrix;
    SFUInt32          _sfColorTableWidth;
    SFUInt32          _sfColorTableHeight;
    SFUInt32          _sfColorTableDepth;
    MFColor3f         _mfColorTable;
    SFUnrecImagePtr   _sfTableImage;
    SFUnrecSimpleSHLChunkPtr _sfFilterShader;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ColorDisplayFilterBase(void);
    ColorDisplayFilterBase(const ColorDisplayFilterBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ColorDisplayFilterBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const ColorDisplayFilter *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

     GetFieldHandlePtr  getHandleGamma           (void) const;
     EditFieldHandlePtr editHandleGamma          (void);
     GetFieldHandlePtr  getHandleMatrix          (void) const;
     EditFieldHandlePtr editHandleMatrix         (void);
     GetFieldHandlePtr  getHandleColorTableWidth (void) const;
     EditFieldHandlePtr editHandleColorTableWidth(void);
     GetFieldHandlePtr  getHandleColorTableHeight (void) const;
     EditFieldHandlePtr editHandleColorTableHeight(void);
     GetFieldHandlePtr  getHandleColorTableDepth (void) const;
     EditFieldHandlePtr editHandleColorTableDepth(void);
     GetFieldHandlePtr  getHandleColorTable      (void) const;
     EditFieldHandlePtr editHandleColorTable     (void);
     GetFieldHandlePtr  getHandleTableImage      (void) const;
     EditFieldHandlePtr editHandleTableImage     (void);
     GetFieldHandlePtr  getHandleFilterShader    (void) const;
     EditFieldHandlePtr editHandleFilterShader   (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const SFUnrecImagePtr     *getSFTableImage      (void) const;
                  SFUnrecImagePtr     *editSFTableImage     (void);
            const SFUnrecSimpleSHLChunkPtr *getSFFilterShader    (void) const;
                  SFUnrecSimpleSHLChunkPtr *editSFFilterShader   (void);


                  Image * getTableImage     (void) const;

                  SimpleSHLChunk * getFilterShader   (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setTableImage     (Image * const value);
            void setFilterShader   (SimpleSHLChunk * const value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      ColorDisplayFilterBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ColorDisplayFilterBase &source);
};

typedef ColorDisplayFilterBase *ColorDisplayFilterBaseP;

OSG_END_NAMESPACE

#endif /* _OSGCOLORDISPLAYFILTERBASE_H_ */
