/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 * contact: Alexander Lang                                                   *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class DepthPeelingStageData!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE



//! access the type of the class
inline
OSG::FieldContainerType &DepthPeelingStageDataBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 DepthPeelingStageDataBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 DepthPeelingStageDataBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the DepthPeelingStageData::_sfWidth field.

inline
Int32 &DepthPeelingStageDataBase::editWidth(void)
{
    editSField(WidthFieldMask);

    return _sfWidth.getValue();
}

//! Get the value of the DepthPeelingStageData::_sfWidth field.
inline
      Int32  DepthPeelingStageDataBase::getWidth(void) const
{
    return _sfWidth.getValue();
}

//! Set the value of the DepthPeelingStageData::_sfWidth field.
inline
void DepthPeelingStageDataBase::setWidth(const Int32 value)
{
    editSField(WidthFieldMask);

    _sfWidth.setValue(value);
}
//! Get the value of the DepthPeelingStageData::_sfHeight field.

inline
Int32 &DepthPeelingStageDataBase::editHeight(void)
{
    editSField(HeightFieldMask);

    return _sfHeight.getValue();
}

//! Get the value of the DepthPeelingStageData::_sfHeight field.
inline
      Int32  DepthPeelingStageDataBase::getHeight(void) const
{
    return _sfHeight.getValue();
}

//! Set the value of the DepthPeelingStageData::_sfHeight field.
inline
void DepthPeelingStageDataBase::setHeight(const Int32 value)
{
    editSField(HeightFieldMask);

    _sfHeight.setValue(value);
}

//! Get the value of the DepthPeelingStageData::_sfBackground field.
inline
Background * DepthPeelingStageDataBase::getBackground(void) const
{
    return _sfBackground.getValue();
}

//! Set the value of the DepthPeelingStageData::_sfBackground field.
inline
void DepthPeelingStageDataBase::setBackground(Background * const value)
{
    editSField(BackgroundFieldMask);

    _sfBackground.setValue(value);
}

//! Get the value of the DepthPeelingStageData::_sfPeelPingFBO field.
inline
FrameBufferObject * DepthPeelingStageDataBase::getPeelPingFBO(void) const
{
    return _sfPeelPingFBO.getValue();
}

//! Set the value of the DepthPeelingStageData::_sfPeelPingFBO field.
inline
void DepthPeelingStageDataBase::setPeelPingFBO(FrameBufferObject * const value)
{
    editSField(PeelPingFBOFieldMask);

    _sfPeelPingFBO.setValue(value);
}

//! Get the value of the DepthPeelingStageData::_sfPeelPongFBO field.
inline
FrameBufferObject * DepthPeelingStageDataBase::getPeelPongFBO(void) const
{
    return _sfPeelPongFBO.getValue();
}

//! Set the value of the DepthPeelingStageData::_sfPeelPongFBO field.
inline
void DepthPeelingStageDataBase::setPeelPongFBO(FrameBufferObject * const value)
{
    editSField(PeelPongFBOFieldMask);

    _sfPeelPongFBO.setValue(value);
}

//! Get the value of the DepthPeelingStageData::_sfBlendFBO field.
inline
FrameBufferObject * DepthPeelingStageDataBase::getBlendFBO(void) const
{
    return _sfBlendFBO.getValue();
}

//! Set the value of the DepthPeelingStageData::_sfBlendFBO field.
inline
void DepthPeelingStageDataBase::setBlendFBO(FrameBufferObject * const value)
{
    editSField(BlendFBOFieldMask);

    _sfBlendFBO.setValue(value);
}

//! Get the value of the DepthPeelingStageData::_sfBlendMaterial field.
inline
ChunkMaterial * DepthPeelingStageDataBase::getBlendMaterial(void) const
{
    return _sfBlendMaterial.getValue();
}

//! Set the value of the DepthPeelingStageData::_sfBlendMaterial field.
inline
void DepthPeelingStageDataBase::setBlendMaterial(ChunkMaterial * const value)
{
    editSField(BlendMaterialFieldMask);

    _sfBlendMaterial.setValue(value);
}

//! Get the value of the DepthPeelingStageData::_sfBlendFinalMaterial field.
inline
ChunkMaterial * DepthPeelingStageDataBase::getBlendFinalMaterial(void) const
{
    return _sfBlendFinalMaterial.getValue();
}

//! Set the value of the DepthPeelingStageData::_sfBlendFinalMaterial field.
inline
void DepthPeelingStageDataBase::setBlendFinalMaterial(ChunkMaterial * const value)
{
    editSField(BlendFinalMaterialFieldMask);

    _sfBlendFinalMaterial.setValue(value);
}

//! Get the value of the DepthPeelingStageData::_sfPeelPingMaterial field.
inline
ChunkMaterial * DepthPeelingStageDataBase::getPeelPingMaterial(void) const
{
    return _sfPeelPingMaterial.getValue();
}

//! Set the value of the DepthPeelingStageData::_sfPeelPingMaterial field.
inline
void DepthPeelingStageDataBase::setPeelPingMaterial(ChunkMaterial * const value)
{
    editSField(PeelPingMaterialFieldMask);

    _sfPeelPingMaterial.setValue(value);
}

//! Get the value of the DepthPeelingStageData::_sfPeelPongMaterial field.
inline
ChunkMaterial * DepthPeelingStageDataBase::getPeelPongMaterial(void) const
{
    return _sfPeelPongMaterial.getValue();
}

//! Set the value of the DepthPeelingStageData::_sfPeelPongMaterial field.
inline
void DepthPeelingStageDataBase::setPeelPongMaterial(ChunkMaterial * const value)
{
    editSField(PeelPongMaterialFieldMask);

    _sfPeelPongMaterial.setValue(value);
}

//! Get the value of the DepthPeelingStageData::_sfDepthChunk field.
inline
DepthChunk * DepthPeelingStageDataBase::getDepthChunk(void) const
{
    return _sfDepthChunk.getValue();
}

//! Set the value of the DepthPeelingStageData::_sfDepthChunk field.
inline
void DepthPeelingStageDataBase::setDepthChunk(DepthChunk * const value)
{
    editSField(DepthChunkFieldMask);

    _sfDepthChunk.setValue(value);
}

//! Get the value of the DepthPeelingStageData::_sfSpvIsPeelChunk field.
inline
ShaderProgramVariableChunk * DepthPeelingStageDataBase::getSpvIsPeelChunk(void) const
{
    return _sfSpvIsPeelChunk.getValue();
}

//! Set the value of the DepthPeelingStageData::_sfSpvIsPeelChunk field.
inline
void DepthPeelingStageDataBase::setSpvIsPeelChunk(ShaderProgramVariableChunk * const value)
{
    editSField(SpvIsPeelChunkFieldMask);

    _sfSpvIsPeelChunk.setValue(value);
}

//! Get the value of the DepthPeelingStageData::_sfSpvIsInitialChunk field.
inline
ShaderProgramVariableChunk * DepthPeelingStageDataBase::getSpvIsInitialChunk(void) const
{
    return _sfSpvIsInitialChunk.getValue();
}

//! Set the value of the DepthPeelingStageData::_sfSpvIsInitialChunk field.
inline
void DepthPeelingStageDataBase::setSpvIsInitialChunk(ShaderProgramVariableChunk * const value)
{
    editSField(SpvIsInitialChunkFieldMask);

    _sfSpvIsInitialChunk.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void DepthPeelingStageDataBase::execSync (      DepthPeelingStageDataBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
        _sfWidth.syncWith(pFrom->_sfWidth);

    if(FieldBits::NoField != (HeightFieldMask & whichField))
        _sfHeight.syncWith(pFrom->_sfHeight);

    if(FieldBits::NoField != (BackgroundFieldMask & whichField))
        _sfBackground.syncWith(pFrom->_sfBackground);

    if(FieldBits::NoField != (PeelPingFBOFieldMask & whichField))
        _sfPeelPingFBO.syncWith(pFrom->_sfPeelPingFBO);

    if(FieldBits::NoField != (PeelPongFBOFieldMask & whichField))
        _sfPeelPongFBO.syncWith(pFrom->_sfPeelPongFBO);

    if(FieldBits::NoField != (BlendFBOFieldMask & whichField))
        _sfBlendFBO.syncWith(pFrom->_sfBlendFBO);

    if(FieldBits::NoField != (BlendMaterialFieldMask & whichField))
        _sfBlendMaterial.syncWith(pFrom->_sfBlendMaterial);

    if(FieldBits::NoField != (BlendFinalMaterialFieldMask & whichField))
        _sfBlendFinalMaterial.syncWith(pFrom->_sfBlendFinalMaterial);

    if(FieldBits::NoField != (PeelPingMaterialFieldMask & whichField))
        _sfPeelPingMaterial.syncWith(pFrom->_sfPeelPingMaterial);

    if(FieldBits::NoField != (PeelPongMaterialFieldMask & whichField))
        _sfPeelPongMaterial.syncWith(pFrom->_sfPeelPongMaterial);

    if(FieldBits::NoField != (DepthChunkFieldMask & whichField))
        _sfDepthChunk.syncWith(pFrom->_sfDepthChunk);

    if(FieldBits::NoField != (SpvIsPeelChunkFieldMask & whichField))
        _sfSpvIsPeelChunk.syncWith(pFrom->_sfSpvIsPeelChunk);

    if(FieldBits::NoField != (SpvIsInitialChunkFieldMask & whichField))
        _sfSpvIsInitialChunk.syncWith(pFrom->_sfSpvIsInitialChunk);
}
#endif


inline
const Char8 *DepthPeelingStageDataBase::getClassname(void)
{
    return "DepthPeelingStageData";
}
OSG_GEN_CONTAINERPTR(DepthPeelingStageData);

OSG_END_NAMESPACE

