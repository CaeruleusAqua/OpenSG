/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class FishEyeProjector!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &FishEyeProjectorBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 FishEyeProjectorBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 FishEyeProjectorBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the FishEyeProjector::_sfMode field.

inline
UInt32 &FishEyeProjectorBase::editMode(void)
{
    editSField(ModeFieldMask);

    return _sfMode.getValue();
}

//! Get the value of the FishEyeProjector::_sfMode field.
inline
      UInt32  FishEyeProjectorBase::getMode(void) const
{
    return _sfMode.getValue();
}

//! Set the value of the FishEyeProjector::_sfMode field.
inline
void FishEyeProjectorBase::setMode(const UInt32 value)
{
    editSField(ModeFieldMask);

    _sfMode.setValue(value);
}
//! Get the value of the FishEyeProjector::_sfShowDomeIntensity field.

inline
bool &FishEyeProjectorBase::editShowDomeIntensity(void)
{
    editSField(ShowDomeIntensityFieldMask);

    return _sfShowDomeIntensity.getValue();
}

//! Get the value of the FishEyeProjector::_sfShowDomeIntensity field.
inline
      bool  FishEyeProjectorBase::getShowDomeIntensity(void) const
{
    return _sfShowDomeIntensity.getValue();
}

//! Set the value of the FishEyeProjector::_sfShowDomeIntensity field.
inline
void FishEyeProjectorBase::setShowDomeIntensity(const bool value)
{
    editSField(ShowDomeIntensityFieldMask);

    _sfShowDomeIntensity.setValue(value);
}
//! Get the value of the FishEyeProjector::_sfResolution field.

inline
UInt32 &FishEyeProjectorBase::editResolution(void)
{
    editSField(ResolutionFieldMask);

    return _sfResolution.getValue();
}

//! Get the value of the FishEyeProjector::_sfResolution field.
inline
      UInt32  FishEyeProjectorBase::getResolution(void) const
{
    return _sfResolution.getValue();
}

//! Set the value of the FishEyeProjector::_sfResolution field.
inline
void FishEyeProjectorBase::setResolution(const UInt32 value)
{
    editSField(ResolutionFieldMask);

    _sfResolution.setValue(value);
}
//! Get the value of the FishEyeProjector::_sfMeshRefinementLevel field.

inline
UInt32 &FishEyeProjectorBase::editMeshRefinementLevel(void)
{
    editSField(MeshRefinementLevelFieldMask);

    return _sfMeshRefinementLevel.getValue();
}

//! Get the value of the FishEyeProjector::_sfMeshRefinementLevel field.
inline
      UInt32  FishEyeProjectorBase::getMeshRefinementLevel(void) const
{
    return _sfMeshRefinementLevel.getValue();
}

//! Set the value of the FishEyeProjector::_sfMeshRefinementLevel field.
inline
void FishEyeProjectorBase::setMeshRefinementLevel(const UInt32 value)
{
    editSField(MeshRefinementLevelFieldMask);

    _sfMeshRefinementLevel.setValue(value);
}
//! Get the value of the FishEyeProjector::_sfBufferFormat field.

inline
GLenum &FishEyeProjectorBase::editBufferFormat(void)
{
    editSField(BufferFormatFieldMask);

    return _sfBufferFormat.getValue();
}

//! Get the value of the FishEyeProjector::_sfBufferFormat field.
inline
const GLenum &FishEyeProjectorBase::getBufferFormat(void) const
{
    return _sfBufferFormat.getValue();
}

//! Set the value of the FishEyeProjector::_sfBufferFormat field.
inline
void FishEyeProjectorBase::setBufferFormat(const GLenum &value)
{
    editSField(BufferFormatFieldMask);

    _sfBufferFormat.setValue(value);
}
//! Get the value of the FishEyeProjector::_sfDomeRadius field.

inline
Real64 &FishEyeProjectorBase::editDomeRadius(void)
{
    editSField(DomeRadiusFieldMask);

    return _sfDomeRadius.getValue();
}

//! Get the value of the FishEyeProjector::_sfDomeRadius field.
inline
      Real64  FishEyeProjectorBase::getDomeRadius(void) const
{
    return _sfDomeRadius.getValue();
}

//! Set the value of the FishEyeProjector::_sfDomeRadius field.
inline
void FishEyeProjectorBase::setDomeRadius(const Real64 value)
{
    editSField(DomeRadiusFieldMask);

    _sfDomeRadius.setValue(value);
}
//! Get the value of the FishEyeProjector::_sfMirrorRadius field.

inline
Real64 &FishEyeProjectorBase::editMirrorRadius(void)
{
    editSField(MirrorRadiusFieldMask);

    return _sfMirrorRadius.getValue();
}

//! Get the value of the FishEyeProjector::_sfMirrorRadius field.
inline
      Real64  FishEyeProjectorBase::getMirrorRadius(void) const
{
    return _sfMirrorRadius.getValue();
}

//! Set the value of the FishEyeProjector::_sfMirrorRadius field.
inline
void FishEyeProjectorBase::setMirrorRadius(const Real64 value)
{
    editSField(MirrorRadiusFieldMask);

    _sfMirrorRadius.setValue(value);
}
//! Get the value of the FishEyeProjector::_sfMirrorPos field.

inline
Vec3d &FishEyeProjectorBase::editMirrorPos(void)
{
    editSField(MirrorPosFieldMask);

    return _sfMirrorPos.getValue();
}

//! Get the value of the FishEyeProjector::_sfMirrorPos field.
inline
const Vec3d &FishEyeProjectorBase::getMirrorPos(void) const
{
    return _sfMirrorPos.getValue();
}

//! Set the value of the FishEyeProjector::_sfMirrorPos field.
inline
void FishEyeProjectorBase::setMirrorPos(const Vec3d &value)
{
    editSField(MirrorPosFieldMask);

    _sfMirrorPos.setValue(value);
}
//! Get the value of the FishEyeProjector::_sfProjectorPos field.

inline
Vec3d &FishEyeProjectorBase::editProjectorPos(void)
{
    editSField(ProjectorPosFieldMask);

    return _sfProjectorPos.getValue();
}

//! Get the value of the FishEyeProjector::_sfProjectorPos field.
inline
const Vec3d &FishEyeProjectorBase::getProjectorPos(void) const
{
    return _sfProjectorPos.getValue();
}

//! Set the value of the FishEyeProjector::_sfProjectorPos field.
inline
void FishEyeProjectorBase::setProjectorPos(const Vec3d &value)
{
    editSField(ProjectorPosFieldMask);

    _sfProjectorPos.setValue(value);
}
//! Get the value of the FishEyeProjector::_sfAspectRatio field.

inline
Real64 &FishEyeProjectorBase::editAspectRatio(void)
{
    editSField(AspectRatioFieldMask);

    return _sfAspectRatio.getValue();
}

//! Get the value of the FishEyeProjector::_sfAspectRatio field.
inline
      Real64  FishEyeProjectorBase::getAspectRatio(void) const
{
    return _sfAspectRatio.getValue();
}

//! Set the value of the FishEyeProjector::_sfAspectRatio field.
inline
void FishEyeProjectorBase::setAspectRatio(const Real64 value)
{
    editSField(AspectRatioFieldMask);

    _sfAspectRatio.setValue(value);
}
//! Get the value of the FishEyeProjector::_sfThrowDist field.

inline
Real64 &FishEyeProjectorBase::editThrowDist(void)
{
    editSField(ThrowDistFieldMask);

    return _sfThrowDist.getValue();
}

//! Get the value of the FishEyeProjector::_sfThrowDist field.
inline
      Real64  FishEyeProjectorBase::getThrowDist(void) const
{
    return _sfThrowDist.getValue();
}

//! Set the value of the FishEyeProjector::_sfThrowDist field.
inline
void FishEyeProjectorBase::setThrowDist(const Real64 value)
{
    editSField(ThrowDistFieldMask);

    _sfThrowDist.setValue(value);
}
//! Get the value of the FishEyeProjector::_sfShowMesh field.

inline
bool &FishEyeProjectorBase::editShowMesh(void)
{
    editSField(ShowMeshFieldMask);

    return _sfShowMesh.getValue();
}

//! Get the value of the FishEyeProjector::_sfShowMesh field.
inline
      bool  FishEyeProjectorBase::getShowMesh(void) const
{
    return _sfShowMesh.getValue();
}

//! Set the value of the FishEyeProjector::_sfShowMesh field.
inline
void FishEyeProjectorBase::setShowMesh(const bool value)
{
    editSField(ShowMeshFieldMask);

    _sfShowMesh.setValue(value);
}

//! Get the value of the \a index element the FishEyeProjector::_mfGeometries field.
inline
Geometry * FishEyeProjectorBase::getGeometries(const UInt32 index) const
{
    return _mfGeometries[index];
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void FishEyeProjectorBase::execSync (      FishEyeProjectorBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (ModeFieldMask & whichField))
        _sfMode.syncWith(pFrom->_sfMode);

    if(FieldBits::NoField != (GeometriesFieldMask & whichField))
        _mfGeometries.syncWith(pFrom->_mfGeometries,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (ShowDomeIntensityFieldMask & whichField))
        _sfShowDomeIntensity.syncWith(pFrom->_sfShowDomeIntensity);

    if(FieldBits::NoField != (ResolutionFieldMask & whichField))
        _sfResolution.syncWith(pFrom->_sfResolution);

    if(FieldBits::NoField != (MeshRefinementLevelFieldMask & whichField))
        _sfMeshRefinementLevel.syncWith(pFrom->_sfMeshRefinementLevel);

    if(FieldBits::NoField != (BufferFormatFieldMask & whichField))
        _sfBufferFormat.syncWith(pFrom->_sfBufferFormat);

    if(FieldBits::NoField != (DomeRadiusFieldMask & whichField))
        _sfDomeRadius.syncWith(pFrom->_sfDomeRadius);

    if(FieldBits::NoField != (MirrorRadiusFieldMask & whichField))
        _sfMirrorRadius.syncWith(pFrom->_sfMirrorRadius);

    if(FieldBits::NoField != (MirrorPosFieldMask & whichField))
        _sfMirrorPos.syncWith(pFrom->_sfMirrorPos);

    if(FieldBits::NoField != (ProjectorPosFieldMask & whichField))
        _sfProjectorPos.syncWith(pFrom->_sfProjectorPos);

    if(FieldBits::NoField != (AspectRatioFieldMask & whichField))
        _sfAspectRatio.syncWith(pFrom->_sfAspectRatio);

    if(FieldBits::NoField != (ThrowDistFieldMask & whichField))
        _sfThrowDist.syncWith(pFrom->_sfThrowDist);

    if(FieldBits::NoField != (ShowMeshFieldMask & whichField))
        _sfShowMesh.syncWith(pFrom->_sfShowMesh);
}
#endif


inline
const Char8 *FishEyeProjectorBase::getClassname(void)
{
    return "FishEyeProjector";
}
OSG_GEN_CONTAINERPTR(FishEyeProjector);

OSG_END_NAMESPACE

