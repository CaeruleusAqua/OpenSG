/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class FishEyeProjector
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGFISHEYEPROJECTORBASE_H_
#define _OSGFISHEYEPROJECTORBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGEffectGroupsDef.h"

//#include "OSGBaseTypes.h"

#include "OSGStage.h" // Parent

#include "OSGSysFields.h"               // Mode type
#include "OSGGeometryFields.h"          // Geometries type
#include "OSGBaseFields.h"              // BufferFormat type
#include "OSGVecFields.h"               // MirrorPos type

#include "OSGFishEyeProjectorFields.h"

OSG_BEGIN_NAMESPACE


class FishEyeProjector;

//! \brief FishEyeProjector Base Class.

class OSG_EFFECTGROUPS_DLLMAPPING FishEyeProjectorBase : public Stage
{
  public:

    typedef Stage Inherited;
    typedef Stage ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(FishEyeProjector);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        ModeFieldId = Inherited::NextFieldId,
        GeometriesFieldId = ModeFieldId + 1,
        ShowDomeIntensityFieldId = GeometriesFieldId + 1,
        ResolutionFieldId = ShowDomeIntensityFieldId + 1,
        MeshRefinementLevelFieldId = ResolutionFieldId + 1,
        BufferFormatFieldId = MeshRefinementLevelFieldId + 1,
        DomeRadiusFieldId = BufferFormatFieldId + 1,
        MirrorRadiusFieldId = DomeRadiusFieldId + 1,
        MirrorPosFieldId = MirrorRadiusFieldId + 1,
        ProjectorPosFieldId = MirrorPosFieldId + 1,
        AspectRatioFieldId = ProjectorPosFieldId + 1,
        ThrowDistFieldId = AspectRatioFieldId + 1,
        ShowMeshFieldId = ThrowDistFieldId + 1,
        NextFieldId = ShowMeshFieldId + 1
    };

    static const OSG::BitVector ModeFieldMask =
        (TypeTraits<BitVector>::One << ModeFieldId);
    static const OSG::BitVector GeometriesFieldMask =
        (TypeTraits<BitVector>::One << GeometriesFieldId);
    static const OSG::BitVector ShowDomeIntensityFieldMask =
        (TypeTraits<BitVector>::One << ShowDomeIntensityFieldId);
    static const OSG::BitVector ResolutionFieldMask =
        (TypeTraits<BitVector>::One << ResolutionFieldId);
    static const OSG::BitVector MeshRefinementLevelFieldMask =
        (TypeTraits<BitVector>::One << MeshRefinementLevelFieldId);
    static const OSG::BitVector BufferFormatFieldMask =
        (TypeTraits<BitVector>::One << BufferFormatFieldId);
    static const OSG::BitVector DomeRadiusFieldMask =
        (TypeTraits<BitVector>::One << DomeRadiusFieldId);
    static const OSG::BitVector MirrorRadiusFieldMask =
        (TypeTraits<BitVector>::One << MirrorRadiusFieldId);
    static const OSG::BitVector MirrorPosFieldMask =
        (TypeTraits<BitVector>::One << MirrorPosFieldId);
    static const OSG::BitVector ProjectorPosFieldMask =
        (TypeTraits<BitVector>::One << ProjectorPosFieldId);
    static const OSG::BitVector AspectRatioFieldMask =
        (TypeTraits<BitVector>::One << AspectRatioFieldId);
    static const OSG::BitVector ThrowDistFieldMask =
        (TypeTraits<BitVector>::One << ThrowDistFieldId);
    static const OSG::BitVector ShowMeshFieldMask =
        (TypeTraits<BitVector>::One << ShowMeshFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUInt32          SFModeType;
    typedef MFUnrecGeometryPtr MFGeometriesType;
    typedef SFBool            SFShowDomeIntensityType;
    typedef SFUInt32          SFResolutionType;
    typedef SFUInt32          SFMeshRefinementLevelType;
    typedef SFGLenum          SFBufferFormatType;
    typedef SFReal64          SFDomeRadiusType;
    typedef SFReal64          SFMirrorRadiusType;
    typedef SFVec3d           SFMirrorPosType;
    typedef SFVec3d           SFProjectorPosType;
    typedef SFReal64          SFAspectRatioType;
    typedef SFReal64          SFThrowDistType;
    typedef SFBool            SFShowMeshType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFUInt32            *editSFMode           (void);
            const SFUInt32            *getSFMode            (void) const;
            const MFUnrecGeometryPtr  *getMFGeometries     (void) const;
                  MFUnrecGeometryPtr  *editMFGeometries     (void);

                  SFBool              *editSFShowDomeIntensity(void);
            const SFBool              *getSFShowDomeIntensity (void) const;

                  SFUInt32            *editSFResolution     (void);
            const SFUInt32            *getSFResolution      (void) const;

                  SFUInt32            *editSFMeshRefinementLevel(void);
            const SFUInt32            *getSFMeshRefinementLevel (void) const;

                  SFGLenum            *editSFBufferFormat   (void);
            const SFGLenum            *getSFBufferFormat    (void) const;

                  SFReal64            *editSFDomeRadius     (void);
            const SFReal64            *getSFDomeRadius      (void) const;

                  SFReal64            *editSFMirrorRadius   (void);
            const SFReal64            *getSFMirrorRadius    (void) const;

                  SFVec3d             *editSFMirrorPos      (void);
            const SFVec3d             *getSFMirrorPos       (void) const;

                  SFVec3d             *editSFProjectorPos   (void);
            const SFVec3d             *getSFProjectorPos    (void) const;

                  SFReal64            *editSFAspectRatio    (void);
            const SFReal64            *getSFAspectRatio     (void) const;

                  SFReal64            *editSFThrowDist      (void);
            const SFReal64            *getSFThrowDist       (void) const;

                  SFBool              *editSFShowMesh       (void);
            const SFBool              *getSFShowMesh        (void) const;


                  UInt32              &editMode           (void);
                  UInt32               getMode            (void) const;

                  Geometry * getGeometries     (const UInt32 index) const;

                  bool                &editShowDomeIntensity(void);
                  bool                 getShowDomeIntensity (void) const;

                  UInt32              &editResolution     (void);
                  UInt32               getResolution      (void) const;

                  UInt32              &editMeshRefinementLevel(void);
                  UInt32               getMeshRefinementLevel (void) const;

                  GLenum              &editBufferFormat   (void);
            const GLenum              &getBufferFormat    (void) const;

                  Real64              &editDomeRadius     (void);
                  Real64               getDomeRadius      (void) const;

                  Real64              &editMirrorRadius   (void);
                  Real64               getMirrorRadius    (void) const;

                  Vec3d               &editMirrorPos      (void);
            const Vec3d               &getMirrorPos       (void) const;

                  Vec3d               &editProjectorPos   (void);
            const Vec3d               &getProjectorPos    (void) const;

                  Real64              &editAspectRatio    (void);
                  Real64               getAspectRatio     (void) const;

                  Real64              &editThrowDist      (void);
                  Real64               getThrowDist       (void) const;

                  bool                &editShowMesh       (void);
                  bool                 getShowMesh        (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setMode           (const UInt32 value);
            void setShowDomeIntensity(const bool value);
            void setResolution     (const UInt32 value);
            void setMeshRefinementLevel(const UInt32 value);
            void setBufferFormat   (const GLenum &value);
            void setDomeRadius     (const Real64 value);
            void setMirrorRadius   (const Real64 value);
            void setMirrorPos      (const Vec3d &value);
            void setProjectorPos   (const Vec3d &value);
            void setAspectRatio    (const Real64 value);
            void setThrowDist      (const Real64 value);
            void setShowMesh       (const bool value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    void pushToGeometries           (Geometry * const value   );
    void assignGeometries          (const MFUnrecGeometryPtr &value);
    void removeFromGeometries (UInt32               uiIndex );
    void removeObjFromGeometries(Geometry * const value   );
    void clearGeometries            (void                         );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual SizeT  getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  FishEyeProjectorTransitPtr  create          (void);
    static  FishEyeProjector           *createEmpty     (void);

    static  FishEyeProjectorTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  FishEyeProjector            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  FishEyeProjectorTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUInt32          _sfMode;
    MFUnrecGeometryPtr _mfGeometries;
    SFBool            _sfShowDomeIntensity;
    SFUInt32          _sfResolution;
    SFUInt32          _sfMeshRefinementLevel;
    SFGLenum          _sfBufferFormat;
    SFReal64          _sfDomeRadius;
    SFReal64          _sfMirrorRadius;
    SFVec3d           _sfMirrorPos;
    SFVec3d           _sfProjectorPos;
    SFReal64          _sfAspectRatio;
    SFReal64          _sfThrowDist;
    SFBool            _sfShowMesh;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    FishEyeProjectorBase(void);
    FishEyeProjectorBase(const FishEyeProjectorBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~FishEyeProjectorBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const FishEyeProjector *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleMode            (void) const;
    EditFieldHandlePtr editHandleMode           (void);
    GetFieldHandlePtr  getHandleGeometries      (void) const;
    EditFieldHandlePtr editHandleGeometries     (void);
    GetFieldHandlePtr  getHandleShowDomeIntensity (void) const;
    EditFieldHandlePtr editHandleShowDomeIntensity(void);
    GetFieldHandlePtr  getHandleResolution      (void) const;
    EditFieldHandlePtr editHandleResolution     (void);
    GetFieldHandlePtr  getHandleMeshRefinementLevel (void) const;
    EditFieldHandlePtr editHandleMeshRefinementLevel(void);
    GetFieldHandlePtr  getHandleBufferFormat    (void) const;
    EditFieldHandlePtr editHandleBufferFormat   (void);
    GetFieldHandlePtr  getHandleDomeRadius      (void) const;
    EditFieldHandlePtr editHandleDomeRadius     (void);
    GetFieldHandlePtr  getHandleMirrorRadius    (void) const;
    EditFieldHandlePtr editHandleMirrorRadius   (void);
    GetFieldHandlePtr  getHandleMirrorPos       (void) const;
    EditFieldHandlePtr editHandleMirrorPos      (void);
    GetFieldHandlePtr  getHandleProjectorPos    (void) const;
    EditFieldHandlePtr editHandleProjectorPos   (void);
    GetFieldHandlePtr  getHandleAspectRatio     (void) const;
    EditFieldHandlePtr editHandleAspectRatio    (void);
    GetFieldHandlePtr  getHandleThrowDist       (void) const;
    EditFieldHandlePtr editHandleThrowDist      (void);
    GetFieldHandlePtr  getHandleShowMesh        (void) const;
    EditFieldHandlePtr editHandleShowMesh       (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      FishEyeProjectorBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const FishEyeProjectorBase &source);
};

typedef FishEyeProjectorBase *FishEyeProjectorBaseP;

typedef CoredNodeRefPtr  <FishEyeProjector> FishEyeProjectorNodeRefPtr;
typedef CoredNodeMTRefPtr<FishEyeProjector> FishEyeProjectorNodeMTRefPtr;

OSG_END_NAMESPACE

#endif /* _OSGFISHEYEPROJECTORBASE_H_ */
