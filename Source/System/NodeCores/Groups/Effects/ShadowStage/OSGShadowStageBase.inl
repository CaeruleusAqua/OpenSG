/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ShadowStage!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE



//! access the type of the class
inline
OSG::FieldContainerType &ShadowStageBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 ShadowStageBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 ShadowStageBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the ShadowStage::_sfBufferFormat field.

inline
GLenum &ShadowStageBase::editBufferFormat(void)
{
    editSField(BufferFormatFieldMask);

    return _sfBufferFormat.getValue();
}

//! Get the value of the ShadowStage::_sfBufferFormat field.
inline
const GLenum &ShadowStageBase::getBufferFormat(void) const
{
    return _sfBufferFormat.getValue();
}

//! Set the value of the ShadowStage::_sfBufferFormat field.
inline
void ShadowStageBase::setBufferFormat(const GLenum &value)
{
    editSField(BufferFormatFieldMask);

    _sfBufferFormat.setValue(value);
}
//! Get the value of the ShadowStage::_sfOffBias field.

inline
Real32 &ShadowStageBase::editOffBias(void)
{
    editSField(OffBiasFieldMask);

    return _sfOffBias.getValue();
}

//! Get the value of the ShadowStage::_sfOffBias field.
inline
      Real32  ShadowStageBase::getOffBias(void) const
{
    return _sfOffBias.getValue();
}

//! Set the value of the ShadowStage::_sfOffBias field.
inline
void ShadowStageBase::setOffBias(const Real32 value)
{
    editSField(OffBiasFieldMask);

    _sfOffBias.setValue(value);
}
//! Get the value of the ShadowStage::_sfOffFactor field.

inline
Real32 &ShadowStageBase::editOffFactor(void)
{
    editSField(OffFactorFieldMask);

    return _sfOffFactor.getValue();
}

//! Get the value of the ShadowStage::_sfOffFactor field.
inline
      Real32  ShadowStageBase::getOffFactor(void) const
{
    return _sfOffFactor.getValue();
}

//! Set the value of the ShadowStage::_sfOffFactor field.
inline
void ShadowStageBase::setOffFactor(const Real32 value)
{
    editSField(OffFactorFieldMask);

    _sfOffFactor.setValue(value);
}
//! Get the value of the ShadowStage::_sfMapSize field.

inline
UInt32 &ShadowStageBase::editMapSize(void)
{
    editSField(MapSizeFieldMask);

    return _sfMapSize.getValue();
}

//! Get the value of the ShadowStage::_sfMapSize field.
inline
      UInt32  ShadowStageBase::getMapSize(void) const
{
    return _sfMapSize.getValue();
}

//! Set the value of the ShadowStage::_sfMapSize field.
inline
void ShadowStageBase::setMapSize(const UInt32 value)
{
    editSField(MapSizeFieldMask);

    _sfMapSize.setValue(value);
}
//! Get the value of the ShadowStage::_sfMapAutoUpdate field.

inline
bool &ShadowStageBase::editMapAutoUpdate(void)
{
    editSField(MapAutoUpdateFieldMask);

    return _sfMapAutoUpdate.getValue();
}

//! Get the value of the ShadowStage::_sfMapAutoUpdate field.
inline
      bool  ShadowStageBase::getMapAutoUpdate(void) const
{
    return _sfMapAutoUpdate.getValue();
}

//! Set the value of the ShadowStage::_sfMapAutoUpdate field.
inline
void ShadowStageBase::setMapAutoUpdate(const bool value)
{
    editSField(MapAutoUpdateFieldMask);

    _sfMapAutoUpdate.setValue(value);
}
//! Get the value of the ShadowStage::_sfShadowMode field.

inline
UInt32 &ShadowStageBase::editShadowMode(void)
{
    editSField(ShadowModeFieldMask);

    return _sfShadowMode.getValue();
}

//! Get the value of the ShadowStage::_sfShadowMode field.
inline
      UInt32  ShadowStageBase::getShadowMode(void) const
{
    return _sfShadowMode.getValue();
}

//! Set the value of the ShadowStage::_sfShadowMode field.
inline
void ShadowStageBase::setShadowMode(const UInt32 value)
{
    editSField(ShadowModeFieldMask);

    _sfShadowMode.setValue(value);
}
//! Get the value of the ShadowStage::_sfShadowSmoothness field.

inline
Real32 &ShadowStageBase::editShadowSmoothness(void)
{
    editSField(ShadowSmoothnessFieldMask);

    return _sfShadowSmoothness.getValue();
}

//! Get the value of the ShadowStage::_sfShadowSmoothness field.
inline
      Real32  ShadowStageBase::getShadowSmoothness(void) const
{
    return _sfShadowSmoothness.getValue();
}

//! Set the value of the ShadowStage::_sfShadowSmoothness field.
inline
void ShadowStageBase::setShadowSmoothness(const Real32 value)
{
    editSField(ShadowSmoothnessFieldMask);

    _sfShadowSmoothness.setValue(value);
}
//! Get the value of the ShadowStage::_sfShadowOn field.

inline
bool &ShadowStageBase::editShadowOn(void)
{
    editSField(ShadowOnFieldMask);

    return _sfShadowOn.getValue();
}

//! Get the value of the ShadowStage::_sfShadowOn field.
inline
      bool  ShadowStageBase::getShadowOn(void) const
{
    return _sfShadowOn.getValue();
}

//! Set the value of the ShadowStage::_sfShadowOn field.
inline
void ShadowStageBase::setShadowOn(const bool value)
{
    editSField(ShadowOnFieldMask);

    _sfShadowOn.setValue(value);
}
//! Get the value of the ShadowStage::_sfAutoSearchForLights field.

inline
bool &ShadowStageBase::editAutoSearchForLights(void)
{
    editSField(AutoSearchForLightsFieldMask);

    return _sfAutoSearchForLights.getValue();
}

//! Get the value of the ShadowStage::_sfAutoSearchForLights field.
inline
      bool  ShadowStageBase::getAutoSearchForLights(void) const
{
    return _sfAutoSearchForLights.getValue();
}

//! Set the value of the ShadowStage::_sfAutoSearchForLights field.
inline
void ShadowStageBase::setAutoSearchForLights(const bool value)
{
    editSField(AutoSearchForLightsFieldMask);

    _sfAutoSearchForLights.setValue(value);
}
//! Get the value of the ShadowStage::_sfGlobalShadowIntensity field.

inline
Real32 &ShadowStageBase::editGlobalShadowIntensity(void)
{
    editSField(GlobalShadowIntensityFieldMask);

    return _sfGlobalShadowIntensity.getValue();
}

//! Get the value of the ShadowStage::_sfGlobalShadowIntensity field.
inline
      Real32  ShadowStageBase::getGlobalShadowIntensity(void) const
{
    return _sfGlobalShadowIntensity.getValue();
}

//! Set the value of the ShadowStage::_sfGlobalShadowIntensity field.
inline
void ShadowStageBase::setGlobalShadowIntensity(const Real32 value)
{
    editSField(GlobalShadowIntensityFieldMask);

    _sfGlobalShadowIntensity.setValue(value);
}
//! Get the value of the ShadowStage::_sfFboOn field.

inline
bool &ShadowStageBase::editFboOn(void)
{
    editSField(FboOnFieldMask);

    return _sfFboOn.getValue();
}

//! Get the value of the ShadowStage::_sfFboOn field.
inline
      bool  ShadowStageBase::getFboOn(void) const
{
    return _sfFboOn.getValue();
}

//! Set the value of the ShadowStage::_sfFboOn field.
inline
void ShadowStageBase::setFboOn(const bool value)
{
    editSField(FboOnFieldMask);

    _sfFboOn.setValue(value);
}
//! Get the value of the ShadowStage::_sfAutoExcludeTransparentNodes field.

inline
bool &ShadowStageBase::editAutoExcludeTransparentNodes(void)
{
    editSField(AutoExcludeTransparentNodesFieldMask);

    return _sfAutoExcludeTransparentNodes.getValue();
}

//! Get the value of the ShadowStage::_sfAutoExcludeTransparentNodes field.
inline
      bool  ShadowStageBase::getAutoExcludeTransparentNodes(void) const
{
    return _sfAutoExcludeTransparentNodes.getValue();
}

//! Set the value of the ShadowStage::_sfAutoExcludeTransparentNodes field.
inline
void ShadowStageBase::setAutoExcludeTransparentNodes(const bool value)
{
    editSField(AutoExcludeTransparentNodesFieldMask);

    _sfAutoExcludeTransparentNodes.setValue(value);
}
//! Get the value of the ShadowStage::_sfDisableOccludedLights field.

inline
bool &ShadowStageBase::editDisableOccludedLights(void)
{
    editSField(DisableOccludedLightsFieldMask);

    return _sfDisableOccludedLights.getValue();
}

//! Get the value of the ShadowStage::_sfDisableOccludedLights field.
inline
      bool  ShadowStageBase::getDisableOccludedLights(void) const
{
    return _sfDisableOccludedLights.getValue();
}

//! Set the value of the ShadowStage::_sfDisableOccludedLights field.
inline
void ShadowStageBase::setDisableOccludedLights(const bool value)
{
    editSField(DisableOccludedLightsFieldMask);

    _sfDisableOccludedLights.setValue(value);
}
//! Get the value of the ShadowStage::_sfRed field.

inline
bool &ShadowStageBase::editRed(void)
{
    editSField(RedFieldMask);

    return _sfRed.getValue();
}

//! Get the value of the ShadowStage::_sfRed field.
inline
      bool  ShadowStageBase::getRed(void) const
{
    return _sfRed.getValue();
}

//! Set the value of the ShadowStage::_sfRed field.
inline
void ShadowStageBase::setRed(const bool value)
{
    editSField(RedFieldMask);

    _sfRed.setValue(value);
}
//! Get the value of the ShadowStage::_sfBlue field.

inline
bool &ShadowStageBase::editBlue(void)
{
    editSField(BlueFieldMask);

    return _sfBlue.getValue();
}

//! Get the value of the ShadowStage::_sfBlue field.
inline
      bool  ShadowStageBase::getBlue(void) const
{
    return _sfBlue.getValue();
}

//! Set the value of the ShadowStage::_sfBlue field.
inline
void ShadowStageBase::setBlue(const bool value)
{
    editSField(BlueFieldMask);

    _sfBlue.setValue(value);
}
//! Get the value of the ShadowStage::_sfGreen field.

inline
bool &ShadowStageBase::editGreen(void)
{
    editSField(GreenFieldMask);

    return _sfGreen.getValue();
}

//! Get the value of the ShadowStage::_sfGreen field.
inline
      bool  ShadowStageBase::getGreen(void) const
{
    return _sfGreen.getValue();
}

//! Set the value of the ShadowStage::_sfGreen field.
inline
void ShadowStageBase::setGreen(const bool value)
{
    editSField(GreenFieldMask);

    _sfGreen.setValue(value);
}
//! Get the value of the ShadowStage::_sfAlpha field.

inline
bool &ShadowStageBase::editAlpha(void)
{
    editSField(AlphaFieldMask);

    return _sfAlpha.getValue();
}

//! Get the value of the ShadowStage::_sfAlpha field.
inline
      bool  ShadowStageBase::getAlpha(void) const
{
    return _sfAlpha.getValue();
}

//! Set the value of the ShadowStage::_sfAlpha field.
inline
void ShadowStageBase::setAlpha(const bool value)
{
    editSField(AlphaFieldMask);

    _sfAlpha.setValue(value);
}
//! Get the value of the ShadowStage::_sfBlitZBuffer field.

inline
bool &ShadowStageBase::editBlitZBuffer(void)
{
    editSField(BlitZBufferFieldMask);

    return _sfBlitZBuffer.getValue();
}

//! Get the value of the ShadowStage::_sfBlitZBuffer field.
inline
      bool  ShadowStageBase::getBlitZBuffer(void) const
{
    return _sfBlitZBuffer.getValue();
}

//! Set the value of the ShadowStage::_sfBlitZBuffer field.
inline
void ShadowStageBase::setBlitZBuffer(const bool value)
{
    editSField(BlitZBufferFieldMask);

    _sfBlitZBuffer.setValue(value);
}
//! Get the value of the ShadowStage::_sfCombineBlend field.

inline
bool &ShadowStageBase::editCombineBlend(void)
{
    editSField(CombineBlendFieldMask);

    return _sfCombineBlend.getValue();
}

//! Get the value of the ShadowStage::_sfCombineBlend field.
inline
      bool  ShadowStageBase::getCombineBlend(void) const
{
    return _sfCombineBlend.getValue();
}

//! Set the value of the ShadowStage::_sfCombineBlend field.
inline
void ShadowStageBase::setCombineBlend(const bool value)
{
    editSField(CombineBlendFieldMask);

    _sfCombineBlend.setValue(value);
}
//! Get the value of the ShadowStage::_sfRenderPropertyMask field.

inline
RenderPropBitVector &ShadowStageBase::editRenderPropertyMask(void)
{
    editSField(RenderPropertyMaskFieldMask);

    return _sfRenderPropertyMask.getValue();
}

//! Get the value of the ShadowStage::_sfRenderPropertyMask field.
inline
const RenderPropBitVector &ShadowStageBase::getRenderPropertyMask(void) const
{
    return _sfRenderPropertyMask.getValue();
}

//! Set the value of the ShadowStage::_sfRenderPropertyMask field.
inline
void ShadowStageBase::setRenderPropertyMask(const RenderPropBitVector &value)
{
    editSField(RenderPropertyMaskFieldMask);

    _sfRenderPropertyMask.setValue(value);
}




#ifdef OSG_MT_CPTR_ASPECT
inline
void ShadowStageBase::execSync (      ShadowStageBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (BufferFormatFieldMask & whichField))
        _sfBufferFormat.syncWith(pFrom->_sfBufferFormat);

    if(FieldBits::NoField != (OffBiasFieldMask & whichField))
        _sfOffBias.syncWith(pFrom->_sfOffBias);

    if(FieldBits::NoField != (OffFactorFieldMask & whichField))
        _sfOffFactor.syncWith(pFrom->_sfOffFactor);

    if(FieldBits::NoField != (MapSizeFieldMask & whichField))
        _sfMapSize.syncWith(pFrom->_sfMapSize);

    if(FieldBits::NoField != (LightNodesFieldMask & whichField))
        _mfLightNodes.syncWith(pFrom->_mfLightNodes,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (ExcludeNodesFieldMask & whichField))
        _mfExcludeNodes.syncWith(pFrom->_mfExcludeNodes,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (MapAutoUpdateFieldMask & whichField))
        _sfMapAutoUpdate.syncWith(pFrom->_sfMapAutoUpdate);

    if(FieldBits::NoField != (ShadowModeFieldMask & whichField))
        _sfShadowMode.syncWith(pFrom->_sfShadowMode);

    if(FieldBits::NoField != (ShadowSmoothnessFieldMask & whichField))
        _sfShadowSmoothness.syncWith(pFrom->_sfShadowSmoothness);

    if(FieldBits::NoField != (ShadowOnFieldMask & whichField))
        _sfShadowOn.syncWith(pFrom->_sfShadowOn);

    if(FieldBits::NoField != (AutoSearchForLightsFieldMask & whichField))
        _sfAutoSearchForLights.syncWith(pFrom->_sfAutoSearchForLights);

    if(FieldBits::NoField != (GlobalShadowIntensityFieldMask & whichField))
        _sfGlobalShadowIntensity.syncWith(pFrom->_sfGlobalShadowIntensity);

    if(FieldBits::NoField != (FboOnFieldMask & whichField))
        _sfFboOn.syncWith(pFrom->_sfFboOn);

    if(FieldBits::NoField != (AutoExcludeTransparentNodesFieldMask & whichField))
        _sfAutoExcludeTransparentNodes.syncWith(pFrom->_sfAutoExcludeTransparentNodes);

    if(FieldBits::NoField != (DisableOccludedLightsFieldMask & whichField))
        _sfDisableOccludedLights.syncWith(pFrom->_sfDisableOccludedLights);

    if(FieldBits::NoField != (RedFieldMask & whichField))
        _sfRed.syncWith(pFrom->_sfRed);

    if(FieldBits::NoField != (BlueFieldMask & whichField))
        _sfBlue.syncWith(pFrom->_sfBlue);

    if(FieldBits::NoField != (GreenFieldMask & whichField))
        _sfGreen.syncWith(pFrom->_sfGreen);

    if(FieldBits::NoField != (AlphaFieldMask & whichField))
        _sfAlpha.syncWith(pFrom->_sfAlpha);

    if(FieldBits::NoField != (BlitZBufferFieldMask & whichField))
        _sfBlitZBuffer.syncWith(pFrom->_sfBlitZBuffer);

    if(FieldBits::NoField != (CombineBlendFieldMask & whichField))
        _sfCombineBlend.syncWith(pFrom->_sfCombineBlend);

    if(FieldBits::NoField != (RenderPropertyMaskFieldMask & whichField))
        _sfRenderPropertyMask.syncWith(pFrom->_sfRenderPropertyMask);
}
#endif


inline
const Char8 *ShadowStageBase::getClassname(void)
{
    return "ShadowStage";
}
OSG_GEN_CONTAINERPTR(ShadowStage);

OSG_END_NAMESPACE

