/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Stage!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESTAGEINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>



#include <OSGFrameBufferObject.h> // RenderTarget Class

#include "OSGStageBase.h"
#include "OSGStage.h"

#include "boost/bind.hpp"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::Stage
    Base of a staged rendering.  Tells the renderer to target an FBO for this subtree.
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var FrameBufferObjectPtr StageBase::_sfRenderTarget
    The FBO to target for rendering this subtree.
*/

/*! \var bool            StageBase::_sfInheritedTarget
    Inherited the parent target if none is set  
*/


void StageBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;

    Inherited::classDescInserter(oType);


    pDesc = new SFFrameBufferObjectPtr::Description(
        SFFrameBufferObjectPtr::getClassType(),
        "renderTarget",
        "The FBO to target for rendering this subtree.\n",
        RenderTargetFieldId, RenderTargetFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&StageBase::editHandleRenderTarget),
        static_cast<FieldGetMethodSig >(&StageBase::getHandleRenderTarget));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "inheritedTarget",
        "Inherited the parent target if none is set  \n",
        InheritedTargetFieldId, InheritedTargetFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&StageBase::editHandleInheritedTarget),
        static_cast<FieldGetMethodSig >(&StageBase::getHandleInheritedTarget));

    oType.addInitialDesc(pDesc);
}


StageBase::TypeObject StageBase::_type(
    StageBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &StageBase::createEmpty,
    Stage::initMethod,
    Stage::exitMethod,
    (InitalInsertDescFunc) &StageBase::classDescInserter,
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "        name=\"Stage\"\n"
    "        parent=\"Group\"\n"
    "        mixinparent=\"StageParent\"\n"
    "        library=\"Group\"\n"
    "        pointerfieldtypes=\"both\"\n"
    "        structure=\"concrete\"\n"
    "        systemcomponent=\"true\"\n"
    "        parentsystemcomponent=\"true\"\n"
    "        decoratable=\"false\"\n"
    "        useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"true\"\n"
    ">\n"
    "Base of a staged rendering.  Tells the renderer to target an FBO for this subtree.\n"
    "        <Field\n"
    "                name=\"renderTarget\"\n"
    "                type=\"FrameBufferObjectPtr\"\n"
    "                cardinality=\"single\"\n"
    "                visibility=\"external\"\n"
    "                defaultValue=\"NullFC\"\n"
    "                access=\"public\"\n"
    "        >\n"
    "        The FBO to target for rendering this subtree.\n"
    "        </Field>\n"
    "        <Field\n"
    "                name=\"inheritedTarget\"\n"
    "                type=\"bool\"\n"
    "                cardinality=\"single\"\n"
    "                visibility=\"external\"\n"
    "                access=\"public\"\n"
    "                defaultValue=\"false\"\n"
    "        >\n"
    "        Inherited the parent target if none is set  \n"
    "        </Field>\n"
    "</FieldContainer>\n",
    "Base of a staged rendering.  Tells the renderer to target an FBO for this subtree.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &StageBase::getType(void)
{
    return _type;
}

const FieldContainerType &StageBase::getType(void) const
{
    return _type;
}

UInt32 StageBase::getContainerSize(void) const
{
    return sizeof(Stage);
}

/*------------------------- decorator get ------------------------------*/


//! Get the Stage::_sfRenderTarget field.
const SFFrameBufferObjectPtr *StageBase::getSFRenderTarget(void) const
{
    return &_sfRenderTarget;
}

SFBool *StageBase::editSFInheritedTarget(void)
{
    editSField(InheritedTargetFieldMask);

    return &_sfInheritedTarget;
}

const SFBool *StageBase::getSFInheritedTarget(void) const
{
    return &_sfInheritedTarget;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *StageBase::getSFInheritedTarget(void)
{
    return this->editSFInheritedTarget();
}
#endif





/*------------------------------ access -----------------------------------*/

UInt32 StageBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (RenderTargetFieldMask & whichField))
    {
        returnValue += _sfRenderTarget.getBinSize();
    }
    if(FieldBits::NoField != (InheritedTargetFieldMask & whichField))
    {
        returnValue += _sfInheritedTarget.getBinSize();
    }

    return returnValue;
}

void StageBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (RenderTargetFieldMask & whichField))
    {
        _sfRenderTarget.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InheritedTargetFieldMask & whichField))
    {
        _sfInheritedTarget.copyToBin(pMem);
    }
}

void StageBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (RenderTargetFieldMask & whichField))
    {
        _sfRenderTarget.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InheritedTargetFieldMask & whichField))
    {
        _sfInheritedTarget.copyFromBin(pMem);
    }
}

//! create a new instance of the class
StagePtr StageBase::create(void)
{
    StagePtr fc;

    if(getClassType().getPrototype() != NullFC)
    {
        fc = dynamic_cast<Stage::ObjPtr>(
            getClassType().getPrototype()-> shallowCopy());
    }

    return fc;
}

//! create an empty new instance of the class, do not copy the prototype
StagePtr StageBase::createEmpty(void)
{
    StagePtr returnValue;

    newPtr<Stage>(returnValue);

    return returnValue;
}

FieldContainerPtr StageBase::shallowCopy(void) const
{
    StagePtr returnValue;

    newPtr(returnValue, dynamic_cast<const Stage *>(this));

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

StageBase::StageBase(void) :
    Inherited(),
    _sfRenderTarget           (FrameBufferObjectPtr(NullFC)),
    _sfInheritedTarget        (bool(false))
{
}

StageBase::StageBase(const StageBase &source) :
    Inherited(source),
    _sfRenderTarget           (NullFC),
    _sfInheritedTarget        (source._sfInheritedTarget        )
{
}


/*-------------------------- destructors ----------------------------------*/

StageBase::~StageBase(void)
{
}

void StageBase::onCreate(const Stage *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {

        this->setRenderTarget(source->getRenderTarget());
    }
}

GetFieldHandlePtr StageBase::getHandleRenderTarget    (void) const
{
    SFFrameBufferObjectPtr::GetHandlePtr returnValue(
        new  SFFrameBufferObjectPtr::GetHandle(
             &_sfRenderTarget, 
             this->getType().getFieldDesc(RenderTargetFieldId)));

    return returnValue;
}

EditFieldHandlePtr StageBase::editHandleRenderTarget   (void)
{
    SFFrameBufferObjectPtr::EditHandlePtr returnValue(
        new  SFFrameBufferObjectPtr::EditHandle(
             &_sfRenderTarget, 
             this->getType().getFieldDesc(RenderTargetFieldId)));

    returnValue->setSetMethod(boost::bind(&Stage::setRenderTarget, 
                                          static_cast<Stage *>(this), _1));

    editSField(RenderTargetFieldMask);

    return returnValue;
}

GetFieldHandlePtr StageBase::getHandleInheritedTarget (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfInheritedTarget, 
             this->getType().getFieldDesc(InheritedTargetFieldId)));

    return returnValue;
}

EditFieldHandlePtr StageBase::editHandleInheritedTarget(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfInheritedTarget, 
             this->getType().getFieldDesc(InheritedTargetFieldId)));

    editSField(InheritedTargetFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void StageBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<StageBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr StageBase::createAspectCopy(void) const
{
    StagePtr returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const Stage *>(this));

    return returnValue;
}
#endif

void StageBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<Stage *>(this)->setRenderTarget(NullFC);


}


OSG_END_NAMESPACE

#include "OSGSFieldAdaptor.ins"
#include "OSGMFieldAdaptor.ins"

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<StagePtr>::_type("StagePtr", "GroupPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(StagePtr)

OSG_FIELD_DLLEXPORT_DEF2(SFieldAdaptor, StagePtr, SFFieldContainerPtr);
OSG_FIELD_DLLEXPORT_DEF2(MFieldAdaptor, StagePtr, MFFieldContainerPtr);

OSG_END_NAMESPACE
