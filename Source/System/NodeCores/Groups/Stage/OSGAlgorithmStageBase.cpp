/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class AlgorithmStage!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEALGORITHMSTAGEINST

#include <stdlib.h>
#include <stdio.h>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>



#include <OSGAlgorithm.h> // Algorithm Class

#include "OSGAlgorithmStageBase.h"
#include "OSGAlgorithmStage.h"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::AlgorithmStage
    
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var AlgorithmPtr    AlgorithmStageBase::_sfAlgorithm
    
*/
/*! \var UInt32          AlgorithmStageBase::_sfProjectionMode
    
*/
/*! \var Matrix          AlgorithmStageBase::_sfProjectionMatrix
    
*/

void AlgorithmStageBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFAlgorithmPtr::Description(
        SFAlgorithmPtr::getClassType(),
        "algorithm",
        "",
        AlgorithmFieldId, AlgorithmFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&AlgorithmStageBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&AlgorithmStageBase::getSFAlgorithm));

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFUInt32 *(AlgorithmStageBase::*GetSFProjectionModeF)(void) const;

    GetSFProjectionModeF GetSFProjectionMode = &AlgorithmStageBase::getSFProjectionMode;
#endif

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "projectionMode",
        "",
        ProjectionModeFieldId, ProjectionModeFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&AlgorithmStageBase::editSFProjectionMode),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFProjectionMode));
#else
        reinterpret_cast<FieldGetMethodSig >(&AlgorithmStageBase::getSFProjectionMode));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFMatrix *(AlgorithmStageBase::*GetSFProjectionMatrixF)(void) const;

    GetSFProjectionMatrixF GetSFProjectionMatrix = &AlgorithmStageBase::getSFProjectionMatrix;
#endif

    pDesc = new SFMatrix::Description(
        SFMatrix::getClassType(),
        "projectionMatrix",
        "",
        ProjectionMatrixFieldId, ProjectionMatrixFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&AlgorithmStageBase::editSFProjectionMatrix),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFProjectionMatrix));
#else
        reinterpret_cast<FieldGetMethodSig >(&AlgorithmStageBase::getSFProjectionMatrix));
#endif

    oType.addInitialDesc(pDesc);
}


AlgorithmStageBase::TypeObject AlgorithmStageBase::_type(true,
    AlgorithmStageBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &AlgorithmStageBase::createEmpty,
    AlgorithmStage::initMethod,
    (InitalInsertDescFunc) &AlgorithmStageBase::classDescInserter,
    false,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"AlgorithmStage\"\n"
    "\tparent=\"Stage\"\n"
    "\tlibrary=\"Group\"\n"
    "\tpointerfieldtypes=\"none\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"false\"\n"
    "    isNodeCore=\"true\"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"algorithm\"\n"
    "\t\ttype=\"AlgorithmPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NullFC\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"projectionMode\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0x0001\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"projectionMatrix\"\n"
    "\t\ttype=\"Matrix\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &AlgorithmStageBase::getType(void)
{
    return _type;
}

const FieldContainerType &AlgorithmStageBase::getType(void) const
{
    return _type;
}

UInt32 AlgorithmStageBase::getContainerSize(void) const
{
    return sizeof(AlgorithmStage);
}

/*------------------------- decorator get ------------------------------*/


//! Get the AlgorithmStage::_sfAlgorithm field.
const SFAlgorithmPtr *AlgorithmStageBase::getSFAlgorithm(void) const
{
    return &_sfAlgorithm;
}

SFUInt32 *AlgorithmStageBase::editSFProjectionMode(void)
{
    editSField(ProjectionModeFieldMask);

    return &_sfProjectionMode;
}

const SFUInt32 *AlgorithmStageBase::getSFProjectionMode(void) const
{
    return &_sfProjectionMode;
}

#ifdef OSG_1_COMPAT
SFUInt32            *AlgorithmStageBase::getSFProjectionMode (void)
{
    return this->editSFProjectionMode ();
}
#endif

SFMatrix *AlgorithmStageBase::editSFProjectionMatrix(void)
{
    editSField(ProjectionMatrixFieldMask);

    return &_sfProjectionMatrix;
}

const SFMatrix *AlgorithmStageBase::getSFProjectionMatrix(void) const
{
    return &_sfProjectionMatrix;
}

#ifdef OSG_1_COMPAT
SFMatrix            *AlgorithmStageBase::getSFProjectionMatrix(void)
{
    return this->editSFProjectionMatrix();
}
#endif


void AlgorithmStageBase::pushToField(      FieldContainerPtrConstArg pNewElement,
                                    const UInt32                    uiFieldId  )
{
    Inherited::pushToField(pNewElement, uiFieldId);

    if(uiFieldId == AlgorithmFieldId)
    {
        static_cast<AlgorithmStage *>(this)->setAlgorithm(
            cast_dynamic<AlgorithmPtr>(pNewElement));
    }
}

void AlgorithmStageBase::insertIntoMField(const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::insertIntoMField(uiIndex, pNewElement, uiFieldId);

}

void AlgorithmStageBase::replaceInMField (const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::replaceInMField(uiIndex, pNewElement, uiFieldId);

}

void AlgorithmStageBase::replaceInMField (      FieldContainerPtrConstArg pOldElement,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::replaceInMField(pOldElement, pNewElement, uiFieldId);

}

void AlgorithmStageBase::removeFromMField(const UInt32 uiIndex,
                                         const UInt32 uiFieldId)
{
    Inherited::removeFromMField(uiIndex, uiFieldId);

}

void AlgorithmStageBase::removeFromMField(      FieldContainerPtrConstArg pElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::removeFromMField(pElement, uiFieldId);

}

void AlgorithmStageBase::clearField(const UInt32 uiFieldId)
{
    Inherited::clearField(uiFieldId);

    if(uiFieldId == AlgorithmFieldId)
    {
        static_cast<AlgorithmStage *>(this)->setAlgorithm(NullFC);
    }
}



/*------------------------------ access -----------------------------------*/

UInt32 AlgorithmStageBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (AlgorithmFieldMask & whichField))
    {
        returnValue += _sfAlgorithm.getBinSize();
    }
    if(FieldBits::NoField != (ProjectionModeFieldMask & whichField))
    {
        returnValue += _sfProjectionMode.getBinSize();
    }
    if(FieldBits::NoField != (ProjectionMatrixFieldMask & whichField))
    {
        returnValue += _sfProjectionMatrix.getBinSize();
    }

    return returnValue;
}

void AlgorithmStageBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (AlgorithmFieldMask & whichField))
    {
        _sfAlgorithm.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ProjectionModeFieldMask & whichField))
    {
        _sfProjectionMode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ProjectionMatrixFieldMask & whichField))
    {
        _sfProjectionMatrix.copyToBin(pMem);
    }
}

void AlgorithmStageBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (AlgorithmFieldMask & whichField))
    {
        _sfAlgorithm.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ProjectionModeFieldMask & whichField))
    {
        _sfProjectionMode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ProjectionMatrixFieldMask & whichField))
    {
        _sfProjectionMatrix.copyFromBin(pMem);
    }
}

//! create an empty new instance of the class, do not copy the prototype
AlgorithmStagePtr AlgorithmStageBase::createEmpty(void)
{
    AlgorithmStagePtr returnValue;

    newPtr<AlgorithmStage>(returnValue);

    return returnValue;
}

FieldContainerPtr AlgorithmStageBase::shallowCopy(void) const
{
    AlgorithmStagePtr returnValue;

    newPtr(returnValue, dynamic_cast<const AlgorithmStage *>(this));

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

AlgorithmStageBase::AlgorithmStageBase(void) :
    Inherited(),
    _sfAlgorithm              (AlgorithmPtr(NullFC)),
    _sfProjectionMode         (UInt32(0x0001)),
    _sfProjectionMatrix       ()
{
}

AlgorithmStageBase::AlgorithmStageBase(const AlgorithmStageBase &source) :
    Inherited(source),
    _sfAlgorithm              (),
    _sfProjectionMode         (source._sfProjectionMode         ),
    _sfProjectionMatrix       (source._sfProjectionMatrix       )
{
}

/*-------------------------- destructors ----------------------------------*/

AlgorithmStageBase::~AlgorithmStageBase(void)
{
}

void AlgorithmStageBase::onCreate(const AlgorithmStage *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {

        this->setAlgorithm(source->getAlgorithm());
    }
}

#ifdef OSG_MT_FIELDCONTAINERPTR
void AlgorithmStageBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo,
                                        UInt32             uiCopyOffset)
{
    this->execSync(static_cast<AlgorithmStageBase *>(&oFrom),
                   whichField,
                   syncMode,
                   uiSyncInfo,
                   uiCopyOffset);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
void AlgorithmStageBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<AlgorithmStageBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif

#if 0
void AlgorithmStageBase::execBeginEditV(ConstFieldMaskArg whichField,
                                       UInt32            uiAspect,
                                       UInt32            uiContainerSize)
{
    this->execBeginEdit(whichField, uiAspect, uiContainerSize);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr AlgorithmStageBase::createAspectCopy(void) const
{
    AlgorithmStagePtr returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const AlgorithmStage *>(this));

    return returnValue;
}
#endif

void AlgorithmStageBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<AlgorithmStage *>(this)->setAlgorithm(NullFC);
}


#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<AlgorithmStagePtr>::_type("AlgorithmStagePtr", "StagePtr");
#endif



/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id$";
    static Char8 cvsid_hpp       [] = OSGALGORITHMSTAGEBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGALGORITHMSTAGEBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGALGORITHMSTAGEFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE
