/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class StageData!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESTAGEDATAINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>
#include "boost/bind.hpp"

#include <OSGConfig.h>




#include "OSGStageDataBase.h"
#include "OSGStageData.h"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::StageData
    Data use for rendering by the any stage, holds bookkeeping data
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var Int32           StageDataBase::_sfPartitionRangeBegin
    
*/

/*! \var Int32           StageDataBase::_sfPartitionRangeEnd
    
*/

/*! \var Int32           StageDataBase::_sfGroupMode
    
*/


void StageDataBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "partitionRangeBegin",
        "",
        PartitionRangeBeginFieldId, PartitionRangeBeginFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&StageDataBase::editHandlePartitionRangeBegin),
        reinterpret_cast<FieldGetMethodSig >(&StageDataBase::getHandlePartitionRangeBegin));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "partitionRangeEnd",
        "",
        PartitionRangeEndFieldId, PartitionRangeEndFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&StageDataBase::editHandlePartitionRangeEnd),
        reinterpret_cast<FieldGetMethodSig >(&StageDataBase::getHandlePartitionRangeEnd));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "groupMode",
        "",
        GroupModeFieldId, GroupModeFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&StageDataBase::editHandleGroupMode),
        reinterpret_cast<FieldGetMethodSig >(&StageDataBase::getHandleGroupMode));

    oType.addInitialDesc(pDesc);
}


StageDataBase::TypeObject StageDataBase::_type(
    StageDataBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (ProtoBundleCreateF) &StageDataBase::createEmpty,
    StageData::initMethod,
    (InitalInsertDescFunc) &StageDataBase::classDescInserter,
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"StageData\"\n"
    "    parent=\"FieldBundle\"\n"
    "    library=\"Group\"\n"
    "    pointerfieldtypes=\"none\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    ">\n"
    "Data use for rendering by the any stage, holds bookkeeping data\n"
    "\t<Field\n"
    "\t\tname=\"partitionRangeBegin\"\n"
    "\t\ttype=\"Int32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"-1\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"partitionRangeEnd\"\n"
    "\t\ttype=\"Int32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"-1\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"groupMode\"\n"
    "\t\ttype=\"Int32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "Data use for rendering by the any stage, holds bookkeeping data\n"
    );

/*------------------------------ get -----------------------------------*/

FieldBundleType &StageDataBase::getType(void)
{
    return _type;
}

const FieldBundleType &StageDataBase::getType(void) const
{
    return _type;
}

UInt32 StageDataBase::getContainerSize(void) const
{
    return sizeof(StageData);
}

/*------------------------- decorator get ------------------------------*/


SFInt32 *StageDataBase::editSFPartitionRangeBegin(void)
{
    editSField(PartitionRangeBeginFieldMask);

    return &_sfPartitionRangeBegin;
}

const SFInt32 *StageDataBase::getSFPartitionRangeBegin(void) const
{
    return &_sfPartitionRangeBegin;
}

#ifdef OSG_1_GET_COMPAT
SFInt32             *StageDataBase::getSFPartitionRangeBegin(void)
{
    return this->editSFPartitionRangeBegin();
}
#endif

SFInt32 *StageDataBase::editSFPartitionRangeEnd(void)
{
    editSField(PartitionRangeEndFieldMask);

    return &_sfPartitionRangeEnd;
}

const SFInt32 *StageDataBase::getSFPartitionRangeEnd(void) const
{
    return &_sfPartitionRangeEnd;
}

#ifdef OSG_1_GET_COMPAT
SFInt32             *StageDataBase::getSFPartitionRangeEnd(void)
{
    return this->editSFPartitionRangeEnd();
}
#endif

SFInt32 *StageDataBase::editSFGroupMode(void)
{
    editSField(GroupModeFieldMask);

    return &_sfGroupMode;
}

const SFInt32 *StageDataBase::getSFGroupMode(void) const
{
    return &_sfGroupMode;
}

#ifdef OSG_1_GET_COMPAT
SFInt32             *StageDataBase::getSFGroupMode      (void)
{
    return this->editSFGroupMode      ();
}
#endif





/*------------------------------ access -----------------------------------*/

UInt32 StageDataBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (PartitionRangeBeginFieldMask & whichField))
    {
        returnValue += _sfPartitionRangeBegin.getBinSize();
    }
    if(FieldBits::NoField != (PartitionRangeEndFieldMask & whichField))
    {
        returnValue += _sfPartitionRangeEnd.getBinSize();
    }
    if(FieldBits::NoField != (GroupModeFieldMask & whichField))
    {
        returnValue += _sfGroupMode.getBinSize();
    }

    return returnValue;
}

void StageDataBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (PartitionRangeBeginFieldMask & whichField))
    {
        _sfPartitionRangeBegin.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PartitionRangeEndFieldMask & whichField))
    {
        _sfPartitionRangeEnd.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GroupModeFieldMask & whichField))
    {
        _sfGroupMode.copyToBin(pMem);
    }
}

void StageDataBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (PartitionRangeBeginFieldMask & whichField))
    {
        _sfPartitionRangeBegin.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PartitionRangeEndFieldMask & whichField))
    {
        _sfPartitionRangeEnd.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GroupModeFieldMask & whichField))
    {
        _sfGroupMode.copyFromBin(pMem);
    }
}

//! create an empty new instance of the class, do not copy the prototype
StageDataP StageDataBase::createEmpty(void)
{
    StageDataP returnValue;

    newPtr<StageData>(returnValue);

    return returnValue;
}

FieldBundleP StageDataBase::shallowCopy(void) const
{
    StageDataP returnValue;

    newPtr(returnValue, dynamic_cast<const StageData *>(this));

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

StageDataBase::StageDataBase(void) :
    Inherited(),
    _sfPartitionRangeBegin    (Int32(-1)),
    _sfPartitionRangeEnd      (Int32(-1)),
    _sfGroupMode              (Int32(0))
{
}

StageDataBase::StageDataBase(const StageDataBase &source) :
    Inherited(source),
    _sfPartitionRangeBegin    (source._sfPartitionRangeBegin    ),
    _sfPartitionRangeEnd      (source._sfPartitionRangeEnd      ),
    _sfGroupMode              (source._sfGroupMode              )
{
}

/*-------------------------- destructors ----------------------------------*/

StageDataBase::~StageDataBase(void)
{
}


void StageDataBase::resolveLinks(void)
{
    Inherited::resolveLinks();
}

SFInt32::GetHandlePtr StageDataBase::getHandlePartitionRangeBegin (void)
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfPartitionRangeBegin, 
             this->getType().getFieldDesc(PartitionRangeBeginFieldId)));

    return returnValue;
}

SFInt32::EditHandlePtr StageDataBase::editHandlePartitionRangeBegin(void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfPartitionRangeBegin, 
             this->getType().getFieldDesc(PartitionRangeBeginFieldId)));

    editSField(PartitionRangeBeginFieldMask);

    return returnValue;
}

SFInt32::GetHandlePtr StageDataBase::getHandlePartitionRangeEnd (void)
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfPartitionRangeEnd, 
             this->getType().getFieldDesc(PartitionRangeEndFieldId)));

    return returnValue;
}

SFInt32::EditHandlePtr StageDataBase::editHandlePartitionRangeEnd(void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfPartitionRangeEnd, 
             this->getType().getFieldDesc(PartitionRangeEndFieldId)));

    editSField(PartitionRangeEndFieldMask);

    return returnValue;
}

SFInt32::GetHandlePtr StageDataBase::getHandleGroupMode       (void)
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfGroupMode, 
             this->getType().getFieldDesc(GroupModeFieldId)));

    return returnValue;
}

SFInt32::EditHandlePtr StageDataBase::editHandleGroupMode      (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfGroupMode, 
             this->getType().getFieldDesc(GroupModeFieldId)));

    editSField(GroupModeFieldMask);

    return returnValue;
}



#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<StageDataP>::_type("StageDataP", "FieldBundleP");
#endif



OSG_END_NAMESPACE
