/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ProxyGroup!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &ProxyGroupBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 ProxyGroupBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 ProxyGroupBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the ProxyGroup::_sfEnabled field.

inline
bool &ProxyGroupBase::editEnabled(void)
{
    editSField(EnabledFieldMask);

    return _sfEnabled.getValue();
}

//! Get the value of the ProxyGroup::_sfEnabled field.
inline
      bool  ProxyGroupBase::getEnabled(void) const
{
    return _sfEnabled.getValue();
}

//! Set the value of the ProxyGroup::_sfEnabled field.
inline
void ProxyGroupBase::setEnabled(const bool value)
{
    editSField(EnabledFieldMask);

    _sfEnabled.setValue(value);
}
//! Get the value of the ProxyGroup::_sfUrl field.

inline
std::string &ProxyGroupBase::editUrl(void)
{
    editSField(UrlFieldMask);

    return _sfUrl.getValue();
}

//! Get the value of the ProxyGroup::_sfUrl field.
inline
const std::string &ProxyGroupBase::getUrl(void) const
{
    return _sfUrl.getValue();
}

//! Set the value of the ProxyGroup::_sfUrl field.
inline
void ProxyGroupBase::setUrl(const std::string &value)
{
    editSField(UrlFieldMask);

    _sfUrl.setValue(value);
}

//! Get the value of the ProxyGroup::_sfRoot field.
inline
Node * ProxyGroupBase::getRoot(void) const
{
    return _sfRoot.getValue();
}

//! Set the value of the ProxyGroup::_sfRoot field.
inline
void ProxyGroupBase::setRoot(Node * const value)
{
    editSField(RootFieldMask);

    _sfRoot.setValue(value);
}
//! Get the value of the ProxyGroup::_sfState field.

inline
UInt32 &ProxyGroupBase::editState(void)
{
    editSField(StateFieldMask);

    return _sfState.getValue();
}

//! Get the value of the ProxyGroup::_sfState field.
inline
      UInt32  ProxyGroupBase::getState(void) const
{
    return _sfState.getValue();
}

//! Set the value of the ProxyGroup::_sfState field.
inline
void ProxyGroupBase::setState(const UInt32 value)
{
    editSField(StateFieldMask);

    _sfState.setValue(value);
}
//! Get the value of the ProxyGroup::_sfConcurrentLoad field.

inline
bool &ProxyGroupBase::editConcurrentLoad(void)
{
    editSField(ConcurrentLoadFieldMask);

    return _sfConcurrentLoad.getValue();
}

//! Get the value of the ProxyGroup::_sfConcurrentLoad field.
inline
      bool  ProxyGroupBase::getConcurrentLoad(void) const
{
    return _sfConcurrentLoad.getValue();
}

//! Set the value of the ProxyGroup::_sfConcurrentLoad field.
inline
void ProxyGroupBase::setConcurrentLoad(const bool value)
{
    editSField(ConcurrentLoadFieldMask);

    _sfConcurrentLoad.setValue(value);
}
//! Get the value of the ProxyGroup::_sfVolume field.

inline
DynamicVolume &ProxyGroupBase::editVolume(void)
{
    editSField(VolumeFieldMask);

    return _sfVolume.getValue();
}

//! Get the value of the ProxyGroup::_sfVolume field.
inline
const DynamicVolume &ProxyGroupBase::getVolume(void) const
{
    return _sfVolume.getValue();
}

//! Set the value of the ProxyGroup::_sfVolume field.
inline
void ProxyGroupBase::setVolume(const DynamicVolume &value)
{
    editSField(VolumeFieldMask);

    _sfVolume.setValue(value);
}
//! Get the value of the ProxyGroup::_sfIndices field.

inline
UInt32 &ProxyGroupBase::editIndices(void)
{
    editSField(IndicesFieldMask);

    return _sfIndices.getValue();
}

//! Get the value of the ProxyGroup::_sfIndices field.
inline
      UInt32  ProxyGroupBase::getIndices(void) const
{
    return _sfIndices.getValue();
}

//! Set the value of the ProxyGroup::_sfIndices field.
inline
void ProxyGroupBase::setIndices(const UInt32 value)
{
    editSField(IndicesFieldMask);

    _sfIndices.setValue(value);
}
//! Get the value of the ProxyGroup::_sfTriangles field.

inline
UInt32 &ProxyGroupBase::editTriangles(void)
{
    editSField(TrianglesFieldMask);

    return _sfTriangles.getValue();
}

//! Get the value of the ProxyGroup::_sfTriangles field.
inline
      UInt32  ProxyGroupBase::getTriangles(void) const
{
    return _sfTriangles.getValue();
}

//! Set the value of the ProxyGroup::_sfTriangles field.
inline
void ProxyGroupBase::setTriangles(const UInt32 value)
{
    editSField(TrianglesFieldMask);

    _sfTriangles.setValue(value);
}
//! Get the value of the ProxyGroup::_sfPositions field.

inline
UInt32 &ProxyGroupBase::editPositions(void)
{
    editSField(PositionsFieldMask);

    return _sfPositions.getValue();
}

//! Get the value of the ProxyGroup::_sfPositions field.
inline
      UInt32  ProxyGroupBase::getPositions(void) const
{
    return _sfPositions.getValue();
}

//! Set the value of the ProxyGroup::_sfPositions field.
inline
void ProxyGroupBase::setPositions(const UInt32 value)
{
    editSField(PositionsFieldMask);

    _sfPositions.setValue(value);
}
//! Get the value of the ProxyGroup::_sfGeometries field.

inline
UInt32 &ProxyGroupBase::editGeometries(void)
{
    editSField(GeometriesFieldMask);

    return _sfGeometries.getValue();
}

//! Get the value of the ProxyGroup::_sfGeometries field.
inline
      UInt32  ProxyGroupBase::getGeometries(void) const
{
    return _sfGeometries.getValue();
}

//! Set the value of the ProxyGroup::_sfGeometries field.
inline
void ProxyGroupBase::setGeometries(const UInt32 value)
{
    editSField(GeometriesFieldMask);

    _sfGeometries.setValue(value);
}
//! Get the value of the ProxyGroup::_sfAbsoluteUrl field.

inline
std::string &ProxyGroupBase::editAbsoluteUrl(void)
{
    editSField(AbsoluteUrlFieldMask);

    return _sfAbsoluteUrl.getValue();
}

//! Get the value of the ProxyGroup::_sfAbsoluteUrl field.
inline
const std::string &ProxyGroupBase::getAbsoluteUrl(void) const
{
    return _sfAbsoluteUrl.getValue();
}

//! Set the value of the ProxyGroup::_sfAbsoluteUrl field.
inline
void ProxyGroupBase::setAbsoluteUrl(const std::string &value)
{
    editSField(AbsoluteUrlFieldMask);

    _sfAbsoluteUrl.setValue(value);
}

//! Get the value of the \a index element the ProxyGroup::_mfInline field.
inline
      UInt8  ProxyGroupBase::getInline(const UInt32 index) const
{
    return _mfInline[index];
}

inline
UInt8 &ProxyGroupBase::editInline(const UInt32 index)
{
    editMField(InlineFieldMask, _mfInline);

    return _mfInline[index];
}



#ifdef OSG_MT_CPTR_ASPECT
inline
void ProxyGroupBase::execSync (      ProxyGroupBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (EnabledFieldMask & whichField))
        _sfEnabled.syncWith(pFrom->_sfEnabled);

    if(FieldBits::NoField != (UrlFieldMask & whichField))
        _sfUrl.syncWith(pFrom->_sfUrl);

    if(FieldBits::NoField != (RootFieldMask & whichField))
        _sfRoot.syncWith(pFrom->_sfRoot);

    if(FieldBits::NoField != (StateFieldMask & whichField))
        _sfState.syncWith(pFrom->_sfState);

    if(FieldBits::NoField != (ConcurrentLoadFieldMask & whichField))
        _sfConcurrentLoad.syncWith(pFrom->_sfConcurrentLoad);

    if(FieldBits::NoField != (VolumeFieldMask & whichField))
        _sfVolume.syncWith(pFrom->_sfVolume);

    if(FieldBits::NoField != (IndicesFieldMask & whichField))
        _sfIndices.syncWith(pFrom->_sfIndices);

    if(FieldBits::NoField != (TrianglesFieldMask & whichField))
        _sfTriangles.syncWith(pFrom->_sfTriangles);

    if(FieldBits::NoField != (PositionsFieldMask & whichField))
        _sfPositions.syncWith(pFrom->_sfPositions);

    if(FieldBits::NoField != (GeometriesFieldMask & whichField))
        _sfGeometries.syncWith(pFrom->_sfGeometries);

    if(FieldBits::NoField != (AbsoluteUrlFieldMask & whichField))
        _sfAbsoluteUrl.syncWith(pFrom->_sfAbsoluteUrl);

    if(FieldBits::NoField != (InlineFieldMask & whichField))
        _mfInline.syncWith(pFrom->_mfInline,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);
}
#endif


inline
Char8 *ProxyGroupBase::getClassname(void)
{
    return "ProxyGroup";
}
OSG_GEN_CONTAINERPTR(ProxyGroup);

OSG_END_NAMESPACE

