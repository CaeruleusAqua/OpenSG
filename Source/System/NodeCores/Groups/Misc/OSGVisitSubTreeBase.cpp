/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class VisitSubTree!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEVISITSUBTREEINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>



#include <OSGNode.h> // SubTreeRoot Class

#include "OSGVisitSubTreeBase.h"
#include "OSGVisitSubTree.h"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::VisitSubTree
    VisitSubTree provides a way to point the renderer to another section of the
    scene graph for rendering. This is useful for multi-pass algorithms using
    OSG::Stage because it provides a way to render the same graph multiple times
    without duplicating the nodes.
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var NodePtr         VisitSubTreeBase::_sfSubTreeRoot
    Reference to the sub-graph to draw in place of this node.
    Whatever node is pointed to will be drawn here as if it was duplicated
    at this location.
*/


void VisitSubTreeBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFNodePtr::Description(
        SFNodePtr::getClassType(),
        "subTreeRoot",
        "Reference to the sub-graph to draw in place of this node.\n"
        "Whatever node is pointed to will be drawn here as if it was duplicated\n"
        "at this location.\n",
        SubTreeRootFieldId, SubTreeRootFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&VisitSubTreeBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&VisitSubTreeBase::getSFSubTreeRoot));

    oType.addInitialDesc(pDesc);
}


VisitSubTreeBase::TypeObject VisitSubTreeBase::_type(true,
    VisitSubTreeBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &VisitSubTreeBase::createEmpty,
    VisitSubTree::initMethod,
    (InitalInsertDescFunc) &VisitSubTreeBase::classDescInserter,
    false,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "        name=\"VisitSubTree\"\n"
    "        parent=\"Group\"\n"
    "        library=\"Group\"\n"
    "        pointerfieldtypes=\"none\"\n"
    "        structure=\"concrete\"\n"
    "        systemcomponent=\"true\"\n"
    "        parentsystemcomponent=\"true\"\n"
    "        decoratable=\"false\"\n"
    "        useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"true\"\n"
    ">\n"
    "VisitSubTree provides a way to point the renderer to another section of the\n"
    "scene graph for rendering. This is useful for multi-pass algorithms using\n"
    "OSG::Stage because it provides a way to render the same graph multiple times\n"
    "without duplicating the nodes.\n"
    "        <Field\n"
    "                name=\"subTreeRoot\"\n"
    "                type=\"NodePtr\"\n"
    "                cardinality=\"single\"\n"
    "                visibility=\"external\"\n"
    "                defaultValue=\"NullFC\"\n"
    "                access=\"public\"\n"
    "        >\n"
    "        Reference to the sub-graph to draw in place of this node.\n"
    "        Whatever node is pointed to will be drawn here as if it was duplicated\n"
    "        at this location.\n"
    "        </Field>\n"
    "</FieldContainer>\n",
    "VisitSubTree provides a way to point the renderer to another section of the\n"
    "scene graph for rendering. This is useful for multi-pass algorithms using\n"
    "OSG::Stage because it provides a way to render the same graph multiple times\n"
    "without duplicating the nodes.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &VisitSubTreeBase::getType(void)
{
    return _type;
}

const FieldContainerType &VisitSubTreeBase::getType(void) const
{
    return _type;
}

UInt32 VisitSubTreeBase::getContainerSize(void) const
{
    return sizeof(VisitSubTree);
}

/*------------------------- decorator get ------------------------------*/


//! Get the VisitSubTree::_sfSubTreeRoot field.
const SFNodePtr *VisitSubTreeBase::getSFSubTreeRoot(void) const
{
    return &_sfSubTreeRoot;
}


void VisitSubTreeBase::pushToField(      FieldContainerPtrConstArg pNewElement,
                                    const UInt32                    uiFieldId  )
{
    Inherited::pushToField(pNewElement, uiFieldId);

    if(uiFieldId == SubTreeRootFieldId)
    {
        static_cast<VisitSubTree *>(this)->setSubTreeRoot(
            cast_dynamic<NodePtr>(pNewElement));
    }
}

void VisitSubTreeBase::insertIntoMField(const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::insertIntoMField(uiIndex, pNewElement, uiFieldId);

}

void VisitSubTreeBase::replaceInMField (const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::replaceInMField(uiIndex, pNewElement, uiFieldId);

}

void VisitSubTreeBase::replaceInMField (      FieldContainerPtrConstArg pOldElement,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::replaceInMField(pOldElement, pNewElement, uiFieldId);

}

void VisitSubTreeBase::removeFromMField(const UInt32 uiIndex,
                                         const UInt32 uiFieldId)
{
    Inherited::removeFromMField(uiIndex, uiFieldId);

}

void VisitSubTreeBase::removeFromMField(      FieldContainerPtrConstArg pElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::removeFromMField(pElement, uiFieldId);

}

void VisitSubTreeBase::clearField(const UInt32 uiFieldId)
{
    Inherited::clearField(uiFieldId);

    if(uiFieldId == SubTreeRootFieldId)
    {
        static_cast<VisitSubTree *>(this)->setSubTreeRoot(NullFC);
    }
}



/*------------------------------ access -----------------------------------*/

UInt32 VisitSubTreeBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (SubTreeRootFieldMask & whichField))
    {
        returnValue += _sfSubTreeRoot.getBinSize();
    }

    return returnValue;
}

void VisitSubTreeBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (SubTreeRootFieldMask & whichField))
    {
        _sfSubTreeRoot.copyToBin(pMem);
    }
}

void VisitSubTreeBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (SubTreeRootFieldMask & whichField))
    {
        _sfSubTreeRoot.copyFromBin(pMem);
    }
}

//! create an empty new instance of the class, do not copy the prototype
VisitSubTreePtr VisitSubTreeBase::createEmpty(void)
{
    VisitSubTreePtr returnValue;

    newPtr<VisitSubTree>(returnValue);

    return returnValue;
}

FieldContainerPtr VisitSubTreeBase::shallowCopy(void) const
{
    VisitSubTreePtr returnValue;

    newPtr(returnValue, dynamic_cast<const VisitSubTree *>(this));

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

VisitSubTreeBase::VisitSubTreeBase(void) :
    Inherited(),
    _sfSubTreeRoot            (NodePtr(NullFC))
{
}

VisitSubTreeBase::VisitSubTreeBase(const VisitSubTreeBase &source) :
    Inherited(source),
    _sfSubTreeRoot            ()
{
}

/*-------------------------- destructors ----------------------------------*/

VisitSubTreeBase::~VisitSubTreeBase(void)
{
}

void VisitSubTreeBase::onCreate(const VisitSubTree *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {

        this->setSubTreeRoot(source->getSubTreeRoot());
    }
}

#ifdef OSG_MT_FIELDCONTAINERPTR
void VisitSubTreeBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo,
                                        UInt32             uiCopyOffset)
{
    this->execSync(static_cast<VisitSubTreeBase *>(&oFrom),
                   whichField,
                   syncMode,
                   uiSyncInfo,
                   uiCopyOffset);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
void VisitSubTreeBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<VisitSubTreeBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif

#if 0
void VisitSubTreeBase::execBeginEditV(ConstFieldMaskArg whichField,
                                       UInt32            uiAspect,
                                       UInt32            uiContainerSize)
{
    this->execBeginEdit(whichField, uiAspect, uiContainerSize);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr VisitSubTreeBase::createAspectCopy(void) const
{
    VisitSubTreePtr returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const VisitSubTree *>(this));

    return returnValue;
}
#endif

void VisitSubTreeBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<VisitSubTree *>(this)->setSubTreeRoot(NullFC);
}


#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<VisitSubTreePtr>::_type("VisitSubTreePtr", "GroupPtr");
#endif


OSG_END_NAMESPACE
