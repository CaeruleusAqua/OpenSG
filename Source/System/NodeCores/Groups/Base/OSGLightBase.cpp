/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Light!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILELIGHTINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>



#include <OSGNode.h> // Beacon Class
#include <OSGLightEngine.h> // LightEngine Class

#include "OSGLightBase.h"
#include "OSGLight.h"

OSG_USING_NAMESPACE

// Field descriptions

/*! \var Color4r LightBase::_sfAmbient
    	The light's ambient component.

*/
/*! \var Color4r LightBase::_sfDiffuse
    	The light's diffuse color.

*/
/*! \var Color4r LightBase::_sfSpecular
    	The light's specular color.

*/
/*! \var NodePtr LightBase::_sfBeacon
    
*/
/*! \var bool LightBase::_sfOn
    
*/
/*! \var Real LightBase::_sfConstantAttenuation
    	The light's constant attenuation.

*/
/*! \var Real LightBase::_sfLinearAttenuation
    	The light's linear attenuation.

*/
/*! \var Real LightBase::_sfQuadraticAttenuation
    	The light's quadratic attenuation.

*/
/*! \var LightEnginePtr LightBase::_sfLightEngine
    
*/

void LightBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL; 


#ifdef OSG_1_COMPAT
    typedef const SFColor4r *(LightBase::*GetSFAmbientF)(void) const;

    GetSFAmbientF GetSFAmbient = &LightBase::getSFAmbient;
#endif

    pDesc = new SFColor4r::Description(
        SFColor4r::getClassType(), 
        "ambient", 
        AmbientFieldId, AmbientFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&LightBase::editSFAmbient),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFAmbient));
#else
        reinterpret_cast<FieldGetMethodSig >(&LightBase::getSFAmbient));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFColor4r *(LightBase::*GetSFDiffuseF)(void) const;

    GetSFDiffuseF GetSFDiffuse = &LightBase::getSFDiffuse;
#endif

    pDesc = new SFColor4r::Description(
        SFColor4r::getClassType(), 
        "diffuse", 
        DiffuseFieldId, DiffuseFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&LightBase::editSFDiffuse),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFDiffuse));
#else
        reinterpret_cast<FieldGetMethodSig >(&LightBase::getSFDiffuse));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFColor4r *(LightBase::*GetSFSpecularF)(void) const;

    GetSFSpecularF GetSFSpecular = &LightBase::getSFSpecular;
#endif

    pDesc = new SFColor4r::Description(
        SFColor4r::getClassType(), 
        "specular", 
        SpecularFieldId, SpecularFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&LightBase::editSFSpecular),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFSpecular));
#else
        reinterpret_cast<FieldGetMethodSig >(&LightBase::getSFSpecular));
#endif

    oType.addInitialDesc(pDesc);

    pDesc = new SFNodePtr::Description(
        SFNodePtr::getClassType(), 
        "beacon", 
        BeaconFieldId, BeaconFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&LightBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&LightBase::getSFBeacon));

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFBool *(LightBase::*GetSFOnF)(void) const;

    GetSFOnF GetSFOn = &LightBase::getSFOn;
#endif

    pDesc = new SFBool::Description(
        SFBool::getClassType(), 
        "on", 
        OnFieldId, OnFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&LightBase::editSFOn),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFOn));
#else
        reinterpret_cast<FieldGetMethodSig >(&LightBase::getSFOn));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFReal *(LightBase::*GetSFConstantAttenuationF)(void) const;

    GetSFConstantAttenuationF GetSFConstantAttenuation = &LightBase::getSFConstantAttenuation;
#endif

    pDesc = new SFReal::Description(
        SFReal::getClassType(), 
        "constantAttenuation", 
        ConstantAttenuationFieldId, ConstantAttenuationFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&LightBase::editSFConstantAttenuation),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFConstantAttenuation));
#else
        reinterpret_cast<FieldGetMethodSig >(&LightBase::getSFConstantAttenuation));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFReal *(LightBase::*GetSFLinearAttenuationF)(void) const;

    GetSFLinearAttenuationF GetSFLinearAttenuation = &LightBase::getSFLinearAttenuation;
#endif

    pDesc = new SFReal::Description(
        SFReal::getClassType(), 
        "linearAttenuation", 
        LinearAttenuationFieldId, LinearAttenuationFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&LightBase::editSFLinearAttenuation),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFLinearAttenuation));
#else
        reinterpret_cast<FieldGetMethodSig >(&LightBase::getSFLinearAttenuation));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFReal *(LightBase::*GetSFQuadraticAttenuationF)(void) const;

    GetSFQuadraticAttenuationF GetSFQuadraticAttenuation = &LightBase::getSFQuadraticAttenuation;
#endif

    pDesc = new SFReal::Description(
        SFReal::getClassType(), 
        "quadraticAttenuation", 
        QuadraticAttenuationFieldId, QuadraticAttenuationFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&LightBase::editSFQuadraticAttenuation),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFQuadraticAttenuation));
#else
        reinterpret_cast<FieldGetMethodSig >(&LightBase::getSFQuadraticAttenuation));
#endif

    oType.addInitialDesc(pDesc);

    pDesc = new SFLightEnginePtr::Description(
        SFLightEnginePtr::getClassType(), 
        "lightEngine", 
        LightEngineFieldId, LightEngineFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&LightBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&LightBase::getSFLightEngine));

    oType.addInitialDesc(pDesc);
}


LightBase::TypeObject LightBase::_type(true,
    LightBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL, 
    Light::initMethod,
    (InitalInsertDescFunc) &LightBase::classDescInserter,
    false);

/*------------------------------ get -----------------------------------*/

FieldContainerType &LightBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &LightBase::getType(void) const 
{
    return _type;
} 

UInt32 LightBase::getContainerSize(void) const 
{ 
    return sizeof(Light); 
}

/*------------------------- decorator get ------------------------------*/


SFColor4r *LightBase::editSFAmbient(void)
{
    editSField(AmbientFieldMask);

    return &_sfAmbient;
}

const SFColor4r *LightBase::getSFAmbient(void) const
{
    return &_sfAmbient;
}

SFColor4r *LightBase::editSFDiffuse(void)
{
    editSField(DiffuseFieldMask);

    return &_sfDiffuse;
}

const SFColor4r *LightBase::getSFDiffuse(void) const
{
    return &_sfDiffuse;
}

SFColor4r *LightBase::editSFSpecular(void)
{
    editSField(SpecularFieldMask);

    return &_sfSpecular;
}

const SFColor4r *LightBase::getSFSpecular(void) const
{
    return &_sfSpecular;
}

//! Get the Light::_sfBeacon field.
const SFNodePtr *LightBase::getSFBeacon(void) const
{
    return &_sfBeacon;
}

SFBool *LightBase::editSFOn(void)
{
    editSField(OnFieldMask);

    return &_sfOn;
}

const SFBool *LightBase::getSFOn(void) const
{
    return &_sfOn;
}

SFReal *LightBase::editSFConstantAttenuation(void)
{
    editSField(ConstantAttenuationFieldMask);

    return &_sfConstantAttenuation;
}

const SFReal *LightBase::getSFConstantAttenuation(void) const
{
    return &_sfConstantAttenuation;
}

SFReal *LightBase::editSFLinearAttenuation(void)
{
    editSField(LinearAttenuationFieldMask);

    return &_sfLinearAttenuation;
}

const SFReal *LightBase::getSFLinearAttenuation(void) const
{
    return &_sfLinearAttenuation;
}

SFReal *LightBase::editSFQuadraticAttenuation(void)
{
    editSField(QuadraticAttenuationFieldMask);

    return &_sfQuadraticAttenuation;
}

const SFReal *LightBase::getSFQuadraticAttenuation(void) const
{
    return &_sfQuadraticAttenuation;
}

//! Get the Light::_sfLightEngine field.
const SFLightEnginePtr *LightBase::getSFLightEngine(void) const
{
    return &_sfLightEngine;
}


void LightBase::pushToField(      FieldContainerPtrConstArg pNewElement,
                                    const UInt32                    uiFieldId  )
{
    Inherited::pushToField(pNewElement, uiFieldId);

    if(uiFieldId == BeaconFieldId)
    {
        static_cast<Light *>(this)->setBeacon(
            cast_dynamic<NodePtr>(pNewElement));
    }
    if(uiFieldId == LightEngineFieldId)
    {
        static_cast<Light *>(this)->setLightEngine(
            cast_dynamic<LightEnginePtr>(pNewElement));
    }
}

void LightBase::insertIntoMField(const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::insertIntoMField(uiIndex, pNewElement, uiFieldId);

}

void LightBase::replaceInMField (const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::replaceInMField(uiIndex, pNewElement, uiFieldId);

}

void LightBase::replaceInMField (      FieldContainerPtrConstArg pOldElement,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::replaceInMField(pOldElement, pNewElement, uiFieldId);

}

void LightBase::removeFromMField(const UInt32 uiIndex,
                                         const UInt32 uiFieldId)
{
    Inherited::removeFromMField(uiIndex, uiFieldId);

}

void LightBase::removeFromMField(      FieldContainerPtrConstArg pElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::removeFromMField(pElement, uiFieldId);

}

void LightBase::clearField(const UInt32 uiFieldId)
{
    Inherited::clearField(uiFieldId);

    if(uiFieldId == BeaconFieldId)
    {
        static_cast<Light *>(this)->setBeacon(NullFC);
    }
    if(uiFieldId == LightEngineFieldId)
    {
        static_cast<Light *>(this)->setLightEngine(NullFC);
    }
}



/*------------------------------ access -----------------------------------*/

UInt32 LightBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (AmbientFieldMask & whichField))
    {
        returnValue += _sfAmbient.getBinSize();
    }
    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
    {
        returnValue += _sfDiffuse.getBinSize();
    }
    if(FieldBits::NoField != (SpecularFieldMask & whichField))
    {
        returnValue += _sfSpecular.getBinSize();
    }
    if(FieldBits::NoField != (BeaconFieldMask & whichField))
    {
        returnValue += _sfBeacon.getBinSize();
    }
    if(FieldBits::NoField != (OnFieldMask & whichField))
    {
        returnValue += _sfOn.getBinSize();
    }
    if(FieldBits::NoField != (ConstantAttenuationFieldMask & whichField))
    {
        returnValue += _sfConstantAttenuation.getBinSize();
    }
    if(FieldBits::NoField != (LinearAttenuationFieldMask & whichField))
    {
        returnValue += _sfLinearAttenuation.getBinSize();
    }
    if(FieldBits::NoField != (QuadraticAttenuationFieldMask & whichField))
    {
        returnValue += _sfQuadraticAttenuation.getBinSize();
    }
    if(FieldBits::NoField != (LightEngineFieldMask & whichField))
    {
        returnValue += _sfLightEngine.getBinSize();
    }

    return returnValue;
}

void LightBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (AmbientFieldMask & whichField))
    {
        _sfAmbient.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
    {
        _sfDiffuse.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SpecularFieldMask & whichField))
    {
        _sfSpecular.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BeaconFieldMask & whichField))
    {
        _sfBeacon.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OnFieldMask & whichField))
    {
        _sfOn.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ConstantAttenuationFieldMask & whichField))
    {
        _sfConstantAttenuation.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LinearAttenuationFieldMask & whichField))
    {
        _sfLinearAttenuation.copyToBin(pMem);
    }
    if(FieldBits::NoField != (QuadraticAttenuationFieldMask & whichField))
    {
        _sfQuadraticAttenuation.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LightEngineFieldMask & whichField))
    {
        _sfLightEngine.copyToBin(pMem);
    }
}

void LightBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (AmbientFieldMask & whichField))
    {
        _sfAmbient.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DiffuseFieldMask & whichField))
    {
        _sfDiffuse.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SpecularFieldMask & whichField))
    {
        _sfSpecular.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BeaconFieldMask & whichField))
    {
        _sfBeacon.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OnFieldMask & whichField))
    {
        _sfOn.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ConstantAttenuationFieldMask & whichField))
    {
        _sfConstantAttenuation.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LinearAttenuationFieldMask & whichField))
    {
        _sfLinearAttenuation.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (QuadraticAttenuationFieldMask & whichField))
    {
        _sfQuadraticAttenuation.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LightEngineFieldMask & whichField))
    {
        _sfLightEngine.copyFromBin(pMem);
    }
}



/*------------------------- constructors ----------------------------------*/

LightBase::LightBase(void) :
    Inherited(),
    _sfAmbient(Color4r(0.f,0.f,0.f,1.f)),
    _sfDiffuse(Color4r(1.f,1.f,1.f,1.f)),
    _sfSpecular(Color4r(1.f,1.f,1.f,1.f)),
    _sfBeacon(),
    _sfOn(bool(true)),
    _sfConstantAttenuation(Real(1.f)),
    _sfLinearAttenuation(Real(0.f)),
    _sfQuadraticAttenuation(Real(0.f)),
    _sfLightEngine()
{
}

LightBase::LightBase(const LightBase &source) :
    Inherited(source),
    _sfAmbient(source._sfAmbient),
    _sfDiffuse(source._sfDiffuse),
    _sfSpecular(source._sfSpecular),
    _sfBeacon(),
    _sfOn(source._sfOn),
    _sfConstantAttenuation(source._sfConstantAttenuation),
    _sfLinearAttenuation(source._sfLinearAttenuation),
    _sfQuadraticAttenuation(source._sfQuadraticAttenuation),
    _sfLightEngine()
{
}

/*-------------------------- destructors ----------------------------------*/

LightBase::~LightBase(void)
{
}

void LightBase::onCreate(const Light *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {

        this->setBeacon(source->getBeacon());

        this->setLightEngine(source->getLightEngine());
    }
}

#ifdef OSG_MT_FIELDCONTAINERPTR
void LightBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo,
                                        UInt32             uiCopyOffset)
{
    this->execSync(static_cast<LightBase *>(&oFrom),
                   whichField, 
                   syncMode, 
                   uiSyncInfo,
                   uiCopyOffset);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
void LightBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<LightBase *>(&oFrom), 
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif

#if 0
void LightBase::execBeginEditV(ConstFieldMaskArg whichField,
                                       UInt32            uiAspect,
                                       UInt32            uiContainerSize)
{
    this->execBeginEdit(whichField, uiAspect, uiContainerSize);
}
#endif


void LightBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<Light *>(this)->setBeacon(NullFC);

    static_cast<Light *>(this)->setLightEngine(NullFC);
}


OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<LightPtr>::_type("LightPtr", "NodeCorePtr");
#endif


OSG_END_NAMESPACE


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: $";
    static Char8 cvsid_hpp       [] = OSGLIGHTBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGLIGHTBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGLIGHTFIELDS_HEADER_CVSID;
}
