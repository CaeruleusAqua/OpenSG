/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class GeoMultiProperty!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEGEOMULTIPROPERTYINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>



#include <OSGGeoMultiPropertyData.h> // Container Class

#include "OSGGeoMultiPropertyBase.h"
#include "OSGGeoMultiProperty.h"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::GeoMultiProperty
    Class referencing data from a GeoMultiPropertyData.
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var GeoMultiPropertyDataPtr GeoMultiPropertyBase::_sfContainer
    The data container to source off of.
*/

/*! \var UInt32          GeoMultiPropertyBase::_sfOffset
    The offset from the start of the container to the first element of this property.
*/

/*! \var GLenum          GeoMultiPropertyBase::_sfIFormat
    The OpenGL format for the data.
*/

/*! \var UInt32          GeoMultiPropertyBase::_sfIDimension
    The dimensionality of the data.
*/

/*! \var UInt32          GeoMultiPropertyBase::_sfISize
    The number of elements in the data.
*/

/*! \var bool            GeoMultiPropertyBase::_sfINormalize
    Whether to normalize integer arguments to 0..1.
*/

/*! \var UInt32          GeoMultiPropertyBase::_sfIStride
    The stride between elements (can be 0).
*/


void GeoMultiPropertyBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFGeoMultiPropertyDataPtr::Description(
        SFGeoMultiPropertyDataPtr::getClassType(),
        "container",
        "The data container to source off of.\n",
        ContainerFieldId, ContainerFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&GeoMultiPropertyBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&GeoMultiPropertyBase::getSFContainer));

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFUInt32 *(GeoMultiPropertyBase::*GetSFOffsetF)(void) const;

    GetSFOffsetF GetSFOffset = &GeoMultiPropertyBase::getSFOffset;
#endif

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "offset",
        "The offset from the start of the container to the first element of this property.\n",
        OffsetFieldId, OffsetFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&GeoMultiPropertyBase::editSFOffset),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFOffset));
#else
        reinterpret_cast<FieldGetMethodSig >(&GeoMultiPropertyBase::getSFOffset));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFGLenum *(GeoMultiPropertyBase::*GetSFIFormatF)(void) const;

    GetSFIFormatF GetSFIFormat = &GeoMultiPropertyBase::getSFIFormat;
#endif

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "iFormat",
        "The OpenGL format for the data.\n",
        IFormatFieldId, IFormatFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&GeoMultiPropertyBase::editSFIFormat),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFIFormat));
#else
        reinterpret_cast<FieldGetMethodSig >(&GeoMultiPropertyBase::getSFIFormat));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFUInt32 *(GeoMultiPropertyBase::*GetSFIDimensionF)(void) const;

    GetSFIDimensionF GetSFIDimension = &GeoMultiPropertyBase::getSFIDimension;
#endif

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "iDimension",
        "The dimensionality of the data.\n",
        IDimensionFieldId, IDimensionFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&GeoMultiPropertyBase::editSFIDimension),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFIDimension));
#else
        reinterpret_cast<FieldGetMethodSig >(&GeoMultiPropertyBase::getSFIDimension));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFUInt32 *(GeoMultiPropertyBase::*GetSFISizeF)(void) const;

    GetSFISizeF GetSFISize = &GeoMultiPropertyBase::getSFISize;
#endif

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "iSize",
        "The number of elements in the data.\n",
        ISizeFieldId, ISizeFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&GeoMultiPropertyBase::editSFISize),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFISize));
#else
        reinterpret_cast<FieldGetMethodSig >(&GeoMultiPropertyBase::getSFISize));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFBool *(GeoMultiPropertyBase::*GetSFINormalizeF)(void) const;

    GetSFINormalizeF GetSFINormalize = &GeoMultiPropertyBase::getSFINormalize;
#endif

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "iNormalize",
        "Whether to normalize integer arguments to 0..1.\n",
        INormalizeFieldId, INormalizeFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&GeoMultiPropertyBase::editSFINormalize),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFINormalize));
#else
        reinterpret_cast<FieldGetMethodSig >(&GeoMultiPropertyBase::getSFINormalize));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFUInt32 *(GeoMultiPropertyBase::*GetSFIStrideF)(void) const;

    GetSFIStrideF GetSFIStride = &GeoMultiPropertyBase::getSFIStride;
#endif

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "iStride",
        "The stride between elements (can be 0).\n",
        IStrideFieldId, IStrideFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&GeoMultiPropertyBase::editSFIStride),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFIStride));
#else
        reinterpret_cast<FieldGetMethodSig >(&GeoMultiPropertyBase::getSFIStride));
#endif

    oType.addInitialDesc(pDesc);
}


GeoMultiPropertyBase::TypeObject GeoMultiPropertyBase::_type(true,
    GeoMultiPropertyBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &GeoMultiPropertyBase::createEmpty,
    GeoMultiProperty::initMethod,
    (InitalInsertDescFunc) &GeoMultiPropertyBase::classDescInserter,
    false,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"GeoMultiProperty\"\n"
    "\tparent=\"GeoVectorProperty\"\n"
    "\tlibrary=\"Drawable\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    ">\n"
    "Class referencing data from a GeoMultiPropertyData.\n"
    "\t<Field\n"
    "\t\tname=\"container\"\n"
    "\t\ttype=\"GeoMultiPropertyDataPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe data container to source off of.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"offset\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe offset from the start of the container to the first element of this property.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"iFormat\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe OpenGL format for the data.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"iDimension\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe dimensionality of the data.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"iSize\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe number of elements in the data.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"iNormalize\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tWhether to normalize integer arguments to 0..1.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"iStride\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe stride between elements (can be 0).\n"
    "\t</Field>\n"
    "        \n"
    "\n"
    "Class referencing data from a GeoMultiPropertyData container.\n"
    "</FieldContainer>\n",
    "Class referencing data from a GeoMultiPropertyData.\n"
    "\n"
    "\n"
    "\n"
    "\n"
    "\n"
    "\n"
    "\n"
    "\n"
    "\n"
    "Class referencing data from a GeoMultiPropertyData container.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &GeoMultiPropertyBase::getType(void)
{
    return _type;
}

const FieldContainerType &GeoMultiPropertyBase::getType(void) const
{
    return _type;
}

UInt32 GeoMultiPropertyBase::getContainerSize(void) const
{
    return sizeof(GeoMultiProperty);
}

/*------------------------- decorator get ------------------------------*/


//! Get the GeoMultiProperty::_sfContainer field.
const SFGeoMultiPropertyDataPtr *GeoMultiPropertyBase::getSFContainer(void) const
{
    return &_sfContainer;
}

SFUInt32 *GeoMultiPropertyBase::editSFOffset(void)
{
    editSField(OffsetFieldMask);

    return &_sfOffset;
}

const SFUInt32 *GeoMultiPropertyBase::getSFOffset(void) const
{
    return &_sfOffset;
}

#ifdef OSG_1_COMPAT
SFUInt32            *GeoMultiPropertyBase::getSFOffset         (void)
{
    return this->editSFOffset         ();
}
#endif

SFGLenum *GeoMultiPropertyBase::editSFIFormat(void)
{
    editSField(IFormatFieldMask);

    return &_sfIFormat;
}

const SFGLenum *GeoMultiPropertyBase::getSFIFormat(void) const
{
    return &_sfIFormat;
}

#ifdef OSG_1_COMPAT
SFGLenum            *GeoMultiPropertyBase::getSFIFormat        (void)
{
    return this->editSFIFormat        ();
}
#endif

SFUInt32 *GeoMultiPropertyBase::editSFIDimension(void)
{
    editSField(IDimensionFieldMask);

    return &_sfIDimension;
}

const SFUInt32 *GeoMultiPropertyBase::getSFIDimension(void) const
{
    return &_sfIDimension;
}

#ifdef OSG_1_COMPAT
SFUInt32            *GeoMultiPropertyBase::getSFIDimension     (void)
{
    return this->editSFIDimension     ();
}
#endif

SFUInt32 *GeoMultiPropertyBase::editSFISize(void)
{
    editSField(ISizeFieldMask);

    return &_sfISize;
}

const SFUInt32 *GeoMultiPropertyBase::getSFISize(void) const
{
    return &_sfISize;
}

#ifdef OSG_1_COMPAT
SFUInt32            *GeoMultiPropertyBase::getSFISize          (void)
{
    return this->editSFISize          ();
}
#endif

SFBool *GeoMultiPropertyBase::editSFINormalize(void)
{
    editSField(INormalizeFieldMask);

    return &_sfINormalize;
}

const SFBool *GeoMultiPropertyBase::getSFINormalize(void) const
{
    return &_sfINormalize;
}

#ifdef OSG_1_COMPAT
SFBool              *GeoMultiPropertyBase::getSFINormalize     (void)
{
    return this->editSFINormalize     ();
}
#endif

SFUInt32 *GeoMultiPropertyBase::editSFIStride(void)
{
    editSField(IStrideFieldMask);

    return &_sfIStride;
}

const SFUInt32 *GeoMultiPropertyBase::getSFIStride(void) const
{
    return &_sfIStride;
}

#ifdef OSG_1_COMPAT
SFUInt32            *GeoMultiPropertyBase::getSFIStride        (void)
{
    return this->editSFIStride        ();
}
#endif


void GeoMultiPropertyBase::pushToField(      FieldContainerPtrConstArg pNewElement,
                                    const UInt32                    uiFieldId  )
{
    Inherited::pushToField(pNewElement, uiFieldId);

    if(uiFieldId == ContainerFieldId)
    {
        static_cast<GeoMultiProperty *>(this)->setContainer(
            cast_dynamic<GeoMultiPropertyDataPtr>(pNewElement));
    }
}

void GeoMultiPropertyBase::insertIntoMField(const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::insertIntoMField(uiIndex, pNewElement, uiFieldId);

}

void GeoMultiPropertyBase::replaceInMField (const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::replaceInMField(uiIndex, pNewElement, uiFieldId);

}

void GeoMultiPropertyBase::replaceInMField (      FieldContainerPtrConstArg pOldElement,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::replaceInMField(pOldElement, pNewElement, uiFieldId);

}

void GeoMultiPropertyBase::removeFromMField(const UInt32 uiIndex,
                                         const UInt32 uiFieldId)
{
    Inherited::removeFromMField(uiIndex, uiFieldId);

}

void GeoMultiPropertyBase::removeFromMField(      FieldContainerPtrConstArg pElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::removeFromMField(pElement, uiFieldId);

}

void GeoMultiPropertyBase::clearField(const UInt32 uiFieldId)
{
    Inherited::clearField(uiFieldId);

    if(uiFieldId == ContainerFieldId)
    {
        static_cast<GeoMultiProperty *>(this)->setContainer(NullFC);
    }
}



/*------------------------------ access -----------------------------------*/

UInt32 GeoMultiPropertyBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ContainerFieldMask & whichField))
    {
        returnValue += _sfContainer.getBinSize();
    }
    if(FieldBits::NoField != (OffsetFieldMask & whichField))
    {
        returnValue += _sfOffset.getBinSize();
    }
    if(FieldBits::NoField != (IFormatFieldMask & whichField))
    {
        returnValue += _sfIFormat.getBinSize();
    }
    if(FieldBits::NoField != (IDimensionFieldMask & whichField))
    {
        returnValue += _sfIDimension.getBinSize();
    }
    if(FieldBits::NoField != (ISizeFieldMask & whichField))
    {
        returnValue += _sfISize.getBinSize();
    }
    if(FieldBits::NoField != (INormalizeFieldMask & whichField))
    {
        returnValue += _sfINormalize.getBinSize();
    }
    if(FieldBits::NoField != (IStrideFieldMask & whichField))
    {
        returnValue += _sfIStride.getBinSize();
    }

    return returnValue;
}

void GeoMultiPropertyBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ContainerFieldMask & whichField))
    {
        _sfContainer.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OffsetFieldMask & whichField))
    {
        _sfOffset.copyToBin(pMem);
    }
    if(FieldBits::NoField != (IFormatFieldMask & whichField))
    {
        _sfIFormat.copyToBin(pMem);
    }
    if(FieldBits::NoField != (IDimensionFieldMask & whichField))
    {
        _sfIDimension.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ISizeFieldMask & whichField))
    {
        _sfISize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (INormalizeFieldMask & whichField))
    {
        _sfINormalize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (IStrideFieldMask & whichField))
    {
        _sfIStride.copyToBin(pMem);
    }
}

void GeoMultiPropertyBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ContainerFieldMask & whichField))
    {
        _sfContainer.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OffsetFieldMask & whichField))
    {
        _sfOffset.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (IFormatFieldMask & whichField))
    {
        _sfIFormat.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (IDimensionFieldMask & whichField))
    {
        _sfIDimension.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ISizeFieldMask & whichField))
    {
        _sfISize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (INormalizeFieldMask & whichField))
    {
        _sfINormalize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (IStrideFieldMask & whichField))
    {
        _sfIStride.copyFromBin(pMem);
    }
}

//! create an empty new instance of the class, do not copy the prototype
GeoMultiPropertyPtr GeoMultiPropertyBase::createEmpty(void)
{
    GeoMultiPropertyPtr returnValue;

    newPtr<GeoMultiProperty>(returnValue);

    return returnValue;
}

FieldContainerPtr GeoMultiPropertyBase::shallowCopy(void) const
{
    GeoMultiPropertyPtr returnValue;

    newPtr(returnValue, dynamic_cast<const GeoMultiProperty *>(this));

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

GeoMultiPropertyBase::GeoMultiPropertyBase(void) :
    Inherited(),
    _sfContainer              (),
    _sfOffset                 (UInt32(0)),
    _sfIFormat                (GLenum(0)),
    _sfIDimension             (UInt32(0)),
    _sfISize                  (UInt32(0)),
    _sfINormalize             (bool(false)),
    _sfIStride                (UInt32(0))
{
}

GeoMultiPropertyBase::GeoMultiPropertyBase(const GeoMultiPropertyBase &source) :
    Inherited(source),
    _sfContainer              (),
    _sfOffset                 (source._sfOffset                 ),
    _sfIFormat                (source._sfIFormat                ),
    _sfIDimension             (source._sfIDimension             ),
    _sfISize                  (source._sfISize                  ),
    _sfINormalize             (source._sfINormalize             ),
    _sfIStride                (source._sfIStride                )
{
}

/*-------------------------- destructors ----------------------------------*/

GeoMultiPropertyBase::~GeoMultiPropertyBase(void)
{
}

void GeoMultiPropertyBase::onCreate(const GeoMultiProperty *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {

        this->setContainer(source->getContainer());
    }
}

#ifdef OSG_MT_FIELDCONTAINERPTR
void GeoMultiPropertyBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo,
                                        UInt32             uiCopyOffset)
{
    this->execSync(static_cast<GeoMultiPropertyBase *>(&oFrom),
                   whichField,
                   syncMode,
                   uiSyncInfo,
                   uiCopyOffset);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
void GeoMultiPropertyBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<GeoMultiPropertyBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif

#if 0
void GeoMultiPropertyBase::execBeginEditV(ConstFieldMaskArg whichField,
                                       UInt32            uiAspect,
                                       UInt32            uiContainerSize)
{
    this->execBeginEdit(whichField, uiAspect, uiContainerSize);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr GeoMultiPropertyBase::createAspectCopy(void) const
{
    GeoMultiPropertyPtr returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const GeoMultiProperty *>(this));

    return returnValue;
}
#endif

void GeoMultiPropertyBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<GeoMultiProperty *>(this)->setContainer(NullFC);
}


OSG_END_NAMESPACE

#include "OSGSFieldAdaptor.ins"
#include "OSGMFieldAdaptor.ins"

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<GeoMultiPropertyPtr>::_type("GeoMultiPropertyPtr", "GeoVectorPropertyPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(GeoMultiPropertyPtr)

OSG_FIELD_DLLEXPORT_DEF2(SFieldAdaptor, GeoMultiPropertyPtr, SFFieldContainerPtr);
OSG_FIELD_DLLEXPORT_DEF2(MFieldAdaptor, GeoMultiPropertyPtr, MFFieldContainerPtr);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id$";
    static Char8 cvsid_hpp       [] = OSGGEOMULTIPROPERTYBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGGEOMULTIPROPERTYBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGGEOMULTIPROPERTYFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE
