/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class GeoStatsAttachment!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEGEOSTATSATTACHMENTINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>




#include "OSGGeoStatsAttachmentBase.h"
#include "OSGGeoStatsAttachment.h"

#include "boost/bind.hpp"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::GeoStatsAttachment
    The base class for geometry statistics.

    The GeoStatsAttachment keeps track of some core Geometry Characteristics like
    the number of vertices used, the number of points, lines or triangles created
    and some information about memory consumption.

    It is designed as an attachment so that it can be kept inside the graph. It
    can also be used to keep aggregated information about subtrees, by adding up
    the contributions of the underlying nodes. It can invalidate itself by using
    changed callbacks, so that no manual bookkeeping is necessary.

    \warning To use the automatic update you have to use the
    osg::GeoStatsAttachment::addTo() or osg::GeoStatsAttachment::attachTo()
    methods! Otherwise the necessary callbacks are not set!
 */


GeoStatsAttachmentBase::TypeObject GeoStatsAttachmentBase::_type(
    GeoStatsAttachmentBase::getClassname(),
    Inherited::getClassname(),
    "GeoStatsAttachment",
    0,
    (PrototypeCreateF) &GeoStatsAttachmentBase::createEmpty,
    GeoStatsAttachment::initMethod,
    NULL,
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"GeoStatsAttachment\"\n"
    "\tparent=\"DrawableStatsAttachment\"\n"
    "\tlibrary=\"Drawable\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    ">\n"
    "The base class for geometry statistics.\n"
    "\n"
    "The GeoStatsAttachment keeps track of some core Geometry Characteristics like\n"
    "the number of vertices used, the number of points, lines or triangles created\n"
    "and some information about memory consumption.\n"
    "\n"
    "It is designed as an attachment so that it can be kept inside the graph. It\n"
    "can also be used to keep aggregated information about subtrees, by adding up\n"
    "the contributions of the underlying nodes. It can invalidate itself by using\n"
    "changed callbacks, so that no manual bookkeeping is necessary.\n"
    "\n"
    "\\warning To use the automatic update you have to use the\n"
    "osg::GeoStatsAttachment::addTo() or osg::GeoStatsAttachment::attachTo()\n"
    "methods! Otherwise the necessary callbacks are not set!\n"
    "\n"
    "\\warning Before accessing the data osg::GeoStatsAttachment::validate() needs\n"
    "to be called to calculate and aggregate the results.\n"
    "</FieldContainer>\n",
    "The base class for geometry statistics.\n"
    "\n"
    "The GeoStatsAttachment keeps track of some core Geometry Characteristics like\n"
    "the number of vertices used, the number of points, lines or triangles created\n"
    "and some information about memory consumption.\n"
    "\n"
    "It is designed as an attachment so that it can be kept inside the graph. It\n"
    "can also be used to keep aggregated information about subtrees, by adding up\n"
    "the contributions of the underlying nodes. It can invalidate itself by using\n"
    "changed callbacks, so that no manual bookkeeping is necessary.\n"
    "\n"
    "\\warning To use the automatic update you have to use the\n"
    "osg::GeoStatsAttachment::addTo() or osg::GeoStatsAttachment::attachTo()\n"
    "methods! Otherwise the necessary callbacks are not set!\n"
    "\n"
    "\\warning Before accessing the data osg::GeoStatsAttachment::validate() needs\n"
    "to be called to calculate and aggregate the results.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &GeoStatsAttachmentBase::getType(void)
{
    return _type;
}

const FieldContainerType &GeoStatsAttachmentBase::getType(void) const
{
    return _type;
}

UInt32 GeoStatsAttachmentBase::getContainerSize(void) const
{
    return sizeof(GeoStatsAttachment);
}

/*------------------------- decorator get ------------------------------*/






/*------------------------------ access -----------------------------------*/

UInt32 GeoStatsAttachmentBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);


    return returnValue;
}

void GeoStatsAttachmentBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

}

void GeoStatsAttachmentBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

}

//! create a new instance of the class
GeoStatsAttachmentPtr GeoStatsAttachmentBase::create(void)
{
    GeoStatsAttachmentPtr fc;

    if(getClassType().getPrototype() != NullFC)
    {
        fc = dynamic_cast<GeoStatsAttachment::ObjPtr>(
            getClassType().getPrototype()-> shallowCopy());
    }

    return fc;
}

//! create an empty new instance of the class, do not copy the prototype
GeoStatsAttachmentPtr GeoStatsAttachmentBase::createEmpty(void)
{
    GeoStatsAttachmentPtr returnValue;

    newPtr<GeoStatsAttachment>(returnValue);

    return returnValue;
}

FieldContainerPtr GeoStatsAttachmentBase::shallowCopy(void) const
{
    GeoStatsAttachmentPtr returnValue;

    newPtr(returnValue, dynamic_cast<const GeoStatsAttachment *>(this));

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

GeoStatsAttachmentBase::GeoStatsAttachmentBase(void) :
    Inherited()
{
}

GeoStatsAttachmentBase::GeoStatsAttachmentBase(const GeoStatsAttachmentBase &source) :
    Inherited(source)
{
}


/*-------------------------- destructors ----------------------------------*/

GeoStatsAttachmentBase::~GeoStatsAttachmentBase(void)
{
}



#ifdef OSG_MT_CPTR_ASPECT
void GeoStatsAttachmentBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<GeoStatsAttachmentBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr GeoStatsAttachmentBase::createAspectCopy(void) const
{
    GeoStatsAttachmentPtr returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const GeoStatsAttachment *>(this));

    return returnValue;
}
#endif

void GeoStatsAttachmentBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE

#include "OSGSFieldAdaptor.ins"
#include "OSGMFieldAdaptor.ins"

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<GeoStatsAttachmentPtr>::_type("GeoStatsAttachmentPtr", "DrawableStatsAttachmentPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(GeoStatsAttachmentPtr)

OSG_FIELD_DLLEXPORT_DEF2(SFieldAdaptor, GeoStatsAttachmentPtr, SFFieldContainerPtr);
OSG_FIELD_DLLEXPORT_DEF2(MFieldAdaptor, GeoStatsAttachmentPtr, MFFieldContainerPtr);

OSG_END_NAMESPACE
