/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class GeoStatsAttachment!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEGEOSTATSATTACHMENTINST

#include <stdlib.h>
#include <stdio.h>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>




#include "OSGGeoStatsAttachmentBase.h"
#include "OSGGeoStatsAttachment.h"

OSG_USING_NAMESPACE

// Field descriptions

/*! \var UInt32 GeoStatsAttachmentBase::_sfVertices
            The number of vertices in the subtree.

*/
/*! \var UInt32 GeoStatsAttachmentBase::_sfPoints
            The number of points in the subtree.

*/
/*! \var UInt32 GeoStatsAttachmentBase::_sfLines
            The number of lines in the subtree.

*/
/*! \var UInt32 GeoStatsAttachmentBase::_sfTriangles
            The number of triangles in the subtree.

*/
/*! \var UInt32 GeoStatsAttachmentBase::_sfProcessedAttributeBytes
            The number of bytes in vertex attribute data that are processed while rendering.

*/
/*! \var UInt32 GeoStatsAttachmentBase::_sfStoredAttributeBytes
            The number of bytes in vertex attribute data that are stored.

*/
/*! \var bool GeoStatsAttachmentBase::_sfValid
            Flags whether the data is valid or needs to be updated.
The base class for geometry statistics.

*/

void GeoStatsAttachmentBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL; 


#ifdef OSG_1_COMPAT
    typedef const SFUInt32 *(GeoStatsAttachmentBase::*GetSFVerticesF)(void) const;

    GetSFVerticesF GetSFVertices = &GeoStatsAttachmentBase::getSFVertices;
#endif

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(), 
        "vertices", 
        "        The number of vertices in the subtree.\n",
        VerticesFieldId, VerticesFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&GeoStatsAttachmentBase::editSFVertices),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFVertices));
#else
        reinterpret_cast<FieldGetMethodSig >(&GeoStatsAttachmentBase::getSFVertices));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFUInt32 *(GeoStatsAttachmentBase::*GetSFPointsF)(void) const;

    GetSFPointsF GetSFPoints = &GeoStatsAttachmentBase::getSFPoints;
#endif

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(), 
        "points", 
        "        The number of points in the subtree.\n",
        PointsFieldId, PointsFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&GeoStatsAttachmentBase::editSFPoints),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFPoints));
#else
        reinterpret_cast<FieldGetMethodSig >(&GeoStatsAttachmentBase::getSFPoints));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFUInt32 *(GeoStatsAttachmentBase::*GetSFLinesF)(void) const;

    GetSFLinesF GetSFLines = &GeoStatsAttachmentBase::getSFLines;
#endif

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(), 
        "lines", 
        "        The number of lines in the subtree.\n",
        LinesFieldId, LinesFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&GeoStatsAttachmentBase::editSFLines),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFLines));
#else
        reinterpret_cast<FieldGetMethodSig >(&GeoStatsAttachmentBase::getSFLines));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFUInt32 *(GeoStatsAttachmentBase::*GetSFTrianglesF)(void) const;

    GetSFTrianglesF GetSFTriangles = &GeoStatsAttachmentBase::getSFTriangles;
#endif

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(), 
        "triangles", 
        "        The number of triangles in the subtree.\n",
        TrianglesFieldId, TrianglesFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&GeoStatsAttachmentBase::editSFTriangles),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFTriangles));
#else
        reinterpret_cast<FieldGetMethodSig >(&GeoStatsAttachmentBase::getSFTriangles));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFUInt32 *(GeoStatsAttachmentBase::*GetSFProcessedAttributeBytesF)(void) const;

    GetSFProcessedAttributeBytesF GetSFProcessedAttributeBytes = &GeoStatsAttachmentBase::getSFProcessedAttributeBytes;
#endif

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(), 
        "processedAttributeBytes", 
        "        The number of bytes in vertex attribute data that are processed while rendering.\n",
        ProcessedAttributeBytesFieldId, ProcessedAttributeBytesFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&GeoStatsAttachmentBase::editSFProcessedAttributeBytes),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFProcessedAttributeBytes));
#else
        reinterpret_cast<FieldGetMethodSig >(&GeoStatsAttachmentBase::getSFProcessedAttributeBytes));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFUInt32 *(GeoStatsAttachmentBase::*GetSFStoredAttributeBytesF)(void) const;

    GetSFStoredAttributeBytesF GetSFStoredAttributeBytes = &GeoStatsAttachmentBase::getSFStoredAttributeBytes;
#endif

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(), 
        "storedAttributeBytes", 
        "        The number of bytes in vertex attribute data that are stored.\n",
        StoredAttributeBytesFieldId, StoredAttributeBytesFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&GeoStatsAttachmentBase::editSFStoredAttributeBytes),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFStoredAttributeBytes));
#else
        reinterpret_cast<FieldGetMethodSig >(&GeoStatsAttachmentBase::getSFStoredAttributeBytes));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFBool *(GeoStatsAttachmentBase::*GetSFValidF)(void) const;

    GetSFValidF GetSFValid = &GeoStatsAttachmentBase::getSFValid;
#endif

    pDesc = new SFBool::Description(
        SFBool::getClassType(), 
        "valid", 
        "        Flags whether the data is valid or needs to be updated.\nThe base class for geometry statistics.\n",
        ValidFieldId, ValidFieldMask,
        true,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&GeoStatsAttachmentBase::editSFValid),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFValid));
#else
        reinterpret_cast<FieldGetMethodSig >(&GeoStatsAttachmentBase::getSFValid));
#endif

    oType.addInitialDesc(pDesc);
}


GeoStatsAttachmentBase::TypeObject GeoStatsAttachmentBase::_type(true,
    GeoStatsAttachmentBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &GeoStatsAttachmentBase::createEmpty,
    GeoStatsAttachment::initMethod,
    (InitalInsertDescFunc) &GeoStatsAttachmentBase::classDescInserter,
    false,
    "<?xml version=\"1.0\"?>\n"
"\n"
"<FieldContainer\n"
"	name=\"GeoStatsAttachment\"\n"
"	parent=\"StatsAttachment\"\n"
"	library=\"System\"\n"
"	pointerfieldtypes=\"both\"\n"
"	structure=\"concrete\"\n"
"	systemcomponent=\"true\"\n"
"	parentsystemcomponent=\"true\"\n"
"	decoratable=\"false\"\n"
">\n"
"	<Field\n"
"		name=\"vertices\"\n"
"		type=\"UInt32\"\n"
"		cardinality=\"single\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"        The number of vertices in the subtree.\n"
"	</Field>\n"
"	<Field\n"
"		name=\"points\"\n"
"		type=\"UInt32\"\n"
"		cardinality=\"single\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"        The number of points in the subtree.\n"
"	</Field>\n"
"	<Field\n"
"		name=\"lines\"\n"
"		type=\"UInt32\"\n"
"		cardinality=\"single\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"        The number of lines in the subtree.\n"
"	</Field>\n"
"	<Field\n"
"		name=\"triangles\"\n"
"		type=\"UInt32\"\n"
"		cardinality=\"single\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"        The number of triangles in the subtree.\n"
"	</Field>\n"
"	<Field\n"
"		name=\"processedAttributeBytes\"\n"
"		type=\"UInt32\"\n"
"		cardinality=\"single\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"        The number of bytes in vertex attribute data that are processed while rendering.\n"
"	</Field>\n"
"	<Field\n"
"		name=\"storedAttributeBytes\"\n"
"		type=\"UInt32\"\n"
"		cardinality=\"single\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"        The number of bytes in vertex attribute data that are stored.\n"
"	</Field>\n"
"	<Field\n"
"		name=\"valid\"\n"
"		type=\"bool\"\n"
"		cardinality=\"single\"\n"
"		visibility=\"internal\"\n"
"		access=\"public\"\n"
"                defaultValue=\"false\"\n"
"	>\n"
"        Flags whether the data is valid or needs to be updated.\n"
"	</Field>\n"
"The base class for geometry statistics.\n"
"</FieldContainer>\n"
,
    "" 
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &GeoStatsAttachmentBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &GeoStatsAttachmentBase::getType(void) const 
{
    return _type;
} 

UInt32 GeoStatsAttachmentBase::getContainerSize(void) const 
{ 
    return sizeof(GeoStatsAttachment); 
}

/*------------------------- decorator get ------------------------------*/


SFUInt32 *GeoStatsAttachmentBase::editSFVertices(void)
{
    editSField(VerticesFieldMask);

    return &_sfVertices;
}

const SFUInt32 *GeoStatsAttachmentBase::getSFVertices(void) const
{
    return &_sfVertices;
}

#ifdef OSG_1_COMPAT
SFUInt32 *GeoStatsAttachmentBase::getSFVertices(void)
{
    return this->editSFVertices();
}
#endif

SFUInt32 *GeoStatsAttachmentBase::editSFPoints(void)
{
    editSField(PointsFieldMask);

    return &_sfPoints;
}

const SFUInt32 *GeoStatsAttachmentBase::getSFPoints(void) const
{
    return &_sfPoints;
}

#ifdef OSG_1_COMPAT
SFUInt32 *GeoStatsAttachmentBase::getSFPoints(void)
{
    return this->editSFPoints();
}
#endif

SFUInt32 *GeoStatsAttachmentBase::editSFLines(void)
{
    editSField(LinesFieldMask);

    return &_sfLines;
}

const SFUInt32 *GeoStatsAttachmentBase::getSFLines(void) const
{
    return &_sfLines;
}

#ifdef OSG_1_COMPAT
SFUInt32 *GeoStatsAttachmentBase::getSFLines(void)
{
    return this->editSFLines();
}
#endif

SFUInt32 *GeoStatsAttachmentBase::editSFTriangles(void)
{
    editSField(TrianglesFieldMask);

    return &_sfTriangles;
}

const SFUInt32 *GeoStatsAttachmentBase::getSFTriangles(void) const
{
    return &_sfTriangles;
}

#ifdef OSG_1_COMPAT
SFUInt32 *GeoStatsAttachmentBase::getSFTriangles(void)
{
    return this->editSFTriangles();
}
#endif

SFUInt32 *GeoStatsAttachmentBase::editSFProcessedAttributeBytes(void)
{
    editSField(ProcessedAttributeBytesFieldMask);

    return &_sfProcessedAttributeBytes;
}

const SFUInt32 *GeoStatsAttachmentBase::getSFProcessedAttributeBytes(void) const
{
    return &_sfProcessedAttributeBytes;
}

#ifdef OSG_1_COMPAT
SFUInt32 *GeoStatsAttachmentBase::getSFProcessedAttributeBytes(void)
{
    return this->editSFProcessedAttributeBytes();
}
#endif

SFUInt32 *GeoStatsAttachmentBase::editSFStoredAttributeBytes(void)
{
    editSField(StoredAttributeBytesFieldMask);

    return &_sfStoredAttributeBytes;
}

const SFUInt32 *GeoStatsAttachmentBase::getSFStoredAttributeBytes(void) const
{
    return &_sfStoredAttributeBytes;
}

#ifdef OSG_1_COMPAT
SFUInt32 *GeoStatsAttachmentBase::getSFStoredAttributeBytes(void)
{
    return this->editSFStoredAttributeBytes();
}
#endif

SFBool *GeoStatsAttachmentBase::editSFValid(void)
{
    editSField(ValidFieldMask);

    return &_sfValid;
}

const SFBool *GeoStatsAttachmentBase::getSFValid(void) const
{
    return &_sfValid;
}

#ifdef OSG_1_COMPAT
SFBool *GeoStatsAttachmentBase::getSFValid(void)
{
    return this->editSFValid();
}
#endif



/*------------------------------ access -----------------------------------*/

UInt32 GeoStatsAttachmentBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (VerticesFieldMask & whichField))
    {
        returnValue += _sfVertices.getBinSize();
    }
    if(FieldBits::NoField != (PointsFieldMask & whichField))
    {
        returnValue += _sfPoints.getBinSize();
    }
    if(FieldBits::NoField != (LinesFieldMask & whichField))
    {
        returnValue += _sfLines.getBinSize();
    }
    if(FieldBits::NoField != (TrianglesFieldMask & whichField))
    {
        returnValue += _sfTriangles.getBinSize();
    }
    if(FieldBits::NoField != (ProcessedAttributeBytesFieldMask & whichField))
    {
        returnValue += _sfProcessedAttributeBytes.getBinSize();
    }
    if(FieldBits::NoField != (StoredAttributeBytesFieldMask & whichField))
    {
        returnValue += _sfStoredAttributeBytes.getBinSize();
    }
    if(FieldBits::NoField != (ValidFieldMask & whichField))
    {
        returnValue += _sfValid.getBinSize();
    }

    return returnValue;
}

void GeoStatsAttachmentBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (VerticesFieldMask & whichField))
    {
        _sfVertices.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PointsFieldMask & whichField))
    {
        _sfPoints.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LinesFieldMask & whichField))
    {
        _sfLines.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TrianglesFieldMask & whichField))
    {
        _sfTriangles.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ProcessedAttributeBytesFieldMask & whichField))
    {
        _sfProcessedAttributeBytes.copyToBin(pMem);
    }
    if(FieldBits::NoField != (StoredAttributeBytesFieldMask & whichField))
    {
        _sfStoredAttributeBytes.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ValidFieldMask & whichField))
    {
        _sfValid.copyToBin(pMem);
    }
}

void GeoStatsAttachmentBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (VerticesFieldMask & whichField))
    {
        _sfVertices.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PointsFieldMask & whichField))
    {
        _sfPoints.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LinesFieldMask & whichField))
    {
        _sfLines.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TrianglesFieldMask & whichField))
    {
        _sfTriangles.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ProcessedAttributeBytesFieldMask & whichField))
    {
        _sfProcessedAttributeBytes.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (StoredAttributeBytesFieldMask & whichField))
    {
        _sfStoredAttributeBytes.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ValidFieldMask & whichField))
    {
        _sfValid.copyFromBin(pMem);
    }
}

//! create an empty new instance of the class, do not copy the prototype
GeoStatsAttachmentPtr GeoStatsAttachmentBase::createEmpty(void) 
{ 
    GeoStatsAttachmentPtr returnValue; 
    
    newPtr<GeoStatsAttachment>(returnValue); 

    return returnValue; 
}

FieldContainerPtr GeoStatsAttachmentBase::shallowCopy(void) const 
{ 
    GeoStatsAttachmentPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const GeoStatsAttachment *>(this)); 

    return returnValue; 
}



/*------------------------- constructors ----------------------------------*/

GeoStatsAttachmentBase::GeoStatsAttachmentBase(void) :
    Inherited(),
    _sfVertices(),
    _sfPoints(),
    _sfLines(),
    _sfTriangles(),
    _sfProcessedAttributeBytes(),
    _sfStoredAttributeBytes(),
    _sfValid(bool(false))
{
}

GeoStatsAttachmentBase::GeoStatsAttachmentBase(const GeoStatsAttachmentBase &source) :
    Inherited(source),
    _sfVertices(source._sfVertices),
    _sfPoints(source._sfPoints),
    _sfLines(source._sfLines),
    _sfTriangles(source._sfTriangles),
    _sfProcessedAttributeBytes(source._sfProcessedAttributeBytes),
    _sfStoredAttributeBytes(source._sfStoredAttributeBytes),
    _sfValid(source._sfValid)
{
}

/*-------------------------- destructors ----------------------------------*/

GeoStatsAttachmentBase::~GeoStatsAttachmentBase(void)
{
}


#ifdef OSG_MT_FIELDCONTAINERPTR
void GeoStatsAttachmentBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo,
                                        UInt32             uiCopyOffset)
{
    this->execSync(static_cast<GeoStatsAttachmentBase *>(&oFrom),
                   whichField, 
                   syncMode, 
                   uiSyncInfo,
                   uiCopyOffset);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
void GeoStatsAttachmentBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<GeoStatsAttachmentBase *>(&oFrom), 
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif

#if 0
void GeoStatsAttachmentBase::execBeginEditV(ConstFieldMaskArg whichField,
                                       UInt32            uiAspect,
                                       UInt32            uiContainerSize)
{
    this->execBeginEdit(whichField, uiAspect, uiContainerSize);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr GeoStatsAttachmentBase::createAspectCopy(void) const
{
    GeoStatsAttachmentPtr returnValue; 

    newAspectCopy(returnValue, 
                  dynamic_cast<const GeoStatsAttachment *>(this)); 

    return returnValue; 
}
#endif

void GeoStatsAttachmentBase::resolveLinks(void)
{
    Inherited::resolveLinks();
}


#include "OSGSField.ins"
#include "OSGMField.ins"

#if defined(OSG_TMPL_STATIC_MEMBER_NEEDS_FUNCTION_INSTANTIATION) || \
    defined(OSG_TMPL_STATIC_MEMBER_NEEDS_CLASS_INSTANTIATION   )

#include "OSGSFieldFuncs.ins"
#include "OSGMFieldFuncs.ins"
#endif

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<GeoStatsAttachmentPtr>::_type("GeoStatsAttachmentPtr", "StatsAttachmentPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(GeoStatsAttachmentPtr)

OSG_FIELD_DLLEXPORT_DEF1(SField, GeoStatsAttachmentPtr);
OSG_FIELD_DLLEXPORT_DEF1(MField, GeoStatsAttachmentPtr);

OSG_END_NAMESPACE


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id$";
    static Char8 cvsid_hpp       [] = OSGGEOSTATSATTACHMENTBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGGEOSTATSATTACHMENTBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGGEOSTATSATTACHMENTFIELDS_HEADER_CVSID;
}
