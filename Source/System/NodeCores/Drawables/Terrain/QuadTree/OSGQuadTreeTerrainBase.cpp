/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class QuadTreeTerrain!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEQUADTREETERRAININST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>



#include <OSGImage.h> // HeightData Class
#include <OSGGeoVectorProperty.h> // HeightVertices Class

#include "OSGQuadTreeTerrainBase.h"
#include "OSGQuadTreeTerrain.h"

OSG_USING_NAMESPACE

// Field descriptions

/*! \var ImagePtr QuadTreeTerrainBase::_sfHeightData
    	Terrain height as image

*/
/*! \var Real32 QuadTreeTerrainBase::_sfHeightScale
    	Scale factor for terrain height

*/
/*! \var Real32 QuadTreeTerrainBase::_mfHeightError
    	Error values

*/
/*! \var Real32 QuadTreeTerrainBase::_mfHeightQuad
    	Vertex indices used in current tesselation (encoding terrain quadtree)

*/
/*! \var UInt32 QuadTreeTerrainBase::_sfWidth
    	width and height of dataset

*/
/*! \var UInt32 QuadTreeTerrainBase::_sfLevel
    	levels of terrain quadtree

*/
/*! \var Real32 QuadTreeTerrainBase::_sfDetail
    	Detail of terrain tesselation

*/
/*! \var Int32 QuadTreeTerrainBase::_sfBorderDetail
    	Detail for borders (0: determined by height data, positive: borders at level borderDetail)

*/
/*! \var Real32 QuadTreeTerrainBase::_sfVertexSpacing
    	Spacing to horizontal and vertical neighbour vertices

*/
/*! \var GeoVectorPropertyPtr QuadTreeTerrainBase::_sfHeightVertices
    	Precomputed terrain vertices

*/
/*! \var bool QuadTreeTerrainBase::_sfGeoMorphing
    
*/
/*! \var Pnt3f QuadTreeTerrainBase::_sfBoundMin
    	Min vertex of AABB

*/
/*! \var Pnt3f QuadTreeTerrainBase::_sfBoundMax
    	Max vertex of AABB

*/
/*! \var Pnt3f QuadTreeTerrainBase::_sfEyePoint
    	Eye point of this frame

*/
/*! \var Real32 QuadTreeTerrainBase::_sfEyeHeight
    	Height of eye point above terrain

*/
/*! \var bool QuadTreeTerrainBase::_sfEyePointValid
    	Eye point set externally, otherwise it is computed internally

*/
/*! \var Real32 QuadTreeTerrainBase::_sfOriginX
    	X-component of terrain lower left point

*/
/*! \var Real32 QuadTreeTerrainBase::_sfOriginY
    	Y-component of terrain lower left point

*/
/*! \var Real32 QuadTreeTerrainBase::_sfOriginTexX
    	texture X-component of terrain lower left point

*/
/*! \var Real32 QuadTreeTerrainBase::_sfOriginTexY
    	texture Y-component of terrain lower left point

*/
/*! \var Real32 QuadTreeTerrainBase::_sfTexSpacing
    	Spacing of texture coordinates for horizontal (and vertical) neighbour vertices

*/
/*! \var Real32 QuadTreeTerrainBase::_sfTexYSpacing
    	Spacing of texture coordinates for vertical neighbour vertices

*/
/*! \var bool QuadTreeTerrainBase::_sfUpdateTerrain
    	update terrain in next frame

*/
/*! \var bool QuadTreeTerrainBase::_sfPerPixelLighting
    	Do per-pixel lighting with normalmap; otherwise generate per-vertex normals

*/

void QuadTreeTerrainBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL; 


    pDesc = new SFImagePtr::Description(
        SFImagePtr::getClassType(), 
        "heightData", 
        HeightDataFieldId, HeightDataFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&QuadTreeTerrainBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&QuadTreeTerrainBase::getSFHeightData));

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFReal32 *(QuadTreeTerrainBase::*GetSFHeightScaleF)(void) const;

    GetSFHeightScaleF GetSFHeightScale = &QuadTreeTerrainBase::getSFHeightScale;
#endif

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(), 
        "heightScale", 
        HeightScaleFieldId, HeightScaleFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&QuadTreeTerrainBase::editSFHeightScale),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFHeightScale));
#else
        reinterpret_cast<FieldGetMethodSig >(&QuadTreeTerrainBase::getSFHeightScale));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFReal32 *(QuadTreeTerrainBase::*GetMFHeightErrorF)(void) const;

    GetMFHeightErrorF GetMFHeightError = &QuadTreeTerrainBase::getMFHeightError;
#endif

    pDesc = new MFReal32::Description(
        MFReal32::getClassType(), 
        "heightError", 
        HeightErrorFieldId, HeightErrorFieldMask,
        true,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&QuadTreeTerrainBase::editMFHeightError),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFHeightError));
#else
        reinterpret_cast<FieldGetMethodSig >(&QuadTreeTerrainBase::getMFHeightError));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFReal32 *(QuadTreeTerrainBase::*GetMFHeightQuadF)(void) const;

    GetMFHeightQuadF GetMFHeightQuad = &QuadTreeTerrainBase::getMFHeightQuad;
#endif

    pDesc = new MFReal32::Description(
        MFReal32::getClassType(), 
        "heightQuad", 
        HeightQuadFieldId, HeightQuadFieldMask,
        true,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&QuadTreeTerrainBase::editMFHeightQuad),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFHeightQuad));
#else
        reinterpret_cast<FieldGetMethodSig >(&QuadTreeTerrainBase::getMFHeightQuad));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFUInt32 *(QuadTreeTerrainBase::*GetSFWidthF)(void) const;

    GetSFWidthF GetSFWidth = &QuadTreeTerrainBase::getSFWidth;
#endif

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(), 
        "width", 
        WidthFieldId, WidthFieldMask,
        true,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&QuadTreeTerrainBase::editSFWidth),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFWidth));
#else
        reinterpret_cast<FieldGetMethodSig >(&QuadTreeTerrainBase::getSFWidth));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFUInt32 *(QuadTreeTerrainBase::*GetSFLevelF)(void) const;

    GetSFLevelF GetSFLevel = &QuadTreeTerrainBase::getSFLevel;
#endif

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(), 
        "level", 
        LevelFieldId, LevelFieldMask,
        true,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&QuadTreeTerrainBase::editSFLevel),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFLevel));
#else
        reinterpret_cast<FieldGetMethodSig >(&QuadTreeTerrainBase::getSFLevel));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFReal32 *(QuadTreeTerrainBase::*GetSFDetailF)(void) const;

    GetSFDetailF GetSFDetail = &QuadTreeTerrainBase::getSFDetail;
#endif

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(), 
        "detail", 
        DetailFieldId, DetailFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&QuadTreeTerrainBase::editSFDetail),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFDetail));
#else
        reinterpret_cast<FieldGetMethodSig >(&QuadTreeTerrainBase::getSFDetail));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFInt32 *(QuadTreeTerrainBase::*GetSFBorderDetailF)(void) const;

    GetSFBorderDetailF GetSFBorderDetail = &QuadTreeTerrainBase::getSFBorderDetail;
#endif

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(), 
        "borderDetail", 
        BorderDetailFieldId, BorderDetailFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&QuadTreeTerrainBase::editSFBorderDetail),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFBorderDetail));
#else
        reinterpret_cast<FieldGetMethodSig >(&QuadTreeTerrainBase::getSFBorderDetail));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFReal32 *(QuadTreeTerrainBase::*GetSFVertexSpacingF)(void) const;

    GetSFVertexSpacingF GetSFVertexSpacing = &QuadTreeTerrainBase::getSFVertexSpacing;
#endif

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(), 
        "vertexSpacing", 
        VertexSpacingFieldId, VertexSpacingFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&QuadTreeTerrainBase::editSFVertexSpacing),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFVertexSpacing));
#else
        reinterpret_cast<FieldGetMethodSig >(&QuadTreeTerrainBase::getSFVertexSpacing));
#endif

    oType.addInitialDesc(pDesc);

    pDesc = new SFGeoVectorPropertyPtr::Description(
        SFGeoVectorPropertyPtr::getClassType(), 
        "heightVertices", 
        HeightVerticesFieldId, HeightVerticesFieldMask,
        true,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&QuadTreeTerrainBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&QuadTreeTerrainBase::getSFHeightVertices));

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFBool *(QuadTreeTerrainBase::*GetSFGeoMorphingF)(void) const;

    GetSFGeoMorphingF GetSFGeoMorphing = &QuadTreeTerrainBase::getSFGeoMorphing;
#endif

    pDesc = new SFBool::Description(
        SFBool::getClassType(), 
        "geoMorphing", 
        GeoMorphingFieldId, GeoMorphingFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&QuadTreeTerrainBase::editSFGeoMorphing),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFGeoMorphing));
#else
        reinterpret_cast<FieldGetMethodSig >(&QuadTreeTerrainBase::getSFGeoMorphing));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFPnt3f *(QuadTreeTerrainBase::*GetSFBoundMinF)(void) const;

    GetSFBoundMinF GetSFBoundMin = &QuadTreeTerrainBase::getSFBoundMin;
#endif

    pDesc = new SFPnt3f::Description(
        SFPnt3f::getClassType(), 
        "boundMin", 
        BoundMinFieldId, BoundMinFieldMask,
        true,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&QuadTreeTerrainBase::editSFBoundMin),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFBoundMin));
#else
        reinterpret_cast<FieldGetMethodSig >(&QuadTreeTerrainBase::getSFBoundMin));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFPnt3f *(QuadTreeTerrainBase::*GetSFBoundMaxF)(void) const;

    GetSFBoundMaxF GetSFBoundMax = &QuadTreeTerrainBase::getSFBoundMax;
#endif

    pDesc = new SFPnt3f::Description(
        SFPnt3f::getClassType(), 
        "boundMax", 
        BoundMaxFieldId, BoundMaxFieldMask,
        true,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&QuadTreeTerrainBase::editSFBoundMax),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFBoundMax));
#else
        reinterpret_cast<FieldGetMethodSig >(&QuadTreeTerrainBase::getSFBoundMax));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFPnt3f *(QuadTreeTerrainBase::*GetSFEyePointF)(void) const;

    GetSFEyePointF GetSFEyePoint = &QuadTreeTerrainBase::getSFEyePoint;
#endif

    pDesc = new SFPnt3f::Description(
        SFPnt3f::getClassType(), 
        "eyePoint", 
        EyePointFieldId, EyePointFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&QuadTreeTerrainBase::editSFEyePoint),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFEyePoint));
#else
        reinterpret_cast<FieldGetMethodSig >(&QuadTreeTerrainBase::getSFEyePoint));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFReal32 *(QuadTreeTerrainBase::*GetSFEyeHeightF)(void) const;

    GetSFEyeHeightF GetSFEyeHeight = &QuadTreeTerrainBase::getSFEyeHeight;
#endif

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(), 
        "eyeHeight", 
        EyeHeightFieldId, EyeHeightFieldMask,
        true,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&QuadTreeTerrainBase::editSFEyeHeight),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFEyeHeight));
#else
        reinterpret_cast<FieldGetMethodSig >(&QuadTreeTerrainBase::getSFEyeHeight));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFBool *(QuadTreeTerrainBase::*GetSFEyePointValidF)(void) const;

    GetSFEyePointValidF GetSFEyePointValid = &QuadTreeTerrainBase::getSFEyePointValid;
#endif

    pDesc = new SFBool::Description(
        SFBool::getClassType(), 
        "eyePointValid", 
        EyePointValidFieldId, EyePointValidFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&QuadTreeTerrainBase::editSFEyePointValid),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFEyePointValid));
#else
        reinterpret_cast<FieldGetMethodSig >(&QuadTreeTerrainBase::getSFEyePointValid));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFReal32 *(QuadTreeTerrainBase::*GetSFOriginXF)(void) const;

    GetSFOriginXF GetSFOriginX = &QuadTreeTerrainBase::getSFOriginX;
#endif

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(), 
        "originX", 
        OriginXFieldId, OriginXFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&QuadTreeTerrainBase::editSFOriginX),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFOriginX));
#else
        reinterpret_cast<FieldGetMethodSig >(&QuadTreeTerrainBase::getSFOriginX));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFReal32 *(QuadTreeTerrainBase::*GetSFOriginYF)(void) const;

    GetSFOriginYF GetSFOriginY = &QuadTreeTerrainBase::getSFOriginY;
#endif

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(), 
        "originY", 
        OriginYFieldId, OriginYFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&QuadTreeTerrainBase::editSFOriginY),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFOriginY));
#else
        reinterpret_cast<FieldGetMethodSig >(&QuadTreeTerrainBase::getSFOriginY));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFReal32 *(QuadTreeTerrainBase::*GetSFOriginTexXF)(void) const;

    GetSFOriginTexXF GetSFOriginTexX = &QuadTreeTerrainBase::getSFOriginTexX;
#endif

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(), 
        "originTexX", 
        OriginTexXFieldId, OriginTexXFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&QuadTreeTerrainBase::editSFOriginTexX),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFOriginTexX));
#else
        reinterpret_cast<FieldGetMethodSig >(&QuadTreeTerrainBase::getSFOriginTexX));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFReal32 *(QuadTreeTerrainBase::*GetSFOriginTexYF)(void) const;

    GetSFOriginTexYF GetSFOriginTexY = &QuadTreeTerrainBase::getSFOriginTexY;
#endif

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(), 
        "originTexY", 
        OriginTexYFieldId, OriginTexYFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&QuadTreeTerrainBase::editSFOriginTexY),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFOriginTexY));
#else
        reinterpret_cast<FieldGetMethodSig >(&QuadTreeTerrainBase::getSFOriginTexY));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFReal32 *(QuadTreeTerrainBase::*GetSFTexSpacingF)(void) const;

    GetSFTexSpacingF GetSFTexSpacing = &QuadTreeTerrainBase::getSFTexSpacing;
#endif

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(), 
        "texSpacing", 
        TexSpacingFieldId, TexSpacingFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&QuadTreeTerrainBase::editSFTexSpacing),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFTexSpacing));
#else
        reinterpret_cast<FieldGetMethodSig >(&QuadTreeTerrainBase::getSFTexSpacing));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFReal32 *(QuadTreeTerrainBase::*GetSFTexYSpacingF)(void) const;

    GetSFTexYSpacingF GetSFTexYSpacing = &QuadTreeTerrainBase::getSFTexYSpacing;
#endif

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(), 
        "texYSpacing", 
        TexYSpacingFieldId, TexYSpacingFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&QuadTreeTerrainBase::editSFTexYSpacing),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFTexYSpacing));
#else
        reinterpret_cast<FieldGetMethodSig >(&QuadTreeTerrainBase::getSFTexYSpacing));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFBool *(QuadTreeTerrainBase::*GetSFUpdateTerrainF)(void) const;

    GetSFUpdateTerrainF GetSFUpdateTerrain = &QuadTreeTerrainBase::getSFUpdateTerrain;
#endif

    pDesc = new SFBool::Description(
        SFBool::getClassType(), 
        "updateTerrain", 
        UpdateTerrainFieldId, UpdateTerrainFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&QuadTreeTerrainBase::editSFUpdateTerrain),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFUpdateTerrain));
#else
        reinterpret_cast<FieldGetMethodSig >(&QuadTreeTerrainBase::getSFUpdateTerrain));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFBool *(QuadTreeTerrainBase::*GetSFPerPixelLightingF)(void) const;

    GetSFPerPixelLightingF GetSFPerPixelLighting = &QuadTreeTerrainBase::getSFPerPixelLighting;
#endif

    pDesc = new SFBool::Description(
        SFBool::getClassType(), 
        "perPixelLighting", 
        PerPixelLightingFieldId, PerPixelLightingFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&QuadTreeTerrainBase::editSFPerPixelLighting),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFPerPixelLighting));
#else
        reinterpret_cast<FieldGetMethodSig >(&QuadTreeTerrainBase::getSFPerPixelLighting));
#endif

    oType.addInitialDesc(pDesc);
}


QuadTreeTerrainBase::TypeObject QuadTreeTerrainBase::_type(true,
    QuadTreeTerrainBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &QuadTreeTerrainBase::createEmpty,
    QuadTreeTerrain::initMethod,
    (InitalInsertDescFunc) &QuadTreeTerrainBase::classDescInserter,
    false);

/*------------------------------ get -----------------------------------*/

FieldContainerType &QuadTreeTerrainBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &QuadTreeTerrainBase::getType(void) const 
{
    return _type;
} 

UInt32 QuadTreeTerrainBase::getContainerSize(void) const 
{ 
    return sizeof(QuadTreeTerrain); 
}

/*------------------------- decorator get ------------------------------*/


//! Get the QuadTreeTerrain::_sfHeightData field.
const SFImagePtr *QuadTreeTerrainBase::getSFHeightData(void) const
{
    return &_sfHeightData;
}

SFReal32 *QuadTreeTerrainBase::editSFHeightScale(void)
{
    editSField(HeightScaleFieldMask);

    return &_sfHeightScale;
}

const SFReal32 *QuadTreeTerrainBase::getSFHeightScale(void) const
{
    return &_sfHeightScale;
}

#ifdef OSG_1_COMPAT
SFReal32 *QuadTreeTerrainBase::getSFHeightScale(void)
{
    return this->editSFHeightScale();
}
#endif

MFReal32 *QuadTreeTerrainBase::editMFHeightError(void)
{
    editMField(HeightErrorFieldMask, _mfHeightError);

    return &_mfHeightError;
}

const MFReal32 *QuadTreeTerrainBase::getMFHeightError(void) const
{
    return &_mfHeightError;
}

#ifdef OSG_1_COMPAT
MFReal32 *QuadTreeTerrainBase::getMFHeightError(void)
{
    return this->editMFHeightError();
}
#endif

MFReal32 *QuadTreeTerrainBase::editMFHeightQuad(void)
{
    editMField(HeightQuadFieldMask, _mfHeightQuad);

    return &_mfHeightQuad;
}

const MFReal32 *QuadTreeTerrainBase::getMFHeightQuad(void) const
{
    return &_mfHeightQuad;
}

#ifdef OSG_1_COMPAT
MFReal32 *QuadTreeTerrainBase::getMFHeightQuad(void)
{
    return this->editMFHeightQuad();
}
#endif

SFUInt32 *QuadTreeTerrainBase::editSFWidth(void)
{
    editSField(WidthFieldMask);

    return &_sfWidth;
}

const SFUInt32 *QuadTreeTerrainBase::getSFWidth(void) const
{
    return &_sfWidth;
}

#ifdef OSG_1_COMPAT
SFUInt32 *QuadTreeTerrainBase::getSFWidth(void)
{
    return this->editSFWidth();
}
#endif

SFUInt32 *QuadTreeTerrainBase::editSFLevel(void)
{
    editSField(LevelFieldMask);

    return &_sfLevel;
}

const SFUInt32 *QuadTreeTerrainBase::getSFLevel(void) const
{
    return &_sfLevel;
}

#ifdef OSG_1_COMPAT
SFUInt32 *QuadTreeTerrainBase::getSFLevel(void)
{
    return this->editSFLevel();
}
#endif

SFReal32 *QuadTreeTerrainBase::editSFDetail(void)
{
    editSField(DetailFieldMask);

    return &_sfDetail;
}

const SFReal32 *QuadTreeTerrainBase::getSFDetail(void) const
{
    return &_sfDetail;
}

#ifdef OSG_1_COMPAT
SFReal32 *QuadTreeTerrainBase::getSFDetail(void)
{
    return this->editSFDetail();
}
#endif

SFInt32 *QuadTreeTerrainBase::editSFBorderDetail(void)
{
    editSField(BorderDetailFieldMask);

    return &_sfBorderDetail;
}

const SFInt32 *QuadTreeTerrainBase::getSFBorderDetail(void) const
{
    return &_sfBorderDetail;
}

#ifdef OSG_1_COMPAT
SFInt32 *QuadTreeTerrainBase::getSFBorderDetail(void)
{
    return this->editSFBorderDetail();
}
#endif

SFReal32 *QuadTreeTerrainBase::editSFVertexSpacing(void)
{
    editSField(VertexSpacingFieldMask);

    return &_sfVertexSpacing;
}

const SFReal32 *QuadTreeTerrainBase::getSFVertexSpacing(void) const
{
    return &_sfVertexSpacing;
}

#ifdef OSG_1_COMPAT
SFReal32 *QuadTreeTerrainBase::getSFVertexSpacing(void)
{
    return this->editSFVertexSpacing();
}
#endif

//! Get the QuadTreeTerrain::_sfHeightVertices field.
const SFGeoVectorPropertyPtr *QuadTreeTerrainBase::getSFHeightVertices(void) const
{
    return &_sfHeightVertices;
}

SFBool *QuadTreeTerrainBase::editSFGeoMorphing(void)
{
    editSField(GeoMorphingFieldMask);

    return &_sfGeoMorphing;
}

const SFBool *QuadTreeTerrainBase::getSFGeoMorphing(void) const
{
    return &_sfGeoMorphing;
}

#ifdef OSG_1_COMPAT
SFBool *QuadTreeTerrainBase::getSFGeoMorphing(void)
{
    return this->editSFGeoMorphing();
}
#endif

SFPnt3f *QuadTreeTerrainBase::editSFBoundMin(void)
{
    editSField(BoundMinFieldMask);

    return &_sfBoundMin;
}

const SFPnt3f *QuadTreeTerrainBase::getSFBoundMin(void) const
{
    return &_sfBoundMin;
}

#ifdef OSG_1_COMPAT
SFPnt3f *QuadTreeTerrainBase::getSFBoundMin(void)
{
    return this->editSFBoundMin();
}
#endif

SFPnt3f *QuadTreeTerrainBase::editSFBoundMax(void)
{
    editSField(BoundMaxFieldMask);

    return &_sfBoundMax;
}

const SFPnt3f *QuadTreeTerrainBase::getSFBoundMax(void) const
{
    return &_sfBoundMax;
}

#ifdef OSG_1_COMPAT
SFPnt3f *QuadTreeTerrainBase::getSFBoundMax(void)
{
    return this->editSFBoundMax();
}
#endif

SFPnt3f *QuadTreeTerrainBase::editSFEyePoint(void)
{
    editSField(EyePointFieldMask);

    return &_sfEyePoint;
}

const SFPnt3f *QuadTreeTerrainBase::getSFEyePoint(void) const
{
    return &_sfEyePoint;
}

#ifdef OSG_1_COMPAT
SFPnt3f *QuadTreeTerrainBase::getSFEyePoint(void)
{
    return this->editSFEyePoint();
}
#endif

SFReal32 *QuadTreeTerrainBase::editSFEyeHeight(void)
{
    editSField(EyeHeightFieldMask);

    return &_sfEyeHeight;
}

const SFReal32 *QuadTreeTerrainBase::getSFEyeHeight(void) const
{
    return &_sfEyeHeight;
}

#ifdef OSG_1_COMPAT
SFReal32 *QuadTreeTerrainBase::getSFEyeHeight(void)
{
    return this->editSFEyeHeight();
}
#endif

SFBool *QuadTreeTerrainBase::editSFEyePointValid(void)
{
    editSField(EyePointValidFieldMask);

    return &_sfEyePointValid;
}

const SFBool *QuadTreeTerrainBase::getSFEyePointValid(void) const
{
    return &_sfEyePointValid;
}

#ifdef OSG_1_COMPAT
SFBool *QuadTreeTerrainBase::getSFEyePointValid(void)
{
    return this->editSFEyePointValid();
}
#endif

SFReal32 *QuadTreeTerrainBase::editSFOriginX(void)
{
    editSField(OriginXFieldMask);

    return &_sfOriginX;
}

const SFReal32 *QuadTreeTerrainBase::getSFOriginX(void) const
{
    return &_sfOriginX;
}

#ifdef OSG_1_COMPAT
SFReal32 *QuadTreeTerrainBase::getSFOriginX(void)
{
    return this->editSFOriginX();
}
#endif

SFReal32 *QuadTreeTerrainBase::editSFOriginY(void)
{
    editSField(OriginYFieldMask);

    return &_sfOriginY;
}

const SFReal32 *QuadTreeTerrainBase::getSFOriginY(void) const
{
    return &_sfOriginY;
}

#ifdef OSG_1_COMPAT
SFReal32 *QuadTreeTerrainBase::getSFOriginY(void)
{
    return this->editSFOriginY();
}
#endif

SFReal32 *QuadTreeTerrainBase::editSFOriginTexX(void)
{
    editSField(OriginTexXFieldMask);

    return &_sfOriginTexX;
}

const SFReal32 *QuadTreeTerrainBase::getSFOriginTexX(void) const
{
    return &_sfOriginTexX;
}

#ifdef OSG_1_COMPAT
SFReal32 *QuadTreeTerrainBase::getSFOriginTexX(void)
{
    return this->editSFOriginTexX();
}
#endif

SFReal32 *QuadTreeTerrainBase::editSFOriginTexY(void)
{
    editSField(OriginTexYFieldMask);

    return &_sfOriginTexY;
}

const SFReal32 *QuadTreeTerrainBase::getSFOriginTexY(void) const
{
    return &_sfOriginTexY;
}

#ifdef OSG_1_COMPAT
SFReal32 *QuadTreeTerrainBase::getSFOriginTexY(void)
{
    return this->editSFOriginTexY();
}
#endif

SFReal32 *QuadTreeTerrainBase::editSFTexSpacing(void)
{
    editSField(TexSpacingFieldMask);

    return &_sfTexSpacing;
}

const SFReal32 *QuadTreeTerrainBase::getSFTexSpacing(void) const
{
    return &_sfTexSpacing;
}

#ifdef OSG_1_COMPAT
SFReal32 *QuadTreeTerrainBase::getSFTexSpacing(void)
{
    return this->editSFTexSpacing();
}
#endif

SFReal32 *QuadTreeTerrainBase::editSFTexYSpacing(void)
{
    editSField(TexYSpacingFieldMask);

    return &_sfTexYSpacing;
}

const SFReal32 *QuadTreeTerrainBase::getSFTexYSpacing(void) const
{
    return &_sfTexYSpacing;
}

#ifdef OSG_1_COMPAT
SFReal32 *QuadTreeTerrainBase::getSFTexYSpacing(void)
{
    return this->editSFTexYSpacing();
}
#endif

SFBool *QuadTreeTerrainBase::editSFUpdateTerrain(void)
{
    editSField(UpdateTerrainFieldMask);

    return &_sfUpdateTerrain;
}

const SFBool *QuadTreeTerrainBase::getSFUpdateTerrain(void) const
{
    return &_sfUpdateTerrain;
}

#ifdef OSG_1_COMPAT
SFBool *QuadTreeTerrainBase::getSFUpdateTerrain(void)
{
    return this->editSFUpdateTerrain();
}
#endif

SFBool *QuadTreeTerrainBase::editSFPerPixelLighting(void)
{
    editSField(PerPixelLightingFieldMask);

    return &_sfPerPixelLighting;
}

const SFBool *QuadTreeTerrainBase::getSFPerPixelLighting(void) const
{
    return &_sfPerPixelLighting;
}

#ifdef OSG_1_COMPAT
SFBool *QuadTreeTerrainBase::getSFPerPixelLighting(void)
{
    return this->editSFPerPixelLighting();
}
#endif


void QuadTreeTerrainBase::pushToField(      FieldContainerPtrConstArg pNewElement,
                                    const UInt32                    uiFieldId  )
{
    Inherited::pushToField(pNewElement, uiFieldId);

    if(uiFieldId == HeightDataFieldId)
    {
        static_cast<QuadTreeTerrain *>(this)->setHeightData(
            cast_dynamic<ImagePtr>(pNewElement));
    }
    if(uiFieldId == HeightVerticesFieldId)
    {
        static_cast<QuadTreeTerrain *>(this)->setHeightVertices(
            cast_dynamic<GeoVectorPropertyPtr>(pNewElement));
    }
}

void QuadTreeTerrainBase::insertIntoMField(const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::insertIntoMField(uiIndex, pNewElement, uiFieldId);

}

void QuadTreeTerrainBase::replaceInMField (const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::replaceInMField(uiIndex, pNewElement, uiFieldId);

}

void QuadTreeTerrainBase::replaceInMField (      FieldContainerPtrConstArg pOldElement,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::replaceInMField(pOldElement, pNewElement, uiFieldId);

}

void QuadTreeTerrainBase::removeFromMField(const UInt32 uiIndex,
                                         const UInt32 uiFieldId)
{
    Inherited::removeFromMField(uiIndex, uiFieldId);

}

void QuadTreeTerrainBase::removeFromMField(      FieldContainerPtrConstArg pElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::removeFromMField(pElement, uiFieldId);

}

void QuadTreeTerrainBase::clearField(const UInt32 uiFieldId)
{
    Inherited::clearField(uiFieldId);

    if(uiFieldId == HeightDataFieldId)
    {
        static_cast<QuadTreeTerrain *>(this)->setHeightData(NullFC);
    }
    if(uiFieldId == HeightVerticesFieldId)
    {
        static_cast<QuadTreeTerrain *>(this)->setHeightVertices(NullFC);
    }
}





/*------------------------------ access -----------------------------------*/

UInt32 QuadTreeTerrainBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (HeightDataFieldMask & whichField))
    {
        returnValue += _sfHeightData.getBinSize();
    }
    if(FieldBits::NoField != (HeightScaleFieldMask & whichField))
    {
        returnValue += _sfHeightScale.getBinSize();
    }
    if(FieldBits::NoField != (HeightErrorFieldMask & whichField))
    {
        returnValue += _mfHeightError.getBinSize();
    }
    if(FieldBits::NoField != (HeightQuadFieldMask & whichField))
    {
        returnValue += _mfHeightQuad.getBinSize();
    }
    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        returnValue += _sfWidth.getBinSize();
    }
    if(FieldBits::NoField != (LevelFieldMask & whichField))
    {
        returnValue += _sfLevel.getBinSize();
    }
    if(FieldBits::NoField != (DetailFieldMask & whichField))
    {
        returnValue += _sfDetail.getBinSize();
    }
    if(FieldBits::NoField != (BorderDetailFieldMask & whichField))
    {
        returnValue += _sfBorderDetail.getBinSize();
    }
    if(FieldBits::NoField != (VertexSpacingFieldMask & whichField))
    {
        returnValue += _sfVertexSpacing.getBinSize();
    }
    if(FieldBits::NoField != (HeightVerticesFieldMask & whichField))
    {
        returnValue += _sfHeightVertices.getBinSize();
    }
    if(FieldBits::NoField != (GeoMorphingFieldMask & whichField))
    {
        returnValue += _sfGeoMorphing.getBinSize();
    }
    if(FieldBits::NoField != (BoundMinFieldMask & whichField))
    {
        returnValue += _sfBoundMin.getBinSize();
    }
    if(FieldBits::NoField != (BoundMaxFieldMask & whichField))
    {
        returnValue += _sfBoundMax.getBinSize();
    }
    if(FieldBits::NoField != (EyePointFieldMask & whichField))
    {
        returnValue += _sfEyePoint.getBinSize();
    }
    if(FieldBits::NoField != (EyeHeightFieldMask & whichField))
    {
        returnValue += _sfEyeHeight.getBinSize();
    }
    if(FieldBits::NoField != (EyePointValidFieldMask & whichField))
    {
        returnValue += _sfEyePointValid.getBinSize();
    }
    if(FieldBits::NoField != (OriginXFieldMask & whichField))
    {
        returnValue += _sfOriginX.getBinSize();
    }
    if(FieldBits::NoField != (OriginYFieldMask & whichField))
    {
        returnValue += _sfOriginY.getBinSize();
    }
    if(FieldBits::NoField != (OriginTexXFieldMask & whichField))
    {
        returnValue += _sfOriginTexX.getBinSize();
    }
    if(FieldBits::NoField != (OriginTexYFieldMask & whichField))
    {
        returnValue += _sfOriginTexY.getBinSize();
    }
    if(FieldBits::NoField != (TexSpacingFieldMask & whichField))
    {
        returnValue += _sfTexSpacing.getBinSize();
    }
    if(FieldBits::NoField != (TexYSpacingFieldMask & whichField))
    {
        returnValue += _sfTexYSpacing.getBinSize();
    }
    if(FieldBits::NoField != (UpdateTerrainFieldMask & whichField))
    {
        returnValue += _sfUpdateTerrain.getBinSize();
    }
    if(FieldBits::NoField != (PerPixelLightingFieldMask & whichField))
    {
        returnValue += _sfPerPixelLighting.getBinSize();
    }

    return returnValue;
}

void QuadTreeTerrainBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (HeightDataFieldMask & whichField))
    {
        _sfHeightData.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HeightScaleFieldMask & whichField))
    {
        _sfHeightScale.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HeightErrorFieldMask & whichField))
    {
        _mfHeightError.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HeightQuadFieldMask & whichField))
    {
        _mfHeightQuad.copyToBin(pMem);
    }
    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        _sfWidth.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LevelFieldMask & whichField))
    {
        _sfLevel.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DetailFieldMask & whichField))
    {
        _sfDetail.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BorderDetailFieldMask & whichField))
    {
        _sfBorderDetail.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VertexSpacingFieldMask & whichField))
    {
        _sfVertexSpacing.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HeightVerticesFieldMask & whichField))
    {
        _sfHeightVertices.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GeoMorphingFieldMask & whichField))
    {
        _sfGeoMorphing.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BoundMinFieldMask & whichField))
    {
        _sfBoundMin.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BoundMaxFieldMask & whichField))
    {
        _sfBoundMax.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EyePointFieldMask & whichField))
    {
        _sfEyePoint.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EyeHeightFieldMask & whichField))
    {
        _sfEyeHeight.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EyePointValidFieldMask & whichField))
    {
        _sfEyePointValid.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OriginXFieldMask & whichField))
    {
        _sfOriginX.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OriginYFieldMask & whichField))
    {
        _sfOriginY.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OriginTexXFieldMask & whichField))
    {
        _sfOriginTexX.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OriginTexYFieldMask & whichField))
    {
        _sfOriginTexY.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TexSpacingFieldMask & whichField))
    {
        _sfTexSpacing.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TexYSpacingFieldMask & whichField))
    {
        _sfTexYSpacing.copyToBin(pMem);
    }
    if(FieldBits::NoField != (UpdateTerrainFieldMask & whichField))
    {
        _sfUpdateTerrain.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PerPixelLightingFieldMask & whichField))
    {
        _sfPerPixelLighting.copyToBin(pMem);
    }
}

void QuadTreeTerrainBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (HeightDataFieldMask & whichField))
    {
        _sfHeightData.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HeightScaleFieldMask & whichField))
    {
        _sfHeightScale.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HeightErrorFieldMask & whichField))
    {
        _mfHeightError.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HeightQuadFieldMask & whichField))
    {
        _mfHeightQuad.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        _sfWidth.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LevelFieldMask & whichField))
    {
        _sfLevel.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DetailFieldMask & whichField))
    {
        _sfDetail.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BorderDetailFieldMask & whichField))
    {
        _sfBorderDetail.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VertexSpacingFieldMask & whichField))
    {
        _sfVertexSpacing.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HeightVerticesFieldMask & whichField))
    {
        _sfHeightVertices.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GeoMorphingFieldMask & whichField))
    {
        _sfGeoMorphing.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BoundMinFieldMask & whichField))
    {
        _sfBoundMin.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BoundMaxFieldMask & whichField))
    {
        _sfBoundMax.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EyePointFieldMask & whichField))
    {
        _sfEyePoint.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EyeHeightFieldMask & whichField))
    {
        _sfEyeHeight.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EyePointValidFieldMask & whichField))
    {
        _sfEyePointValid.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OriginXFieldMask & whichField))
    {
        _sfOriginX.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OriginYFieldMask & whichField))
    {
        _sfOriginY.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OriginTexXFieldMask & whichField))
    {
        _sfOriginTexX.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OriginTexYFieldMask & whichField))
    {
        _sfOriginTexY.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TexSpacingFieldMask & whichField))
    {
        _sfTexSpacing.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TexYSpacingFieldMask & whichField))
    {
        _sfTexYSpacing.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (UpdateTerrainFieldMask & whichField))
    {
        _sfUpdateTerrain.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PerPixelLightingFieldMask & whichField))
    {
        _sfPerPixelLighting.copyFromBin(pMem);
    }
}

//! create an empty new instance of the class, do not copy the prototype
QuadTreeTerrainPtr QuadTreeTerrainBase::createEmpty(void) 
{ 
    QuadTreeTerrainPtr returnValue; 
    
    newPtr<QuadTreeTerrain>(returnValue); 

    return returnValue; 
}

FieldContainerPtr QuadTreeTerrainBase::shallowCopy(void) const 
{ 
    QuadTreeTerrainPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const QuadTreeTerrain *>(this)); 

    return returnValue; 
}



/*------------------------- constructors ----------------------------------*/

QuadTreeTerrainBase::QuadTreeTerrainBase(void) :
    Inherited(),
    _sfHeightData(),
    _sfHeightScale(Real32(1.0f)),
    _mfHeightError(),
    _mfHeightQuad(),
    _sfWidth(UInt32(0)),
    _sfLevel(UInt32(1)),
    _sfDetail(Real32(22.0f)),
    _sfBorderDetail(Int32(0)),
    _sfVertexSpacing(Real32(0.1f)),
    _sfHeightVertices(),
    _sfGeoMorphing(bool(false)),
    _sfBoundMin(),
    _sfBoundMax(),
    _sfEyePoint(),
    _sfEyeHeight(Real32(0.0f)),
    _sfEyePointValid(bool(false)),
    _sfOriginX(Real32(0.0f)),
    _sfOriginY(Real32(0.0f)),
    _sfOriginTexX(Real32(0.0f)),
    _sfOriginTexY(Real32(0.0f)),
    _sfTexSpacing(Real32(1.0f)),
    _sfTexYSpacing(Real32(1.0f)),
    _sfUpdateTerrain(bool(true)),
    _sfPerPixelLighting(bool(true))
{
}

QuadTreeTerrainBase::QuadTreeTerrainBase(const QuadTreeTerrainBase &source) :
    Inherited(source),
    _sfHeightData(),
    _sfHeightScale(source._sfHeightScale),
    _mfHeightError(source._mfHeightError),
    _mfHeightQuad(source._mfHeightQuad),
    _sfWidth(source._sfWidth),
    _sfLevel(source._sfLevel),
    _sfDetail(source._sfDetail),
    _sfBorderDetail(source._sfBorderDetail),
    _sfVertexSpacing(source._sfVertexSpacing),
    _sfHeightVertices(),
    _sfGeoMorphing(source._sfGeoMorphing),
    _sfBoundMin(source._sfBoundMin),
    _sfBoundMax(source._sfBoundMax),
    _sfEyePoint(source._sfEyePoint),
    _sfEyeHeight(source._sfEyeHeight),
    _sfEyePointValid(source._sfEyePointValid),
    _sfOriginX(source._sfOriginX),
    _sfOriginY(source._sfOriginY),
    _sfOriginTexX(source._sfOriginTexX),
    _sfOriginTexY(source._sfOriginTexY),
    _sfTexSpacing(source._sfTexSpacing),
    _sfTexYSpacing(source._sfTexYSpacing),
    _sfUpdateTerrain(source._sfUpdateTerrain),
    _sfPerPixelLighting(source._sfPerPixelLighting)
{
}

/*-------------------------- destructors ----------------------------------*/

QuadTreeTerrainBase::~QuadTreeTerrainBase(void)
{
}

void QuadTreeTerrainBase::onCreate(const QuadTreeTerrain *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {

        this->setHeightData(source->getHeightData());

        this->setHeightVertices(source->getHeightVertices());
    }
}

#ifdef OSG_MT_FIELDCONTAINERPTR
void QuadTreeTerrainBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo,
                                        UInt32             uiCopyOffset)
{
    this->execSync(static_cast<QuadTreeTerrainBase *>(&oFrom),
                   whichField, 
                   syncMode, 
                   uiSyncInfo,
                   uiCopyOffset);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
void QuadTreeTerrainBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<QuadTreeTerrainBase *>(&oFrom), 
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif

#if 0
void QuadTreeTerrainBase::execBeginEditV(ConstFieldMaskArg whichField,
                                       UInt32            uiAspect,
                                       UInt32            uiContainerSize)
{
    this->execBeginEdit(whichField, uiAspect, uiContainerSize);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr QuadTreeTerrainBase::createAspectCopy(void) const
{
    QuadTreeTerrainPtr returnValue; 

    newAspectCopy(returnValue, 
                  dynamic_cast<const QuadTreeTerrain *>(this)); 

    return returnValue; 
}
#endif

void QuadTreeTerrainBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<QuadTreeTerrain *>(this)->setHeightData(NullFC);

    static_cast<QuadTreeTerrain *>(this)->setHeightVertices(NullFC);
}


#include "OSGSField.ins"
#include "OSGMField.ins"

#if defined(OSG_TMPL_STATIC_MEMBER_NEEDS_FUNCTION_INSTANTIATION) || \
    defined(OSG_TMPL_STATIC_MEMBER_NEEDS_CLASS_INSTANTIATION   )

#include "OSGSFieldFuncs.ins"
#include "OSGMFieldFuncs.ins"
#endif

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<QuadTreeTerrainPtr>::_type("QuadTreeTerrainPtr", "GeometryPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(QuadTreeTerrainPtr)

OSG_FIELD_DLLEXPORT_DEF1(SField, QuadTreeTerrainPtr);
OSG_FIELD_DLLEXPORT_DEF1(MField, QuadTreeTerrainPtr);

OSG_END_NAMESPACE


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h 120 2006-09-18 08:12:52Z vossg $";
    static Char8 cvsid_hpp       [] = OSGQUADTREETERRAINBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGQUADTREETERRAINBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGQUADTREETERRAINFIELDS_HEADER_CVSID;
}
