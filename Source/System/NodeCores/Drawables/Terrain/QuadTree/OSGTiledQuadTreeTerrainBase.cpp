/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TiledQuadTreeTerrain!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILETILEDQUADTREETERRAININST

#include <stdlib.h>
#include <stdio.h>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>



#include <OSGImage.h> // HeightTiles Class
#include <OSGMaterial.h> // HeightTextures Class

#include "OSGTiledQuadTreeTerrainBase.h"
#include "OSGTiledQuadTreeTerrain.h"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::TiledQuadTreeTerrain
    Tiled terrain node core.
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var ImagePtr        TiledQuadTreeTerrainBase::_mfHeightTiles
    Terrain tile array.
*/
/*! \var MaterialPtr     TiledQuadTreeTerrainBase::_mfHeightTextures
    Terrain textures.
*/
/*! \var UInt32          TiledQuadTreeTerrainBase::_sfSizeX
    x-size of 2-dimensional tile array.
*/
/*! \var UInt32          TiledQuadTreeTerrainBase::_sfSizeY
    y-size of 2-dimensional tile array.
*/
/*! \var Real32          TiledQuadTreeTerrainBase::_sfHeightScale
    
*/
/*! \var Real32          TiledQuadTreeTerrainBase::_sfVertexSpacing
    
*/
/*! \var bool            TiledQuadTreeTerrainBase::_sfGeoMorphing
    
*/
/*! \var Real32          TiledQuadTreeTerrainBase::_sfDetail
    Detail of terrain tesselation.
*/
/*! \var Int32           TiledQuadTreeTerrainBase::_sfCurrentX
    
*/
/*! \var Int32           TiledQuadTreeTerrainBase::_sfCurrentY
    
*/
/*! \var Int32           TiledQuadTreeTerrainBase::_sfSizeROI
    Number of tiles (0, 1, 2, 3) around current eye point.
*/
/*! \var bool            TiledQuadTreeTerrainBase::_sfUpdate
    Perform any updates (tiling, terrain tiles).
*/
/*! \var bool            TiledQuadTreeTerrainBase::_sfUpdateTerrain
    Update terrain tiles in the next frame.
*/
/*! \var bool            TiledQuadTreeTerrainBase::_sfPerPixelLighting
    Do per-pixel lighting with normalmap; otherwise generate per-vertex
    normals.
*/

void TiledQuadTreeTerrainBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFImagePtr::Description(
        MFImagePtr::getClassType(),
        "heightTiles",
        "Terrain tile array.\n",
        HeightTilesFieldId, HeightTilesFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&TiledQuadTreeTerrainBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&TiledQuadTreeTerrainBase::getMFHeightTiles));

    oType.addInitialDesc(pDesc);

    pDesc = new MFMaterialPtr::Description(
        MFMaterialPtr::getClassType(),
        "heightTextures",
        "Terrain textures.\n",
        HeightTexturesFieldId, HeightTexturesFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&TiledQuadTreeTerrainBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&TiledQuadTreeTerrainBase::getMFHeightTextures));

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFUInt32 *(TiledQuadTreeTerrainBase::*GetSFSizeXF)(void) const;

    GetSFSizeXF GetSFSizeX = &TiledQuadTreeTerrainBase::getSFSizeX;
#endif

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "sizeX",
        "x-size of 2-dimensional tile array.\n",
        SizeXFieldId, SizeXFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TiledQuadTreeTerrainBase::editSFSizeX),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFSizeX));
#else
        reinterpret_cast<FieldGetMethodSig >(&TiledQuadTreeTerrainBase::getSFSizeX));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFUInt32 *(TiledQuadTreeTerrainBase::*GetSFSizeYF)(void) const;

    GetSFSizeYF GetSFSizeY = &TiledQuadTreeTerrainBase::getSFSizeY;
#endif

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "sizeY",
        "y-size of 2-dimensional tile array.\n",
        SizeYFieldId, SizeYFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TiledQuadTreeTerrainBase::editSFSizeY),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFSizeY));
#else
        reinterpret_cast<FieldGetMethodSig >(&TiledQuadTreeTerrainBase::getSFSizeY));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFReal32 *(TiledQuadTreeTerrainBase::*GetSFHeightScaleF)(void) const;

    GetSFHeightScaleF GetSFHeightScale = &TiledQuadTreeTerrainBase::getSFHeightScale;
#endif

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "heightScale",
        "",
        HeightScaleFieldId, HeightScaleFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TiledQuadTreeTerrainBase::editSFHeightScale),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFHeightScale));
#else
        reinterpret_cast<FieldGetMethodSig >(&TiledQuadTreeTerrainBase::getSFHeightScale));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFReal32 *(TiledQuadTreeTerrainBase::*GetSFVertexSpacingF)(void) const;

    GetSFVertexSpacingF GetSFVertexSpacing = &TiledQuadTreeTerrainBase::getSFVertexSpacing;
#endif

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "vertexSpacing",
        "",
        VertexSpacingFieldId, VertexSpacingFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TiledQuadTreeTerrainBase::editSFVertexSpacing),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFVertexSpacing));
#else
        reinterpret_cast<FieldGetMethodSig >(&TiledQuadTreeTerrainBase::getSFVertexSpacing));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFBool *(TiledQuadTreeTerrainBase::*GetSFGeoMorphingF)(void) const;

    GetSFGeoMorphingF GetSFGeoMorphing = &TiledQuadTreeTerrainBase::getSFGeoMorphing;
#endif

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "geoMorphing",
        "",
        GeoMorphingFieldId, GeoMorphingFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TiledQuadTreeTerrainBase::editSFGeoMorphing),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFGeoMorphing));
#else
        reinterpret_cast<FieldGetMethodSig >(&TiledQuadTreeTerrainBase::getSFGeoMorphing));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFReal32 *(TiledQuadTreeTerrainBase::*GetSFDetailF)(void) const;

    GetSFDetailF GetSFDetail = &TiledQuadTreeTerrainBase::getSFDetail;
#endif

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "detail",
        "Detail of terrain tesselation.\n",
        DetailFieldId, DetailFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TiledQuadTreeTerrainBase::editSFDetail),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFDetail));
#else
        reinterpret_cast<FieldGetMethodSig >(&TiledQuadTreeTerrainBase::getSFDetail));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFInt32 *(TiledQuadTreeTerrainBase::*GetSFCurrentXF)(void) const;

    GetSFCurrentXF GetSFCurrentX = &TiledQuadTreeTerrainBase::getSFCurrentX;
#endif

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "currentX",
        "",
        CurrentXFieldId, CurrentXFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TiledQuadTreeTerrainBase::editSFCurrentX),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFCurrentX));
#else
        reinterpret_cast<FieldGetMethodSig >(&TiledQuadTreeTerrainBase::getSFCurrentX));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFInt32 *(TiledQuadTreeTerrainBase::*GetSFCurrentYF)(void) const;

    GetSFCurrentYF GetSFCurrentY = &TiledQuadTreeTerrainBase::getSFCurrentY;
#endif

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "currentY",
        "",
        CurrentYFieldId, CurrentYFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TiledQuadTreeTerrainBase::editSFCurrentY),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFCurrentY));
#else
        reinterpret_cast<FieldGetMethodSig >(&TiledQuadTreeTerrainBase::getSFCurrentY));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFInt32 *(TiledQuadTreeTerrainBase::*GetSFSizeROIF)(void) const;

    GetSFSizeROIF GetSFSizeROI = &TiledQuadTreeTerrainBase::getSFSizeROI;
#endif

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "sizeROI",
        "Number of tiles (0, 1, 2, 3) around current eye point.\n",
        SizeROIFieldId, SizeROIFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TiledQuadTreeTerrainBase::editSFSizeROI),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFSizeROI));
#else
        reinterpret_cast<FieldGetMethodSig >(&TiledQuadTreeTerrainBase::getSFSizeROI));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFBool *(TiledQuadTreeTerrainBase::*GetSFUpdateF)(void) const;

    GetSFUpdateF GetSFUpdate = &TiledQuadTreeTerrainBase::getSFUpdate;
#endif

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "update",
        "Perform any updates (tiling, terrain tiles).\n",
        UpdateFieldId, UpdateFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TiledQuadTreeTerrainBase::editSFUpdate),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFUpdate));
#else
        reinterpret_cast<FieldGetMethodSig >(&TiledQuadTreeTerrainBase::getSFUpdate));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFBool *(TiledQuadTreeTerrainBase::*GetSFUpdateTerrainF)(void) const;

    GetSFUpdateTerrainF GetSFUpdateTerrain = &TiledQuadTreeTerrainBase::getSFUpdateTerrain;
#endif

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "updateTerrain",
        "Update terrain tiles in the next frame.\n",
        UpdateTerrainFieldId, UpdateTerrainFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TiledQuadTreeTerrainBase::editSFUpdateTerrain),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFUpdateTerrain));
#else
        reinterpret_cast<FieldGetMethodSig >(&TiledQuadTreeTerrainBase::getSFUpdateTerrain));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFBool *(TiledQuadTreeTerrainBase::*GetSFPerPixelLightingF)(void) const;

    GetSFPerPixelLightingF GetSFPerPixelLighting = &TiledQuadTreeTerrainBase::getSFPerPixelLighting;
#endif

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "perPixelLighting",
        "Do per-pixel lighting with normalmap; otherwise generate per-vertex normals.\n",
        PerPixelLightingFieldId, PerPixelLightingFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TiledQuadTreeTerrainBase::editSFPerPixelLighting),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFPerPixelLighting));
#else
        reinterpret_cast<FieldGetMethodSig >(&TiledQuadTreeTerrainBase::getSFPerPixelLighting));
#endif

    oType.addInitialDesc(pDesc);
}


TiledQuadTreeTerrainBase::TypeObject TiledQuadTreeTerrainBase::_type(true,
    TiledQuadTreeTerrainBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &TiledQuadTreeTerrainBase::createEmpty,
    TiledQuadTreeTerrain::initMethod,
    (InitalInsertDescFunc) &TiledQuadTreeTerrainBase::classDescInserter,
    false,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"TiledQuadTreeTerrain\"\n"
    "\tparent=\"MaterialGroup\"\n"
    "\tlibrary=\"Drawable\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"false\"\n"
    ">\n"
    "Tiled terrain node core.\n"
    "\t<Field\n"
    "\t\tname=\"heightTiles\"\n"
    "\t\ttype=\"ImagePtr\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tTerrain tile array.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"heightTextures\"\n"
    "\t\ttype=\"MaterialPtr\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tTerrain textures.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"sizeX\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tx-size of 2-dimensional tile array.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"sizeY\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\ty-size of 2-dimensional tile array.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"heightScale\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1.0f\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"vertexSpacing\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.1f\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"geoMorphing\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"detail\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"22.0f\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tDetail of terrain tesselation.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"currentX\"\n"
    "\t\ttype=\"Int32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"currentY\"\n"
    "\t\ttype=\"Int32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"sizeROI\"\n"
    "\t\ttype=\"Int32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tNumber of tiles (0, 1, 2, 3) around current eye point.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"update\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tPerform any updates (tiling, terrain tiles).\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"updateTerrain\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tUpdate terrain tiles in the next frame.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"perPixelLighting\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tDo per-pixel lighting with normalmap; otherwise generate per-vertex normals.\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "Tiled terrain node core.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &TiledQuadTreeTerrainBase::getType(void)
{
    return _type;
}

const FieldContainerType &TiledQuadTreeTerrainBase::getType(void) const
{
    return _type;
}

UInt32 TiledQuadTreeTerrainBase::getContainerSize(void) const
{
    return sizeof(TiledQuadTreeTerrain);
}

/*------------------------- decorator get ------------------------------*/


//! Get the TiledQuadTreeTerrain::_mfHeightTiles field.
const MFImagePtr *TiledQuadTreeTerrainBase::getMFHeightTiles(void) const
{
    return &_mfHeightTiles;
}

//! Get the TiledQuadTreeTerrain::_mfHeightTextures field.
const MFMaterialPtr *TiledQuadTreeTerrainBase::getMFHeightTextures(void) const
{
    return &_mfHeightTextures;
}

SFUInt32 *TiledQuadTreeTerrainBase::editSFSizeX(void)
{
    editSField(SizeXFieldMask);

    return &_sfSizeX;
}

const SFUInt32 *TiledQuadTreeTerrainBase::getSFSizeX(void) const
{
    return &_sfSizeX;
}

#ifdef OSG_1_COMPAT
SFUInt32            *TiledQuadTreeTerrainBase::getSFSizeX          (void)
{
    return this->editSFSizeX          ();
}
#endif

SFUInt32 *TiledQuadTreeTerrainBase::editSFSizeY(void)
{
    editSField(SizeYFieldMask);

    return &_sfSizeY;
}

const SFUInt32 *TiledQuadTreeTerrainBase::getSFSizeY(void) const
{
    return &_sfSizeY;
}

#ifdef OSG_1_COMPAT
SFUInt32            *TiledQuadTreeTerrainBase::getSFSizeY          (void)
{
    return this->editSFSizeY          ();
}
#endif

SFReal32 *TiledQuadTreeTerrainBase::editSFHeightScale(void)
{
    editSField(HeightScaleFieldMask);

    return &_sfHeightScale;
}

const SFReal32 *TiledQuadTreeTerrainBase::getSFHeightScale(void) const
{
    return &_sfHeightScale;
}

#ifdef OSG_1_COMPAT
SFReal32            *TiledQuadTreeTerrainBase::getSFHeightScale    (void)
{
    return this->editSFHeightScale    ();
}
#endif

SFReal32 *TiledQuadTreeTerrainBase::editSFVertexSpacing(void)
{
    editSField(VertexSpacingFieldMask);

    return &_sfVertexSpacing;
}

const SFReal32 *TiledQuadTreeTerrainBase::getSFVertexSpacing(void) const
{
    return &_sfVertexSpacing;
}

#ifdef OSG_1_COMPAT
SFReal32            *TiledQuadTreeTerrainBase::getSFVertexSpacing  (void)
{
    return this->editSFVertexSpacing  ();
}
#endif

SFBool *TiledQuadTreeTerrainBase::editSFGeoMorphing(void)
{
    editSField(GeoMorphingFieldMask);

    return &_sfGeoMorphing;
}

const SFBool *TiledQuadTreeTerrainBase::getSFGeoMorphing(void) const
{
    return &_sfGeoMorphing;
}

#ifdef OSG_1_COMPAT
SFBool              *TiledQuadTreeTerrainBase::getSFGeoMorphing    (void)
{
    return this->editSFGeoMorphing    ();
}
#endif

SFReal32 *TiledQuadTreeTerrainBase::editSFDetail(void)
{
    editSField(DetailFieldMask);

    return &_sfDetail;
}

const SFReal32 *TiledQuadTreeTerrainBase::getSFDetail(void) const
{
    return &_sfDetail;
}

#ifdef OSG_1_COMPAT
SFReal32            *TiledQuadTreeTerrainBase::getSFDetail         (void)
{
    return this->editSFDetail         ();
}
#endif

SFInt32 *TiledQuadTreeTerrainBase::editSFCurrentX(void)
{
    editSField(CurrentXFieldMask);

    return &_sfCurrentX;
}

const SFInt32 *TiledQuadTreeTerrainBase::getSFCurrentX(void) const
{
    return &_sfCurrentX;
}

#ifdef OSG_1_COMPAT
SFInt32             *TiledQuadTreeTerrainBase::getSFCurrentX       (void)
{
    return this->editSFCurrentX       ();
}
#endif

SFInt32 *TiledQuadTreeTerrainBase::editSFCurrentY(void)
{
    editSField(CurrentYFieldMask);

    return &_sfCurrentY;
}

const SFInt32 *TiledQuadTreeTerrainBase::getSFCurrentY(void) const
{
    return &_sfCurrentY;
}

#ifdef OSG_1_COMPAT
SFInt32             *TiledQuadTreeTerrainBase::getSFCurrentY       (void)
{
    return this->editSFCurrentY       ();
}
#endif

SFInt32 *TiledQuadTreeTerrainBase::editSFSizeROI(void)
{
    editSField(SizeROIFieldMask);

    return &_sfSizeROI;
}

const SFInt32 *TiledQuadTreeTerrainBase::getSFSizeROI(void) const
{
    return &_sfSizeROI;
}

#ifdef OSG_1_COMPAT
SFInt32             *TiledQuadTreeTerrainBase::getSFSizeROI        (void)
{
    return this->editSFSizeROI        ();
}
#endif

SFBool *TiledQuadTreeTerrainBase::editSFUpdate(void)
{
    editSField(UpdateFieldMask);

    return &_sfUpdate;
}

const SFBool *TiledQuadTreeTerrainBase::getSFUpdate(void) const
{
    return &_sfUpdate;
}

#ifdef OSG_1_COMPAT
SFBool              *TiledQuadTreeTerrainBase::getSFUpdate         (void)
{
    return this->editSFUpdate         ();
}
#endif

SFBool *TiledQuadTreeTerrainBase::editSFUpdateTerrain(void)
{
    editSField(UpdateTerrainFieldMask);

    return &_sfUpdateTerrain;
}

const SFBool *TiledQuadTreeTerrainBase::getSFUpdateTerrain(void) const
{
    return &_sfUpdateTerrain;
}

#ifdef OSG_1_COMPAT
SFBool              *TiledQuadTreeTerrainBase::getSFUpdateTerrain  (void)
{
    return this->editSFUpdateTerrain  ();
}
#endif

SFBool *TiledQuadTreeTerrainBase::editSFPerPixelLighting(void)
{
    editSField(PerPixelLightingFieldMask);

    return &_sfPerPixelLighting;
}

const SFBool *TiledQuadTreeTerrainBase::getSFPerPixelLighting(void) const
{
    return &_sfPerPixelLighting;
}

#ifdef OSG_1_COMPAT
SFBool              *TiledQuadTreeTerrainBase::getSFPerPixelLighting(void)
{
    return this->editSFPerPixelLighting();
}
#endif


void TiledQuadTreeTerrainBase::pushToField(      FieldContainerPtrConstArg pNewElement,
                                    const UInt32                    uiFieldId  )
{
    Inherited::pushToField(pNewElement, uiFieldId);

    if(uiFieldId == HeightTilesFieldId)
    {
        static_cast<TiledQuadTreeTerrain *>(this)->pushToHeightTiles(
            cast_dynamic<ImagePtr>(pNewElement));
    }
    if(uiFieldId == HeightTexturesFieldId)
    {
        static_cast<TiledQuadTreeTerrain *>(this)->pushToHeightTextures(
            cast_dynamic<MaterialPtr>(pNewElement));
    }
}

void TiledQuadTreeTerrainBase::insertIntoMField(const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::insertIntoMField(uiIndex, pNewElement, uiFieldId);

    if(uiFieldId == HeightTilesFieldId)
    {
        static_cast<TiledQuadTreeTerrain *>(this)->insertIntoHeightTiles(
            uiIndex,
            cast_dynamic<ImagePtr>(pNewElement));
    }
    if(uiFieldId == HeightTexturesFieldId)
    {
        static_cast<TiledQuadTreeTerrain *>(this)->insertIntoHeightTextures(
            uiIndex,
            cast_dynamic<MaterialPtr>(pNewElement));
    }
}

void TiledQuadTreeTerrainBase::replaceInMField (const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::replaceInMField(uiIndex, pNewElement, uiFieldId);

    if(uiFieldId == HeightTilesFieldId)
    {
        static_cast<TiledQuadTreeTerrain *>(this)->replaceInHeightTiles(
            uiIndex,
            cast_dynamic<ImagePtr>(pNewElement));
    }
    if(uiFieldId == HeightTexturesFieldId)
    {
        static_cast<TiledQuadTreeTerrain *>(this)->replaceInHeightTextures(
            uiIndex,
            cast_dynamic<MaterialPtr>(pNewElement));
    }
}

void TiledQuadTreeTerrainBase::replaceInMField (      FieldContainerPtrConstArg pOldElement,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::replaceInMField(pOldElement, pNewElement, uiFieldId);

    if(uiFieldId == HeightTilesFieldId)
    {
        static_cast<TiledQuadTreeTerrain *>(this)->replaceInHeightTiles(
            cast_dynamic<ImagePtr>(pOldElement),
            cast_dynamic<ImagePtr>(pNewElement));
    }
    if(uiFieldId == HeightTexturesFieldId)
    {
        static_cast<TiledQuadTreeTerrain *>(this)->replaceInHeightTextures(
            cast_dynamic<MaterialPtr>(pOldElement),
            cast_dynamic<MaterialPtr>(pNewElement));
    }
}

void TiledQuadTreeTerrainBase::removeFromMField(const UInt32 uiIndex,
                                         const UInt32 uiFieldId)
{
    Inherited::removeFromMField(uiIndex, uiFieldId);

    if(uiFieldId == HeightTilesFieldId)
    {
        static_cast<TiledQuadTreeTerrain *>(this)->removeFromHeightTiles(
            uiIndex);
    }
    if(uiFieldId == HeightTexturesFieldId)
    {
        static_cast<TiledQuadTreeTerrain *>(this)->removeFromHeightTextures(
            uiIndex);
    }
}

void TiledQuadTreeTerrainBase::removeFromMField(      FieldContainerPtrConstArg pElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::removeFromMField(pElement, uiFieldId);

    if(uiFieldId == HeightTilesFieldId)
    {
        static_cast<TiledQuadTreeTerrain *>(this)->removeFromHeightTiles(
            cast_dynamic<ImagePtr>(pElement));
    }
    if(uiFieldId == HeightTexturesFieldId)
    {
        static_cast<TiledQuadTreeTerrain *>(this)->removeFromHeightTextures(
            cast_dynamic<MaterialPtr>(pElement));
    }
}

void TiledQuadTreeTerrainBase::clearField(const UInt32 uiFieldId)
{
    Inherited::clearField(uiFieldId);

    if(uiFieldId == HeightTilesFieldId)
    {
        static_cast<TiledQuadTreeTerrain *>(this)->clearHeightTiles();
    }
    if(uiFieldId == HeightTexturesFieldId)
    {
        static_cast<TiledQuadTreeTerrain *>(this)->clearHeightTextures();
    }
}

void TiledQuadTreeTerrainBase::pushToHeightTiles(ImagePtrConstArg value)
{
    if(value == NullFC)
        return;

    editMField(HeightTilesFieldMask, _mfHeightTiles);

    addRef(value);

    _mfHeightTiles.push_back(value);
}

void TiledQuadTreeTerrainBase::insertIntoHeightTiles(UInt32                uiIndex,
                                                   ImagePtrConstArg value   )
{
    if(value == NullFC)
        return;

    editMField(HeightTilesFieldMask, _mfHeightTiles);

    MFImagePtr::iterator fieldIt = _mfHeightTiles.begin();

    addRef(value);

    fieldIt += uiIndex;

    _mfHeightTiles.insert(fieldIt, value);
}

void TiledQuadTreeTerrainBase::replaceInHeightTiles(UInt32                uiIndex,
                                                       ImagePtrConstArg value   )
{
    if(value == NullFC)
        return;

    if(uiIndex >= _mfHeightTiles.size())
        return;

    editMField(HeightTilesFieldMask, _mfHeightTiles);

    addRef(value);

    subRef(_mfHeightTiles[uiIndex]);

    _mfHeightTiles[uiIndex] = value;
}

void TiledQuadTreeTerrainBase::replaceInHeightTiles(ImagePtrConstArg pOldElem,
                                                        ImagePtrConstArg pNewElem)
{
    if(pNewElem == NullFC)
        return;

    Int32  elemIdx = _mfHeightTiles.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(HeightTilesFieldMask, _mfHeightTiles);

        MFImagePtr::iterator fieldIt = _mfHeightTiles.begin();

        fieldIt += elemIdx;

        addRef(pNewElem);
        subRef(pOldElem);

        (*fieldIt) = pNewElem;
    }
}

void TiledQuadTreeTerrainBase::removeFromHeightTiles(UInt32 uiIndex)
{
    if(uiIndex < _mfHeightTiles.size())
    {
        editMField(HeightTilesFieldMask, _mfHeightTiles);

        MFImagePtr::iterator fieldIt = _mfHeightTiles.begin();

        fieldIt += uiIndex;

        subRef(*fieldIt);

        _mfHeightTiles.erase(fieldIt);
    }
}

void TiledQuadTreeTerrainBase::removeFromHeightTiles(ImagePtrConstArg value)
{
    Int32 iElemIdx = _mfHeightTiles.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(HeightTilesFieldMask, _mfHeightTiles);

        MFImagePtr::iterator fieldIt = _mfHeightTiles.begin();

        fieldIt += iElemIdx;

        subRef(*fieldIt);

        _mfHeightTiles.erase(fieldIt);
    }
}
void TiledQuadTreeTerrainBase::clearHeightTiles(void)
{
    editMField(HeightTilesFieldMask, _mfHeightTiles);

    MFImagePtr::iterator       fieldIt  = _mfHeightTiles.begin();
    MFImagePtr::const_iterator fieldEnd = _mfHeightTiles.end  ();

    while(fieldIt != fieldEnd)
    {
        subRef(*fieldIt);

        ++fieldIt;
    }

    _mfHeightTiles.clear();
}

void TiledQuadTreeTerrainBase::pushToHeightTextures(MaterialPtrConstArg value)
{
    if(value == NullFC)
        return;

    editMField(HeightTexturesFieldMask, _mfHeightTextures);

    addRef(value);

    _mfHeightTextures.push_back(value);
}

void TiledQuadTreeTerrainBase::insertIntoHeightTextures(UInt32                uiIndex,
                                                   MaterialPtrConstArg value   )
{
    if(value == NullFC)
        return;

    editMField(HeightTexturesFieldMask, _mfHeightTextures);

    MFMaterialPtr::iterator fieldIt = _mfHeightTextures.begin();

    addRef(value);

    fieldIt += uiIndex;

    _mfHeightTextures.insert(fieldIt, value);
}

void TiledQuadTreeTerrainBase::replaceInHeightTextures(UInt32                uiIndex,
                                                       MaterialPtrConstArg value   )
{
    if(value == NullFC)
        return;

    if(uiIndex >= _mfHeightTextures.size())
        return;

    editMField(HeightTexturesFieldMask, _mfHeightTextures);

    addRef(value);

    subRef(_mfHeightTextures[uiIndex]);

    _mfHeightTextures[uiIndex] = value;
}

void TiledQuadTreeTerrainBase::replaceInHeightTextures(MaterialPtrConstArg pOldElem,
                                                        MaterialPtrConstArg pNewElem)
{
    if(pNewElem == NullFC)
        return;

    Int32  elemIdx = _mfHeightTextures.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(HeightTexturesFieldMask, _mfHeightTextures);

        MFMaterialPtr::iterator fieldIt = _mfHeightTextures.begin();

        fieldIt += elemIdx;

        addRef(pNewElem);
        subRef(pOldElem);

        (*fieldIt) = pNewElem;
    }
}

void TiledQuadTreeTerrainBase::removeFromHeightTextures(UInt32 uiIndex)
{
    if(uiIndex < _mfHeightTextures.size())
    {
        editMField(HeightTexturesFieldMask, _mfHeightTextures);

        MFMaterialPtr::iterator fieldIt = _mfHeightTextures.begin();

        fieldIt += uiIndex;

        subRef(*fieldIt);

        _mfHeightTextures.erase(fieldIt);
    }
}

void TiledQuadTreeTerrainBase::removeFromHeightTextures(MaterialPtrConstArg value)
{
    Int32 iElemIdx = _mfHeightTextures.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(HeightTexturesFieldMask, _mfHeightTextures);

        MFMaterialPtr::iterator fieldIt = _mfHeightTextures.begin();

        fieldIt += iElemIdx;

        subRef(*fieldIt);

        _mfHeightTextures.erase(fieldIt);
    }
}
void TiledQuadTreeTerrainBase::clearHeightTextures(void)
{
    editMField(HeightTexturesFieldMask, _mfHeightTextures);

    MFMaterialPtr::iterator       fieldIt  = _mfHeightTextures.begin();
    MFMaterialPtr::const_iterator fieldEnd = _mfHeightTextures.end  ();

    while(fieldIt != fieldEnd)
    {
        subRef(*fieldIt);

        ++fieldIt;
    }

    _mfHeightTextures.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 TiledQuadTreeTerrainBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (HeightTilesFieldMask & whichField))
    {
        returnValue += _mfHeightTiles.getBinSize();
    }
    if(FieldBits::NoField != (HeightTexturesFieldMask & whichField))
    {
        returnValue += _mfHeightTextures.getBinSize();
    }
    if(FieldBits::NoField != (SizeXFieldMask & whichField))
    {
        returnValue += _sfSizeX.getBinSize();
    }
    if(FieldBits::NoField != (SizeYFieldMask & whichField))
    {
        returnValue += _sfSizeY.getBinSize();
    }
    if(FieldBits::NoField != (HeightScaleFieldMask & whichField))
    {
        returnValue += _sfHeightScale.getBinSize();
    }
    if(FieldBits::NoField != (VertexSpacingFieldMask & whichField))
    {
        returnValue += _sfVertexSpacing.getBinSize();
    }
    if(FieldBits::NoField != (GeoMorphingFieldMask & whichField))
    {
        returnValue += _sfGeoMorphing.getBinSize();
    }
    if(FieldBits::NoField != (DetailFieldMask & whichField))
    {
        returnValue += _sfDetail.getBinSize();
    }
    if(FieldBits::NoField != (CurrentXFieldMask & whichField))
    {
        returnValue += _sfCurrentX.getBinSize();
    }
    if(FieldBits::NoField != (CurrentYFieldMask & whichField))
    {
        returnValue += _sfCurrentY.getBinSize();
    }
    if(FieldBits::NoField != (SizeROIFieldMask & whichField))
    {
        returnValue += _sfSizeROI.getBinSize();
    }
    if(FieldBits::NoField != (UpdateFieldMask & whichField))
    {
        returnValue += _sfUpdate.getBinSize();
    }
    if(FieldBits::NoField != (UpdateTerrainFieldMask & whichField))
    {
        returnValue += _sfUpdateTerrain.getBinSize();
    }
    if(FieldBits::NoField != (PerPixelLightingFieldMask & whichField))
    {
        returnValue += _sfPerPixelLighting.getBinSize();
    }

    return returnValue;
}

void TiledQuadTreeTerrainBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (HeightTilesFieldMask & whichField))
    {
        _mfHeightTiles.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HeightTexturesFieldMask & whichField))
    {
        _mfHeightTextures.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SizeXFieldMask & whichField))
    {
        _sfSizeX.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SizeYFieldMask & whichField))
    {
        _sfSizeY.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HeightScaleFieldMask & whichField))
    {
        _sfHeightScale.copyToBin(pMem);
    }
    if(FieldBits::NoField != (VertexSpacingFieldMask & whichField))
    {
        _sfVertexSpacing.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GeoMorphingFieldMask & whichField))
    {
        _sfGeoMorphing.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DetailFieldMask & whichField))
    {
        _sfDetail.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CurrentXFieldMask & whichField))
    {
        _sfCurrentX.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CurrentYFieldMask & whichField))
    {
        _sfCurrentY.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SizeROIFieldMask & whichField))
    {
        _sfSizeROI.copyToBin(pMem);
    }
    if(FieldBits::NoField != (UpdateFieldMask & whichField))
    {
        _sfUpdate.copyToBin(pMem);
    }
    if(FieldBits::NoField != (UpdateTerrainFieldMask & whichField))
    {
        _sfUpdateTerrain.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PerPixelLightingFieldMask & whichField))
    {
        _sfPerPixelLighting.copyToBin(pMem);
    }
}

void TiledQuadTreeTerrainBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (HeightTilesFieldMask & whichField))
    {
        _mfHeightTiles.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HeightTexturesFieldMask & whichField))
    {
        _mfHeightTextures.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SizeXFieldMask & whichField))
    {
        _sfSizeX.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SizeYFieldMask & whichField))
    {
        _sfSizeY.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HeightScaleFieldMask & whichField))
    {
        _sfHeightScale.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (VertexSpacingFieldMask & whichField))
    {
        _sfVertexSpacing.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GeoMorphingFieldMask & whichField))
    {
        _sfGeoMorphing.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DetailFieldMask & whichField))
    {
        _sfDetail.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CurrentXFieldMask & whichField))
    {
        _sfCurrentX.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CurrentYFieldMask & whichField))
    {
        _sfCurrentY.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SizeROIFieldMask & whichField))
    {
        _sfSizeROI.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (UpdateFieldMask & whichField))
    {
        _sfUpdate.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (UpdateTerrainFieldMask & whichField))
    {
        _sfUpdateTerrain.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PerPixelLightingFieldMask & whichField))
    {
        _sfPerPixelLighting.copyFromBin(pMem);
    }
}

//! create an empty new instance of the class, do not copy the prototype
TiledQuadTreeTerrainPtr TiledQuadTreeTerrainBase::createEmpty(void)
{
    TiledQuadTreeTerrainPtr returnValue;

    newPtr<TiledQuadTreeTerrain>(returnValue);

    return returnValue;
}

FieldContainerPtr TiledQuadTreeTerrainBase::shallowCopy(void) const
{
    TiledQuadTreeTerrainPtr returnValue;

    newPtr(returnValue, dynamic_cast<const TiledQuadTreeTerrain *>(this));

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

TiledQuadTreeTerrainBase::TiledQuadTreeTerrainBase(void) :
    Inherited(),
    _mfHeightTiles            (),
    _mfHeightTextures         (),
    _sfSizeX                  (UInt32(1)),
    _sfSizeY                  (UInt32(1)),
    _sfHeightScale            (Real32(1.0f)),
    _sfVertexSpacing          (Real32(0.1f)),
    _sfGeoMorphing            (bool(false)),
    _sfDetail                 (Real32(22.0f)),
    _sfCurrentX               (Int32(0)),
    _sfCurrentY               (Int32(0)),
    _sfSizeROI                (Int32(1)),
    _sfUpdate                 (bool(true)),
    _sfUpdateTerrain          (bool(false)),
    _sfPerPixelLighting       (bool(true))
{
}

TiledQuadTreeTerrainBase::TiledQuadTreeTerrainBase(const TiledQuadTreeTerrainBase &source) :
    Inherited(source),
    _mfHeightTiles            (),
    _mfHeightTextures         (),
    _sfSizeX                  (source._sfSizeX                  ),
    _sfSizeY                  (source._sfSizeY                  ),
    _sfHeightScale            (source._sfHeightScale            ),
    _sfVertexSpacing          (source._sfVertexSpacing          ),
    _sfGeoMorphing            (source._sfGeoMorphing            ),
    _sfDetail                 (source._sfDetail                 ),
    _sfCurrentX               (source._sfCurrentX               ),
    _sfCurrentY               (source._sfCurrentY               ),
    _sfSizeROI                (source._sfSizeROI                ),
    _sfUpdate                 (source._sfUpdate                 ),
    _sfUpdateTerrain          (source._sfUpdateTerrain          ),
    _sfPerPixelLighting       (source._sfPerPixelLighting       )
{
}

/*-------------------------- destructors ----------------------------------*/

TiledQuadTreeTerrainBase::~TiledQuadTreeTerrainBase(void)
{
}

void TiledQuadTreeTerrainBase::onCreate(const TiledQuadTreeTerrain *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {

        MFImagePtr::const_iterator HeightTilesIt  =
            source->_mfHeightTiles.begin();
        MFImagePtr::const_iterator HeightTilesEnd =
            source->_mfHeightTiles.end  ();

        while(HeightTilesIt != HeightTilesEnd)
        {
            this->pushToHeightTiles(*HeightTilesIt);

            ++HeightTilesIt;
        }

        MFMaterialPtr::const_iterator HeightTexturesIt  =
            source->_mfHeightTextures.begin();
        MFMaterialPtr::const_iterator HeightTexturesEnd =
            source->_mfHeightTextures.end  ();

        while(HeightTexturesIt != HeightTexturesEnd)
        {
            this->pushToHeightTextures(*HeightTexturesIt);

            ++HeightTexturesIt;
        }
    }
}

#ifdef OSG_MT_FIELDCONTAINERPTR
void TiledQuadTreeTerrainBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo,
                                        UInt32             uiCopyOffset)
{
    this->execSync(static_cast<TiledQuadTreeTerrainBase *>(&oFrom),
                   whichField,
                   syncMode,
                   uiSyncInfo,
                   uiCopyOffset);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
void TiledQuadTreeTerrainBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<TiledQuadTreeTerrainBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif

#if 0
void TiledQuadTreeTerrainBase::execBeginEditV(ConstFieldMaskArg whichField,
                                       UInt32            uiAspect,
                                       UInt32            uiContainerSize)
{
    this->execBeginEdit(whichField, uiAspect, uiContainerSize);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr TiledQuadTreeTerrainBase::createAspectCopy(void) const
{
    TiledQuadTreeTerrainPtr returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const TiledQuadTreeTerrain *>(this));

    return returnValue;
}
#endif

void TiledQuadTreeTerrainBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<TiledQuadTreeTerrain *>(this)->clearHeightTiles();

    static_cast<TiledQuadTreeTerrain *>(this)->clearHeightTextures();
}


OSG_END_NAMESPACE

#include "OSGSField.ins"
#include "OSGMField.ins"

#if defined(OSG_TMPL_STATIC_MEMBER_NEEDS_FUNCTION_INSTANTIATION) || \
    defined(OSG_TMPL_STATIC_MEMBER_NEEDS_CLASS_INSTANTIATION   )

#include "OSGSFieldFuncs.ins"
#include "OSGMFieldFuncs.ins"
#endif

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<TiledQuadTreeTerrainPtr>::_type("TiledQuadTreeTerrainPtr", "MaterialGroupPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(TiledQuadTreeTerrainPtr)

OSG_FIELD_DLLEXPORT_DEF1(SField, TiledQuadTreeTerrainPtr);
OSG_FIELD_DLLEXPORT_DEF1(MField, TiledQuadTreeTerrainPtr);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id$";
    static Char8 cvsid_hpp       [] = OSGTILEDQUADTREETERRAINBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGTILEDQUADTREETERRAINBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGTILEDQUADTREETERRAINFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE
