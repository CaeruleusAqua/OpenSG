/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TimeSensor!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE



//! access the type of the class
inline
OSG::FieldContainerType &TimeSensorBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 TimeSensorBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 TimeSensorBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the TimeSensor::_sfEnabled field.

inline
bool &TimeSensorBase::editEnabled(void)
{
    editSField(EnabledFieldMask);

    return _sfEnabled.getValue();
}

//! Get the value of the TimeSensor::_sfEnabled field.
inline
      bool  TimeSensorBase::getEnabled(void) const
{
    return _sfEnabled.getValue();
}

//! Set the value of the TimeSensor::_sfEnabled field.
inline
void TimeSensorBase::setEnabled(const bool value)
{
    editSField(EnabledFieldMask);

    _sfEnabled.setValue(value);
}
//! Get the value of the TimeSensor::_sfIsActive field.

inline
bool &TimeSensorBase::editIsActive(void)
{
    editSField(IsActiveFieldMask);

    return _sfIsActive.getValue();
}

//! Get the value of the TimeSensor::_sfIsActive field.
inline
      bool  TimeSensorBase::getIsActive(void) const
{
    return _sfIsActive.getValue();
}

//! Set the value of the TimeSensor::_sfIsActive field.
inline
void TimeSensorBase::setIsActive(const bool value)
{
    editSField(IsActiveFieldMask);

    _sfIsActive.setValue(value);
}
//! Get the value of the TimeSensor::_sfLoop field.

inline
bool &TimeSensorBase::editLoop(void)
{
    editSField(LoopFieldMask);

    return _sfLoop.getValue();
}

//! Get the value of the TimeSensor::_sfLoop field.
inline
      bool  TimeSensorBase::getLoop(void) const
{
    return _sfLoop.getValue();
}

//! Set the value of the TimeSensor::_sfLoop field.
inline
void TimeSensorBase::setLoop(const bool value)
{
    editSField(LoopFieldMask);

    _sfLoop.setValue(value);
}
//! Get the value of the TimeSensor::_sfFraction field.

inline
Real32 &TimeSensorBase::editFraction(void)
{
    editSField(FractionFieldMask);

    return _sfFraction.getValue();
}

//! Get the value of the TimeSensor::_sfFraction field.
inline
      Real32  TimeSensorBase::getFraction(void) const
{
    return _sfFraction.getValue();
}

//! Set the value of the TimeSensor::_sfFraction field.
inline
void TimeSensorBase::setFraction(const Real32 value)
{
    editSField(FractionFieldMask);

    _sfFraction.setValue(value);
}
//! Get the value of the TimeSensor::_sfStartTime field.

inline
Time &TimeSensorBase::editStartTime(void)
{
    editSField(StartTimeFieldMask);

    return _sfStartTime.getValue();
}

//! Get the value of the TimeSensor::_sfStartTime field.
inline
const Time &TimeSensorBase::getStartTime(void) const
{
    return _sfStartTime.getValue();
}

//! Set the value of the TimeSensor::_sfStartTime field.
inline
void TimeSensorBase::setStartTime(const Time &value)
{
    editSField(StartTimeFieldMask);

    _sfStartTime.setValue(value);
}
//! Get the value of the TimeSensor::_sfStopTime field.

inline
Time &TimeSensorBase::editStopTime(void)
{
    editSField(StopTimeFieldMask);

    return _sfStopTime.getValue();
}

//! Get the value of the TimeSensor::_sfStopTime field.
inline
const Time &TimeSensorBase::getStopTime(void) const
{
    return _sfStopTime.getValue();
}

//! Set the value of the TimeSensor::_sfStopTime field.
inline
void TimeSensorBase::setStopTime(const Time &value)
{
    editSField(StopTimeFieldMask);

    _sfStopTime.setValue(value);
}
//! Get the value of the TimeSensor::_sfCycleTime field.

inline
Time &TimeSensorBase::editCycleTime(void)
{
    editSField(CycleTimeFieldMask);

    return _sfCycleTime.getValue();
}

//! Get the value of the TimeSensor::_sfCycleTime field.
inline
const Time &TimeSensorBase::getCycleTime(void) const
{
    return _sfCycleTime.getValue();
}

//! Set the value of the TimeSensor::_sfCycleTime field.
inline
void TimeSensorBase::setCycleTime(const Time &value)
{
    editSField(CycleTimeFieldMask);

    _sfCycleTime.setValue(value);
}
//! Get the value of the TimeSensor::_sfTime field.

inline
Time &TimeSensorBase::editTime(void)
{
    editSField(TimeFieldMask);

    return _sfTime.getValue();
}

//! Get the value of the TimeSensor::_sfTime field.
inline
const Time &TimeSensorBase::getTime(void) const
{
    return _sfTime.getValue();
}

//! Set the value of the TimeSensor::_sfTime field.
inline
void TimeSensorBase::setTime(const Time &value)
{
    editSField(TimeFieldMask);

    _sfTime.setValue(value);
}
//! Get the value of the TimeSensor::_sfCycleInterval field.

inline
Time &TimeSensorBase::editCycleInterval(void)
{
    editSField(CycleIntervalFieldMask);

    return _sfCycleInterval.getValue();
}

//! Get the value of the TimeSensor::_sfCycleInterval field.
inline
const Time &TimeSensorBase::getCycleInterval(void) const
{
    return _sfCycleInterval.getValue();
}

//! Set the value of the TimeSensor::_sfCycleInterval field.
inline
void TimeSensorBase::setCycleInterval(const Time &value)
{
    editSField(CycleIntervalFieldMask);

    _sfCycleInterval.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void TimeSensorBase::execSync (      TimeSensorBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (EnabledFieldMask & whichField))
        _sfEnabled.syncWith(pFrom->_sfEnabled);

    if(FieldBits::NoField != (IsActiveFieldMask & whichField))
        _sfIsActive.syncWith(pFrom->_sfIsActive);

    if(FieldBits::NoField != (LoopFieldMask & whichField))
        _sfLoop.syncWith(pFrom->_sfLoop);

    if(FieldBits::NoField != (FractionFieldMask & whichField))
        _sfFraction.syncWith(pFrom->_sfFraction);

    if(FieldBits::NoField != (StartTimeFieldMask & whichField))
        _sfStartTime.syncWith(pFrom->_sfStartTime);

    if(FieldBits::NoField != (StopTimeFieldMask & whichField))
        _sfStopTime.syncWith(pFrom->_sfStopTime);

    if(FieldBits::NoField != (CycleTimeFieldMask & whichField))
        _sfCycleTime.syncWith(pFrom->_sfCycleTime);

    if(FieldBits::NoField != (TimeFieldMask & whichField))
        _sfTime.syncWith(pFrom->_sfTime);

    if(FieldBits::NoField != (CycleIntervalFieldMask & whichField))
        _sfCycleInterval.syncWith(pFrom->_sfCycleInterval);
}
#endif


inline
const Char8 *TimeSensorBase::getClassname(void)
{
    return "TimeSensor";
}
OSG_GEN_CONTAINERPTR(TimeSensor);

OSG_END_NAMESPACE

