/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class FrameHandler!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE



//! access the type of the class
inline
OSG::FieldContainerType &FrameHandlerBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 FrameHandlerBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 FrameHandlerBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the FrameHandler::_sfFrameCount field.

inline
UInt64 &FrameHandlerBase::editFrameCount(void)
{
    editSField(FrameCountFieldMask);

    return _sfFrameCount.getValue();
}

//! Get the value of the FrameHandler::_sfFrameCount field.
inline
      UInt64  FrameHandlerBase::getFrameCount(void) const
{
    return _sfFrameCount.getValue();
}

//! Set the value of the FrameHandler::_sfFrameCount field.
inline
void FrameHandlerBase::setFrameCount(const UInt64 value)
{
    editSField(FrameCountFieldMask);

    _sfFrameCount.setValue(value);
}
//! Get the value of the FrameHandler::_sfStartTime field.

inline
Time &FrameHandlerBase::editStartTime(void)
{
    editSField(StartTimeFieldMask);

    return _sfStartTime.getValue();
}

//! Get the value of the FrameHandler::_sfStartTime field.
inline
const Time &FrameHandlerBase::getStartTime(void) const
{
    return _sfStartTime.getValue();
}

//! Set the value of the FrameHandler::_sfStartTime field.
inline
void FrameHandlerBase::setStartTime(const Time &value)
{
    editSField(StartTimeFieldMask);

    _sfStartTime.setValue(value);
}
//! Get the value of the FrameHandler::_sfLastTime field.

inline
Time &FrameHandlerBase::editLastTime(void)
{
    editSField(LastTimeFieldMask);

    return _sfLastTime.getValue();
}

//! Get the value of the FrameHandler::_sfLastTime field.
inline
const Time &FrameHandlerBase::getLastTime(void) const
{
    return _sfLastTime.getValue();
}

//! Set the value of the FrameHandler::_sfLastTime field.
inline
void FrameHandlerBase::setLastTime(const Time &value)
{
    editSField(LastTimeFieldMask);

    _sfLastTime.setValue(value);
}
//! Get the value of the FrameHandler::_sfCurrTime field.

inline
Time &FrameHandlerBase::editCurrTime(void)
{
    editSField(CurrTimeFieldMask);

    return _sfCurrTime.getValue();
}

//! Get the value of the FrameHandler::_sfCurrTime field.
inline
const Time &FrameHandlerBase::getCurrTime(void) const
{
    return _sfCurrTime.getValue();
}

//! Set the value of the FrameHandler::_sfCurrTime field.
inline
void FrameHandlerBase::setCurrTime(const Time &value)
{
    editSField(CurrTimeFieldMask);

    _sfCurrTime.setValue(value);
}
//! Get the value of the FrameHandler::_sfTimeStamp field.

inline
Time &FrameHandlerBase::editTimeStamp(void)
{
    editSField(TimeStampFieldMask);

    return _sfTimeStamp.getValue();
}

//! Get the value of the FrameHandler::_sfTimeStamp field.
inline
const Time &FrameHandlerBase::getTimeStamp(void) const
{
    return _sfTimeStamp.getValue();
}

//! Set the value of the FrameHandler::_sfTimeStamp field.
inline
void FrameHandlerBase::setTimeStamp(const Time &value)
{
    editSField(TimeStampFieldMask);

    _sfTimeStamp.setValue(value);
}
//! Get the value of the FrameHandler::_sfTimeScale field.

inline
Time &FrameHandlerBase::editTimeScale(void)
{
    editSField(TimeScaleFieldMask);

    return _sfTimeScale.getValue();
}

//! Get the value of the FrameHandler::_sfTimeScale field.
inline
const Time &FrameHandlerBase::getTimeScale(void) const
{
    return _sfTimeScale.getValue();
}

//! Set the value of the FrameHandler::_sfTimeScale field.
inline
void FrameHandlerBase::setTimeScale(const Time &value)
{
    editSField(TimeScaleFieldMask);

    _sfTimeScale.setValue(value);
}
//! Get the value of the FrameHandler::_sfConstantTimeStep field.

inline
Time &FrameHandlerBase::editConstantTimeStep(void)
{
    editSField(ConstantTimeStepFieldMask);

    return _sfConstantTimeStep.getValue();
}

//! Get the value of the FrameHandler::_sfConstantTimeStep field.
inline
const Time &FrameHandlerBase::getConstantTimeStep(void) const
{
    return _sfConstantTimeStep.getValue();
}

//! Set the value of the FrameHandler::_sfConstantTimeStep field.
inline
void FrameHandlerBase::setConstantTimeStep(const Time &value)
{
    editSField(ConstantTimeStepFieldMask);

    _sfConstantTimeStep.setValue(value);
}
//! Get the value of the FrameHandler::_sfConstantTime field.

inline
bool &FrameHandlerBase::editConstantTime(void)
{
    editSField(ConstantTimeFieldMask);

    return _sfConstantTime.getValue();
}

//! Get the value of the FrameHandler::_sfConstantTime field.
inline
      bool  FrameHandlerBase::getConstantTime(void) const
{
    return _sfConstantTime.getValue();
}

//! Set the value of the FrameHandler::_sfConstantTime field.
inline
void FrameHandlerBase::setConstantTime(const bool value)
{
    editSField(ConstantTimeFieldMask);

    _sfConstantTime.setValue(value);
}
//! Get the value of the FrameHandler::_sfPaused field.

inline
bool &FrameHandlerBase::editPaused(void)
{
    editSField(PausedFieldMask);

    return _sfPaused.getValue();
}

//! Get the value of the FrameHandler::_sfPaused field.
inline
      bool  FrameHandlerBase::getPaused(void) const
{
    return _sfPaused.getValue();
}

//! Set the value of the FrameHandler::_sfPaused field.
inline
void FrameHandlerBase::setPaused(const bool value)
{
    editSField(PausedFieldMask);

    _sfPaused.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void FrameHandlerBase::execSync (      FrameHandlerBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (FrameCountFieldMask & whichField))
        _sfFrameCount.syncWith(pFrom->_sfFrameCount);

    if(FieldBits::NoField != (StartTimeFieldMask & whichField))
        _sfStartTime.syncWith(pFrom->_sfStartTime);

    if(FieldBits::NoField != (LastTimeFieldMask & whichField))
        _sfLastTime.syncWith(pFrom->_sfLastTime);

    if(FieldBits::NoField != (CurrTimeFieldMask & whichField))
        _sfCurrTime.syncWith(pFrom->_sfCurrTime);

    if(FieldBits::NoField != (TimeStampFieldMask & whichField))
        _sfTimeStamp.syncWith(pFrom->_sfTimeStamp);

    if(FieldBits::NoField != (TimeScaleFieldMask & whichField))
        _sfTimeScale.syncWith(pFrom->_sfTimeScale);

    if(FieldBits::NoField != (ConstantTimeStepFieldMask & whichField))
        _sfConstantTimeStep.syncWith(pFrom->_sfConstantTimeStep);

    if(FieldBits::NoField != (ConstantTimeFieldMask & whichField))
        _sfConstantTime.syncWith(pFrom->_sfConstantTime);

    if(FieldBits::NoField != (PausedFieldMask & whichField))
        _sfPaused.syncWith(pFrom->_sfPaused);
}
#endif


inline
const Char8 *FrameHandlerBase::getClassname(void)
{
    return "FrameHandler";
}
OSG_GEN_CONTAINERPTR(FrameHandler);

OSG_END_NAMESPACE

