<?xml version="1.0"?>

<FieldContainer
   name="Skeleton"
   parent="AttachmentContainer"
   library="Dynamics"
   pointerfieldtypes="both"
   structure="concrete"
   systemcomponent="true"
   parentsystemcomponent="true"
   decoratable="false"
   childFields="both"
   parentFields="both"
>
  A Skeleton is simply one (or multiple) node hierarchies that contain some
  SkeletonJoint cores.
  Traversal will jump to the roots (MFRoots) of these hierarchies and traverse
  them, updating the matrix for each joint (MFJointMatrices) in the process.
  A Skeleton assumes exclusive ownership of its joints, but the Skeleton itself
  may be shared.

  <Field
     name="roots"
     type="Node"
     category="pointer"
     cardinality="multi"
     visibility="external"
     access="public"
     >
    The roots of the joint (or bone) hierarchies for the skeleton.
    There should be Nodes with SkeletonJoint cores in the pointed-to
    hierarchies.
  </Field>

  <Field
     name="joints"
     type="SkeletonJoint"
     category="childpointer"
     linkParentField="Skeleton"
     cardinality="multi"
     visibility="external"
     access="public"
     >
    The joints (or bones) of the skeleton. Sorted by their jointId.
    You should never write to this field, Skeleton scans for joints
    whenever the set of roots is modified.
  </Field>

  <Field
     name="jointMatrices"
     type="Matrix"
     category="data"
     cardinality="multi"
     visibility="external"
     access="public"
     >
    Matrices for all joints of the skeleton. Elements correspond to
    joints at the same index in _mfJoints.
    These matrices are absolute, not relative to the parent joint.
    You should never write to this field, Skeleton updates it during
    the RenderActions traversal.
  </Field>

</FieldContainer>
