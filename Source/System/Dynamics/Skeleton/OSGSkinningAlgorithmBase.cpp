/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SkinningAlgorithm!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include "OSGConfig.h"



#include "OSGSkinnedGeometry.h"         // Parent Class

#include "OSGSkinningAlgorithmBase.h"
#include "OSGSkinningAlgorithm.h"

#include <boost/bind.hpp>

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::SkinningAlgorithm
    
 */

/***************************************************************************\
 *                        Field Documentation                              *
\***************************************************************************/

/*! \var SkinnedGeometry * SkinningAlgorithmBase::_sfParent
    
*/


/***************************************************************************\
 *                      FieldType/FieldTrait Instantiation                 *
\***************************************************************************/

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<SkinningAlgorithm *>::_type("SkinningAlgorithmPtr", "AlgorithmPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(SkinningAlgorithm *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           SkinningAlgorithm *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           SkinningAlgorithm *,
                           0);

DataType &FieldTraits< SkinningAlgorithm *, 1 >::getType(void)
{
    return FieldTraits<SkinningAlgorithm *, 0>::getType();
}


OSG_EXPORT_PTR_SFIELD(ChildPointerSField,
                      SkinningAlgorithm *,
                      UnrecordedRefCountPolicy,
                      1);


OSG_EXPORT_PTR_MFIELD(ChildPointerMField,
                      SkinningAlgorithm *,
                      UnrecordedRefCountPolicy,
                      1);


/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

void SkinningAlgorithmBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFParentSkinnedGeometryPtr::Description(
        SFParentSkinnedGeometryPtr::getClassType(),
        "parent",
        "",
        ParentFieldId, ParentFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast     <FieldEditMethodSig>(&SkinningAlgorithm::invalidEditField),
        static_cast     <FieldGetMethodSig >(&SkinningAlgorithm::invalidGetField));

    oType.addInitialDesc(pDesc);
}


SkinningAlgorithmBase::TypeObject SkinningAlgorithmBase::_type(
    SkinningAlgorithmBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    SkinningAlgorithm::initMethod,
    SkinningAlgorithm::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&SkinningAlgorithm::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "   name=\"SkinningAlgorithm\"\n"
    "   parent=\"Algorithm\"\n"
    "   library=\"Dynamics\"\n"
    "   pointerfieldtypes=\"both\"\n"
    "   structure=\"abstract\"\n"
    "   systemcomponent=\"true\"\n"
    "   parentsystemcomponent=\"true\"\n"
    "   decoratable=\"false\"\n"
    "   childFields=\"both\"\n"
    "   parentFields=\"none\"\n"
    ">\n"
    "  <Field\n"
    "     name=\"parent\"\n"
    "     type=\"SkinnedGeometry\"\n"
    "     category=\"parentpointer\"\n"
    "     cardinality=\"single\"\n"
    "     visibility=\"external\"\n"
    "     access=\"none\"\n"
    "     defaultValue=\"NULL\"\n"
    "     >\n"
    "  </Field>\n"
    "\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &SkinningAlgorithmBase::getType(void)
{
    return _type;
}

const FieldContainerType &SkinningAlgorithmBase::getType(void) const
{
    return _type;
}

UInt32 SkinningAlgorithmBase::getContainerSize(void) const
{
    return sizeof(SkinningAlgorithm);
}

/*------------------------- decorator get ------------------------------*/







/*------------------------------ access -----------------------------------*/

UInt32 SkinningAlgorithmBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ParentFieldMask & whichField))
    {
        returnValue += _sfParent.getBinSize();
    }

    return returnValue;
}

void SkinningAlgorithmBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ParentFieldMask & whichField))
    {
        _sfParent.copyToBin(pMem);
    }
}

void SkinningAlgorithmBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ParentFieldMask & whichField))
    {
        _sfParent.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

SkinningAlgorithmBase::SkinningAlgorithmBase(void) :
    Inherited(),
    _sfParent                 (NULL)
{
}

SkinningAlgorithmBase::SkinningAlgorithmBase(const SkinningAlgorithmBase &source) :
    Inherited(source),
    _sfParent                 (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

SkinningAlgorithmBase::~SkinningAlgorithmBase(void)
{
}
/*-------------------------------------------------------------------------*/
/* Parent linking                                                          */

bool SkinningAlgorithmBase::linkParent(
    FieldContainer * const pParent,
    UInt16           const childFieldId,
    UInt16           const parentFieldId )
{
    if(parentFieldId == ParentFieldId)
    {
        SkinnedGeometry * pTypedParent =
            dynamic_cast< SkinnedGeometry * >(pParent);

        if(pTypedParent != NULL)
        {
            FieldContainer *pOldParent =
                _sfParent.getValue         ();

            UInt16 oldChildFieldId =
                _sfParent.getParentFieldPos();

            if(pOldParent != NULL)
            {
                pOldParent->unlinkChild(this, oldChildFieldId);
            }

            editSField(ParentFieldMask);

            _sfParent.setValue(static_cast<SkinnedGeometry *>(pParent), childFieldId);

            return true;
        }

        return false;
    }

    return Inherited::linkParent(pParent, childFieldId, parentFieldId);
}

bool SkinningAlgorithmBase::unlinkParent(
    FieldContainer * const pParent,
    UInt16           const parentFieldId)
{
    if(parentFieldId == ParentFieldId)
    {
        SkinnedGeometry * pTypedParent =
            dynamic_cast< SkinnedGeometry * >(pParent);

        if(pTypedParent != NULL)
        {
            if(_sfParent.getValue() == pParent)
            {
                editSField(ParentFieldMask);

                _sfParent.setValue(NULL, 0xFFFF);

                return true;
            }

            FWARNING(("SkinningAlgorithmBase::unlinkParent: "
                      "Child <-> Parent link inconsistent.\n"));

            return false;
        }

        return false;
    }

    return Inherited::unlinkParent(pParent, parentFieldId);
}



GetFieldHandlePtr SkinningAlgorithmBase::getHandleParent          (void) const
{
    SFParentSkinnedGeometryPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr SkinningAlgorithmBase::editHandleParent         (void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void SkinningAlgorithmBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    SkinningAlgorithm *pThis = static_cast<SkinningAlgorithm *>(this);

    pThis->execSync(static_cast<SkinningAlgorithm *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void SkinningAlgorithmBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


OSG_END_NAMESPACE
