#define yyFlexLexer OSGScanParseSkel_FlexLexer

/* A lexical scanner generated by flex*/

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <iostream>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* Some routines like yy_flex_realloc() are emitted as static but are
   not called by all lexers. This generates warnings in some compilers,
   notably GCC. Arrange to suppress these. */
#ifdef __GNUC__
#define YY_MAY_BE_UNUSED __attribute__((unused))
#else
#define YY_MAY_BE_UNUSED
#endif

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t )) YY_MAY_BE_UNUSED;
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include "OSGScanParseSkelScanner_FlexLexer.h"
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int OSGScanParseLexer::yylex()


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 99
#define YY_END_OF_BUFFER 100
static yyconst short int yy_acclist[527] =
    {   0,
      100,   98,   99,    2,   98,   99,    2,   99,   91,   98,
       99,   98,   99,    3,   98,   99,   98,   99,   96,   98,
       99,   85,   86,   98,   99,   85,   86,   98,   99,   91,
       98,   99,   91,   98,   99,   91,   98,   99,   91,   98,
       99,   91,   98,   99,   91,   98,   99,   91,   98,   99,
       91,   98,   99,   91,   98,   99,   91,   98,   99,   91,
       98,   99,   91,   98,   99,   91,   98,   99,   94,   98,
       99,   95,   98,   99,   91,   98,   99,   91,   98,   99,
       91,   98,   99,   91,   98,   99,   91,   98,   99,   92,
       98,   99,   93,   98,   99,   91,   98,   99,   97,   98,

       99,   97,   99,   97,   98,   99,    2,   91,   87,    3,
       85,   86,   85,   86,   86,   86,   16,   91,   91,   91,
       91,   91,   91,    9,   91,   91,   91,   91,   91,   91,
       91,   13,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   97,   97,   97,   97,   86,   84,   91,   10,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   11,   91,   91,   91,   91,   91,   91,
       91,    1,   91,   91,   91,   91,   91,   91,    6,   91,

       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   90,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   88,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   89,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,    7,   91,   12,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   23,   91,   91,   91,   91,   91,
       15,   91,   91,   14,   91,   25,   91,   91,   91,   91,

       91,   91,   91,   36,   91,   91,   91,   91,   91,   91,
       91,   39,   91,   91,   91,   91,   91,   46,   91,   91,
       91,   91,   91,   91,   91,   57,   91,   91,   91,   91,
       91,   91,   91,   60,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   26,   91,   91,
       29,   91,   30,   91,   31,   91,   91,   74,   91,   71,
       91,   72,   91,   73,   91,   91,   91,   40,   91,   41,
       91,   42,   91,   43,   91,   44,   91,   45,   91,    4,
       91,   47,   91,   91,   50,   91,   51,   91,   52,   91,
       91,   82,   91,   79,   91,   80,   91,   81,   91,   91,

       91,   61,   91,   62,   91,   63,   91,   64,   91,   65,
       91,   66,   91,   91,   17,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   28,   91,   70,
       91,   91,   38,   91,   91,   91,   91,   49,   91,   78,
       91,   91,   59,   91,   83,   91,   19,   91,   91,   91,
       91,   91,   91,    5,   91,   91,   69,   91,   67,   91,
       68,   91,   91,   91,   91,   91,   77,   91,   75,   91,
       76,   91,   91,   91,   91,   91,   91,   91,   18,   91,
       91,   91,   91,   91,   32,   91,   33,   91,   34,   91,
       35,   91,   37,   91,   91,   53,   91,   54,   91,   55,

       91,   56,   91,   58,   91,   91,   91,   91,   20,   91,
        8,   91,   27,   91,   48,   91,   91,   91,   22,   91,
       21,   91,   91,   91,   24,   91
    } ;

static yyconst short int yy_accept[386] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    4,    7,
        9,   12,   14,   17,   19,   22,   26,   30,   33,   36,
       39,   42,   45,   48,   51,   54,   57,   60,   63,   66,
       69,   72,   75,   78,   81,   84,   87,   90,   93,   96,
       99,  102,  104,  107,  108,  109,  109,  110,  110,  111,
      111,  113,  115,  116,  117,  117,  117,  119,  120,  121,
      122,  123,  124,  126,  127,  128,  129,  130,  131,  132,
      134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
      144,  145,  146,  146,  147,  148,  149,  151,  152,  153,
      154,  155,  156,  157,  158,  159,  160,  161,  162,  163,

      164,  165,  166,  167,  168,  169,  170,  171,  172,  173,
      174,  175,  176,  177,  178,  179,  180,  181,  182,  183,
      184,  186,  187,  188,  189,  190,  191,  192,  194,  195,
      196,  197,  198,  199,  201,  202,  203,  204,  205,  206,
      207,  208,  209,  210,  211,  212,  213,  214,  215,  217,
      218,  219,  220,  221,  222,  223,  224,  225,  226,  227,
      228,  229,  230,  231,  232,  233,  234,  235,  237,  238,
      239,  240,  241,  242,  243,  244,  245,  246,  248,  249,
      250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
      260,  261,  262,  263,  264,  266,  268,  269,  270,  271,

      272,  273,  274,  275,  276,  277,  278,  279,  280,  281,
      282,  283,  284,  285,  287,  288,  289,  290,  291,  293,
      294,  296,  298,  299,  300,  301,  302,  303,  304,  306,
      307,  308,  309,  310,  311,  312,  314,  315,  316,  317,
      318,  320,  321,  322,  323,  324,  325,  326,  328,  329,
      330,  331,  332,  333,  334,  336,  337,  338,  339,  340,
      341,  342,  343,  344,  345,  346,  347,  348,  350,  351,
      353,  355,  357,  358,  360,  362,  364,  366,  367,  368,
      370,  372,  374,  376,  378,  380,  382,  384,  385,  387,
      389,  391,  392,  394,  396,  398,  400,  401,  402,  404,

      406,  408,  410,  412,  414,  415,  417,  418,  419,  420,
      421,  422,  423,  424,  425,  426,  427,  428,  430,  432,
      433,  435,  436,  437,  438,  440,  442,  443,  445,  447,
      449,  450,  451,  452,  453,  454,  456,  457,  459,  461,
      463,  464,  465,  466,  467,  469,  471,  473,  474,  475,
      476,  477,  478,  479,  481,  482,  483,  484,  485,  487,
      489,  491,  493,  495,  496,  498,  500,  502,  504,  506,
      507,  508,  509,  511,  513,  515,  517,  518,  519,  521,
      523,  524,  525,  527,  527
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    4,    4,    4,    4,    4,
        4,    2,    4,    5,    6,    4,    4,    4,    1,    4,
        4,    4,    7,    8,    7,    9,    4,   10,   11,   12,
       13,   14,   11,   11,   11,   11,   11,    4,    4,    4,
        4,    4,    4,    4,   15,   16,   17,   18,   19,   20,
       21,    4,   22,    4,    4,   23,   24,   25,   26,   27,
        4,   28,   29,   30,   31,   32,    4,   33,    4,    4,
       34,   35,   36,    4,    4,    4,   37,   38,   39,   40,

       41,   42,   43,    4,   44,    4,    4,   45,   46,   47,
       48,   49,    4,   50,   51,   52,   53,   54,    4,   55,
       56,   57,   58,    4,   59,    4,    1,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,   60,    4,    4,    4,
       61,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,   62,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4
    } ;

static yyconst int yy_meta[63] =
    {   0,
        1,    1,    2,    3,    1,    1,    3,    1,    1,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    1,    1,    1,    4,    4,    4,    4,
        4,    4,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    1,    1,    3,
        3,    3
    } ;

static yyconst short int yy_base[390] =
    {   0,
        0,    0,   61,   68,  460,  459,  520,  523,   63,   70,
        0,   63,    0,   68,   73,  122,   80,  490,  492,  498,
      483,   60,   71,   82,  484,  486,  487,  492,   77,  482,
      523,  523,   52,   73,  463,  456,   68,  523,  523,  448,
      106,  136,  110,  117,    0,  110,  523,    0,    0,  136,
        0,  147,  157,  168,  179,    0,    0,  483,  486,   95,
       81,  478,    0,  474,  194,  480,  476,  470,  211,    0,
       98,  481,  458,  449,  456,  150,  444,  434,  194,  134,
      159,  169,  193,  234,    0,  467,    0,  467,  473,  123,
      465,  475,  441,  440,  439,  441,  107,  448,  436,  138,

      435,  430,  437,  439,  456,  195,  448,  429,  428,  427,
      429,  203,  436,  424,  185,  423,  418,  425,  160,  154,
        0,  421,  419,  421,  413,  411,  414,    0,  436,  433,
      432,  201,  431,    0,  410,  412,  403,  407,  417,  401,
      400,  411,  413,  397,  396,  397,  400,  406,    0,  422,
      417,  423,  393,  395,  386,  390,  400,  384,  383,  394,
      396,  380,  379,  380,  383,  389,  382,    0,  374,  374,
      384,  379,  370,  368,  395,  389,  393,    0,  387,  371,
      367,  376,  376,  369,  398,  360,  368,  361,  239,  370,
      362,  364,  242,  381,    0,    0,  358,  354,  363,  363,

      356,  385,  347,  355,  348,  245,  357,  349,  351,  248,
      338,  102,  349,    0,  352,  362,  335,  367,    0,  358,
        0,    0,  334,  338,  330,  340,  368,  335,    0,  337,
      335,  334,  333,  322,  326,    0,  223,  224,  227,  353,
        0,  321,  325,  317,  327,  355,  322,    0,  324,  322,
      321,  320,  309,  313,    0,  228,  231,  232,  313,  311,
      304,  316,  310,  228,  328,  328,  324,  263,  310,    0,
        0,    0,  295,    0,    0,    0,    0,  305,  305,    0,
        0,    0,    0,    0,    0,    0,  265,  306,    0,    0,
        0,  291,    0,    0,    0,    0,  301,  301,    0,    0,

        0,    0,    0,    0,  302,    0,  290,  321,  296,  294,
      286,  290,  306,  309,  292,  238,  312,    0,  270,  284,
        0,  289,  243,  309,    0,  275,  281,    0,    0,    0,
      284,  270,  270,  276,  279,    0,  293,    0,    0,    0,
      306,  250,  254,  274,    0,    0,    0,  304,  255,  258,
      272,  277,  276,    0,  263,  259,  282,  284,    0,    0,
        0,    0,    0,  271,    0,    0,    0,    0,    0,  192,
      208,  165,    0,    0,    0,    0,  173,  137,    0,    0,
      119,   87,    0,  523,  298,  302,  306,  310,  107
    } ;

static yyconst short int yy_def[390] =
    {   0,
      384,    1,    1,    1,    1,    1,  384,  384,  384,  384,
      385,  386,  387,  384,  384,  384,  384,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      384,  384,  385,  385,  385,  385,  385,  384,  384,  385,
      384,  384,  388,  384,  385,  386,  384,  386,  387,  384,
       16,  384,  384,  384,  384,  389,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  384,  388,
      388,  388,  384,  384,  389,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,

      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,

      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,

      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  385,  385,  385,  385,  385,
      385,  385,  385,    0,  384,  384,  384,  384,  384
    } ;

static yyconst short int yy_nxt[586] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,    8,   15,   16,
       17,   17,   17,   17,   18,   11,   19,   20,   21,   22,
       11,   23,   11,   24,   25,   11,   26,   27,   28,   29,
       30,   11,   11,   31,    8,   32,   11,   11,   11,   11,
       33,   34,   11,   35,   11,   11,   11,   36,   11,   11,
       11,   37,   11,   11,   11,   11,   11,   38,   39,   11,
       11,   40,   41,   42,   44,   44,   43,   47,   41,   41,
       42,   44,   44,   43,   61,   41,   50,   51,   52,   52,
       52,   52,   53,   53,   53,   53,   53,   61,   54,   52,
       52,   52,   52,   52,   62,   71,   61,   48,   55,   63,

       64,   65,   70,   90,   71,   73,   74,   79,   79,   61,
       85,   80,   79,   79,   47,   82,   75,   71,   44,   44,
       55,   88,   11,  260,   89,   90,   71,  261,  120,   11,
       54,   52,   52,   52,   52,   52,   79,   79,   79,   82,
       55,   80,  383,   79,   48,   53,   53,   53,   53,   53,
      120,  132,  139,  140,   56,   54,   52,   52,   52,   52,
       52,   79,   55,  382,   82,   55,   53,   53,   53,   53,
       53,   79,  168,  132,   82,   55,   56,   53,   53,   53,
       53,   53,  143,  381,  144,   83,   55,   55,   84,   84,
       84,   84,   84,  125,  168,   79,   79,   55,  126,   80,

      166,   79,   84,   84,   84,   84,   84,  167,   55,   93,
       94,   95,  380,   96,  150,   97,  379,   98,   99,  178,
      100,  101,  102,  103,  151,  104,  108,  109,  110,  161,
      111,  162,  112,  378,  113,  114,  377,  115,  116,  117,
      118,  178,  119,   84,   84,   84,   84,   84,  157,  158,
      231,  232,  233,  237,  238,  239,  250,  251,  252,  256,
      257,  258,  280,  282,  281,  283,  284,  299,  285,  300,
      301,  303,  302,  304,  310,  315,  316,  322,  323,  339,
      311,  340,  342,  343,  346,  376,  347,  349,  350,  359,
      317,  360,  324,  361,  365,  362,  366,  367,  375,  368,

       45,   45,   46,   46,   46,   46,   49,  374,   49,   49,
       81,   81,   81,   81,  373,  372,  371,  370,  369,  364,
      363,  358,  357,  356,  355,  354,  353,  352,  351,  348,
      345,  344,  341,  338,  337,  336,  335,  334,  333,  332,
      331,  330,  329,  328,  327,  326,  325,  321,  320,  319,
      318,  314,  313,  312,  309,  308,  307,  306,  305,  298,
      297,  296,  295,  294,  293,  292,  291,  290,  289,  288,
      287,  286,  279,  278,  277,  276,  275,  274,  273,  272,
      271,  270,  269,  268,  267,  266,  265,  264,  263,  262,
      259,  255,  254,  253,  249,  248,  247,  246,  245,  244,

      243,  242,  241,  240,  236,  235,  234,  230,  229,  228,
      227,  226,  225,  224,  223,  222,  221,  220,  219,  218,
      217,  216,  215,  214,  213,  212,  211,  210,  209,  208,
      207,  206,  205,  204,  203,  202,  201,  200,  199,  198,
      197,  196,  195,  194,  193,  192,  191,  190,  189,  188,
      187,  186,  185,  184,  183,  182,  181,  180,  179,  177,
      176,  175,  174,  173,  172,  171,  170,  169,  165,  164,
      163,  160,  159,  156,  155,  154,  153,  152,  149,  148,
      147,  146,  145,  142,  141,  138,  137,  136,  135,  134,
      133,  131,  130,  129,  128,  127,  124,  123,  122,  121,

      107,  106,  105,   92,   91,   87,   86,   78,   77,   76,
       72,   69,   68,   67,   66,   60,   59,   58,   57,  384,
       11,   11,    7,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384
    } ;

static yyconst short int yy_chk[586] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    9,    9,    3,   12,    3,    4,
        4,   10,   10,    4,   22,    4,   14,   14,   14,   14,
       14,   14,   15,   15,   15,   15,   15,   34,   17,   17,
       17,   17,   17,   17,   23,   37,   22,   12,   17,   23,

       24,   24,   29,   61,   29,   33,   33,   41,   41,   34,
      389,   41,   43,   41,   46,   43,   34,   37,   44,   44,
       17,   60,    3,  212,   60,   61,   29,  212,   71,    4,
       16,   16,   16,   16,   16,   16,   80,   42,   42,   80,
       16,   42,  382,   42,   46,   50,   50,   50,   50,   50,
       71,   90,   97,   97,   16,   52,   52,   52,   52,   52,
       52,   81,   16,  381,   81,   52,   53,   53,   53,   53,
       53,   82,  120,   90,   82,   53,   16,   54,   54,   54,
       54,   54,  100,  378,  100,   55,   54,   52,   55,   55,
       55,   55,   55,   76,  120,   79,   79,   53,   76,   79,

      119,   79,   83,   83,   83,   83,   83,  119,   54,   65,
       65,   65,  377,   65,  106,   65,  372,   65,   65,  132,
       65,   65,   65,   65,  106,   65,   69,   69,   69,  115,
       69,  115,   69,  371,   69,   69,  370,   69,   69,   69,
       69,  132,   69,   84,   84,   84,   84,   84,  112,  112,
      189,  189,  189,  193,  193,  193,  206,  206,  206,  210,
      210,  210,  237,  238,  237,  238,  239,  256,  239,  256,
      257,  258,  257,  258,  264,  268,  268,  287,  287,  316,
      264,  316,  319,  319,  323,  364,  323,  326,  326,  342,
      268,  342,  287,  343,  349,  343,  349,  350,  358,  350,

      385,  385,  386,  386,  386,  386,  387,  357,  387,  387,
      388,  388,  388,  388,  356,  355,  353,  352,  351,  348,
      344,  341,  337,  335,  334,  333,  332,  331,  327,  324,
      322,  320,  317,  315,  314,  313,  312,  311,  310,  309,
      308,  307,  305,  298,  297,  292,  288,  279,  278,  273,
      269,  267,  266,  265,  263,  262,  261,  260,  259,  254,
      253,  252,  251,  250,  249,  247,  246,  245,  244,  243,
      242,  240,  235,  234,  233,  232,  231,  230,  228,  227,
      226,  225,  224,  223,  220,  218,  217,  216,  215,  213,
      211,  209,  208,  207,  205,  204,  203,  202,  201,  200,

      199,  198,  197,  194,  192,  191,  190,  188,  187,  186,
      185,  184,  183,  182,  181,  180,  179,  177,  176,  175,
      174,  173,  172,  171,  170,  169,  167,  166,  165,  164,
      163,  162,  161,  160,  159,  158,  157,  156,  155,  154,
      153,  152,  151,  150,  148,  147,  146,  145,  144,  143,
      142,  141,  140,  139,  138,  137,  136,  135,  133,  131,
      130,  129,  127,  126,  125,  124,  123,  122,  118,  117,
      116,  114,  113,  111,  110,  109,  108,  107,  105,  104,
      103,  102,  101,   99,   98,   96,   95,   94,   93,   92,
       91,   89,   88,   86,   78,   77,   75,   74,   73,   72,

       68,   67,   66,   64,   62,   59,   58,   40,   36,   35,
       30,   28,   27,   26,   25,   21,   20,   19,   18,    7,
        6,    5,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  384
    } ;

#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
#define INITIAL 0
/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *             Copyright (C) 2000-2002 by the OpenSG Forum                   *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/* Author: Patrick Daehne */
#line 42 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"

#ifdef OSG_WIN32_ICL
#pragma warning (disable : 111 810)
#endif

#define YY_NEVER_INTERACTIVE 1
#define YY_NO_UNISTD_H 1       // Makes problems on Windows

#include "OSGScanParseLexer.h"

//OSG_BEGIN_NAMESPACE

#ifdef __sgi
#pragma set woff 1174,1552,1110,1209
#endif

#if defined(OSG_LINUX_ICC) || defined(OSG_WIN32_ICL)
#pragma warning( disable : 193 810 177 279 111 )
#endif

// This function removes leading and trailing quotes from strings
// as well as the escape sequences \\ and \"
static char *stripEscapes(char *s)
{
    char *src = s + 1, *dst = s;
    while (true)
    {
        char c = *src++;
        if ((c == '\\') && ((*src == '\\') || (*src == '"')))
            c = *src++;
        else if (c == '"')
            break;
        *dst++ = c;
    }
    *dst = '\0';
    return s;
}

#define NODE 1

#define HEADER 2

/* Not VRML conformant */
/* Not VRML conformant */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 102 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"



    if (expectToken != 0)
    {
        int tmp = expectToken;
        expectToken = 0;
        return tmp;
    }



	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &std::cin;

		if ( ! yyout )
			yyout = &std::cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 385 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 523 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 113 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(HEADER);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 114 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(HEADER);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 115 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->stringVal = yytext; return TOK_HEADER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 117 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); return TOK_PROFILE;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 118 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); return TOK_COMPONENT;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 119 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); return TOK_META;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 121 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); return TOK_PROTO;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 122 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); return TOK_EXTERNPROTO;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 123 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); return TOK_IS;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 125 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); return TOK_DEF;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 126 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); return TOK_USE;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 128 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); return TOK_ROUTE;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 129 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); return TOK_TO;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 131 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); return TOK_IMPORT;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 132 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); return TOK_EXPORT;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 133 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); return TOK_AS;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 135 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); return TOK_eventIn;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 136 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); return TOK_eventIn;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 137 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); return TOK_eventOut;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 138 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); return TOK_eventOut;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 139 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); return TOK_exposedField;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 140 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); return TOK_exposedField;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 141 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); return TOK_field;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 142 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); return TOK_field;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 144 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFBool; return TOK_MFBool;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 145 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFColor; return TOK_MFColor;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 146 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFColorRGBA; return TOK_MFColorRGBA;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 147 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFDouble; return TOK_MFDouble;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 148 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFFloat; return TOK_MFFloat;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 149 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFImage; return TOK_MFImage;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 150 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFInt32; return TOK_MFInt32;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 151 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFMatrix3d; return TOK_MFMatrix3d;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 152 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFMatrix3f; return TOK_MFMatrix3f;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 153 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFMatrix4d; return TOK_MFMatrix4d;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 154 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFMatrix4f; return TOK_MFMatrix4f;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 155 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFNode; return TOK_MFNode;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 156 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFRotation; return TOK_MFRotation;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 157 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFString; return TOK_MFString;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 158 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFTime; return TOK_MFTime;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 159 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFVec2d; return TOK_MFVec2d;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 160 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFVec2f; return TOK_MFVec2f;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 161 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFVec3d; return TOK_MFVec3d;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 162 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFVec3f; return TOK_MFVec3f;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 163 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFVec4d; return TOK_MFVec4d;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 164 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFVec4f; return TOK_MFVec4f;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 165 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFBool; return TOK_SFBool;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 166 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFColor; return TOK_SFColor;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 167 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFColorRGBA; return TOK_SFColorRGBA;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 168 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFDouble; return TOK_SFDouble;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 169 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFFloat; return TOK_SFFloat;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 170 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFImage; return TOK_SFImage;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 171 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFInt32; return TOK_SFInt32;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 172 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFMatrix3d; return TOK_SFMatrix3d;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 173 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFMatrix3f; return TOK_SFMatrix3f;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 174 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFMatrix4d; return TOK_SFMatrix4d;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 175 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFMatrix4f; return TOK_SFMatrix4f;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 176 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFNode; return TOK_SFNode;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 177 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFRotation; return TOK_SFRotation;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 178 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFString; return TOK_SFString;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 179 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFTime; return TOK_SFTime;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 180 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFVec2d; return TOK_SFVec2d;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 181 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFVec2f; return TOK_SFVec2f;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 182 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFVec3d; return TOK_SFVec3d;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 183 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFVec3f; return TOK_SFVec3f;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 184 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFVec4d; return TOK_SFVec4d;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 185 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFVec4f; return TOK_SFVec4f;
	YY_BREAK
/* The following types are not VRML conformant */
case 67:
YY_RULE_SETUP
#line 187 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFColorRGBA; return TOK_MFColorRGBA;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 188 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFColor4i; return TOK_MFColor4i;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 189 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFColor; return TOK_MFColor;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 190 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFMatrix4f; return TOK_MFMatrix4f;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 191 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFPnt2f; return TOK_MFPnt2f;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 192 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFPnt3f; return TOK_MFPnt3f;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 193 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFPnt4f; return TOK_MFPnt4f;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 194 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_MFPlane; return TOK_MFPlane;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 195 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFColorRGBA; return TOK_SFColorRGBA;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 196 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFColor4i; return TOK_SFColor4i;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 197 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFColor; return TOK_SFColor;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 198 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFMatrix4f; return TOK_SFMatrix4f;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 199 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFPnt2f; return TOK_SFPnt2f;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 200 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFPnt3f; return TOK_SFPnt3f;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 201 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFPnt4f; return TOK_SFPnt4f;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 202 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFPlane; return TOK_SFPlane;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 203 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->intVal = TOK_SFVolume; return TOK_SFVolume;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 205 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
{
                         BEGIN(NODE);
                         lvalp->intVal = strtoul(yytext, 0, 0);
                         if (imageIntsExpected > 0)
                             if ((--imageIntsExpected == 0) || (*yytext == '-')) /* Not VRML conformant */
                             {
                                 imageIntsExpected = 0;
                                 expectToken = TOK_ImageFinished;
                             }
                         return TOK_hex;
                     }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 216 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
{
                         BEGIN(NODE);
                         lvalp->intVal = strtoul(yytext, 0, 0);
                         if (imageIntsExpected > 0)
                             if ((--imageIntsExpected == 0) || (*yytext == '-')) /* Not VRML conformant */
                             {
                                 imageIntsExpected = 0;
                                 expectToken = TOK_ImageFinished;
                             }
                         return TOK_int32;
                     }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 227 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->doubleVal = strtod(yytext, 0); return TOK_double;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 228 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->stringVal = stripEscapes(yytext); return TOK_string;
	YY_BREAK
/* Not VRML conformant */
case 88:
YY_RULE_SETUP
#line 230 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->boolVal = true; return TOK_bool;
	YY_BREAK
/* Not VRML conformant */
case 89:
YY_RULE_SETUP
#line 232 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->boolVal = false; return TOK_bool;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 233 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); return TOK_NULL;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 234 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); lvalp->stringVal = yytext; return TOK_Id;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 236 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); return '{';
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 237 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); return '}';
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 238 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); return '[';
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 239 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); return ']';
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 240 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
BEGIN(NODE); return '.';
	YY_BREAK
/*":" BEGIN(NODE); return ':';*/
case 97:
YY_RULE_SETUP
#line 243 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"

	YY_BREAK
case 98:
YY_RULE_SETUP
#line 245 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
return TOK_Error;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 247 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(NODE):
			case YY_STATE_EOF(HEADER):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 385 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 385 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 384);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}

void yyFlexLexer::yyrestart( std::istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	std::cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 247 "Source/System/FileIO/ScanParseSkel/OSGScanParseSkelScanner.ll"


//OSG_END_NAMESPACE

#ifdef OSG_WIN32_ICL
#pragma warning (default : 111 810)
#endif
