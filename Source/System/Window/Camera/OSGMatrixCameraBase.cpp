/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class MatrixCamera!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEMATRIXCAMERAINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>




#include "OSGMatrixCameraBase.h"
#include "OSGMatrixCamera.h"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::MatrixCamera
    \ingroup GrpSystemWindowCameras

    The Matrix Camera class, see \ref PageSystemWindowCameraMatrix for
    a description.

    The used matrices are stored in the _sfModelviewMatrix and
    _sfProjectionMatrix Fields.
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var Matrix          MatrixCameraBase::_sfProjectionMatrix
    
*/

/*! \var Matrix          MatrixCameraBase::_sfModelviewMatrix
    
*/


void MatrixCameraBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


#ifdef OSG_1_COMPAT
    typedef const SFMatrix *(MatrixCameraBase::*GetSFProjectionMatrixF)(void) const;

    GetSFProjectionMatrixF GetSFProjectionMatrix = &MatrixCameraBase::getSFProjectionMatrix;
#endif

    pDesc = new SFMatrix::Description(
        SFMatrix::getClassType(),
        "ProjectionMatrix",
        "",
        ProjectionMatrixFieldId, ProjectionMatrixFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&MatrixCameraBase::editSFProjectionMatrix),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFProjectionMatrix));
#else
        reinterpret_cast<FieldGetMethodSig >(&MatrixCameraBase::getSFProjectionMatrix));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFMatrix *(MatrixCameraBase::*GetSFModelviewMatrixF)(void) const;

    GetSFModelviewMatrixF GetSFModelviewMatrix = &MatrixCameraBase::getSFModelviewMatrix;
#endif

    pDesc = new SFMatrix::Description(
        SFMatrix::getClassType(),
        "ModelviewMatrix",
        "",
        ModelviewMatrixFieldId, ModelviewMatrixFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&MatrixCameraBase::editSFModelviewMatrix),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFModelviewMatrix));
#else
        reinterpret_cast<FieldGetMethodSig >(&MatrixCameraBase::getSFModelviewMatrix));
#endif

    oType.addInitialDesc(pDesc);
}


MatrixCameraBase::TypeObject MatrixCameraBase::_type(true,
    MatrixCameraBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &MatrixCameraBase::createEmpty,
    MatrixCamera::initMethod,
    (InitalInsertDescFunc) &MatrixCameraBase::classDescInserter,
    false,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"MatrixCamera\"\n"
    "\tparent=\"Camera\"\n"
    "\tlibrary=\"Window\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    ">\n"
    "\\ingroup GrpSystemWindowCameras\n"
    "\n"
    "The Matrix Camera class, see \\ref PageSystemWindowCameraMatrix for\n"
    "a description.\n"
    "\n"
    "The used matrices are stored in the _sfModelviewMatrix and\n"
    "_sfProjectionMatrix Fields.\n"
    "\t<Field\n"
    "\t\tname=\"ProjectionMatrix\"\n"
    "\t\ttype=\"Matrix\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"ModelviewMatrix\"\n"
    "\t\ttype=\"Matrix\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "\\ingroup GrpSystemWindowCameras\n"
    "\n"
    "The Matrix Camera class, see \\ref PageSystemWindowCameraMatrix for\n"
    "a description.\n"
    "\n"
    "The used matrices are stored in the _sfModelviewMatrix and\n"
    "_sfProjectionMatrix Fields.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &MatrixCameraBase::getType(void)
{
    return _type;
}

const FieldContainerType &MatrixCameraBase::getType(void) const
{
    return _type;
}

UInt32 MatrixCameraBase::getContainerSize(void) const
{
    return sizeof(MatrixCamera);
}

/*------------------------- decorator get ------------------------------*/


SFMatrix *MatrixCameraBase::editSFProjectionMatrix(void)
{
    editSField(ProjectionMatrixFieldMask);

    return &_sfProjectionMatrix;
}

const SFMatrix *MatrixCameraBase::getSFProjectionMatrix(void) const
{
    return &_sfProjectionMatrix;
}

#ifdef OSG_1_COMPAT
SFMatrix            *MatrixCameraBase::getSFProjectionMatrix(void)
{
    return this->editSFProjectionMatrix();
}
#endif

SFMatrix *MatrixCameraBase::editSFModelviewMatrix(void)
{
    editSField(ModelviewMatrixFieldMask);

    return &_sfModelviewMatrix;
}

const SFMatrix *MatrixCameraBase::getSFModelviewMatrix(void) const
{
    return &_sfModelviewMatrix;
}

#ifdef OSG_1_COMPAT
SFMatrix            *MatrixCameraBase::getSFModelviewMatrix(void)
{
    return this->editSFModelviewMatrix();
}
#endif





/*------------------------------ access -----------------------------------*/

UInt32 MatrixCameraBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ProjectionMatrixFieldMask & whichField))
    {
        returnValue += _sfProjectionMatrix.getBinSize();
    }
    if(FieldBits::NoField != (ModelviewMatrixFieldMask & whichField))
    {
        returnValue += _sfModelviewMatrix.getBinSize();
    }

    return returnValue;
}

void MatrixCameraBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ProjectionMatrixFieldMask & whichField))
    {
        _sfProjectionMatrix.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ModelviewMatrixFieldMask & whichField))
    {
        _sfModelviewMatrix.copyToBin(pMem);
    }
}

void MatrixCameraBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ProjectionMatrixFieldMask & whichField))
    {
        _sfProjectionMatrix.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ModelviewMatrixFieldMask & whichField))
    {
        _sfModelviewMatrix.copyFromBin(pMem);
    }
}

//! create an empty new instance of the class, do not copy the prototype
MatrixCameraPtr MatrixCameraBase::createEmpty(void)
{
    MatrixCameraPtr returnValue;

    newPtr<MatrixCamera>(returnValue);

    return returnValue;
}

FieldContainerPtr MatrixCameraBase::shallowCopy(void) const
{
    MatrixCameraPtr returnValue;

    newPtr(returnValue, dynamic_cast<const MatrixCamera *>(this));

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

MatrixCameraBase::MatrixCameraBase(void) :
    Inherited(),
    _sfProjectionMatrix       (),
    _sfModelviewMatrix        ()
{
}

MatrixCameraBase::MatrixCameraBase(const MatrixCameraBase &source) :
    Inherited(source),
    _sfProjectionMatrix       (source._sfProjectionMatrix       ),
    _sfModelviewMatrix        (source._sfModelviewMatrix        )
{
}

/*-------------------------- destructors ----------------------------------*/

MatrixCameraBase::~MatrixCameraBase(void)
{
}


#ifdef OSG_MT_FIELDCONTAINERPTR
void MatrixCameraBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo,
                                        UInt32             uiCopyOffset)
{
    this->execSync(static_cast<MatrixCameraBase *>(&oFrom),
                   whichField,
                   syncMode,
                   uiSyncInfo,
                   uiCopyOffset);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
void MatrixCameraBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<MatrixCameraBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif

#if 0
void MatrixCameraBase::execBeginEditV(ConstFieldMaskArg whichField,
                                       UInt32            uiAspect,
                                       UInt32            uiContainerSize)
{
    this->execBeginEdit(whichField, uiAspect, uiContainerSize);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr MatrixCameraBase::createAspectCopy(void) const
{
    MatrixCameraPtr returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const MatrixCamera *>(this));

    return returnValue;
}
#endif

void MatrixCameraBase::resolveLinks(void)
{
    Inherited::resolveLinks();
}


OSG_END_NAMESPACE

#include "OSGSFieldAdaptor.ins"
#include "OSGMFieldAdaptor.ins"

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<MatrixCameraPtr>::_type("MatrixCameraPtr", "CameraPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(MatrixCameraPtr)

OSG_FIELD_DLLEXPORT_DEF2(SFieldAdaptor, MatrixCameraPtr, SFFieldContainerPtr);
OSG_FIELD_DLLEXPORT_DEF2(MFieldAdaptor, MatrixCameraPtr, MFFieldContainerPtr);


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id$";
    static Char8 cvsid_hpp       [] = OSGMATRIXCAMERABASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGMATRIXCAMERABASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGMATRIXCAMERAFIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE
