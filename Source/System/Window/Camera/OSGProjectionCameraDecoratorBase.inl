/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ProjectionCameraDecorator!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &ProjectionCameraDecoratorBase::getClassType(void)
{
    return _type; 
} 

//! access the numerical type of the class
inline
OSG::UInt32 ProjectionCameraDecoratorBase::getClassTypeId(void) 
{
    return _type.getId(); 
} 

inline
OSG::UInt16 ProjectionCameraDecoratorBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the ProjectionCameraDecorator::_sfUser field.
inline
NodePtrConst ProjectionCameraDecoratorBase::getUser(void) const
{
    return _sfUser.getValue();
}

//! Set the value of the ProjectionCameraDecorator::_sfUser field.
inline
void ProjectionCameraDecoratorBase::setUser(NodePtrConstArg value)
{
    editSField(UserFieldMask);

    setRefd(_sfUser.getValue(), value);

}
//! Get the value of the ProjectionCameraDecorator::_sfLeft field.

inline
Plane &ProjectionCameraDecoratorBase::editLeft(void)
{
    editSField(LeftFieldMask);

    return _sfLeft.getValue();
}

//! Get the value of the ProjectionCameraDecorator::_sfLeft field.
inline
const Plane &ProjectionCameraDecoratorBase::getLeft(void) const
{
    return _sfLeft.getValue();
}

//! Set the value of the ProjectionCameraDecorator::_sfLeft field.
inline
void ProjectionCameraDecoratorBase::setLeft(const Plane &value)
{
    editSField(LeftFieldMask);

    _sfLeft.setValue(value);
}
//! Get the value of the ProjectionCameraDecorator::_sfBottom field.

inline
Plane &ProjectionCameraDecoratorBase::editBottom(void)
{
    editSField(BottomFieldMask);

    return _sfBottom.getValue();
}

//! Get the value of the ProjectionCameraDecorator::_sfBottom field.
inline
const Plane &ProjectionCameraDecoratorBase::getBottom(void) const
{
    return _sfBottom.getValue();
}

//! Set the value of the ProjectionCameraDecorator::_sfBottom field.
inline
void ProjectionCameraDecoratorBase::setBottom(const Plane &value)
{
    editSField(BottomFieldMask);

    _sfBottom.setValue(value);
}
//! Get the value of the ProjectionCameraDecorator::_sfNormal field.

inline
Plane &ProjectionCameraDecoratorBase::editNormal(void)
{
    editSField(NormalFieldMask);

    return _sfNormal.getValue();
}

//! Get the value of the ProjectionCameraDecorator::_sfNormal field.
inline
const Plane &ProjectionCameraDecoratorBase::getNormal(void) const
{
    return _sfNormal.getValue();
}

//! Set the value of the ProjectionCameraDecorator::_sfNormal field.
inline
void ProjectionCameraDecoratorBase::setNormal(const Plane &value)
{
    editSField(NormalFieldMask);

    _sfNormal.setValue(value);
}
//! Get the value of the ProjectionCameraDecorator::_sfWidth field.

inline
Real32 &ProjectionCameraDecoratorBase::editWidth(void)
{
    editSField(WidthFieldMask);

    return _sfWidth.getValue();
}

//! Get the value of the ProjectionCameraDecorator::_sfWidth field.
inline
const Real32 &ProjectionCameraDecoratorBase::getWidth(void) const
{
    return _sfWidth.getValue();
}

//! Set the value of the ProjectionCameraDecorator::_sfWidth field.
inline
void ProjectionCameraDecoratorBase::setWidth(const Real32 &value)
{
    editSField(WidthFieldMask);

    _sfWidth.setValue(value);
}
//! Get the value of the ProjectionCameraDecorator::_sfHeight field.

inline
Real32 &ProjectionCameraDecoratorBase::editHeight(void)
{
    editSField(HeightFieldMask);

    return _sfHeight.getValue();
}

//! Get the value of the ProjectionCameraDecorator::_sfHeight field.
inline
const Real32 &ProjectionCameraDecoratorBase::getHeight(void) const
{
    return _sfHeight.getValue();
}

//! Set the value of the ProjectionCameraDecorator::_sfHeight field.
inline
void ProjectionCameraDecoratorBase::setHeight(const Real32 &value)
{
    editSField(HeightFieldMask);

    _sfHeight.setValue(value);
}

//! Get the value of the \a index element the ProjectionCameraDecorator::_mfSurface field.
inline
const Pnt3f &ProjectionCameraDecoratorBase::getSurface(const UInt32 index) const
{
    return _mfSurface[index];
}

inline
Pnt3f &ProjectionCameraDecoratorBase::editSurface(const UInt32 index)
{
    editMField(SurfaceFieldMask, _mfSurface);

    return _mfSurface[index];
}

//! Get the ProjectionCameraDecorator::_mfSurface field.
inline
MFPnt3f &ProjectionCameraDecoratorBase::editSurface(void)
{
    editMField(SurfaceFieldMask, _mfSurface);

    return _mfSurface;
}

//! Get the ProjectionCameraDecorator::_mfSurface field.
inline
const MFPnt3f &ProjectionCameraDecoratorBase::getSurface(void) const
{
    return _mfSurface;
}

//! create a new instance of the class
inline
ProjectionCameraDecoratorPtr ProjectionCameraDecoratorBase::create(void) 
{
    ProjectionCameraDecoratorPtr fc; 

    if(getClassType().getPrototype() != NullFC) 
    {
        fc = OSG::cast_dynamic<ProjectionCameraDecorator::ObjPtr>(
            getClassType().getPrototype()-> shallowCopy()); 
    }
    
    return fc; 
}

#ifdef OSG_MT_FIELDCONTAINERPTR
inline
void ProjectionCameraDecoratorBase::execSync(      ProjectionCameraDecoratorBase *pOther,
                                       ConstFieldMaskArg  whichField,
                                       ConstFieldMaskArg  syncMode  ,
                                 const UInt32             uiSyncInfo,
                                       UInt32             uiCopyOffset)
{
    Inherited::execSync(pOther, whichField, syncMode, uiSyncInfo, uiCopyOffset);

    if(FieldBits::NoField != (UserFieldMask & whichField))
        _sfUser.syncWith(pOther->_sfUser);

    if(FieldBits::NoField != (SurfaceFieldMask & whichField))
        _mfSurface.syncWith(pOther->_mfSurface, 
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (LeftFieldMask & whichField))
        _sfLeft.syncWith(pOther->_sfLeft);

    if(FieldBits::NoField != (BottomFieldMask & whichField))
        _sfBottom.syncWith(pOther->_sfBottom);

    if(FieldBits::NoField != (NormalFieldMask & whichField))
        _sfNormal.syncWith(pOther->_sfNormal);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
        _sfWidth.syncWith(pOther->_sfWidth);

    if(FieldBits::NoField != (HeightFieldMask & whichField))
        _sfHeight.syncWith(pOther->_sfHeight);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
inline
void ProjectionCameraDecoratorBase::execSync (      ProjectionCameraDecoratorBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo)
{
}
#endif

#if 0
inline
void ProjectionCameraDecoratorBase::execBeginEdit(ConstFieldMaskArg whichField,
                                      UInt32            uiAspect,
                                      UInt32            uiContainerSize)
{
    Inherited::execBeginEdit(whichField, uiAspect, uiContainerSize);

    if(FieldBits::NoField != (SurfaceFieldMask & whichField))
    {
        _mfSurface.beginEdit(uiAspect, uiContainerSize);
    }
}
#endif


inline
Char8 *ProjectionCameraDecoratorBase::getClassname(void)
{
    return "ProjectionCameraDecorator";
}

typedef PointerBuilder<ProjectionCameraDecorator>::ObjPtr          ProjectionCameraDecoratorPtr;
typedef PointerBuilder<ProjectionCameraDecorator>::ObjPtrConst     ProjectionCameraDecoratorPtrConst;
typedef PointerBuilder<ProjectionCameraDecorator>::ObjConstPtr     ProjectionCameraDecoratorConstPtr;

typedef PointerBuilder<ProjectionCameraDecorator>::ObjPtrArg       ProjectionCameraDecoratorPtrArg;
typedef PointerBuilder<ProjectionCameraDecorator>::ObjConstPtrArg  ProjectionCameraDecoratorConstPtrArg;
typedef PointerBuilder<ProjectionCameraDecorator>::ObjPtrConstArg  ProjectionCameraDecoratorPtrConstArg;

OSG_END_NAMESPACE

#define OSGPROJECTIONCAMERADECORATORBASE_INLINE_CVSID "@(#)$Id: OSGProjectionCameraDecoratorBase.inl,v 1.1.2.3 2006/08/01 08:49:02 vossg Exp $"

