/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Viewarea!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE



//! access the type of the class
inline
OSG::FieldContainerType &ViewareaBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 ViewareaBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 ViewareaBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the Viewarea::_sfLeft field.

inline
Real32 &ViewareaBase::editLeft(void)
{
    editSField(LeftFieldMask);

    return _sfLeft.getValue();
}

//! Get the value of the Viewarea::_sfLeft field.
inline
      Real32  ViewareaBase::getLeft(void) const
{
    return _sfLeft.getValue();
}

//! Set the value of the Viewarea::_sfLeft field.
inline
void ViewareaBase::setLeft(const Real32 value)
{
    editSField(LeftFieldMask);

    _sfLeft.setValue(value);
}
//! Get the value of the Viewarea::_sfRight field.

inline
Real32 &ViewareaBase::editRight(void)
{
    editSField(RightFieldMask);

    return _sfRight.getValue();
}

//! Get the value of the Viewarea::_sfRight field.
inline
      Real32  ViewareaBase::getRight(void) const
{
    return _sfRight.getValue();
}

//! Set the value of the Viewarea::_sfRight field.
inline
void ViewareaBase::setRight(const Real32 value)
{
    editSField(RightFieldMask);

    _sfRight.setValue(value);
}
//! Get the value of the Viewarea::_sfBottom field.

inline
Real32 &ViewareaBase::editBottom(void)
{
    editSField(BottomFieldMask);

    return _sfBottom.getValue();
}

//! Get the value of the Viewarea::_sfBottom field.
inline
      Real32  ViewareaBase::getBottom(void) const
{
    return _sfBottom.getValue();
}

//! Set the value of the Viewarea::_sfBottom field.
inline
void ViewareaBase::setBottom(const Real32 value)
{
    editSField(BottomFieldMask);

    _sfBottom.setValue(value);
}
//! Get the value of the Viewarea::_sfTop field.

inline
Real32 &ViewareaBase::editTop(void)
{
    editSField(TopFieldMask);

    return _sfTop.getValue();
}

//! Get the value of the Viewarea::_sfTop field.
inline
      Real32  ViewareaBase::getTop(void) const
{
    return _sfTop.getValue();
}

//! Set the value of the Viewarea::_sfTop field.
inline
void ViewareaBase::setTop(const Real32 value)
{
    editSField(TopFieldMask);

    _sfTop.setValue(value);
}
//! Get the value of the Viewarea::_sfTravMask field.

inline
UInt32 &ViewareaBase::editTravMask(void)
{
    editSField(TravMaskFieldMask);

    return _sfTravMask.getValue();
}

//! Get the value of the Viewarea::_sfTravMask field.
inline
      UInt32  ViewareaBase::getTravMask(void) const
{
    return _sfTravMask.getValue();
}

//! Set the value of the Viewarea::_sfTravMask field.
inline
void ViewareaBase::setTravMask(const UInt32 value)
{
    editSField(TravMaskFieldMask);

    _sfTravMask.setValue(value);
}
//! Get the value of the Viewarea::_sfEnabled field.

inline
bool &ViewareaBase::editEnabled(void)
{
    editSField(EnabledFieldMask);

    return _sfEnabled.getValue();
}

//! Get the value of the Viewarea::_sfEnabled field.
inline
      bool  ViewareaBase::getEnabled(void) const
{
    return _sfEnabled.getValue();
}

//! Set the value of the Viewarea::_sfEnabled field.
inline
void ViewareaBase::setEnabled(const bool value)
{
    editSField(EnabledFieldMask);

    _sfEnabled.setValue(value);
}
//! Get the value of the Viewarea::_sfDrawTime field.

inline
Real32 &ViewareaBase::editDrawTime(void)
{
    editSField(DrawTimeFieldMask);

    return _sfDrawTime.getValue();
}

//! Get the value of the Viewarea::_sfDrawTime field.
inline
      Real32  ViewareaBase::getDrawTime(void) const
{
    return _sfDrawTime.getValue();
}

//! Set the value of the Viewarea::_sfDrawTime field.
inline
void ViewareaBase::setDrawTime(const Real32 value)
{
    editSField(DrawTimeFieldMask);

    _sfDrawTime.setValue(value);
}
//! Get the value of the Viewarea::_sfDrawableId field.

inline
Int32 &ViewareaBase::editDrawableId(void)
{
    editSField(DrawableIdFieldMask);

    return _sfDrawableId.getValue();
}

//! Get the value of the Viewarea::_sfDrawableId field.
inline
      Int32  ViewareaBase::getDrawableId(void) const
{
    return _sfDrawableId.getValue();
}

//! Set the value of the Viewarea::_sfDrawableId field.
inline
void ViewareaBase::setDrawableId(const Int32 value)
{
    editSField(DrawableIdFieldMask);

    _sfDrawableId.setValue(value);
}

//! Get the value of the Viewarea::_sfRenderOptions field.
inline
RenderOptions * ViewareaBase::getRenderOptions(void) const
{
    return _sfRenderOptions.getValue();
}

//! Set the value of the Viewarea::_sfRenderOptions field.
inline
void ViewareaBase::setRenderOptions(RenderOptions * const value)
{
    editSField(RenderOptionsFieldMask);

    _sfRenderOptions.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void ViewareaBase::execSync (      ViewareaBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (LeftFieldMask & whichField))
        _sfLeft.syncWith(pFrom->_sfLeft);

    if(FieldBits::NoField != (RightFieldMask & whichField))
        _sfRight.syncWith(pFrom->_sfRight);

    if(FieldBits::NoField != (BottomFieldMask & whichField))
        _sfBottom.syncWith(pFrom->_sfBottom);

    if(FieldBits::NoField != (TopFieldMask & whichField))
        _sfTop.syncWith(pFrom->_sfTop);

    if(FieldBits::NoField != (TravMaskFieldMask & whichField))
        _sfTravMask.syncWith(pFrom->_sfTravMask);

    if(FieldBits::NoField != (EnabledFieldMask & whichField))
        _sfEnabled.syncWith(pFrom->_sfEnabled);

    if(FieldBits::NoField != (DrawTimeFieldMask & whichField))
        _sfDrawTime.syncWith(pFrom->_sfDrawTime);

    if(FieldBits::NoField != (DrawableIdFieldMask & whichField))
        _sfDrawableId.syncWith(pFrom->_sfDrawableId);

    if(FieldBits::NoField != (RenderOptionsFieldMask & whichField))
        _sfRenderOptions.syncWith(pFrom->_sfRenderOptions);
}
#endif


inline
const Char8 *ViewareaBase::getClassname(void)
{
    return "Viewarea";
}
OSG_GEN_CONTAINERPTR(Viewarea);

OSG_END_NAMESPACE

