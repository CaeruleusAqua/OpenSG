/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class RenderOptions!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILERENDEROPTIONSINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>


#include <OSGGL.h>                        // PolygonMode default header


#include "OSGRenderOptionsBase.h"
#include "OSGRenderOptions.h"

#include "boost/bind.hpp"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::RenderOptions
    
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var bool            RenderOptionsBase::_sfStatistic
    
*/

/*! \var GLenum          RenderOptionsBase::_sfPolygonMode
    
*/

/*! \var bool            RenderOptionsBase::_sfTwoSidedLighting
    
*/

/*! \var bool            RenderOptionsBase::_sfSpecTexLighting
    
*/

/*! \var bool            RenderOptionsBase::_sfSortTrans
    
*/

/*! \var bool            RenderOptionsBase::_sfZWriteTrans
    
*/

/*! \var bool            RenderOptionsBase::_sfLocalLights
    
*/

/*! \var bool            RenderOptionsBase::_sfCorrectTwoSidedLighting
    
*/

/*! \var bool            RenderOptionsBase::_sfOcclusionCulling
    
*/

/*! \var Int32           RenderOptionsBase::_sfOcclusionCullingMode
    OcclusionStopAndWait (1) or OcclusionMultiFrame (2)
*/

/*! \var UInt32          RenderOptionsBase::_sfOcclusionCullingPixels
    culls objects with this number of visible pixels default is zero.
*/

/*! \var bool            RenderOptionsBase::_sfAntialiasing
    
*/

/*! \var Real32          RenderOptionsBase::_sfAntialiasingDistance
    
*/

/*! \var Real32          RenderOptionsBase::_sfAntialiasingScale
    
*/

/*! \var UInt32          RenderOptionsBase::_sfAntialiasingTrigger
    
*/

/*! \var bool            RenderOptionsBase::_sfFrustumCulling
    
*/

/*! \var bool            RenderOptionsBase::_sfBackfaceCulling
    
*/

/*! \var bool            RenderOptionsBase::_sfSmallFeatureCulling
    
*/

/*! \var Real32          RenderOptionsBase::_sfSmallFeaturePixels
    
*/

/*! \var UInt32          RenderOptionsBase::_sfSmallFeatureThreshold
    
*/

/*! \var bool            RenderOptionsBase::_sfFirstFrame
    
*/


void RenderOptionsBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "statistic",
        "",
        StatisticFieldId, StatisticFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RenderOptionsBase::editHandleStatistic),
        static_cast<FieldGetMethodSig >(&RenderOptionsBase::getHandleStatistic));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "polygonMode",
        "",
        PolygonModeFieldId, PolygonModeFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RenderOptionsBase::editHandlePolygonMode),
        static_cast<FieldGetMethodSig >(&RenderOptionsBase::getHandlePolygonMode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "twoSidedLighting",
        "",
        TwoSidedLightingFieldId, TwoSidedLightingFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RenderOptionsBase::editHandleTwoSidedLighting),
        static_cast<FieldGetMethodSig >(&RenderOptionsBase::getHandleTwoSidedLighting));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "specTexLighting",
        "",
        SpecTexLightingFieldId, SpecTexLightingFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RenderOptionsBase::editHandleSpecTexLighting),
        static_cast<FieldGetMethodSig >(&RenderOptionsBase::getHandleSpecTexLighting));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "sortTrans",
        "",
        SortTransFieldId, SortTransFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RenderOptionsBase::editHandleSortTrans),
        static_cast<FieldGetMethodSig >(&RenderOptionsBase::getHandleSortTrans));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "zWriteTrans",
        "",
        ZWriteTransFieldId, ZWriteTransFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RenderOptionsBase::editHandleZWriteTrans),
        static_cast<FieldGetMethodSig >(&RenderOptionsBase::getHandleZWriteTrans));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "localLights",
        "",
        LocalLightsFieldId, LocalLightsFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RenderOptionsBase::editHandleLocalLights),
        static_cast<FieldGetMethodSig >(&RenderOptionsBase::getHandleLocalLights));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "correctTwoSidedLighting",
        "",
        CorrectTwoSidedLightingFieldId, CorrectTwoSidedLightingFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RenderOptionsBase::editHandleCorrectTwoSidedLighting),
        static_cast<FieldGetMethodSig >(&RenderOptionsBase::getHandleCorrectTwoSidedLighting));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "occlusionCulling",
        "",
        OcclusionCullingFieldId, OcclusionCullingFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RenderOptionsBase::editHandleOcclusionCulling),
        static_cast<FieldGetMethodSig >(&RenderOptionsBase::getHandleOcclusionCulling));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "occlusionCullingMode",
        "OcclusionStopAndWait (1) or OcclusionMultiFrame (2)\n",
        OcclusionCullingModeFieldId, OcclusionCullingModeFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RenderOptionsBase::editHandleOcclusionCullingMode),
        static_cast<FieldGetMethodSig >(&RenderOptionsBase::getHandleOcclusionCullingMode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "occlusionCullingPixels",
        "culls objects with this number of visible pixels default is zero.\n",
        OcclusionCullingPixelsFieldId, OcclusionCullingPixelsFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RenderOptionsBase::editHandleOcclusionCullingPixels),
        static_cast<FieldGetMethodSig >(&RenderOptionsBase::getHandleOcclusionCullingPixels));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "antialiasing",
        "",
        AntialiasingFieldId, AntialiasingFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RenderOptionsBase::editHandleAntialiasing),
        static_cast<FieldGetMethodSig >(&RenderOptionsBase::getHandleAntialiasing));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "antialiasingDistance",
        "",
        AntialiasingDistanceFieldId, AntialiasingDistanceFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RenderOptionsBase::editHandleAntialiasingDistance),
        static_cast<FieldGetMethodSig >(&RenderOptionsBase::getHandleAntialiasingDistance));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "antialiasingScale",
        "",
        AntialiasingScaleFieldId, AntialiasingScaleFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RenderOptionsBase::editHandleAntialiasingScale),
        static_cast<FieldGetMethodSig >(&RenderOptionsBase::getHandleAntialiasingScale));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "antialiasingTrigger",
        "",
        AntialiasingTriggerFieldId, AntialiasingTriggerFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RenderOptionsBase::editHandleAntialiasingTrigger),
        static_cast<FieldGetMethodSig >(&RenderOptionsBase::getHandleAntialiasingTrigger));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "frustumCulling",
        "",
        FrustumCullingFieldId, FrustumCullingFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RenderOptionsBase::editHandleFrustumCulling),
        static_cast<FieldGetMethodSig >(&RenderOptionsBase::getHandleFrustumCulling));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "backfaceCulling",
        "",
        BackfaceCullingFieldId, BackfaceCullingFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RenderOptionsBase::editHandleBackfaceCulling),
        static_cast<FieldGetMethodSig >(&RenderOptionsBase::getHandleBackfaceCulling));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "smallFeatureCulling",
        "",
        SmallFeatureCullingFieldId, SmallFeatureCullingFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RenderOptionsBase::editHandleSmallFeatureCulling),
        static_cast<FieldGetMethodSig >(&RenderOptionsBase::getHandleSmallFeatureCulling));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "smallFeaturePixels",
        "",
        SmallFeaturePixelsFieldId, SmallFeaturePixelsFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RenderOptionsBase::editHandleSmallFeaturePixels),
        static_cast<FieldGetMethodSig >(&RenderOptionsBase::getHandleSmallFeaturePixels));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "smallFeatureThreshold",
        "",
        SmallFeatureThresholdFieldId, SmallFeatureThresholdFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RenderOptionsBase::editHandleSmallFeatureThreshold),
        static_cast<FieldGetMethodSig >(&RenderOptionsBase::getHandleSmallFeatureThreshold));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "firstFrame",
        "",
        FirstFrameFieldId, FirstFrameFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&RenderOptionsBase::editHandleFirstFrame),
        static_cast<FieldGetMethodSig >(&RenderOptionsBase::getHandleFirstFrame));

    oType.addInitialDesc(pDesc);
}


RenderOptionsBase::TypeObject RenderOptionsBase::_type(
    RenderOptionsBase::getClassname(),
    Inherited::getClassname(),
    "RenderOptions",
    0,
    (PrototypeCreateF) &RenderOptionsBase::createEmpty,
    RenderOptions::initMethod,
    RenderOptions::exitMethod,
    (InitalInsertDescFunc) &RenderOptionsBase::classDescInserter,
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"RenderOptions\"\n"
    "\tparent=\"FieldContainerAttachment\"\n"
    "\tlibrary=\"System\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"false\"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"statistic\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"polygonMode\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_FILL\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"twoSidedLighting\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"specTexLighting\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"sortTrans\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"zWriteTrans\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"localLights\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"correctTwoSidedLighting\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"occlusionCulling\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"occlusionCullingMode\"\n"
    "\t\ttype=\"Int32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tOcclusionStopAndWait (1) or OcclusionMultiFrame (2)\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"occlusionCullingPixels\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tculls objects with this number of visible pixels default is zero.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"antialiasing\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"antialiasingDistance\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0.2\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"antialiasingScale\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"2.0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"antialiasingTrigger\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"frustumCulling\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"backfaceCulling\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"smallFeatureCulling\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"smallFeaturePixels\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"smallFeatureThreshold\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"firstFrame\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &RenderOptionsBase::getType(void)
{
    return _type;
}

const FieldContainerType &RenderOptionsBase::getType(void) const
{
    return _type;
}

UInt32 RenderOptionsBase::getContainerSize(void) const
{
    return sizeof(RenderOptions);
}

/*------------------------- decorator get ------------------------------*/


SFBool *RenderOptionsBase::editSFStatistic(void)
{
    editSField(StatisticFieldMask);

    return &_sfStatistic;
}

const SFBool *RenderOptionsBase::getSFStatistic(void) const
{
    return &_sfStatistic;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *RenderOptionsBase::getSFStatistic      (void)
{
    return this->editSFStatistic      ();
}
#endif

SFGLenum *RenderOptionsBase::editSFPolygonMode(void)
{
    editSField(PolygonModeFieldMask);

    return &_sfPolygonMode;
}

const SFGLenum *RenderOptionsBase::getSFPolygonMode(void) const
{
    return &_sfPolygonMode;
}

#ifdef OSG_1_GET_COMPAT
SFGLenum            *RenderOptionsBase::getSFPolygonMode    (void)
{
    return this->editSFPolygonMode    ();
}
#endif

SFBool *RenderOptionsBase::editSFTwoSidedLighting(void)
{
    editSField(TwoSidedLightingFieldMask);

    return &_sfTwoSidedLighting;
}

const SFBool *RenderOptionsBase::getSFTwoSidedLighting(void) const
{
    return &_sfTwoSidedLighting;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *RenderOptionsBase::getSFTwoSidedLighting(void)
{
    return this->editSFTwoSidedLighting();
}
#endif

SFBool *RenderOptionsBase::editSFSpecTexLighting(void)
{
    editSField(SpecTexLightingFieldMask);

    return &_sfSpecTexLighting;
}

const SFBool *RenderOptionsBase::getSFSpecTexLighting(void) const
{
    return &_sfSpecTexLighting;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *RenderOptionsBase::getSFSpecTexLighting(void)
{
    return this->editSFSpecTexLighting();
}
#endif

SFBool *RenderOptionsBase::editSFSortTrans(void)
{
    editSField(SortTransFieldMask);

    return &_sfSortTrans;
}

const SFBool *RenderOptionsBase::getSFSortTrans(void) const
{
    return &_sfSortTrans;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *RenderOptionsBase::getSFSortTrans      (void)
{
    return this->editSFSortTrans      ();
}
#endif

SFBool *RenderOptionsBase::editSFZWriteTrans(void)
{
    editSField(ZWriteTransFieldMask);

    return &_sfZWriteTrans;
}

const SFBool *RenderOptionsBase::getSFZWriteTrans(void) const
{
    return &_sfZWriteTrans;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *RenderOptionsBase::getSFZWriteTrans    (void)
{
    return this->editSFZWriteTrans    ();
}
#endif

SFBool *RenderOptionsBase::editSFLocalLights(void)
{
    editSField(LocalLightsFieldMask);

    return &_sfLocalLights;
}

const SFBool *RenderOptionsBase::getSFLocalLights(void) const
{
    return &_sfLocalLights;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *RenderOptionsBase::getSFLocalLights    (void)
{
    return this->editSFLocalLights    ();
}
#endif

SFBool *RenderOptionsBase::editSFCorrectTwoSidedLighting(void)
{
    editSField(CorrectTwoSidedLightingFieldMask);

    return &_sfCorrectTwoSidedLighting;
}

const SFBool *RenderOptionsBase::getSFCorrectTwoSidedLighting(void) const
{
    return &_sfCorrectTwoSidedLighting;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *RenderOptionsBase::getSFCorrectTwoSidedLighting(void)
{
    return this->editSFCorrectTwoSidedLighting();
}
#endif

SFBool *RenderOptionsBase::editSFOcclusionCulling(void)
{
    editSField(OcclusionCullingFieldMask);

    return &_sfOcclusionCulling;
}

const SFBool *RenderOptionsBase::getSFOcclusionCulling(void) const
{
    return &_sfOcclusionCulling;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *RenderOptionsBase::getSFOcclusionCulling(void)
{
    return this->editSFOcclusionCulling();
}
#endif

SFInt32 *RenderOptionsBase::editSFOcclusionCullingMode(void)
{
    editSField(OcclusionCullingModeFieldMask);

    return &_sfOcclusionCullingMode;
}

const SFInt32 *RenderOptionsBase::getSFOcclusionCullingMode(void) const
{
    return &_sfOcclusionCullingMode;
}

#ifdef OSG_1_GET_COMPAT
SFInt32             *RenderOptionsBase::getSFOcclusionCullingMode(void)
{
    return this->editSFOcclusionCullingMode();
}
#endif

SFUInt32 *RenderOptionsBase::editSFOcclusionCullingPixels(void)
{
    editSField(OcclusionCullingPixelsFieldMask);

    return &_sfOcclusionCullingPixels;
}

const SFUInt32 *RenderOptionsBase::getSFOcclusionCullingPixels(void) const
{
    return &_sfOcclusionCullingPixels;
}

#ifdef OSG_1_GET_COMPAT
SFUInt32            *RenderOptionsBase::getSFOcclusionCullingPixels(void)
{
    return this->editSFOcclusionCullingPixels();
}
#endif

SFBool *RenderOptionsBase::editSFAntialiasing(void)
{
    editSField(AntialiasingFieldMask);

    return &_sfAntialiasing;
}

const SFBool *RenderOptionsBase::getSFAntialiasing(void) const
{
    return &_sfAntialiasing;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *RenderOptionsBase::getSFAntialiasing   (void)
{
    return this->editSFAntialiasing   ();
}
#endif

SFReal32 *RenderOptionsBase::editSFAntialiasingDistance(void)
{
    editSField(AntialiasingDistanceFieldMask);

    return &_sfAntialiasingDistance;
}

const SFReal32 *RenderOptionsBase::getSFAntialiasingDistance(void) const
{
    return &_sfAntialiasingDistance;
}

#ifdef OSG_1_GET_COMPAT
SFReal32            *RenderOptionsBase::getSFAntialiasingDistance(void)
{
    return this->editSFAntialiasingDistance();
}
#endif

SFReal32 *RenderOptionsBase::editSFAntialiasingScale(void)
{
    editSField(AntialiasingScaleFieldMask);

    return &_sfAntialiasingScale;
}

const SFReal32 *RenderOptionsBase::getSFAntialiasingScale(void) const
{
    return &_sfAntialiasingScale;
}

#ifdef OSG_1_GET_COMPAT
SFReal32            *RenderOptionsBase::getSFAntialiasingScale(void)
{
    return this->editSFAntialiasingScale();
}
#endif

SFUInt32 *RenderOptionsBase::editSFAntialiasingTrigger(void)
{
    editSField(AntialiasingTriggerFieldMask);

    return &_sfAntialiasingTrigger;
}

const SFUInt32 *RenderOptionsBase::getSFAntialiasingTrigger(void) const
{
    return &_sfAntialiasingTrigger;
}

#ifdef OSG_1_GET_COMPAT
SFUInt32            *RenderOptionsBase::getSFAntialiasingTrigger(void)
{
    return this->editSFAntialiasingTrigger();
}
#endif

SFBool *RenderOptionsBase::editSFFrustumCulling(void)
{
    editSField(FrustumCullingFieldMask);

    return &_sfFrustumCulling;
}

const SFBool *RenderOptionsBase::getSFFrustumCulling(void) const
{
    return &_sfFrustumCulling;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *RenderOptionsBase::getSFFrustumCulling (void)
{
    return this->editSFFrustumCulling ();
}
#endif

SFBool *RenderOptionsBase::editSFBackfaceCulling(void)
{
    editSField(BackfaceCullingFieldMask);

    return &_sfBackfaceCulling;
}

const SFBool *RenderOptionsBase::getSFBackfaceCulling(void) const
{
    return &_sfBackfaceCulling;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *RenderOptionsBase::getSFBackfaceCulling(void)
{
    return this->editSFBackfaceCulling();
}
#endif

SFBool *RenderOptionsBase::editSFSmallFeatureCulling(void)
{
    editSField(SmallFeatureCullingFieldMask);

    return &_sfSmallFeatureCulling;
}

const SFBool *RenderOptionsBase::getSFSmallFeatureCulling(void) const
{
    return &_sfSmallFeatureCulling;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *RenderOptionsBase::getSFSmallFeatureCulling(void)
{
    return this->editSFSmallFeatureCulling();
}
#endif

SFReal32 *RenderOptionsBase::editSFSmallFeaturePixels(void)
{
    editSField(SmallFeaturePixelsFieldMask);

    return &_sfSmallFeaturePixels;
}

const SFReal32 *RenderOptionsBase::getSFSmallFeaturePixels(void) const
{
    return &_sfSmallFeaturePixels;
}

#ifdef OSG_1_GET_COMPAT
SFReal32            *RenderOptionsBase::getSFSmallFeaturePixels(void)
{
    return this->editSFSmallFeaturePixels();
}
#endif

SFUInt32 *RenderOptionsBase::editSFSmallFeatureThreshold(void)
{
    editSField(SmallFeatureThresholdFieldMask);

    return &_sfSmallFeatureThreshold;
}

const SFUInt32 *RenderOptionsBase::getSFSmallFeatureThreshold(void) const
{
    return &_sfSmallFeatureThreshold;
}

#ifdef OSG_1_GET_COMPAT
SFUInt32            *RenderOptionsBase::getSFSmallFeatureThreshold(void)
{
    return this->editSFSmallFeatureThreshold();
}
#endif

SFBool *RenderOptionsBase::editSFFirstFrame(void)
{
    editSField(FirstFrameFieldMask);

    return &_sfFirstFrame;
}

const SFBool *RenderOptionsBase::getSFFirstFrame(void) const
{
    return &_sfFirstFrame;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *RenderOptionsBase::getSFFirstFrame     (void)
{
    return this->editSFFirstFrame     ();
}
#endif





/*------------------------------ access -----------------------------------*/

UInt32 RenderOptionsBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (StatisticFieldMask & whichField))
    {
        returnValue += _sfStatistic.getBinSize();
    }
    if(FieldBits::NoField != (PolygonModeFieldMask & whichField))
    {
        returnValue += _sfPolygonMode.getBinSize();
    }
    if(FieldBits::NoField != (TwoSidedLightingFieldMask & whichField))
    {
        returnValue += _sfTwoSidedLighting.getBinSize();
    }
    if(FieldBits::NoField != (SpecTexLightingFieldMask & whichField))
    {
        returnValue += _sfSpecTexLighting.getBinSize();
    }
    if(FieldBits::NoField != (SortTransFieldMask & whichField))
    {
        returnValue += _sfSortTrans.getBinSize();
    }
    if(FieldBits::NoField != (ZWriteTransFieldMask & whichField))
    {
        returnValue += _sfZWriteTrans.getBinSize();
    }
    if(FieldBits::NoField != (LocalLightsFieldMask & whichField))
    {
        returnValue += _sfLocalLights.getBinSize();
    }
    if(FieldBits::NoField != (CorrectTwoSidedLightingFieldMask & whichField))
    {
        returnValue += _sfCorrectTwoSidedLighting.getBinSize();
    }
    if(FieldBits::NoField != (OcclusionCullingFieldMask & whichField))
    {
        returnValue += _sfOcclusionCulling.getBinSize();
    }
    if(FieldBits::NoField != (OcclusionCullingModeFieldMask & whichField))
    {
        returnValue += _sfOcclusionCullingMode.getBinSize();
    }
    if(FieldBits::NoField != (OcclusionCullingPixelsFieldMask & whichField))
    {
        returnValue += _sfOcclusionCullingPixels.getBinSize();
    }
    if(FieldBits::NoField != (AntialiasingFieldMask & whichField))
    {
        returnValue += _sfAntialiasing.getBinSize();
    }
    if(FieldBits::NoField != (AntialiasingDistanceFieldMask & whichField))
    {
        returnValue += _sfAntialiasingDistance.getBinSize();
    }
    if(FieldBits::NoField != (AntialiasingScaleFieldMask & whichField))
    {
        returnValue += _sfAntialiasingScale.getBinSize();
    }
    if(FieldBits::NoField != (AntialiasingTriggerFieldMask & whichField))
    {
        returnValue += _sfAntialiasingTrigger.getBinSize();
    }
    if(FieldBits::NoField != (FrustumCullingFieldMask & whichField))
    {
        returnValue += _sfFrustumCulling.getBinSize();
    }
    if(FieldBits::NoField != (BackfaceCullingFieldMask & whichField))
    {
        returnValue += _sfBackfaceCulling.getBinSize();
    }
    if(FieldBits::NoField != (SmallFeatureCullingFieldMask & whichField))
    {
        returnValue += _sfSmallFeatureCulling.getBinSize();
    }
    if(FieldBits::NoField != (SmallFeaturePixelsFieldMask & whichField))
    {
        returnValue += _sfSmallFeaturePixels.getBinSize();
    }
    if(FieldBits::NoField != (SmallFeatureThresholdFieldMask & whichField))
    {
        returnValue += _sfSmallFeatureThreshold.getBinSize();
    }
    if(FieldBits::NoField != (FirstFrameFieldMask & whichField))
    {
        returnValue += _sfFirstFrame.getBinSize();
    }

    return returnValue;
}

void RenderOptionsBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (StatisticFieldMask & whichField))
    {
        _sfStatistic.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PolygonModeFieldMask & whichField))
    {
        _sfPolygonMode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TwoSidedLightingFieldMask & whichField))
    {
        _sfTwoSidedLighting.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SpecTexLightingFieldMask & whichField))
    {
        _sfSpecTexLighting.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SortTransFieldMask & whichField))
    {
        _sfSortTrans.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ZWriteTransFieldMask & whichField))
    {
        _sfZWriteTrans.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LocalLightsFieldMask & whichField))
    {
        _sfLocalLights.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CorrectTwoSidedLightingFieldMask & whichField))
    {
        _sfCorrectTwoSidedLighting.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OcclusionCullingFieldMask & whichField))
    {
        _sfOcclusionCulling.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OcclusionCullingModeFieldMask & whichField))
    {
        _sfOcclusionCullingMode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OcclusionCullingPixelsFieldMask & whichField))
    {
        _sfOcclusionCullingPixels.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AntialiasingFieldMask & whichField))
    {
        _sfAntialiasing.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AntialiasingDistanceFieldMask & whichField))
    {
        _sfAntialiasingDistance.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AntialiasingScaleFieldMask & whichField))
    {
        _sfAntialiasingScale.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AntialiasingTriggerFieldMask & whichField))
    {
        _sfAntialiasingTrigger.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FrustumCullingFieldMask & whichField))
    {
        _sfFrustumCulling.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BackfaceCullingFieldMask & whichField))
    {
        _sfBackfaceCulling.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SmallFeatureCullingFieldMask & whichField))
    {
        _sfSmallFeatureCulling.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SmallFeaturePixelsFieldMask & whichField))
    {
        _sfSmallFeaturePixels.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SmallFeatureThresholdFieldMask & whichField))
    {
        _sfSmallFeatureThreshold.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FirstFrameFieldMask & whichField))
    {
        _sfFirstFrame.copyToBin(pMem);
    }
}

void RenderOptionsBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (StatisticFieldMask & whichField))
    {
        _sfStatistic.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PolygonModeFieldMask & whichField))
    {
        _sfPolygonMode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TwoSidedLightingFieldMask & whichField))
    {
        _sfTwoSidedLighting.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SpecTexLightingFieldMask & whichField))
    {
        _sfSpecTexLighting.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SortTransFieldMask & whichField))
    {
        _sfSortTrans.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ZWriteTransFieldMask & whichField))
    {
        _sfZWriteTrans.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LocalLightsFieldMask & whichField))
    {
        _sfLocalLights.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CorrectTwoSidedLightingFieldMask & whichField))
    {
        _sfCorrectTwoSidedLighting.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OcclusionCullingFieldMask & whichField))
    {
        _sfOcclusionCulling.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OcclusionCullingModeFieldMask & whichField))
    {
        _sfOcclusionCullingMode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OcclusionCullingPixelsFieldMask & whichField))
    {
        _sfOcclusionCullingPixels.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AntialiasingFieldMask & whichField))
    {
        _sfAntialiasing.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AntialiasingDistanceFieldMask & whichField))
    {
        _sfAntialiasingDistance.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AntialiasingScaleFieldMask & whichField))
    {
        _sfAntialiasingScale.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AntialiasingTriggerFieldMask & whichField))
    {
        _sfAntialiasingTrigger.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FrustumCullingFieldMask & whichField))
    {
        _sfFrustumCulling.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BackfaceCullingFieldMask & whichField))
    {
        _sfBackfaceCulling.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SmallFeatureCullingFieldMask & whichField))
    {
        _sfSmallFeatureCulling.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SmallFeaturePixelsFieldMask & whichField))
    {
        _sfSmallFeaturePixels.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SmallFeatureThresholdFieldMask & whichField))
    {
        _sfSmallFeatureThreshold.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FirstFrameFieldMask & whichField))
    {
        _sfFirstFrame.copyFromBin(pMem);
    }
}

//! create a new instance of the class
RenderOptionsPtr RenderOptionsBase::create(void)
{
    RenderOptionsPtr fc;

    if(getClassType().getPrototype() != NullFC)
    {
        fc = dynamic_cast<RenderOptions::ObjPtr>(
            getClassType().getPrototype()-> shallowCopy());
    }

    return fc;
}

//! create an empty new instance of the class, do not copy the prototype
RenderOptionsPtr RenderOptionsBase::createEmpty(void)
{
    RenderOptionsPtr returnValue;

    newPtr<RenderOptions>(returnValue);

    return returnValue;
}

FieldContainerPtr RenderOptionsBase::shallowCopy(void) const
{
    RenderOptionsPtr returnValue;

    newPtr(returnValue, dynamic_cast<const RenderOptions *>(this));

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

RenderOptionsBase::RenderOptionsBase(void) :
    Inherited(),
    _sfStatistic              (bool(false)),
    _sfPolygonMode            (GLenum(GL_FILL)),
    _sfTwoSidedLighting       (bool(false)),
    _sfSpecTexLighting        (bool(false)),
    _sfSortTrans              (bool(true)),
    _sfZWriteTrans            (bool(true)),
    _sfLocalLights            (bool(true)),
    _sfCorrectTwoSidedLighting(bool(true)),
    _sfOcclusionCulling       (bool(false)),
    _sfOcclusionCullingMode   (Int32(1)),
    _sfOcclusionCullingPixels (UInt32(0)),
    _sfAntialiasing           (bool(false)),
    _sfAntialiasingDistance   (Real32(0.2)),
    _sfAntialiasingScale      (Real32(2.0)),
    _sfAntialiasingTrigger    (UInt32(0)),
    _sfFrustumCulling         (bool(false)),
    _sfBackfaceCulling        (bool(false)),
    _sfSmallFeatureCulling    (),
    _sfSmallFeaturePixels     (),
    _sfSmallFeatureThreshold  (),
    _sfFirstFrame             (bool(true))
{
}

RenderOptionsBase::RenderOptionsBase(const RenderOptionsBase &source) :
    Inherited(source),
    _sfStatistic              (source._sfStatistic              ),
    _sfPolygonMode            (source._sfPolygonMode            ),
    _sfTwoSidedLighting       (source._sfTwoSidedLighting       ),
    _sfSpecTexLighting        (source._sfSpecTexLighting        ),
    _sfSortTrans              (source._sfSortTrans              ),
    _sfZWriteTrans            (source._sfZWriteTrans            ),
    _sfLocalLights            (source._sfLocalLights            ),
    _sfCorrectTwoSidedLighting(source._sfCorrectTwoSidedLighting),
    _sfOcclusionCulling       (source._sfOcclusionCulling       ),
    _sfOcclusionCullingMode   (source._sfOcclusionCullingMode   ),
    _sfOcclusionCullingPixels (source._sfOcclusionCullingPixels ),
    _sfAntialiasing           (source._sfAntialiasing           ),
    _sfAntialiasingDistance   (source._sfAntialiasingDistance   ),
    _sfAntialiasingScale      (source._sfAntialiasingScale      ),
    _sfAntialiasingTrigger    (source._sfAntialiasingTrigger    ),
    _sfFrustumCulling         (source._sfFrustumCulling         ),
    _sfBackfaceCulling        (source._sfBackfaceCulling        ),
    _sfSmallFeatureCulling    (source._sfSmallFeatureCulling    ),
    _sfSmallFeaturePixels     (source._sfSmallFeaturePixels     ),
    _sfSmallFeatureThreshold  (source._sfSmallFeatureThreshold  ),
    _sfFirstFrame             (source._sfFirstFrame             )
{
}


/*-------------------------- destructors ----------------------------------*/

RenderOptionsBase::~RenderOptionsBase(void)
{
}


GetFieldHandlePtr RenderOptionsBase::getHandleStatistic       (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfStatistic, 
             this->getType().getFieldDesc(StatisticFieldId)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleStatistic      (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfStatistic, 
             this->getType().getFieldDesc(StatisticFieldId)));

    editSField(StatisticFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandlePolygonMode     (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfPolygonMode, 
             this->getType().getFieldDesc(PolygonModeFieldId)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandlePolygonMode    (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfPolygonMode, 
             this->getType().getFieldDesc(PolygonModeFieldId)));

    editSField(PolygonModeFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleTwoSidedLighting (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfTwoSidedLighting, 
             this->getType().getFieldDesc(TwoSidedLightingFieldId)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleTwoSidedLighting(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfTwoSidedLighting, 
             this->getType().getFieldDesc(TwoSidedLightingFieldId)));

    editSField(TwoSidedLightingFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleSpecTexLighting (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfSpecTexLighting, 
             this->getType().getFieldDesc(SpecTexLightingFieldId)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleSpecTexLighting(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfSpecTexLighting, 
             this->getType().getFieldDesc(SpecTexLightingFieldId)));

    editSField(SpecTexLightingFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleSortTrans       (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfSortTrans, 
             this->getType().getFieldDesc(SortTransFieldId)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleSortTrans      (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfSortTrans, 
             this->getType().getFieldDesc(SortTransFieldId)));

    editSField(SortTransFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleZWriteTrans     (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfZWriteTrans, 
             this->getType().getFieldDesc(ZWriteTransFieldId)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleZWriteTrans    (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfZWriteTrans, 
             this->getType().getFieldDesc(ZWriteTransFieldId)));

    editSField(ZWriteTransFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleLocalLights     (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfLocalLights, 
             this->getType().getFieldDesc(LocalLightsFieldId)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleLocalLights    (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfLocalLights, 
             this->getType().getFieldDesc(LocalLightsFieldId)));

    editSField(LocalLightsFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleCorrectTwoSidedLighting (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfCorrectTwoSidedLighting, 
             this->getType().getFieldDesc(CorrectTwoSidedLightingFieldId)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleCorrectTwoSidedLighting(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfCorrectTwoSidedLighting, 
             this->getType().getFieldDesc(CorrectTwoSidedLightingFieldId)));

    editSField(CorrectTwoSidedLightingFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleOcclusionCulling (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfOcclusionCulling, 
             this->getType().getFieldDesc(OcclusionCullingFieldId)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleOcclusionCulling(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfOcclusionCulling, 
             this->getType().getFieldDesc(OcclusionCullingFieldId)));

    editSField(OcclusionCullingFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleOcclusionCullingMode (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfOcclusionCullingMode, 
             this->getType().getFieldDesc(OcclusionCullingModeFieldId)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleOcclusionCullingMode(void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfOcclusionCullingMode, 
             this->getType().getFieldDesc(OcclusionCullingModeFieldId)));

    editSField(OcclusionCullingModeFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleOcclusionCullingPixels (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfOcclusionCullingPixels, 
             this->getType().getFieldDesc(OcclusionCullingPixelsFieldId)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleOcclusionCullingPixels(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfOcclusionCullingPixels, 
             this->getType().getFieldDesc(OcclusionCullingPixelsFieldId)));

    editSField(OcclusionCullingPixelsFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleAntialiasing    (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfAntialiasing, 
             this->getType().getFieldDesc(AntialiasingFieldId)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleAntialiasing   (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfAntialiasing, 
             this->getType().getFieldDesc(AntialiasingFieldId)));

    editSField(AntialiasingFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleAntialiasingDistance (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfAntialiasingDistance, 
             this->getType().getFieldDesc(AntialiasingDistanceFieldId)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleAntialiasingDistance(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfAntialiasingDistance, 
             this->getType().getFieldDesc(AntialiasingDistanceFieldId)));

    editSField(AntialiasingDistanceFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleAntialiasingScale (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfAntialiasingScale, 
             this->getType().getFieldDesc(AntialiasingScaleFieldId)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleAntialiasingScale(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfAntialiasingScale, 
             this->getType().getFieldDesc(AntialiasingScaleFieldId)));

    editSField(AntialiasingScaleFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleAntialiasingTrigger (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfAntialiasingTrigger, 
             this->getType().getFieldDesc(AntialiasingTriggerFieldId)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleAntialiasingTrigger(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfAntialiasingTrigger, 
             this->getType().getFieldDesc(AntialiasingTriggerFieldId)));

    editSField(AntialiasingTriggerFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleFrustumCulling  (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfFrustumCulling, 
             this->getType().getFieldDesc(FrustumCullingFieldId)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleFrustumCulling (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfFrustumCulling, 
             this->getType().getFieldDesc(FrustumCullingFieldId)));

    editSField(FrustumCullingFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleBackfaceCulling (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfBackfaceCulling, 
             this->getType().getFieldDesc(BackfaceCullingFieldId)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleBackfaceCulling(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfBackfaceCulling, 
             this->getType().getFieldDesc(BackfaceCullingFieldId)));

    editSField(BackfaceCullingFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleSmallFeatureCulling (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfSmallFeatureCulling, 
             this->getType().getFieldDesc(SmallFeatureCullingFieldId)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleSmallFeatureCulling(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfSmallFeatureCulling, 
             this->getType().getFieldDesc(SmallFeatureCullingFieldId)));

    editSField(SmallFeatureCullingFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleSmallFeaturePixels (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfSmallFeaturePixels, 
             this->getType().getFieldDesc(SmallFeaturePixelsFieldId)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleSmallFeaturePixels(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfSmallFeaturePixels, 
             this->getType().getFieldDesc(SmallFeaturePixelsFieldId)));

    editSField(SmallFeaturePixelsFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleSmallFeatureThreshold (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfSmallFeatureThreshold, 
             this->getType().getFieldDesc(SmallFeatureThresholdFieldId)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleSmallFeatureThreshold(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfSmallFeatureThreshold, 
             this->getType().getFieldDesc(SmallFeatureThresholdFieldId)));

    editSField(SmallFeatureThresholdFieldMask);

    return returnValue;
}

GetFieldHandlePtr RenderOptionsBase::getHandleFirstFrame      (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfFirstFrame, 
             this->getType().getFieldDesc(FirstFrameFieldId)));

    return returnValue;
}

EditFieldHandlePtr RenderOptionsBase::editHandleFirstFrame     (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfFirstFrame, 
             this->getType().getFieldDesc(FirstFrameFieldId)));

    editSField(FirstFrameFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void RenderOptionsBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<RenderOptionsBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr RenderOptionsBase::createAspectCopy(void) const
{
    RenderOptionsPtr returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const RenderOptions *>(this));

    return returnValue;
}
#endif

void RenderOptionsBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<RenderOptionsPtr>::_type("RenderOptionsPtr", "FieldContainerAttachmentPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(RenderOptionsPtr)

OSG_SFIELDTYPE_INST(FieldContainerPtrSField, RenderOptionsPtr, 0);

OSG_FIELD_DLLEXPORT_DEF2(FieldContainerPtrSField, RenderOptionsPtr, 0);

OSG_MFIELDTYPE_INST(FieldContainerPtrMField, RenderOptionsPtr, 0);

OSG_FIELD_DLLEXPORT_DEF2(FieldContainerPtrMField, RenderOptionsPtr, 0);

OSG_END_NAMESPACE
