/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Background!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEBACKGROUNDINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>




#include "OSGBackgroundBase.h"
#include "OSGBackground.h"

#include "boost/bind.hpp"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::Background
    \ingroup GrpSystemWindowBackgrounds

    Background is the base class for all background/buffer clearing.  See \ref
    PageSystemWindowBackground for a description.

    \ext

    To create a new Background the method that has be overridden is
    clear(DrawActionBase * action, Viewport * port);. It can directly call OpenGL
    commands, but should restore the state after it's done.

    \endext
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var Int32           BackgroundBase::_sfClearStencilBit
    Usually 0 is used to clear all stencil bitplanes 
    (clear is deactivated if smaller zero).
*/

/*! \var Real32          BackgroundBase::_sfDepth
    Depth value for clear, defaults to 1.
*/


void BackgroundBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "clearStencilBit",
        "Usually 0 is used to clear all stencil bitplanes \n"
        "(clear is deactivated if smaller zero).\n",
        ClearStencilBitFieldId, ClearStencilBitFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&BackgroundBase::editHandleClearStencilBit),
        static_cast<FieldGetMethodSig >(&BackgroundBase::getHandleClearStencilBit));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "depth",
        "Depth value for clear, defaults to 1.\n",
        DepthFieldId, DepthFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&BackgroundBase::editHandleDepth),
        static_cast<FieldGetMethodSig >(&BackgroundBase::getHandleDepth));

    oType.addInitialDesc(pDesc);
}


BackgroundBase::TypeObject BackgroundBase::_type(
    BackgroundBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    Background::initMethod,
    Background::exitMethod,
    (InitalInsertDescFunc) &BackgroundBase::classDescInserter,
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"Background\"\n"
    "\tparent=\"AttachmentContainer\"\n"
    "\tlibrary=\"System\"\n"
    "\tstructure=\"abstract\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    ">\n"
    "\\ingroup GrpSystemWindowBackgrounds\n"
    "\n"
    "Background is the base class for all background/buffer clearing.  See \\ref\n"
    "PageSystemWindowBackground for a description.\n"
    "\n"
    "\\ext\n"
    "\n"
    "To create a new Background the method that has be overridden is\n"
    "clear(DrawActionBase * action, Viewport * port);. It can directly call OpenGL\n"
    "commands, but should restore the state after it's done.\n"
    "\n"
    "\\endext\n"
    " \t<Field\n"
    " \t\tname=\"clearStencilBit\"\n"
    " \t\ttype=\"Int32\"\n"
    " \t\tcardinality=\"single\"\n"
    " \t\tvisibility=\"external\"\n"
    " \t\tdefaultValue=\"-1\"\n"
    " \t\taccess=\"public\"\n"
    " \t>\n"
    " \tUsually 0 is used to clear all stencil bitplanes \n"
    "    (clear is deactivated if smaller zero).\n"
    " \t</Field>\n"
    " \t<Field\n"
    " \t\tname=\"depth\"\n"
    " \t\ttype=\"Real32\"\n"
    " \t\tcardinality=\"single\"\n"
    " \t\tvisibility=\"external\"\n"
    " \t\tdefaultValue=\"1.f\"\n"
    " \t\taccess=\"public\"\n"
    " \t>\n"
    " \tDepth value for clear, defaults to 1.\n"
    " \t</Field>\n"
    "</FieldContainer>\n",
    "\\ingroup GrpSystemWindowBackgrounds\n"
    "\n"
    "Background is the base class for all background/buffer clearing.  See \\ref\n"
    "PageSystemWindowBackground for a description.\n"
    "\n"
    "\\ext\n"
    "\n"
    "To create a new Background the method that has be overridden is\n"
    "clear(DrawActionBase * action, Viewport * port);. It can directly call OpenGL\n"
    "commands, but should restore the state after it's done.\n"
    "\n"
    "\\endext\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &BackgroundBase::getType(void)
{
    return _type;
}

const FieldContainerType &BackgroundBase::getType(void) const
{
    return _type;
}

UInt32 BackgroundBase::getContainerSize(void) const
{
    return sizeof(Background);
}

/*------------------------- decorator get ------------------------------*/


SFInt32 *BackgroundBase::editSFClearStencilBit(void)
{
    editSField(ClearStencilBitFieldMask);

    return &_sfClearStencilBit;
}

const SFInt32 *BackgroundBase::getSFClearStencilBit(void) const
{
    return &_sfClearStencilBit;
}

#ifdef OSG_1_GET_COMPAT
SFInt32             *BackgroundBase::getSFClearStencilBit(void)
{
    return this->editSFClearStencilBit();
}
#endif

SFReal32 *BackgroundBase::editSFDepth(void)
{
    editSField(DepthFieldMask);

    return &_sfDepth;
}

const SFReal32 *BackgroundBase::getSFDepth(void) const
{
    return &_sfDepth;
}

#ifdef OSG_1_GET_COMPAT
SFReal32            *BackgroundBase::getSFDepth          (void)
{
    return this->editSFDepth          ();
}
#endif





/*------------------------------ access -----------------------------------*/

UInt32 BackgroundBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ClearStencilBitFieldMask & whichField))
    {
        returnValue += _sfClearStencilBit.getBinSize();
    }
    if(FieldBits::NoField != (DepthFieldMask & whichField))
    {
        returnValue += _sfDepth.getBinSize();
    }

    return returnValue;
}

void BackgroundBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ClearStencilBitFieldMask & whichField))
    {
        _sfClearStencilBit.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DepthFieldMask & whichField))
    {
        _sfDepth.copyToBin(pMem);
    }
}

void BackgroundBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ClearStencilBitFieldMask & whichField))
    {
        _sfClearStencilBit.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DepthFieldMask & whichField))
    {
        _sfDepth.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

BackgroundBase::BackgroundBase(void) :
    Inherited(),
    _sfClearStencilBit        (Int32(-1)),
    _sfDepth                  (Real32(1.f))
{
}

BackgroundBase::BackgroundBase(const BackgroundBase &source) :
    Inherited(source),
    _sfClearStencilBit        (source._sfClearStencilBit        ),
    _sfDepth                  (source._sfDepth                  )
{
}


/*-------------------------- destructors ----------------------------------*/

BackgroundBase::~BackgroundBase(void)
{
}


GetFieldHandlePtr BackgroundBase::getHandleClearStencilBit (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfClearStencilBit, 
             this->getType().getFieldDesc(ClearStencilBitFieldId)));

    return returnValue;
}

EditFieldHandlePtr BackgroundBase::editHandleClearStencilBit(void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfClearStencilBit, 
             this->getType().getFieldDesc(ClearStencilBitFieldId)));

    editSField(ClearStencilBitFieldMask);

    return returnValue;
}

GetFieldHandlePtr BackgroundBase::getHandleDepth           (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfDepth, 
             this->getType().getFieldDesc(DepthFieldId)));

    return returnValue;
}

EditFieldHandlePtr BackgroundBase::editHandleDepth          (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfDepth, 
             this->getType().getFieldDesc(DepthFieldId)));

    editSField(DepthFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void BackgroundBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<BackgroundBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif



void BackgroundBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<BackgroundPtr>::_type("BackgroundPtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(BackgroundPtr)

OSG_SFIELDTYPE_INST(FieldContainerPtrSField, 
                    BackgroundPtr, 
                    RecordedRefCounts,
                    0);

OSG_FIELD_DLLEXPORT_DEF3(FieldContainerPtrSField, 
                         BackgroundPtr, 
                         RecordedRefCounts,
                         0);

OSG_MFIELDTYPE_INST(FieldContainerPtrMField, BackgroundPtr, 0);

OSG_FIELD_DLLEXPORT_DEF2(FieldContainerPtrMField, BackgroundPtr, 0);

OSG_END_NAMESPACE
