/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class RenderOptions!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &RenderOptionsBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 RenderOptionsBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 RenderOptionsBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the RenderOptions::_sfStatistic field.

inline
bool &RenderOptionsBase::editStatistic(void)
{
    editSField(StatisticFieldMask);

    return _sfStatistic.getValue();
}

//! Get the value of the RenderOptions::_sfStatistic field.
inline
const bool &RenderOptionsBase::getStatistic(void) const
{
    return _sfStatistic.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
bool                &RenderOptionsBase::getStatistic      (void)
{
    return this->editStatistic      ();
}
#endif

//! Set the value of the RenderOptions::_sfStatistic field.
inline
void RenderOptionsBase::setStatistic(const bool &value)
{
    editSField(StatisticFieldMask);

    _sfStatistic.setValue(value);
}
//! Get the value of the RenderOptions::_sfPolygonMode field.

inline
GLenum &RenderOptionsBase::editPolygonMode(void)
{
    editSField(PolygonModeFieldMask);

    return _sfPolygonMode.getValue();
}

//! Get the value of the RenderOptions::_sfPolygonMode field.
inline
const GLenum &RenderOptionsBase::getPolygonMode(void) const
{
    return _sfPolygonMode.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
GLenum              &RenderOptionsBase::getPolygonMode    (void)
{
    return this->editPolygonMode    ();
}
#endif

//! Set the value of the RenderOptions::_sfPolygonMode field.
inline
void RenderOptionsBase::setPolygonMode(const GLenum &value)
{
    editSField(PolygonModeFieldMask);

    _sfPolygonMode.setValue(value);
}
//! Get the value of the RenderOptions::_sfTwoSidedLighting field.

inline
bool &RenderOptionsBase::editTwoSidedLighting(void)
{
    editSField(TwoSidedLightingFieldMask);

    return _sfTwoSidedLighting.getValue();
}

//! Get the value of the RenderOptions::_sfTwoSidedLighting field.
inline
const bool &RenderOptionsBase::getTwoSidedLighting(void) const
{
    return _sfTwoSidedLighting.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
bool                &RenderOptionsBase::getTwoSidedLighting(void)
{
    return this->editTwoSidedLighting();
}
#endif

//! Set the value of the RenderOptions::_sfTwoSidedLighting field.
inline
void RenderOptionsBase::setTwoSidedLighting(const bool &value)
{
    editSField(TwoSidedLightingFieldMask);

    _sfTwoSidedLighting.setValue(value);
}
//! Get the value of the RenderOptions::_sfSpecTexLighting field.

inline
bool &RenderOptionsBase::editSpecTexLighting(void)
{
    editSField(SpecTexLightingFieldMask);

    return _sfSpecTexLighting.getValue();
}

//! Get the value of the RenderOptions::_sfSpecTexLighting field.
inline
const bool &RenderOptionsBase::getSpecTexLighting(void) const
{
    return _sfSpecTexLighting.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
bool                &RenderOptionsBase::getSpecTexLighting(void)
{
    return this->editSpecTexLighting();
}
#endif

//! Set the value of the RenderOptions::_sfSpecTexLighting field.
inline
void RenderOptionsBase::setSpecTexLighting(const bool &value)
{
    editSField(SpecTexLightingFieldMask);

    _sfSpecTexLighting.setValue(value);
}
//! Get the value of the RenderOptions::_sfSortTrans field.

inline
bool &RenderOptionsBase::editSortTrans(void)
{
    editSField(SortTransFieldMask);

    return _sfSortTrans.getValue();
}

//! Get the value of the RenderOptions::_sfSortTrans field.
inline
const bool &RenderOptionsBase::getSortTrans(void) const
{
    return _sfSortTrans.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
bool                &RenderOptionsBase::getSortTrans      (void)
{
    return this->editSortTrans      ();
}
#endif

//! Set the value of the RenderOptions::_sfSortTrans field.
inline
void RenderOptionsBase::setSortTrans(const bool &value)
{
    editSField(SortTransFieldMask);

    _sfSortTrans.setValue(value);
}
//! Get the value of the RenderOptions::_sfZWriteTrans field.

inline
bool &RenderOptionsBase::editZWriteTrans(void)
{
    editSField(ZWriteTransFieldMask);

    return _sfZWriteTrans.getValue();
}

//! Get the value of the RenderOptions::_sfZWriteTrans field.
inline
const bool &RenderOptionsBase::getZWriteTrans(void) const
{
    return _sfZWriteTrans.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
bool                &RenderOptionsBase::getZWriteTrans    (void)
{
    return this->editZWriteTrans    ();
}
#endif

//! Set the value of the RenderOptions::_sfZWriteTrans field.
inline
void RenderOptionsBase::setZWriteTrans(const bool &value)
{
    editSField(ZWriteTransFieldMask);

    _sfZWriteTrans.setValue(value);
}
//! Get the value of the RenderOptions::_sfLocalLights field.

inline
bool &RenderOptionsBase::editLocalLights(void)
{
    editSField(LocalLightsFieldMask);

    return _sfLocalLights.getValue();
}

//! Get the value of the RenderOptions::_sfLocalLights field.
inline
const bool &RenderOptionsBase::getLocalLights(void) const
{
    return _sfLocalLights.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
bool                &RenderOptionsBase::getLocalLights    (void)
{
    return this->editLocalLights    ();
}
#endif

//! Set the value of the RenderOptions::_sfLocalLights field.
inline
void RenderOptionsBase::setLocalLights(const bool &value)
{
    editSField(LocalLightsFieldMask);

    _sfLocalLights.setValue(value);
}
//! Get the value of the RenderOptions::_sfCorrectTwoSidedLighting field.

inline
bool &RenderOptionsBase::editCorrectTwoSidedLighting(void)
{
    editSField(CorrectTwoSidedLightingFieldMask);

    return _sfCorrectTwoSidedLighting.getValue();
}

//! Get the value of the RenderOptions::_sfCorrectTwoSidedLighting field.
inline
const bool &RenderOptionsBase::getCorrectTwoSidedLighting(void) const
{
    return _sfCorrectTwoSidedLighting.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
bool                &RenderOptionsBase::getCorrectTwoSidedLighting(void)
{
    return this->editCorrectTwoSidedLighting();
}
#endif

//! Set the value of the RenderOptions::_sfCorrectTwoSidedLighting field.
inline
void RenderOptionsBase::setCorrectTwoSidedLighting(const bool &value)
{
    editSField(CorrectTwoSidedLightingFieldMask);

    _sfCorrectTwoSidedLighting.setValue(value);
}
//! Get the value of the RenderOptions::_sfOcclusionCulling field.

inline
bool &RenderOptionsBase::editOcclusionCulling(void)
{
    editSField(OcclusionCullingFieldMask);

    return _sfOcclusionCulling.getValue();
}

//! Get the value of the RenderOptions::_sfOcclusionCulling field.
inline
const bool &RenderOptionsBase::getOcclusionCulling(void) const
{
    return _sfOcclusionCulling.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
bool                &RenderOptionsBase::getOcclusionCulling(void)
{
    return this->editOcclusionCulling();
}
#endif

//! Set the value of the RenderOptions::_sfOcclusionCulling field.
inline
void RenderOptionsBase::setOcclusionCulling(const bool &value)
{
    editSField(OcclusionCullingFieldMask);

    _sfOcclusionCulling.setValue(value);
}
//! Get the value of the RenderOptions::_sfAntialiasing field.

inline
bool &RenderOptionsBase::editAntialiasing(void)
{
    editSField(AntialiasingFieldMask);

    return _sfAntialiasing.getValue();
}

//! Get the value of the RenderOptions::_sfAntialiasing field.
inline
const bool &RenderOptionsBase::getAntialiasing(void) const
{
    return _sfAntialiasing.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
bool                &RenderOptionsBase::getAntialiasing   (void)
{
    return this->editAntialiasing   ();
}
#endif

//! Set the value of the RenderOptions::_sfAntialiasing field.
inline
void RenderOptionsBase::setAntialiasing(const bool &value)
{
    editSField(AntialiasingFieldMask);

    _sfAntialiasing.setValue(value);
}
//! Get the value of the RenderOptions::_sfAntialiasingDistance field.

inline
Real32 &RenderOptionsBase::editAntialiasingDistance(void)
{
    editSField(AntialiasingDistanceFieldMask);

    return _sfAntialiasingDistance.getValue();
}

//! Get the value of the RenderOptions::_sfAntialiasingDistance field.
inline
const Real32 &RenderOptionsBase::getAntialiasingDistance(void) const
{
    return _sfAntialiasingDistance.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
Real32              &RenderOptionsBase::getAntialiasingDistance(void)
{
    return this->editAntialiasingDistance();
}
#endif

//! Set the value of the RenderOptions::_sfAntialiasingDistance field.
inline
void RenderOptionsBase::setAntialiasingDistance(const Real32 &value)
{
    editSField(AntialiasingDistanceFieldMask);

    _sfAntialiasingDistance.setValue(value);
}
//! Get the value of the RenderOptions::_sfAntialiasingScale field.

inline
Real32 &RenderOptionsBase::editAntialiasingScale(void)
{
    editSField(AntialiasingScaleFieldMask);

    return _sfAntialiasingScale.getValue();
}

//! Get the value of the RenderOptions::_sfAntialiasingScale field.
inline
const Real32 &RenderOptionsBase::getAntialiasingScale(void) const
{
    return _sfAntialiasingScale.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
Real32              &RenderOptionsBase::getAntialiasingScale(void)
{
    return this->editAntialiasingScale();
}
#endif

//! Set the value of the RenderOptions::_sfAntialiasingScale field.
inline
void RenderOptionsBase::setAntialiasingScale(const Real32 &value)
{
    editSField(AntialiasingScaleFieldMask);

    _sfAntialiasingScale.setValue(value);
}
//! Get the value of the RenderOptions::_sfAntialiasingTrigger field.

inline
UInt32 &RenderOptionsBase::editAntialiasingTrigger(void)
{
    editSField(AntialiasingTriggerFieldMask);

    return _sfAntialiasingTrigger.getValue();
}

//! Get the value of the RenderOptions::_sfAntialiasingTrigger field.
inline
const UInt32 &RenderOptionsBase::getAntialiasingTrigger(void) const
{
    return _sfAntialiasingTrigger.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
UInt32              &RenderOptionsBase::getAntialiasingTrigger(void)
{
    return this->editAntialiasingTrigger();
}
#endif

//! Set the value of the RenderOptions::_sfAntialiasingTrigger field.
inline
void RenderOptionsBase::setAntialiasingTrigger(const UInt32 &value)
{
    editSField(AntialiasingTriggerFieldMask);

    _sfAntialiasingTrigger.setValue(value);
}
//! Get the value of the RenderOptions::_sfBackfaceCulling field.

inline
bool &RenderOptionsBase::editBackfaceCulling(void)
{
    editSField(BackfaceCullingFieldMask);

    return _sfBackfaceCulling.getValue();
}

//! Get the value of the RenderOptions::_sfBackfaceCulling field.
inline
const bool &RenderOptionsBase::getBackfaceCulling(void) const
{
    return _sfBackfaceCulling.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
bool                &RenderOptionsBase::getBackfaceCulling(void)
{
    return this->editBackfaceCulling();
}
#endif

//! Set the value of the RenderOptions::_sfBackfaceCulling field.
inline
void RenderOptionsBase::setBackfaceCulling(const bool &value)
{
    editSField(BackfaceCullingFieldMask);

    _sfBackfaceCulling.setValue(value);
}
//! Get the value of the RenderOptions::_sfSmallFeatureCulling field.

inline
bool &RenderOptionsBase::editSmallFeatureCulling(void)
{
    editSField(SmallFeatureCullingFieldMask);

    return _sfSmallFeatureCulling.getValue();
}

//! Get the value of the RenderOptions::_sfSmallFeatureCulling field.
inline
const bool &RenderOptionsBase::getSmallFeatureCulling(void) const
{
    return _sfSmallFeatureCulling.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
bool                &RenderOptionsBase::getSmallFeatureCulling(void)
{
    return this->editSmallFeatureCulling();
}
#endif

//! Set the value of the RenderOptions::_sfSmallFeatureCulling field.
inline
void RenderOptionsBase::setSmallFeatureCulling(const bool &value)
{
    editSField(SmallFeatureCullingFieldMask);

    _sfSmallFeatureCulling.setValue(value);
}
//! Get the value of the RenderOptions::_sfSmallFeaturePixels field.

inline
Real32 &RenderOptionsBase::editSmallFeaturePixels(void)
{
    editSField(SmallFeaturePixelsFieldMask);

    return _sfSmallFeaturePixels.getValue();
}

//! Get the value of the RenderOptions::_sfSmallFeaturePixels field.
inline
const Real32 &RenderOptionsBase::getSmallFeaturePixels(void) const
{
    return _sfSmallFeaturePixels.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
Real32              &RenderOptionsBase::getSmallFeaturePixels(void)
{
    return this->editSmallFeaturePixels();
}
#endif

//! Set the value of the RenderOptions::_sfSmallFeaturePixels field.
inline
void RenderOptionsBase::setSmallFeaturePixels(const Real32 &value)
{
    editSField(SmallFeaturePixelsFieldMask);

    _sfSmallFeaturePixels.setValue(value);
}
//! Get the value of the RenderOptions::_sfSmallFeatureThreshold field.

inline
UInt32 &RenderOptionsBase::editSmallFeatureThreshold(void)
{
    editSField(SmallFeatureThresholdFieldMask);

    return _sfSmallFeatureThreshold.getValue();
}

//! Get the value of the RenderOptions::_sfSmallFeatureThreshold field.
inline
const UInt32 &RenderOptionsBase::getSmallFeatureThreshold(void) const
{
    return _sfSmallFeatureThreshold.getValue();
}

#ifdef OSG_1_GET_COMPAT
inline
UInt32              &RenderOptionsBase::getSmallFeatureThreshold(void)
{
    return this->editSmallFeatureThreshold();
}
#endif

//! Set the value of the RenderOptions::_sfSmallFeatureThreshold field.
inline
void RenderOptionsBase::setSmallFeatureThreshold(const UInt32 &value)
{
    editSField(SmallFeatureThresholdFieldMask);

    _sfSmallFeatureThreshold.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void RenderOptionsBase::execSync (      RenderOptionsBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (StatisticFieldMask & whichField))
        _sfStatistic.syncWith(pFrom->_sfStatistic);

    if(FieldBits::NoField != (PolygonModeFieldMask & whichField))
        _sfPolygonMode.syncWith(pFrom->_sfPolygonMode);

    if(FieldBits::NoField != (TwoSidedLightingFieldMask & whichField))
        _sfTwoSidedLighting.syncWith(pFrom->_sfTwoSidedLighting);

    if(FieldBits::NoField != (SpecTexLightingFieldMask & whichField))
        _sfSpecTexLighting.syncWith(pFrom->_sfSpecTexLighting);

    if(FieldBits::NoField != (SortTransFieldMask & whichField))
        _sfSortTrans.syncWith(pFrom->_sfSortTrans);

    if(FieldBits::NoField != (ZWriteTransFieldMask & whichField))
        _sfZWriteTrans.syncWith(pFrom->_sfZWriteTrans);

    if(FieldBits::NoField != (LocalLightsFieldMask & whichField))
        _sfLocalLights.syncWith(pFrom->_sfLocalLights);

    if(FieldBits::NoField != (CorrectTwoSidedLightingFieldMask & whichField))
        _sfCorrectTwoSidedLighting.syncWith(pFrom->_sfCorrectTwoSidedLighting);

    if(FieldBits::NoField != (OcclusionCullingFieldMask & whichField))
        _sfOcclusionCulling.syncWith(pFrom->_sfOcclusionCulling);

    if(FieldBits::NoField != (AntialiasingFieldMask & whichField))
        _sfAntialiasing.syncWith(pFrom->_sfAntialiasing);

    if(FieldBits::NoField != (AntialiasingDistanceFieldMask & whichField))
        _sfAntialiasingDistance.syncWith(pFrom->_sfAntialiasingDistance);

    if(FieldBits::NoField != (AntialiasingScaleFieldMask & whichField))
        _sfAntialiasingScale.syncWith(pFrom->_sfAntialiasingScale);

    if(FieldBits::NoField != (AntialiasingTriggerFieldMask & whichField))
        _sfAntialiasingTrigger.syncWith(pFrom->_sfAntialiasingTrigger);

    if(FieldBits::NoField != (BackfaceCullingFieldMask & whichField))
        _sfBackfaceCulling.syncWith(pFrom->_sfBackfaceCulling);

    if(FieldBits::NoField != (SmallFeatureCullingFieldMask & whichField))
        _sfSmallFeatureCulling.syncWith(pFrom->_sfSmallFeatureCulling);

    if(FieldBits::NoField != (SmallFeaturePixelsFieldMask & whichField))
        _sfSmallFeaturePixels.syncWith(pFrom->_sfSmallFeaturePixels);

    if(FieldBits::NoField != (SmallFeatureThresholdFieldMask & whichField))
        _sfSmallFeatureThreshold.syncWith(pFrom->_sfSmallFeatureThreshold);
}
#endif


inline
Char8 *RenderOptionsBase::getClassname(void)
{
    return "RenderOptions";
}
OSG_GEN_CONTAINERPTR(RenderOptions);

OSG_END_NAMESPACE

