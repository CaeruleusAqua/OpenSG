/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Camera!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILECAMERAINST

#include <stdlib.h>
#include <stdio.h>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>



#include <OSGNode.h> // Beacon Class

#include "OSGCameraBase.h"
#include "OSGCamera.h"

OSG_USING_NAMESPACE

// Field descriptions

/*! \var NodePtr CameraBase::_sfBeacon
    	The object that define's the camera's coordinate system. The camera is positioned
	at the origin of the system and looks doen the negative z-axis (OpenGL-style).

*/
/*! \var Real32 CameraBase::_sfNear
    	The near distance of the camera.

*/
/*! \var Real32 CameraBase::_sfFar
    	The far distance of the camera.

*/

void CameraBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL; 


    pDesc = new SFNodePtr::Description(
        SFNodePtr::getClassType(), 
        "beacon", 
        "	The object that define's the camera's coordinate system. The camera is positioned\n	at the origin of the system and looks doen the negative z-axis (OpenGL-style).\n",
        BeaconFieldId, BeaconFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&CameraBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&CameraBase::getSFBeacon));

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFReal32 *(CameraBase::*GetSFNearF)(void) const;

    GetSFNearF GetSFNear = &CameraBase::getSFNear;
#endif

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(), 
        "near", 
        "	The near distance of the camera.\n",
        NearFieldId, NearFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&CameraBase::editSFNear),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFNear));
#else
        reinterpret_cast<FieldGetMethodSig >(&CameraBase::getSFNear));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFReal32 *(CameraBase::*GetSFFarF)(void) const;

    GetSFFarF GetSFFar = &CameraBase::getSFFar;
#endif

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(), 
        "far", 
        "	The far distance of the camera.\n",
        FarFieldId, FarFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&CameraBase::editSFFar),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFFar));
#else
        reinterpret_cast<FieldGetMethodSig >(&CameraBase::getSFFar));
#endif

    oType.addInitialDesc(pDesc);
}


CameraBase::TypeObject CameraBase::_type(true,
    CameraBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL, 
    Camera::initMethod,
    (InitalInsertDescFunc) &CameraBase::classDescInserter,
    false,
    "<?xml version=\"1.0\" ?>\n"
"\n"
"<FieldContainer\n"
"	name=\"Camera\"\n"
"	parent=\"AttachmentContainer\"\n"
"	library=\"System\"\n"
"	structure=\"abstract\"\n"
"	pointerfieldtypes=\"both\"\n"
"	systemcomponent=\"true\"\n"
"	parentsystemcomponent=\"true\"\n"
"	decoratable=\"true\"\n"
">\n"
"The base class for the camera.\n"
"	<Field\n"
"		name=\"beacon\"\n"
"		type=\"NodePtr\"\n"
"		cardinality=\"single\"\n"
"		visibility=\"external\"\n"
"	>\n"
"	The object that define's the camera's coordinate system. The camera is positioned\n"
"	at the origin of the system and looks doen the negative z-axis (OpenGL-style).\n"
"	</Field>\n"
"	<Field\n"
"		name=\"near\"\n"
"		type=\"Real32\"\n"
"		cardinality=\"single\"\n"
"		visibility=\"external\"\n"
"	>\n"
"	The near distance of the camera.\n"
"	</Field>\n"
"	<Field\n"
"		name=\"far\"\n"
"		type=\"Real32\"\n"
"		cardinality=\"single\"\n"
"		visibility=\"external\"\n"
"	>\n"
"	The far distance of the camera.\n"
"	</Field>\n"
"</FieldContainer>\n"
,
    "The base class for the camera.\n" 
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &CameraBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &CameraBase::getType(void) const 
{
    return _type;
} 

UInt32 CameraBase::getContainerSize(void) const 
{ 
    return sizeof(Camera); 
}

/*------------------------- decorator get ------------------------------*/


//! Get the Camera::_sfBeacon field.
const SFNodePtr *CameraBase::getSFBeacon(void) const
{
    return &_sfBeacon;
}

SFReal32 *CameraBase::editSFNear(void)
{
    editSField(NearFieldMask);

    return &_sfNear;
}

const SFReal32 *CameraBase::getSFNear(void) const
{
    return &_sfNear;
}

#ifdef OSG_1_COMPAT
SFReal32 *CameraBase::getSFNear(void)
{
    return this->editSFNear();
}
#endif

SFReal32 *CameraBase::editSFFar(void)
{
    editSField(FarFieldMask);

    return &_sfFar;
}

const SFReal32 *CameraBase::getSFFar(void) const
{
    return &_sfFar;
}

#ifdef OSG_1_COMPAT
SFReal32 *CameraBase::getSFFar(void)
{
    return this->editSFFar();
}
#endif


void CameraBase::pushToField(      FieldContainerPtrConstArg pNewElement,
                                    const UInt32                    uiFieldId  )
{
    Inherited::pushToField(pNewElement, uiFieldId);

    if(uiFieldId == BeaconFieldId)
    {
        static_cast<Camera *>(this)->setBeacon(
            cast_dynamic<NodePtr>(pNewElement));
    }
}

void CameraBase::insertIntoMField(const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::insertIntoMField(uiIndex, pNewElement, uiFieldId);

}

void CameraBase::replaceInMField (const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::replaceInMField(uiIndex, pNewElement, uiFieldId);

}

void CameraBase::replaceInMField (      FieldContainerPtrConstArg pOldElement,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::replaceInMField(pOldElement, pNewElement, uiFieldId);

}

void CameraBase::removeFromMField(const UInt32 uiIndex,
                                         const UInt32 uiFieldId)
{
    Inherited::removeFromMField(uiIndex, uiFieldId);

}

void CameraBase::removeFromMField(      FieldContainerPtrConstArg pElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::removeFromMField(pElement, uiFieldId);

}

void CameraBase::clearField(const UInt32 uiFieldId)
{
    Inherited::clearField(uiFieldId);

    if(uiFieldId == BeaconFieldId)
    {
        static_cast<Camera *>(this)->setBeacon(NullFC);
    }
}



/*------------------------------ access -----------------------------------*/

UInt32 CameraBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (BeaconFieldMask & whichField))
    {
        returnValue += _sfBeacon.getBinSize();
    }
    if(FieldBits::NoField != (NearFieldMask & whichField))
    {
        returnValue += _sfNear.getBinSize();
    }
    if(FieldBits::NoField != (FarFieldMask & whichField))
    {
        returnValue += _sfFar.getBinSize();
    }

    return returnValue;
}

void CameraBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (BeaconFieldMask & whichField))
    {
        _sfBeacon.copyToBin(pMem);
    }
    if(FieldBits::NoField != (NearFieldMask & whichField))
    {
        _sfNear.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FarFieldMask & whichField))
    {
        _sfFar.copyToBin(pMem);
    }
}

void CameraBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (BeaconFieldMask & whichField))
    {
        _sfBeacon.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (NearFieldMask & whichField))
    {
        _sfNear.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FarFieldMask & whichField))
    {
        _sfFar.copyFromBin(pMem);
    }
}



/*------------------------- constructors ----------------------------------*/

CameraBase::CameraBase(void) :
    Inherited(),
    _sfBeacon(),
    _sfNear(),
    _sfFar()
{
}

CameraBase::CameraBase(const CameraBase &source) :
    Inherited(source),
    _sfBeacon(),
    _sfNear(source._sfNear),
    _sfFar(source._sfFar)
{
}

/*-------------------------- destructors ----------------------------------*/

CameraBase::~CameraBase(void)
{
}

void CameraBase::onCreate(const Camera *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {

        this->setBeacon(source->getBeacon());
    }
}

#ifdef OSG_MT_FIELDCONTAINERPTR
void CameraBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo,
                                        UInt32             uiCopyOffset)
{
    this->execSync(static_cast<CameraBase *>(&oFrom),
                   whichField, 
                   syncMode, 
                   uiSyncInfo,
                   uiCopyOffset);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
void CameraBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<CameraBase *>(&oFrom), 
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif

#if 0
void CameraBase::execBeginEditV(ConstFieldMaskArg whichField,
                                       UInt32            uiAspect,
                                       UInt32            uiContainerSize)
{
    this->execBeginEdit(whichField, uiAspect, uiContainerSize);
}
#endif


void CameraBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<Camera *>(this)->setBeacon(NullFC);
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the Camera::_sfBeacon field.
NodePtrConst CameraBase::getBeacon(void) const
{
    return _sfBeacon.getValue();
}

//! Set the value of the Camera::_sfBeacon field.
void CameraBase::setBeacon(NodePtrConstArg value)
{
    editSField(BeaconFieldMask);

    setRefd(_sfBeacon.getValue(), value);
}
//! Get the value of the Camera::_sfNear field.

Real32 &CameraBase::editNear(void)
{
    editSField(NearFieldMask);

    return _sfNear.getValue();
}

//! Get the value of the Camera::_sfNear field.
const Real32 &CameraBase::getNear(void) const
{
    return _sfNear.getValue();
}

#ifdef OSG_1_COMPAT
Real32 &CameraBase::getNear(void)
{
    return this->editNear();
}
#endif

//! Set the value of the Camera::_sfNear field.
void CameraBase::setNear(const Real32 &value)
{
    editSField(NearFieldMask);

    _sfNear.setValue(value);
}
//! Get the value of the Camera::_sfFar field.

Real32 &CameraBase::editFar(void)
{
    editSField(FarFieldMask);

    return _sfFar.getValue();
}

//! Get the value of the Camera::_sfFar field.
const Real32 &CameraBase::getFar(void) const
{
    return _sfFar.getValue();
}

#ifdef OSG_1_COMPAT
Real32 &CameraBase::getFar(void)
{
    return this->editFar();
}
#endif

//! Set the value of the Camera::_sfFar field.
void CameraBase::setFar(const Real32 &value)
{
    editSField(FarFieldMask);

    _sfFar.setValue(value);
}


#include "OSGSField.ins"
#include "OSGMField.ins"

#if defined(OSG_TMPL_STATIC_MEMBER_NEEDS_FUNCTION_INSTANTIATION) || \
    defined(OSG_TMPL_STATIC_MEMBER_NEEDS_CLASS_INSTANTIATION   )

#include "OSGSFieldFuncs.ins"
#include "OSGMFieldFuncs.ins"
#endif

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<CameraPtr>::_type("CameraPtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(CameraPtr)

OSG_FIELD_DLLEXPORT_DEF1(SField, CameraPtr);
OSG_FIELD_DLLEXPORT_DEF1(MField, CameraPtr);

OSG_END_NAMESPACE


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id$";
    static Char8 cvsid_hpp       [] = OSGCAMERABASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGCAMERABASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGCAMERAFIELDS_HEADER_CVSID;
}
