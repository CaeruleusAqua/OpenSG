/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Window!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEWINDOWINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>



#include <OSGViewport.h> // Port Class

#include "OSGWindowBase.h"
#include "OSGWindow.h"

OSG_USING_NAMESPACE

// Field descriptions

/*! \var UInt16 WindowBase::_sfWidth
    
*/
/*! \var UInt16 WindowBase::_sfHeight
    
*/
/*! \var ViewportPtr WindowBase::_mfPort
    
*/
/*! \var bool WindowBase::_sfResizePending
    
*/
/*! \var UInt32 WindowBase::_sfGlObjectEventCounter
    	Counter for GL object events. Needed for multi-aspect updates.
        Is used in glObjectLastRefresh and glObjectLastReinitialize.

*/
/*! \var UInt32 WindowBase::_mfGlObjectLastRefresh
    	indicates the last refresh for the GL object

*/
/*! \var UInt32 WindowBase::_mfGlObjectLastReinitialize
    	indicates the last reinit for the GL object

*/

void WindowBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL; 


#ifdef OSG_1_COMPAT
    typedef const SFUInt16 *(WindowBase::*GetSFWidthF)(void) const;

    GetSFWidthF GetSFWidth = &WindowBase::getSFWidth;
#endif

    pDesc = new SFUInt16::Description(
        SFUInt16::getClassType(), 
        "width", 
        WidthFieldId, WidthFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&WindowBase::editSFWidth),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFWidth));
#else
        reinterpret_cast<FieldGetMethodSig >(&WindowBase::getSFWidth));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFUInt16 *(WindowBase::*GetSFHeightF)(void) const;

    GetSFHeightF GetSFHeight = &WindowBase::getSFHeight;
#endif

    pDesc = new SFUInt16::Description(
        SFUInt16::getClassType(), 
        "height", 
        HeightFieldId, HeightFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&WindowBase::editSFHeight),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFHeight));
#else
        reinterpret_cast<FieldGetMethodSig >(&WindowBase::getSFHeight));
#endif

    oType.addInitialDesc(pDesc);

    pDesc = new MFViewportPtr::Description(
        MFViewportPtr::getClassType(), 
        "port", 
        PortFieldId, PortFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&WindowBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&WindowBase::getMFPort));

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFBool *(WindowBase::*GetSFResizePendingF)(void) const;

    GetSFResizePendingF GetSFResizePending = &WindowBase::getSFResizePending;
#endif

    pDesc = new SFBool::Description(
        SFBool::getClassType(), 
        "resizePending", 
        ResizePendingFieldId, ResizePendingFieldMask,
        true,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&WindowBase::editSFResizePending),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFResizePending));
#else
        reinterpret_cast<FieldGetMethodSig >(&WindowBase::getSFResizePending));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFUInt32 *(WindowBase::*GetSFGlObjectEventCounterF)(void) const;

    GetSFGlObjectEventCounterF GetSFGlObjectEventCounter = &WindowBase::getSFGlObjectEventCounter;
#endif

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(), 
        "glObjectEventCounter", 
        GlObjectEventCounterFieldId, GlObjectEventCounterFieldMask,
        true,
        (Field::FClusterLocal),
        reinterpret_cast<FieldEditMethodSig>(&WindowBase::editSFGlObjectEventCounter),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFGlObjectEventCounter));
#else
        reinterpret_cast<FieldGetMethodSig >(&WindowBase::getSFGlObjectEventCounter));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFUInt32 *(WindowBase::*GetMFGlObjectLastRefreshF)(void) const;

    GetMFGlObjectLastRefreshF GetMFGlObjectLastRefresh = &WindowBase::getMFGlObjectLastRefresh;
#endif

    pDesc = new MFUInt32::Description(
        MFUInt32::getClassType(), 
        "glObjectLastRefresh", 
        GlObjectLastRefreshFieldId, GlObjectLastRefreshFieldMask,
        true,
        (Field::FClusterLocal),
        reinterpret_cast<FieldEditMethodSig>(&WindowBase::editMFGlObjectLastRefresh),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFGlObjectLastRefresh));
#else
        reinterpret_cast<FieldGetMethodSig >(&WindowBase::getMFGlObjectLastRefresh));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFUInt32 *(WindowBase::*GetMFGlObjectLastReinitializeF)(void) const;

    GetMFGlObjectLastReinitializeF GetMFGlObjectLastReinitialize = &WindowBase::getMFGlObjectLastReinitialize;
#endif

    pDesc = new MFUInt32::Description(
        MFUInt32::getClassType(), 
        "glObjectLastReinitialize", 
        GlObjectLastReinitializeFieldId, GlObjectLastReinitializeFieldMask,
        true,
        (Field::FClusterLocal),
        reinterpret_cast<FieldEditMethodSig>(&WindowBase::editMFGlObjectLastReinitialize),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFGlObjectLastReinitialize));
#else
        reinterpret_cast<FieldGetMethodSig >(&WindowBase::getMFGlObjectLastReinitialize));
#endif

    oType.addInitialDesc(pDesc);
}


WindowBase::TypeObject WindowBase::_type(true,
    WindowBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL, 
    Window::initMethod,
    (InitalInsertDescFunc) &WindowBase::classDescInserter,
    false);

/*------------------------------ get -----------------------------------*/

FieldContainerType &WindowBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &WindowBase::getType(void) const 
{
    return _type;
} 

UInt32 WindowBase::getContainerSize(void) const 
{ 
    return sizeof(Window); 
}

/*------------------------- decorator get ------------------------------*/


SFUInt16 *WindowBase::editSFWidth(void)
{
    editSField(WidthFieldMask);

    return &_sfWidth;
}

const SFUInt16 *WindowBase::getSFWidth(void) const
{
    return &_sfWidth;
}

#ifdef OSG_1_COMPAT
SFUInt16 *WindowBase::getSFWidth(void)
{
    return this->editSFWidth();
}
#endif

SFUInt16 *WindowBase::editSFHeight(void)
{
    editSField(HeightFieldMask);

    return &_sfHeight;
}

const SFUInt16 *WindowBase::getSFHeight(void) const
{
    return &_sfHeight;
}

#ifdef OSG_1_COMPAT
SFUInt16 *WindowBase::getSFHeight(void)
{
    return this->editSFHeight();
}
#endif

//! Get the Window::_mfPort field.
const MFViewportPtr *WindowBase::getMFPort(void) const
{
    return &_mfPort;
}

SFBool *WindowBase::editSFResizePending(void)
{
    editSField(ResizePendingFieldMask);

    return &_sfResizePending;
}

const SFBool *WindowBase::getSFResizePending(void) const
{
    return &_sfResizePending;
}

#ifdef OSG_1_COMPAT
SFBool *WindowBase::getSFResizePending(void)
{
    return this->editSFResizePending();
}
#endif

SFUInt32 *WindowBase::editSFGlObjectEventCounter(void)
{
    editSField(GlObjectEventCounterFieldMask);

    return &_sfGlObjectEventCounter;
}

const SFUInt32 *WindowBase::getSFGlObjectEventCounter(void) const
{
    return &_sfGlObjectEventCounter;
}

#ifdef OSG_1_COMPAT
SFUInt32 *WindowBase::getSFGlObjectEventCounter(void)
{
    return this->editSFGlObjectEventCounter();
}
#endif

MFUInt32 *WindowBase::editMFGlObjectLastRefresh(void)
{
    editMField(GlObjectLastRefreshFieldMask, _mfGlObjectLastRefresh);

    return &_mfGlObjectLastRefresh;
}

const MFUInt32 *WindowBase::getMFGlObjectLastRefresh(void) const
{
    return &_mfGlObjectLastRefresh;
}

#ifdef OSG_1_COMPAT
MFUInt32 *WindowBase::getMFGlObjectLastRefresh(void)
{
    return this->editMFGlObjectLastRefresh();
}
#endif

MFUInt32 *WindowBase::editMFGlObjectLastReinitialize(void)
{
    editMField(GlObjectLastReinitializeFieldMask, _mfGlObjectLastReinitialize);

    return &_mfGlObjectLastReinitialize;
}

const MFUInt32 *WindowBase::getMFGlObjectLastReinitialize(void) const
{
    return &_mfGlObjectLastReinitialize;
}

#ifdef OSG_1_COMPAT
MFUInt32 *WindowBase::getMFGlObjectLastReinitialize(void)
{
    return this->editMFGlObjectLastReinitialize();
}
#endif


void WindowBase::pushToField(      FieldContainerPtrConstArg pNewElement,
                                    const UInt32                    uiFieldId  )
{
    Inherited::pushToField(pNewElement, uiFieldId);

    if(uiFieldId == PortFieldId)
    {
        static_cast<Window *>(this)->addPort(
            cast_dynamic<ViewportPtr>(pNewElement));
    }
}

void WindowBase::insertIntoMField(const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::insertIntoMField(uiIndex, pNewElement, uiFieldId);

    if(uiFieldId == PortFieldId)
    {
        static_cast<Window *>(this)->insertPort(
            uiIndex,
            cast_dynamic<ViewportPtr>(pNewElement));
    }
}

void WindowBase::replaceInMField (const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::replaceInMField(uiIndex, pNewElement, uiFieldId);

    if(uiFieldId == PortFieldId)
    {
        static_cast<Window *>(this)->replacePort(
            uiIndex,
            cast_dynamic<ViewportPtr>(pNewElement));
    }
}

void WindowBase::replaceInMField (      FieldContainerPtrConstArg pOldElement,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::replaceInMField(pOldElement, pNewElement, uiFieldId);

    if(uiFieldId == PortFieldId)
    {
        static_cast<Window *>(this)->replacePortyBy(
            cast_dynamic<ViewportPtr>(pOldElement),
            cast_dynamic<ViewportPtr>(pNewElement));
    }
}

void WindowBase::removeFromMField(const UInt32 uiIndex,
                                         const UInt32 uiFieldId)
{
    Inherited::removeFromMField(uiIndex, uiFieldId);

    if(uiFieldId == PortFieldId)
    {
        static_cast<Window *>(this)->subPort(
            uiIndex);
    }
}

void WindowBase::removeFromMField(      FieldContainerPtrConstArg pElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::removeFromMField(pElement, uiFieldId);

    if(uiFieldId == PortFieldId)
    {
        static_cast<Window *>(this)->subPort(
            cast_dynamic<ViewportPtr>(pElement));
    }
}

void WindowBase::clearField(const UInt32 uiFieldId)
{
    Inherited::clearField(uiFieldId);

    if(uiFieldId == PortFieldId)
    {
        static_cast<Window *>(this)->clearPorts();
    }
}

void WindowBase::addPort(ViewportPtrConstArg value)
{
    if(value == NullFC)
        return;

    editMField(PortFieldMask, _mfPort);

    addRef(value);

    _mfPort.push_back(value);

    WindowPtr thisP = Inherited::constructPtr<Window>(
        static_cast<Window *>(this));

    value->setParent(thisP, PortFieldMask);
}

void WindowBase::insertPort(UInt32                uiIndex,
                                             ViewportPtrConstArg value   )
{
    if(value == NullFC)
        return;

    editMField(PortFieldMask, _mfPort);

    MFViewportPtr::iterator fieldIt = _mfPort.begin();

    addRef(value);

    fieldIt += uiIndex;

    _mfPort.insert(fieldIt, value);

    WindowPtr thisP = Inherited::constructPtr<Window>(
        static_cast<Window *>(this));

    value->setParent(thisP, PortFieldMask);
}

void WindowBase::replacePort(UInt32                uiIndex,
                                                 ViewportPtrConstArg value   )
{
    if(value == NullFC)
        return;

    if(uiIndex >= _mfPort.size())
        return;

    editMField(PortFieldMask, _mfPort);

    addRef(value);

    WindowPtr thisP = Inherited::constructPtr<Window>(
        static_cast<Window *>(this));

    if(_mfPort[uiIndex] != NullFC)
    {
        _mfPort[uiIndex]->setParent(thisP, PortFieldMask);
    }

    subRef(_mfPort[uiIndex]);

    _mfPort[uiIndex] = value;

    value->setParent(thisP, PortFieldMask);
}

void WindowBase::replacePortyBy(ViewportPtrConstArg pOldElem,
                                                  ViewportPtrConstArg pNewElem)
{
    if(pNewElem == NullFC)
        return;

    Int32  elemIdx = _mfPort.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(PortFieldMask, _mfPort);

        MFViewportPtr::iterator fieldIt = _mfPort.begin();

        fieldIt += elemIdx;

        WindowPtr thisP = Inherited::constructPtr<Window>(
            static_cast<Window *>(this));

        if(pOldElem != NullFC)
        {
            pOldElem->setParent(NullFC, PortFieldMask);
        }

        if(pNewElem != NullFC)
        {
            pNewElem->setParent(thisP, PortFieldMask);
        }

        addRef(pNewElem);
        subRef(pOldElem);

        (*fieldIt) = pNewElem;
    }
}

void WindowBase::subPort(UInt32 uiIndex)
{
    if(uiIndex < _mfPort.size())
    {
        editMField(PortFieldMask, _mfPort);

        MFViewportPtr::iterator fieldIt = _mfPort.begin();

        fieldIt += uiIndex;

        if(*fieldIt != NullFC)
        {
            (*fieldIt)->setParent(NullFC, PortFieldMask);
        }

        subRef(*fieldIt);

        _mfPort.erase(fieldIt);
    }
}

void WindowBase::subPort(ViewportPtrConstArg value)
{
    Int32 iElemIdx = _mfPort.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(PortFieldMask, _mfPort);

        MFViewportPtr::iterator fieldIt = _mfPort.begin();

        fieldIt += iElemIdx;

        if(*fieldIt != NullFC)
        {
            (*fieldIt)->setParent(NullFC, PortFieldMask);
        }

        subRef(*fieldIt);

        _mfPort.erase(fieldIt);
    }
}
void WindowBase::clearPorts(void)
{
    editMField(PortFieldMask, _mfPort);

    MFViewportPtr::iterator       fieldIt  = _mfPort.begin();
    MFViewportPtr::const_iterator fieldEnd = _mfPort.end  ();

    while(fieldIt != fieldEnd)
    {
        if(*fieldIt != NullFC)
        {
            (*fieldIt)->setParent(NullFC, PortFieldMask);
        }

        subRef(*fieldIt);

        ++fieldIt;
    }

    _mfPort.clear();
}





/*------------------------------ access -----------------------------------*/

UInt32 WindowBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        returnValue += _sfWidth.getBinSize();
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        returnValue += _sfHeight.getBinSize();
    }
    if(FieldBits::NoField != (PortFieldMask & whichField))
    {
        returnValue += _mfPort.getBinSize();
    }
    if(FieldBits::NoField != (ResizePendingFieldMask & whichField))
    {
        returnValue += _sfResizePending.getBinSize();
    }
    if(FieldBits::NoField != (GlObjectEventCounterFieldMask & whichField))
    {
        returnValue += _sfGlObjectEventCounter.getBinSize();
    }
    if(FieldBits::NoField != (GlObjectLastRefreshFieldMask & whichField))
    {
        returnValue += _mfGlObjectLastRefresh.getBinSize();
    }
    if(FieldBits::NoField != (GlObjectLastReinitializeFieldMask & whichField))
    {
        returnValue += _mfGlObjectLastReinitialize.getBinSize();
    }

    return returnValue;
}

void WindowBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        _sfWidth.copyToBin(pMem);
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        _sfHeight.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PortFieldMask & whichField))
    {
        _mfPort.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ResizePendingFieldMask & whichField))
    {
        _sfResizePending.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GlObjectEventCounterFieldMask & whichField))
    {
        _sfGlObjectEventCounter.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GlObjectLastRefreshFieldMask & whichField))
    {
        _mfGlObjectLastRefresh.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GlObjectLastReinitializeFieldMask & whichField))
    {
        _mfGlObjectLastReinitialize.copyToBin(pMem);
    }
}

void WindowBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (WidthFieldMask & whichField))
    {
        _sfWidth.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (HeightFieldMask & whichField))
    {
        _sfHeight.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PortFieldMask & whichField))
    {
        _mfPort.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ResizePendingFieldMask & whichField))
    {
        _sfResizePending.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GlObjectEventCounterFieldMask & whichField))
    {
        _sfGlObjectEventCounter.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GlObjectLastRefreshFieldMask & whichField))
    {
        _mfGlObjectLastRefresh.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GlObjectLastReinitializeFieldMask & whichField))
    {
        _mfGlObjectLastReinitialize.copyFromBin(pMem);
    }
}



/*------------------------- constructors ----------------------------------*/

WindowBase::WindowBase(void) :
    Inherited(),
    _sfWidth(),
    _sfHeight(),
    _mfPort(),
    _sfResizePending(),
    _sfGlObjectEventCounter(UInt32(1)),
    _mfGlObjectLastRefresh(),
    _mfGlObjectLastReinitialize()
{
}

WindowBase::WindowBase(const WindowBase &source) :
    Inherited(source),
    _sfWidth(source._sfWidth),
    _sfHeight(source._sfHeight),
    _mfPort(),
    _sfResizePending(source._sfResizePending),
    _sfGlObjectEventCounter(source._sfGlObjectEventCounter),
    _mfGlObjectLastRefresh(source._mfGlObjectLastRefresh),
    _mfGlObjectLastReinitialize(source._mfGlObjectLastReinitialize)
{
}

/*-------------------------- destructors ----------------------------------*/

WindowBase::~WindowBase(void)
{
}

void WindowBase::onCreate(const Window *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {

        MFViewportPtr::const_iterator PortIt  = 
            source->_mfPort.begin();
        MFViewportPtr::const_iterator PortEnd = 
            source->_mfPort.end  ();

        while(PortIt != PortEnd)
        {
            this->addPort(*PortIt);

            ++PortIt;
        }
    }
}

#ifdef OSG_MT_FIELDCONTAINERPTR
void WindowBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo,
                                        UInt32             uiCopyOffset)
{
    this->execSync(static_cast<WindowBase *>(&oFrom),
                   whichField, 
                   syncMode, 
                   uiSyncInfo,
                   uiCopyOffset);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
void WindowBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<WindowBase *>(&oFrom), 
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif

#if 0
void WindowBase::execBeginEditV(ConstFieldMaskArg whichField,
                                       UInt32            uiAspect,
                                       UInt32            uiContainerSize)
{
    this->execBeginEdit(whichField, uiAspect, uiContainerSize);
}
#endif


void WindowBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<Window *>(this)->clearPorts();
}


#include "OSGSField.ins"
#include "OSGMField.ins"

#if defined(OSG_TMPL_STATIC_MEMBER_NEEDS_FUNCTION_INSTANTIATION) || \
    defined(OSG_TMPL_STATIC_MEMBER_NEEDS_CLASS_INSTANTIATION   )

#include "OSGSFieldFuncs.ins"
#include "OSGMFieldFuncs.ins"
#endif

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<WindowPtr>::_type("WindowPtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(WindowPtr)

OSG_FIELD_DLLEXPORT_DEF1(SField, WindowPtr);
OSG_FIELD_DLLEXPORT_DEF1(MField, WindowPtr);

OSG_END_NAMESPACE


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: $";
    static Char8 cvsid_hpp       [] = OSGWINDOWBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGWINDOWBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGWINDOWFIELDS_HEADER_CVSID;
}
