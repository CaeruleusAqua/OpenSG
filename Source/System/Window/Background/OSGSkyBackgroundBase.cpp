/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SkyBackground!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>



#include <OSGTextureBaseChunk.h> // BackTexture Class
#include <OSGTextureBaseChunk.h> // BottomTexture Class
#include <OSGTextureBaseChunk.h> // FrontTexture Class
#include <OSGTextureBaseChunk.h> // LeftTexture Class
#include <OSGTextureBaseChunk.h> // RightTexture Class
#include <OSGTextureBaseChunk.h> // TopTexture Class
#include <OSGNode.h> // Beacon Class

#include "OSGSkyBackgroundBase.h"
#include "OSGSkyBackground.h"

#include "boost/bind.hpp"

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::SkyBackground
    \ingroup GrpSystemWindowBackgrounds

    A Sky/Ground/Skybox background, inspired by VRML, see \ref
    PageSystemWindowBackgroundSky for a description.

    The sky is defined by the _mfSkyAngle and _mfSkyColor fields, the ground by the
    _mfGroundAngle and _mfGround Color fields. The resolution of the sky sphere can
    be influenced by the _sfSphereRes field. The sky box is defined by the
    _sfBackTexture, _sfFrontTexture, _sfLeftTexture, _sfRightTexture, _sfTopTexture
    and _sfBottomTexture fields.
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var Color4f         SkyBackgroundBase::_mfSkyColor
    The colors for the sky gradient bands. Corresponds to the skyAngle
    angles.  The first value is for the apex (i.e. straight up), which
    doesn't need an angle, thus there  should be one more color than
    angles. If no angles are given color[0] is used, or black if none are
    given.
*/

/*! \var Real32          SkyBackgroundBase::_mfSkyAngle
    The angles for the sky gradient bands. Corresponds to the skyColor colors,
    with the exception of the apex. Values should be between 0 and PI.
*/

/*! \var Color4f         SkyBackgroundBase::_mfGroundColor
    The colors of the ground sphere-part. Interpretation is similar to the sky.
*/

/*! \var Real32          SkyBackgroundBase::_mfGroundAngle
    The angles of the ground sphere-part. Interpretation is similar to the sky, with
    0 being straight down.
*/

/*! \var UInt32          SkyBackgroundBase::_sfSphereRes
    The polygonal resolution of the sky/ground sphere.
*/

/*! \var TextureBaseChunk * SkyBackgroundBase::_sfBackTexture
    Texture for the back (+Z) side of the sky cube.
*/

/*! \var TextureBaseChunk * SkyBackgroundBase::_sfBottomTexture
    Texture for the bottom (-Y) side of the sky cube.
*/

/*! \var TextureBaseChunk * SkyBackgroundBase::_sfFrontTexture
    Texture for the front (-Z) side of the sky cube.
*/

/*! \var TextureBaseChunk * SkyBackgroundBase::_sfLeftTexture
    Texture for the left (-X) side of the sky cube.
*/

/*! \var TextureBaseChunk * SkyBackgroundBase::_sfRightTexture
    Texture for the right (+X) side of the sky cube.
*/

/*! \var TextureBaseChunk * SkyBackgroundBase::_sfTopTexture
    Texture for the top (+Y) side of the sky cube.
*/

/*! \var bool            SkyBackgroundBase::_sfBoxInside
    Flag to draw the box inside or outside of the sphere
*/

/*! \var Vec3f           SkyBackgroundBase::_mfTopTexCoord
    Texture coordinates for the top face
*/

/*! \var Vec3f           SkyBackgroundBase::_mfBottomTexCoord
    Bottom texture coordinates.
*/

/*! \var Vec3f           SkyBackgroundBase::_mfRightTexCoord
    Right texture coordinates.
*/

/*! \var Vec3f           SkyBackgroundBase::_mfLeftTexCoord
    Left texture coordinates.
*/

/*! \var Vec3f           SkyBackgroundBase::_mfFrontTexCoord
    Front texture coordinates.
*/

/*! \var Vec3f           SkyBackgroundBase::_mfBackTexCoord
    Back texture coordinates.
*/

/*! \var Node *          SkyBackgroundBase::_sfBeacon
    The object that defines the orientation of the background, i.e. the
    local coordinate system it is drawn in.
*/


void SkyBackgroundBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFColor4f::Description(
        MFColor4f::getClassType(),
        "skyColor",
        "The colors for the sky gradient bands. Corresponds to the skyAngle\n"
        "angles.  The first value is for the apex (i.e. straight up), which\n"
        "doesn't need an angle, thus there  should be one more color than\n"
        "angles. If no angles are given color[0] is used, or black if none are\n"
        "given.\n",
        SkyColorFieldId, SkyColorFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkyBackground::editHandleSkyColor),
        static_cast<FieldGetMethodSig >(&SkyBackground::getHandleSkyColor));

    oType.addInitialDesc(pDesc);

    pDesc = new MFReal32::Description(
        MFReal32::getClassType(),
        "skyAngle",
        "The angles for the sky gradient bands. Corresponds to the skyColor colors,\n"
        "with the exception of the apex. Values should be between 0 and PI.\n",
        SkyAngleFieldId, SkyAngleFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkyBackground::editHandleSkyAngle),
        static_cast<FieldGetMethodSig >(&SkyBackground::getHandleSkyAngle));

    oType.addInitialDesc(pDesc);

    pDesc = new MFColor4f::Description(
        MFColor4f::getClassType(),
        "groundColor",
        "The colors of the ground sphere-part. Interpretation is similar to the sky.\n",
        GroundColorFieldId, GroundColorFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkyBackground::editHandleGroundColor),
        static_cast<FieldGetMethodSig >(&SkyBackground::getHandleGroundColor));

    oType.addInitialDesc(pDesc);

    pDesc = new MFReal32::Description(
        MFReal32::getClassType(),
        "groundAngle",
        "The angles of the ground sphere-part. Interpretation is similar to the sky, with\n"
        "0 being straight down.\n",
        GroundAngleFieldId, GroundAngleFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkyBackground::editHandleGroundAngle),
        static_cast<FieldGetMethodSig >(&SkyBackground::getHandleGroundAngle));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "sphereRes",
        "The polygonal resolution of the sky/ground sphere.\n",
        SphereResFieldId, SphereResFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkyBackground::editHandleSphereRes),
        static_cast<FieldGetMethodSig >(&SkyBackground::getHandleSphereRes));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecTextureBaseChunkPtr::Description(
        SFUnrecTextureBaseChunkPtr::getClassType(),
        "backTexture",
        "Texture for the back (+Z) side of the sky cube.\n",
        BackTextureFieldId, BackTextureFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkyBackground::editHandleBackTexture),
        static_cast<FieldGetMethodSig >(&SkyBackground::getHandleBackTexture));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecTextureBaseChunkPtr::Description(
        SFUnrecTextureBaseChunkPtr::getClassType(),
        "bottomTexture",
        "Texture for the bottom (-Y) side of the sky cube.\n",
        BottomTextureFieldId, BottomTextureFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkyBackground::editHandleBottomTexture),
        static_cast<FieldGetMethodSig >(&SkyBackground::getHandleBottomTexture));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecTextureBaseChunkPtr::Description(
        SFUnrecTextureBaseChunkPtr::getClassType(),
        "frontTexture",
        "Texture for the front (-Z) side of the sky cube.\n",
        FrontTextureFieldId, FrontTextureFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkyBackground::editHandleFrontTexture),
        static_cast<FieldGetMethodSig >(&SkyBackground::getHandleFrontTexture));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecTextureBaseChunkPtr::Description(
        SFUnrecTextureBaseChunkPtr::getClassType(),
        "leftTexture",
        "Texture for the left (-X) side of the sky cube.\n",
        LeftTextureFieldId, LeftTextureFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkyBackground::editHandleLeftTexture),
        static_cast<FieldGetMethodSig >(&SkyBackground::getHandleLeftTexture));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecTextureBaseChunkPtr::Description(
        SFUnrecTextureBaseChunkPtr::getClassType(),
        "rightTexture",
        "Texture for the right (+X) side of the sky cube.\n",
        RightTextureFieldId, RightTextureFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkyBackground::editHandleRightTexture),
        static_cast<FieldGetMethodSig >(&SkyBackground::getHandleRightTexture));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecTextureBaseChunkPtr::Description(
        SFUnrecTextureBaseChunkPtr::getClassType(),
        "topTexture",
        "Texture for the top (+Y) side of the sky cube.\n",
        TopTextureFieldId, TopTextureFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkyBackground::editHandleTopTexture),
        static_cast<FieldGetMethodSig >(&SkyBackground::getHandleTopTexture));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "boxInside",
        "Flag to draw the box inside or outside of the sphere\n",
        BoxInsideFieldId, BoxInsideFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkyBackground::editHandleBoxInside),
        static_cast<FieldGetMethodSig >(&SkyBackground::getHandleBoxInside));

    oType.addInitialDesc(pDesc);

    pDesc = new MFVec3f::Description(
        MFVec3f::getClassType(),
        "topTexCoord",
        "Texture coordinates for the top face\n",
        TopTexCoordFieldId, TopTexCoordFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkyBackground::editHandleTopTexCoord),
        static_cast<FieldGetMethodSig >(&SkyBackground::getHandleTopTexCoord));

    oType.addInitialDesc(pDesc);

    pDesc = new MFVec3f::Description(
        MFVec3f::getClassType(),
        "bottomTexCoord",
        "Bottom texture coordinates.\n",
        BottomTexCoordFieldId, BottomTexCoordFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkyBackground::editHandleBottomTexCoord),
        static_cast<FieldGetMethodSig >(&SkyBackground::getHandleBottomTexCoord));

    oType.addInitialDesc(pDesc);

    pDesc = new MFVec3f::Description(
        MFVec3f::getClassType(),
        "rightTexCoord",
        "Right texture coordinates.\n",
        RightTexCoordFieldId, RightTexCoordFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkyBackground::editHandleRightTexCoord),
        static_cast<FieldGetMethodSig >(&SkyBackground::getHandleRightTexCoord));

    oType.addInitialDesc(pDesc);

    pDesc = new MFVec3f::Description(
        MFVec3f::getClassType(),
        "leftTexCoord",
        "Left texture coordinates.\n",
        LeftTexCoordFieldId, LeftTexCoordFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkyBackground::editHandleLeftTexCoord),
        static_cast<FieldGetMethodSig >(&SkyBackground::getHandleLeftTexCoord));

    oType.addInitialDesc(pDesc);

    pDesc = new MFVec3f::Description(
        MFVec3f::getClassType(),
        "frontTexCoord",
        "Front texture coordinates.\n",
        FrontTexCoordFieldId, FrontTexCoordFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkyBackground::editHandleFrontTexCoord),
        static_cast<FieldGetMethodSig >(&SkyBackground::getHandleFrontTexCoord));

    oType.addInitialDesc(pDesc);

    pDesc = new MFVec3f::Description(
        MFVec3f::getClassType(),
        "backTexCoord",
        "Back texture coordinates.\n",
        BackTexCoordFieldId, BackTexCoordFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkyBackground::editHandleBackTexCoord),
        static_cast<FieldGetMethodSig >(&SkyBackground::getHandleBackTexCoord));

    oType.addInitialDesc(pDesc);

    pDesc = new SFWeakNodePtr::Description(
        SFWeakNodePtr::getClassType(),
        "beacon",
        "The object that defines the orientation of the background, i.e. the\n"
        "local coordinate system it is drawn in.\n",
        BeaconFieldId, BeaconFieldMask,
        false,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SkyBackground::editHandleBeacon),
        static_cast<FieldGetMethodSig >(&SkyBackground::getHandleBeacon));

    oType.addInitialDesc(pDesc);
}


SkyBackgroundBase::TypeObject SkyBackgroundBase::_type(
    SkyBackgroundBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&SkyBackgroundBase::createEmptyLocal),
    SkyBackground::initMethod,
    SkyBackground::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&SkyBackgroundBase::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"SkyBackground\"\n"
    "\tparent=\"Background\"\n"
    "\tlibrary=\"Window\"\n"
    "\tpointerfieldtypes=\"multi\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"false\"\n"
    ">\n"
    "\\ingroup GrpSystemWindowBackgrounds\n"
    "\n"
    "A Sky/Ground/Skybox background, inspired by VRML, see \\ref\n"
    "PageSystemWindowBackgroundSky for a description.\n"
    "\n"
    "The sky is defined by the _mfSkyAngle and _mfSkyColor fields, the ground by the\n"
    "_mfGroundAngle and _mfGround Color fields. The resolution of the sky sphere can\n"
    "be influenced by the _sfSphereRes field. The sky box is defined by the\n"
    "_sfBackTexture, _sfFrontTexture, _sfLeftTexture, _sfRightTexture, _sfTopTexture\n"
    "and _sfBottomTexture fields.\n"
    "\t<Field\n"
    "\t\tname=\"skyColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe colors for the sky gradient bands. Corresponds to the skyAngle\n"
    "        angles.  The first value is for the apex (i.e. straight up), which\n"
    "        doesn't need an angle, thus there  should be one more color than\n"
    "        angles. If no angles are given color[0] is used, or black if none are\n"
    "        given.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"skyAngle\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe angles for the sky gradient bands. Corresponds to the skyColor colors,\n"
    "        with the exception of the apex. Values should be between 0 and PI.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"groundColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe colors of the ground sphere-part. Interpretation is similar to the sky.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"groundAngle\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe angles of the ground sphere-part. Interpretation is similar to the sky, with\n"
    "        0 being straight down.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"sphereRes\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"8\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe polygonal resolution of the sky/ground sphere.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"backTexture\"\n"
    "\t\ttype=\"TextureBaseChunkPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tTexture for the back (+Z) side of the sky cube.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"bottomTexture\"\n"
    "\t\ttype=\"TextureBaseChunkPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tTexture for the bottom (-Y) side of the sky cube.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"frontTexture\"\n"
    "\t\ttype=\"TextureBaseChunkPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tTexture for the front (-Z) side of the sky cube.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"leftTexture\"\n"
    "\t\ttype=\"TextureBaseChunkPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tTexture for the left (-X) side of the sky cube.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"rightTexture\"\n"
    "\t\ttype=\"TextureBaseChunkPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tTexture for the right (+X) side of the sky cube.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"topTexture\"\n"
    "\t\ttype=\"TextureBaseChunkPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"NULL\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tTexture for the top (+Y) side of the sky cube.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"boxInside\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tFlag to draw the box inside or outside of the sphere\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"topTexCoord\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tTexture coordinates for the top face\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"bottomTexCoord\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tBottom texture coordinates.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"rightTexCoord\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tRight texture coordinates.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"leftTexCoord\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tLeft texture coordinates.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"frontTexCoord\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tFront texture coordinates.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"backTexCoord\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tBack texture coordinates.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"beacon\"\n"
    "\t\ttype=\"Node\"\n"
    "        category=\"weakpointer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe object that defines the orientation of the background, i.e. the\n"
    "\tlocal coordinate system it is drawn in.\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "\\ingroup GrpSystemWindowBackgrounds\n"
    "\n"
    "A Sky/Ground/Skybox background, inspired by VRML, see \\ref\n"
    "PageSystemWindowBackgroundSky for a description.\n"
    "\n"
    "The sky is defined by the _mfSkyAngle and _mfSkyColor fields, the ground by the\n"
    "_mfGroundAngle and _mfGround Color fields. The resolution of the sky sphere can\n"
    "be influenced by the _sfSphereRes field. The sky box is defined by the\n"
    "_sfBackTexture, _sfFrontTexture, _sfLeftTexture, _sfRightTexture, _sfTopTexture\n"
    "and _sfBottomTexture fields.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &SkyBackgroundBase::getType(void)
{
    return _type;
}

const FieldContainerType &SkyBackgroundBase::getType(void) const
{
    return _type;
}

UInt32 SkyBackgroundBase::getContainerSize(void) const
{
    return sizeof(SkyBackground);
}

/*------------------------- decorator get ------------------------------*/


MFColor4f *SkyBackgroundBase::editMFSkyColor(void)
{
    editMField(SkyColorFieldMask, _mfSkyColor);

    return &_mfSkyColor;
}

const MFColor4f *SkyBackgroundBase::getMFSkyColor(void) const
{
    return &_mfSkyColor;
}


MFReal32 *SkyBackgroundBase::editMFSkyAngle(void)
{
    editMField(SkyAngleFieldMask, _mfSkyAngle);

    return &_mfSkyAngle;
}

const MFReal32 *SkyBackgroundBase::getMFSkyAngle(void) const
{
    return &_mfSkyAngle;
}


MFColor4f *SkyBackgroundBase::editMFGroundColor(void)
{
    editMField(GroundColorFieldMask, _mfGroundColor);

    return &_mfGroundColor;
}

const MFColor4f *SkyBackgroundBase::getMFGroundColor(void) const
{
    return &_mfGroundColor;
}


MFReal32 *SkyBackgroundBase::editMFGroundAngle(void)
{
    editMField(GroundAngleFieldMask, _mfGroundAngle);

    return &_mfGroundAngle;
}

const MFReal32 *SkyBackgroundBase::getMFGroundAngle(void) const
{
    return &_mfGroundAngle;
}


SFUInt32 *SkyBackgroundBase::editSFSphereRes(void)
{
    editSField(SphereResFieldMask);

    return &_sfSphereRes;
}

const SFUInt32 *SkyBackgroundBase::getSFSphereRes(void) const
{
    return &_sfSphereRes;
}


//! Get the SkyBackground::_sfBackTexture field.
const SFUnrecTextureBaseChunkPtr *SkyBackgroundBase::getSFBackTexture(void) const
{
    return &_sfBackTexture;
}

SFUnrecTextureBaseChunkPtr *SkyBackgroundBase::editSFBackTexture    (void)
{
    editSField(BackTextureFieldMask);

    return &_sfBackTexture;
}

//! Get the SkyBackground::_sfBottomTexture field.
const SFUnrecTextureBaseChunkPtr *SkyBackgroundBase::getSFBottomTexture(void) const
{
    return &_sfBottomTexture;
}

SFUnrecTextureBaseChunkPtr *SkyBackgroundBase::editSFBottomTexture  (void)
{
    editSField(BottomTextureFieldMask);

    return &_sfBottomTexture;
}

//! Get the SkyBackground::_sfFrontTexture field.
const SFUnrecTextureBaseChunkPtr *SkyBackgroundBase::getSFFrontTexture(void) const
{
    return &_sfFrontTexture;
}

SFUnrecTextureBaseChunkPtr *SkyBackgroundBase::editSFFrontTexture   (void)
{
    editSField(FrontTextureFieldMask);

    return &_sfFrontTexture;
}

//! Get the SkyBackground::_sfLeftTexture field.
const SFUnrecTextureBaseChunkPtr *SkyBackgroundBase::getSFLeftTexture(void) const
{
    return &_sfLeftTexture;
}

SFUnrecTextureBaseChunkPtr *SkyBackgroundBase::editSFLeftTexture    (void)
{
    editSField(LeftTextureFieldMask);

    return &_sfLeftTexture;
}

//! Get the SkyBackground::_sfRightTexture field.
const SFUnrecTextureBaseChunkPtr *SkyBackgroundBase::getSFRightTexture(void) const
{
    return &_sfRightTexture;
}

SFUnrecTextureBaseChunkPtr *SkyBackgroundBase::editSFRightTexture   (void)
{
    editSField(RightTextureFieldMask);

    return &_sfRightTexture;
}

//! Get the SkyBackground::_sfTopTexture field.
const SFUnrecTextureBaseChunkPtr *SkyBackgroundBase::getSFTopTexture(void) const
{
    return &_sfTopTexture;
}

SFUnrecTextureBaseChunkPtr *SkyBackgroundBase::editSFTopTexture     (void)
{
    editSField(TopTextureFieldMask);

    return &_sfTopTexture;
}

SFBool *SkyBackgroundBase::editSFBoxInside(void)
{
    editSField(BoxInsideFieldMask);

    return &_sfBoxInside;
}

const SFBool *SkyBackgroundBase::getSFBoxInside(void) const
{
    return &_sfBoxInside;
}


MFVec3f *SkyBackgroundBase::editMFTopTexCoord(void)
{
    editMField(TopTexCoordFieldMask, _mfTopTexCoord);

    return &_mfTopTexCoord;
}

const MFVec3f *SkyBackgroundBase::getMFTopTexCoord(void) const
{
    return &_mfTopTexCoord;
}


MFVec3f *SkyBackgroundBase::editMFBottomTexCoord(void)
{
    editMField(BottomTexCoordFieldMask, _mfBottomTexCoord);

    return &_mfBottomTexCoord;
}

const MFVec3f *SkyBackgroundBase::getMFBottomTexCoord(void) const
{
    return &_mfBottomTexCoord;
}


MFVec3f *SkyBackgroundBase::editMFRightTexCoord(void)
{
    editMField(RightTexCoordFieldMask, _mfRightTexCoord);

    return &_mfRightTexCoord;
}

const MFVec3f *SkyBackgroundBase::getMFRightTexCoord(void) const
{
    return &_mfRightTexCoord;
}


MFVec3f *SkyBackgroundBase::editMFLeftTexCoord(void)
{
    editMField(LeftTexCoordFieldMask, _mfLeftTexCoord);

    return &_mfLeftTexCoord;
}

const MFVec3f *SkyBackgroundBase::getMFLeftTexCoord(void) const
{
    return &_mfLeftTexCoord;
}


MFVec3f *SkyBackgroundBase::editMFFrontTexCoord(void)
{
    editMField(FrontTexCoordFieldMask, _mfFrontTexCoord);

    return &_mfFrontTexCoord;
}

const MFVec3f *SkyBackgroundBase::getMFFrontTexCoord(void) const
{
    return &_mfFrontTexCoord;
}


MFVec3f *SkyBackgroundBase::editMFBackTexCoord(void)
{
    editMField(BackTexCoordFieldMask, _mfBackTexCoord);

    return &_mfBackTexCoord;
}

const MFVec3f *SkyBackgroundBase::getMFBackTexCoord(void) const
{
    return &_mfBackTexCoord;
}


//! Get the SkyBackground::_sfBeacon field.
const SFWeakNodePtr *SkyBackgroundBase::getSFBeacon(void) const
{
    return &_sfBeacon;
}

SFWeakNodePtr       *SkyBackgroundBase::editSFBeacon         (void)
{
    editSField(BeaconFieldMask);

    return &_sfBeacon;
}





/*------------------------------ access -----------------------------------*/

UInt32 SkyBackgroundBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (SkyColorFieldMask & whichField))
    {
        returnValue += _mfSkyColor.getBinSize();
    }
    if(FieldBits::NoField != (SkyAngleFieldMask & whichField))
    {
        returnValue += _mfSkyAngle.getBinSize();
    }
    if(FieldBits::NoField != (GroundColorFieldMask & whichField))
    {
        returnValue += _mfGroundColor.getBinSize();
    }
    if(FieldBits::NoField != (GroundAngleFieldMask & whichField))
    {
        returnValue += _mfGroundAngle.getBinSize();
    }
    if(FieldBits::NoField != (SphereResFieldMask & whichField))
    {
        returnValue += _sfSphereRes.getBinSize();
    }
    if(FieldBits::NoField != (BackTextureFieldMask & whichField))
    {
        returnValue += _sfBackTexture.getBinSize();
    }
    if(FieldBits::NoField != (BottomTextureFieldMask & whichField))
    {
        returnValue += _sfBottomTexture.getBinSize();
    }
    if(FieldBits::NoField != (FrontTextureFieldMask & whichField))
    {
        returnValue += _sfFrontTexture.getBinSize();
    }
    if(FieldBits::NoField != (LeftTextureFieldMask & whichField))
    {
        returnValue += _sfLeftTexture.getBinSize();
    }
    if(FieldBits::NoField != (RightTextureFieldMask & whichField))
    {
        returnValue += _sfRightTexture.getBinSize();
    }
    if(FieldBits::NoField != (TopTextureFieldMask & whichField))
    {
        returnValue += _sfTopTexture.getBinSize();
    }
    if(FieldBits::NoField != (BoxInsideFieldMask & whichField))
    {
        returnValue += _sfBoxInside.getBinSize();
    }
    if(FieldBits::NoField != (TopTexCoordFieldMask & whichField))
    {
        returnValue += _mfTopTexCoord.getBinSize();
    }
    if(FieldBits::NoField != (BottomTexCoordFieldMask & whichField))
    {
        returnValue += _mfBottomTexCoord.getBinSize();
    }
    if(FieldBits::NoField != (RightTexCoordFieldMask & whichField))
    {
        returnValue += _mfRightTexCoord.getBinSize();
    }
    if(FieldBits::NoField != (LeftTexCoordFieldMask & whichField))
    {
        returnValue += _mfLeftTexCoord.getBinSize();
    }
    if(FieldBits::NoField != (FrontTexCoordFieldMask & whichField))
    {
        returnValue += _mfFrontTexCoord.getBinSize();
    }
    if(FieldBits::NoField != (BackTexCoordFieldMask & whichField))
    {
        returnValue += _mfBackTexCoord.getBinSize();
    }
    if(FieldBits::NoField != (BeaconFieldMask & whichField))
    {
        returnValue += _sfBeacon.getBinSize();
    }

    return returnValue;
}

void SkyBackgroundBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (SkyColorFieldMask & whichField))
    {
        _mfSkyColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SkyAngleFieldMask & whichField))
    {
        _mfSkyAngle.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GroundColorFieldMask & whichField))
    {
        _mfGroundColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GroundAngleFieldMask & whichField))
    {
        _mfGroundAngle.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SphereResFieldMask & whichField))
    {
        _sfSphereRes.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BackTextureFieldMask & whichField))
    {
        _sfBackTexture.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BottomTextureFieldMask & whichField))
    {
        _sfBottomTexture.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FrontTextureFieldMask & whichField))
    {
        _sfFrontTexture.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LeftTextureFieldMask & whichField))
    {
        _sfLeftTexture.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RightTextureFieldMask & whichField))
    {
        _sfRightTexture.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TopTextureFieldMask & whichField))
    {
        _sfTopTexture.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BoxInsideFieldMask & whichField))
    {
        _sfBoxInside.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TopTexCoordFieldMask & whichField))
    {
        _mfTopTexCoord.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BottomTexCoordFieldMask & whichField))
    {
        _mfBottomTexCoord.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RightTexCoordFieldMask & whichField))
    {
        _mfRightTexCoord.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LeftTexCoordFieldMask & whichField))
    {
        _mfLeftTexCoord.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FrontTexCoordFieldMask & whichField))
    {
        _mfFrontTexCoord.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BackTexCoordFieldMask & whichField))
    {
        _mfBackTexCoord.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BeaconFieldMask & whichField))
    {
        _sfBeacon.copyToBin(pMem);
    }
}

void SkyBackgroundBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (SkyColorFieldMask & whichField))
    {
        _mfSkyColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SkyAngleFieldMask & whichField))
    {
        _mfSkyAngle.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GroundColorFieldMask & whichField))
    {
        _mfGroundColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GroundAngleFieldMask & whichField))
    {
        _mfGroundAngle.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SphereResFieldMask & whichField))
    {
        _sfSphereRes.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BackTextureFieldMask & whichField))
    {
        _sfBackTexture.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BottomTextureFieldMask & whichField))
    {
        _sfBottomTexture.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FrontTextureFieldMask & whichField))
    {
        _sfFrontTexture.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LeftTextureFieldMask & whichField))
    {
        _sfLeftTexture.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RightTextureFieldMask & whichField))
    {
        _sfRightTexture.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TopTextureFieldMask & whichField))
    {
        _sfTopTexture.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BoxInsideFieldMask & whichField))
    {
        _sfBoxInside.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TopTexCoordFieldMask & whichField))
    {
        _mfTopTexCoord.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BottomTexCoordFieldMask & whichField))
    {
        _mfBottomTexCoord.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RightTexCoordFieldMask & whichField))
    {
        _mfRightTexCoord.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LeftTexCoordFieldMask & whichField))
    {
        _mfLeftTexCoord.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FrontTexCoordFieldMask & whichField))
    {
        _mfFrontTexCoord.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BackTexCoordFieldMask & whichField))
    {
        _mfBackTexCoord.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BeaconFieldMask & whichField))
    {
        _sfBeacon.copyFromBin(pMem);
    }
}

//! create a new instance of the class
SkyBackgroundTransitPtr SkyBackgroundBase::createLocal(BitVector bFlags)
{
    SkyBackgroundTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<SkyBackground>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
SkyBackgroundTransitPtr SkyBackgroundBase::create(void)
{
    SkyBackgroundTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<SkyBackground>(tmpPtr);
    }

    return fc;
}

SkyBackground *SkyBackgroundBase::createEmptyLocal(BitVector bFlags)
{
    SkyBackground *returnValue;

    newPtr<SkyBackground>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
SkyBackground *SkyBackgroundBase::createEmpty(void)
{
    SkyBackground *returnValue;

    newPtr<SkyBackground>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &=
        ~Thread::getCurrentLocalFlags();

    return returnValue;
}


FieldContainerTransitPtr SkyBackgroundBase::shallowCopyLocal(
    BitVector bFlags) const
{
    SkyBackground *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SkyBackground *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr SkyBackgroundBase::shallowCopy(void) const
{
    SkyBackground *tmpPtr;

    newPtr(tmpPtr,
           dynamic_cast<const SkyBackground *>(this),
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}




/*------------------------- constructors ----------------------------------*/

SkyBackgroundBase::SkyBackgroundBase(void) :
    Inherited(),
    _mfSkyColor               (),
    _mfSkyAngle               (),
    _mfGroundColor            (),
    _mfGroundAngle            (),
    _sfSphereRes              (UInt32(8)),
    _sfBackTexture            (NULL),
    _sfBottomTexture          (NULL),
    _sfFrontTexture           (NULL),
    _sfLeftTexture            (NULL),
    _sfRightTexture           (NULL),
    _sfTopTexture             (NULL),
    _sfBoxInside              (bool(true)),
    _mfTopTexCoord            (),
    _mfBottomTexCoord         (),
    _mfRightTexCoord          (),
    _mfLeftTexCoord           (),
    _mfFrontTexCoord          (),
    _mfBackTexCoord           (),
    _sfBeacon                 (NULL)
{
}

SkyBackgroundBase::SkyBackgroundBase(const SkyBackgroundBase &source) :
    Inherited(source),
    _mfSkyColor               (source._mfSkyColor               ),
    _mfSkyAngle               (source._mfSkyAngle               ),
    _mfGroundColor            (source._mfGroundColor            ),
    _mfGroundAngle            (source._mfGroundAngle            ),
    _sfSphereRes              (source._sfSphereRes              ),
    _sfBackTexture            (NULL),
    _sfBottomTexture          (NULL),
    _sfFrontTexture           (NULL),
    _sfLeftTexture            (NULL),
    _sfRightTexture           (NULL),
    _sfTopTexture             (NULL),
    _sfBoxInside              (source._sfBoxInside              ),
    _mfTopTexCoord            (source._mfTopTexCoord            ),
    _mfBottomTexCoord         (source._mfBottomTexCoord         ),
    _mfRightTexCoord          (source._mfRightTexCoord          ),
    _mfLeftTexCoord           (source._mfLeftTexCoord           ),
    _mfFrontTexCoord          (source._mfFrontTexCoord          ),
    _mfBackTexCoord           (source._mfBackTexCoord           ),
    _sfBeacon                 (NULL)
{
}


/*-------------------------- destructors ----------------------------------*/

SkyBackgroundBase::~SkyBackgroundBase(void)
{
}

void SkyBackgroundBase::onCreate(const SkyBackground *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        SkyBackground *pThis = static_cast<SkyBackground *>(this);

        pThis->setBackTexture(source->getBackTexture());

        pThis->setBottomTexture(source->getBottomTexture());

        pThis->setFrontTexture(source->getFrontTexture());

        pThis->setLeftTexture(source->getLeftTexture());

        pThis->setRightTexture(source->getRightTexture());

        pThis->setTopTexture(source->getTopTexture());

        pThis->setBeacon(source->getBeacon());
    }
}

GetFieldHandlePtr SkyBackgroundBase::getHandleSkyColor        (void) const
{
    MFColor4f::GetHandlePtr returnValue(
        new  MFColor4f::GetHandle(
             &_mfSkyColor,
             this->getType().getFieldDesc(SkyColorFieldId)));

    return returnValue;
}

EditFieldHandlePtr SkyBackgroundBase::editHandleSkyColor       (void)
{
    MFColor4f::EditHandlePtr returnValue(
        new  MFColor4f::EditHandle(
             &_mfSkyColor,
             this->getType().getFieldDesc(SkyColorFieldId)));


    editMField(SkyColorFieldMask, _mfSkyColor);

    return returnValue;
}

GetFieldHandlePtr SkyBackgroundBase::getHandleSkyAngle        (void) const
{
    MFReal32::GetHandlePtr returnValue(
        new  MFReal32::GetHandle(
             &_mfSkyAngle,
             this->getType().getFieldDesc(SkyAngleFieldId)));

    return returnValue;
}

EditFieldHandlePtr SkyBackgroundBase::editHandleSkyAngle       (void)
{
    MFReal32::EditHandlePtr returnValue(
        new  MFReal32::EditHandle(
             &_mfSkyAngle,
             this->getType().getFieldDesc(SkyAngleFieldId)));


    editMField(SkyAngleFieldMask, _mfSkyAngle);

    return returnValue;
}

GetFieldHandlePtr SkyBackgroundBase::getHandleGroundColor     (void) const
{
    MFColor4f::GetHandlePtr returnValue(
        new  MFColor4f::GetHandle(
             &_mfGroundColor,
             this->getType().getFieldDesc(GroundColorFieldId)));

    return returnValue;
}

EditFieldHandlePtr SkyBackgroundBase::editHandleGroundColor    (void)
{
    MFColor4f::EditHandlePtr returnValue(
        new  MFColor4f::EditHandle(
             &_mfGroundColor,
             this->getType().getFieldDesc(GroundColorFieldId)));


    editMField(GroundColorFieldMask, _mfGroundColor);

    return returnValue;
}

GetFieldHandlePtr SkyBackgroundBase::getHandleGroundAngle     (void) const
{
    MFReal32::GetHandlePtr returnValue(
        new  MFReal32::GetHandle(
             &_mfGroundAngle,
             this->getType().getFieldDesc(GroundAngleFieldId)));

    return returnValue;
}

EditFieldHandlePtr SkyBackgroundBase::editHandleGroundAngle    (void)
{
    MFReal32::EditHandlePtr returnValue(
        new  MFReal32::EditHandle(
             &_mfGroundAngle,
             this->getType().getFieldDesc(GroundAngleFieldId)));


    editMField(GroundAngleFieldMask, _mfGroundAngle);

    return returnValue;
}

GetFieldHandlePtr SkyBackgroundBase::getHandleSphereRes       (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfSphereRes,
             this->getType().getFieldDesc(SphereResFieldId)));

    return returnValue;
}

EditFieldHandlePtr SkyBackgroundBase::editHandleSphereRes      (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfSphereRes,
             this->getType().getFieldDesc(SphereResFieldId)));


    editSField(SphereResFieldMask);

    return returnValue;
}

GetFieldHandlePtr SkyBackgroundBase::getHandleBackTexture     (void) const
{
    SFUnrecTextureBaseChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureBaseChunkPtr::GetHandle(
             &_sfBackTexture,
             this->getType().getFieldDesc(BackTextureFieldId)));

    return returnValue;
}

EditFieldHandlePtr SkyBackgroundBase::editHandleBackTexture    (void)
{
    SFUnrecTextureBaseChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureBaseChunkPtr::EditHandle(
             &_sfBackTexture,
             this->getType().getFieldDesc(BackTextureFieldId)));

    returnValue->setSetMethod(
        boost::bind(&SkyBackground::setBackTexture,
                    static_cast<SkyBackground *>(this), _1));

    editSField(BackTextureFieldMask);

    return returnValue;
}

GetFieldHandlePtr SkyBackgroundBase::getHandleBottomTexture   (void) const
{
    SFUnrecTextureBaseChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureBaseChunkPtr::GetHandle(
             &_sfBottomTexture,
             this->getType().getFieldDesc(BottomTextureFieldId)));

    return returnValue;
}

EditFieldHandlePtr SkyBackgroundBase::editHandleBottomTexture  (void)
{
    SFUnrecTextureBaseChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureBaseChunkPtr::EditHandle(
             &_sfBottomTexture,
             this->getType().getFieldDesc(BottomTextureFieldId)));

    returnValue->setSetMethod(
        boost::bind(&SkyBackground::setBottomTexture,
                    static_cast<SkyBackground *>(this), _1));

    editSField(BottomTextureFieldMask);

    return returnValue;
}

GetFieldHandlePtr SkyBackgroundBase::getHandleFrontTexture    (void) const
{
    SFUnrecTextureBaseChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureBaseChunkPtr::GetHandle(
             &_sfFrontTexture,
             this->getType().getFieldDesc(FrontTextureFieldId)));

    return returnValue;
}

EditFieldHandlePtr SkyBackgroundBase::editHandleFrontTexture   (void)
{
    SFUnrecTextureBaseChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureBaseChunkPtr::EditHandle(
             &_sfFrontTexture,
             this->getType().getFieldDesc(FrontTextureFieldId)));

    returnValue->setSetMethod(
        boost::bind(&SkyBackground::setFrontTexture,
                    static_cast<SkyBackground *>(this), _1));

    editSField(FrontTextureFieldMask);

    return returnValue;
}

GetFieldHandlePtr SkyBackgroundBase::getHandleLeftTexture     (void) const
{
    SFUnrecTextureBaseChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureBaseChunkPtr::GetHandle(
             &_sfLeftTexture,
             this->getType().getFieldDesc(LeftTextureFieldId)));

    return returnValue;
}

EditFieldHandlePtr SkyBackgroundBase::editHandleLeftTexture    (void)
{
    SFUnrecTextureBaseChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureBaseChunkPtr::EditHandle(
             &_sfLeftTexture,
             this->getType().getFieldDesc(LeftTextureFieldId)));

    returnValue->setSetMethod(
        boost::bind(&SkyBackground::setLeftTexture,
                    static_cast<SkyBackground *>(this), _1));

    editSField(LeftTextureFieldMask);

    return returnValue;
}

GetFieldHandlePtr SkyBackgroundBase::getHandleRightTexture    (void) const
{
    SFUnrecTextureBaseChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureBaseChunkPtr::GetHandle(
             &_sfRightTexture,
             this->getType().getFieldDesc(RightTextureFieldId)));

    return returnValue;
}

EditFieldHandlePtr SkyBackgroundBase::editHandleRightTexture   (void)
{
    SFUnrecTextureBaseChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureBaseChunkPtr::EditHandle(
             &_sfRightTexture,
             this->getType().getFieldDesc(RightTextureFieldId)));

    returnValue->setSetMethod(
        boost::bind(&SkyBackground::setRightTexture,
                    static_cast<SkyBackground *>(this), _1));

    editSField(RightTextureFieldMask);

    return returnValue;
}

GetFieldHandlePtr SkyBackgroundBase::getHandleTopTexture      (void) const
{
    SFUnrecTextureBaseChunkPtr::GetHandlePtr returnValue(
        new  SFUnrecTextureBaseChunkPtr::GetHandle(
             &_sfTopTexture,
             this->getType().getFieldDesc(TopTextureFieldId)));

    return returnValue;
}

EditFieldHandlePtr SkyBackgroundBase::editHandleTopTexture     (void)
{
    SFUnrecTextureBaseChunkPtr::EditHandlePtr returnValue(
        new  SFUnrecTextureBaseChunkPtr::EditHandle(
             &_sfTopTexture,
             this->getType().getFieldDesc(TopTextureFieldId)));

    returnValue->setSetMethod(
        boost::bind(&SkyBackground::setTopTexture,
                    static_cast<SkyBackground *>(this), _1));

    editSField(TopTextureFieldMask);

    return returnValue;
}

GetFieldHandlePtr SkyBackgroundBase::getHandleBoxInside       (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfBoxInside,
             this->getType().getFieldDesc(BoxInsideFieldId)));

    return returnValue;
}

EditFieldHandlePtr SkyBackgroundBase::editHandleBoxInside      (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfBoxInside,
             this->getType().getFieldDesc(BoxInsideFieldId)));


    editSField(BoxInsideFieldMask);

    return returnValue;
}

GetFieldHandlePtr SkyBackgroundBase::getHandleTopTexCoord     (void) const
{
    MFVec3f::GetHandlePtr returnValue(
        new  MFVec3f::GetHandle(
             &_mfTopTexCoord,
             this->getType().getFieldDesc(TopTexCoordFieldId)));

    return returnValue;
}

EditFieldHandlePtr SkyBackgroundBase::editHandleTopTexCoord    (void)
{
    MFVec3f::EditHandlePtr returnValue(
        new  MFVec3f::EditHandle(
             &_mfTopTexCoord,
             this->getType().getFieldDesc(TopTexCoordFieldId)));


    editMField(TopTexCoordFieldMask, _mfTopTexCoord);

    return returnValue;
}

GetFieldHandlePtr SkyBackgroundBase::getHandleBottomTexCoord  (void) const
{
    MFVec3f::GetHandlePtr returnValue(
        new  MFVec3f::GetHandle(
             &_mfBottomTexCoord,
             this->getType().getFieldDesc(BottomTexCoordFieldId)));

    return returnValue;
}

EditFieldHandlePtr SkyBackgroundBase::editHandleBottomTexCoord (void)
{
    MFVec3f::EditHandlePtr returnValue(
        new  MFVec3f::EditHandle(
             &_mfBottomTexCoord,
             this->getType().getFieldDesc(BottomTexCoordFieldId)));


    editMField(BottomTexCoordFieldMask, _mfBottomTexCoord);

    return returnValue;
}

GetFieldHandlePtr SkyBackgroundBase::getHandleRightTexCoord   (void) const
{
    MFVec3f::GetHandlePtr returnValue(
        new  MFVec3f::GetHandle(
             &_mfRightTexCoord,
             this->getType().getFieldDesc(RightTexCoordFieldId)));

    return returnValue;
}

EditFieldHandlePtr SkyBackgroundBase::editHandleRightTexCoord  (void)
{
    MFVec3f::EditHandlePtr returnValue(
        new  MFVec3f::EditHandle(
             &_mfRightTexCoord,
             this->getType().getFieldDesc(RightTexCoordFieldId)));


    editMField(RightTexCoordFieldMask, _mfRightTexCoord);

    return returnValue;
}

GetFieldHandlePtr SkyBackgroundBase::getHandleLeftTexCoord    (void) const
{
    MFVec3f::GetHandlePtr returnValue(
        new  MFVec3f::GetHandle(
             &_mfLeftTexCoord,
             this->getType().getFieldDesc(LeftTexCoordFieldId)));

    return returnValue;
}

EditFieldHandlePtr SkyBackgroundBase::editHandleLeftTexCoord   (void)
{
    MFVec3f::EditHandlePtr returnValue(
        new  MFVec3f::EditHandle(
             &_mfLeftTexCoord,
             this->getType().getFieldDesc(LeftTexCoordFieldId)));


    editMField(LeftTexCoordFieldMask, _mfLeftTexCoord);

    return returnValue;
}

GetFieldHandlePtr SkyBackgroundBase::getHandleFrontTexCoord   (void) const
{
    MFVec3f::GetHandlePtr returnValue(
        new  MFVec3f::GetHandle(
             &_mfFrontTexCoord,
             this->getType().getFieldDesc(FrontTexCoordFieldId)));

    return returnValue;
}

EditFieldHandlePtr SkyBackgroundBase::editHandleFrontTexCoord  (void)
{
    MFVec3f::EditHandlePtr returnValue(
        new  MFVec3f::EditHandle(
             &_mfFrontTexCoord,
             this->getType().getFieldDesc(FrontTexCoordFieldId)));


    editMField(FrontTexCoordFieldMask, _mfFrontTexCoord);

    return returnValue;
}

GetFieldHandlePtr SkyBackgroundBase::getHandleBackTexCoord    (void) const
{
    MFVec3f::GetHandlePtr returnValue(
        new  MFVec3f::GetHandle(
             &_mfBackTexCoord,
             this->getType().getFieldDesc(BackTexCoordFieldId)));

    return returnValue;
}

EditFieldHandlePtr SkyBackgroundBase::editHandleBackTexCoord   (void)
{
    MFVec3f::EditHandlePtr returnValue(
        new  MFVec3f::EditHandle(
             &_mfBackTexCoord,
             this->getType().getFieldDesc(BackTexCoordFieldId)));


    editMField(BackTexCoordFieldMask, _mfBackTexCoord);

    return returnValue;
}

GetFieldHandlePtr SkyBackgroundBase::getHandleBeacon          (void) const
{
    SFWeakNodePtr::GetHandlePtr returnValue(
        new  SFWeakNodePtr::GetHandle(
             &_sfBeacon,
             this->getType().getFieldDesc(BeaconFieldId)));

    return returnValue;
}

EditFieldHandlePtr SkyBackgroundBase::editHandleBeacon         (void)
{
    SFWeakNodePtr::EditHandlePtr returnValue(
        new  SFWeakNodePtr::EditHandle(
             &_sfBeacon,
             this->getType().getFieldDesc(BeaconFieldId)));

    returnValue->setSetMethod(
        boost::bind(&SkyBackground::setBeacon,
                    static_cast<SkyBackground *>(this), _1));

    editSField(BeaconFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void SkyBackgroundBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    SkyBackground *pThis = static_cast<SkyBackground *>(this);

    pThis->execSync(static_cast<SkyBackground *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *SkyBackgroundBase::createAspectCopy(void) const
{
    SkyBackground *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const SkyBackground *>(this));

    return returnValue;
}
#endif

void SkyBackgroundBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<SkyBackground *>(this)->setBackTexture(NULL);

    static_cast<SkyBackground *>(this)->setBottomTexture(NULL);

    static_cast<SkyBackground *>(this)->setFrontTexture(NULL);

    static_cast<SkyBackground *>(this)->setLeftTexture(NULL);

    static_cast<SkyBackground *>(this)->setRightTexture(NULL);

    static_cast<SkyBackground *>(this)->setTopTexture(NULL);

    static_cast<SkyBackground *>(this)->setBeacon(NULL);

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfSkyColor.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfSkyAngle.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfGroundColor.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfGroundAngle.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfTopTexCoord.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfBottomTexCoord.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfRightTexCoord.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfLeftTexCoord.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfFrontTexCoord.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfBackTexCoord.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<SkyBackground *>::_type("SkyBackgroundPtr", "BackgroundPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(SkyBackground *)


OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           SkyBackground *,
                           0);

OSG_END_NAMESPACE
