/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class GradientBackground!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEGRADIENTBACKGROUNDINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>




#include "OSGGradientBackgroundBase.h"
#include "OSGGradientBackground.h"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::GradientBackground
    \ingroup GrpSystemWindowBackgrounds

    A background showing a vertical color gradient, see
    \ref PageSystemWindowBackgroundGradient.

    The colors (_mfColor) and positions (_mfPosition) correspond to each other, so
    both have to have the same number of elements. The addColor() method should
    be used for defining the gradient, as it ensures that constraint.
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var Color3f         GradientBackgroundBase::_mfColor
    The colors of the gradient.
*/

/*! \var Real32          GradientBackgroundBase::_mfPosition
    The positions of the gradient.
*/


void GradientBackgroundBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


#ifdef OSG_1_COMPAT
    typedef const MFColor3f *(GradientBackgroundBase::*GetMFColorF)(void) const;

    GetMFColorF GetMFColor = &GradientBackgroundBase::getMFColor;
#endif

    pDesc = new MFColor3f::Description(
        MFColor3f::getClassType(),
        "color",
        "The colors of the gradient.\n",
        ColorFieldId, ColorFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&GradientBackgroundBase::editMFColor),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFColor));
#else
        reinterpret_cast<FieldGetMethodSig >(&GradientBackgroundBase::getMFColor));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFReal32 *(GradientBackgroundBase::*GetMFPositionF)(void) const;

    GetMFPositionF GetMFPosition = &GradientBackgroundBase::getMFPosition;
#endif

    pDesc = new MFReal32::Description(
        MFReal32::getClassType(),
        "position",
        "The positions of the gradient.\n",
        PositionFieldId, PositionFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&GradientBackgroundBase::editMFPosition),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFPosition));
#else
        reinterpret_cast<FieldGetMethodSig >(&GradientBackgroundBase::getMFPosition));
#endif

    oType.addInitialDesc(pDesc);
}


GradientBackgroundBase::TypeObject GradientBackgroundBase::_type(
    GradientBackgroundBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &GradientBackgroundBase::createEmpty,
    GradientBackground::initMethod,
    (InitalInsertDescFunc) &GradientBackgroundBase::classDescInserter,
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"GradientBackground\"\n"
    "\tparent=\"Background\"\n"
    "\tlibrary=\"Window\"\n"
    "\tpointerfieldtypes=\"multi\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    ">\n"
    "\\ingroup GrpSystemWindowBackgrounds\n"
    "\n"
    "A background showing a vertical color gradient, see\n"
    "\\ref PageSystemWindowBackgroundGradient.\n"
    "\n"
    "The colors (_mfColor) and positions (_mfPosition) correspond to each other, so\n"
    "both have to have the same number of elements. The addColor() method should\n"
    "be used for defining the gradient, as it ensures that constraint.\n"
    "\t<Field\n"
    "\t\tname=\"color\"\n"
    "\t\ttype=\"Color3f\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\tThe colors of the gradient.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"position\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\tThe positions of the gradient.\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "\\ingroup GrpSystemWindowBackgrounds\n"
    "\n"
    "A background showing a vertical color gradient, see\n"
    "\\ref PageSystemWindowBackgroundGradient.\n"
    "\n"
    "The colors (_mfColor) and positions (_mfPosition) correspond to each other, so\n"
    "both have to have the same number of elements. The addColor() method should\n"
    "be used for defining the gradient, as it ensures that constraint.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &GradientBackgroundBase::getType(void)
{
    return _type;
}

const FieldContainerType &GradientBackgroundBase::getType(void) const
{
    return _type;
}

UInt32 GradientBackgroundBase::getContainerSize(void) const
{
    return sizeof(GradientBackground);
}

/*------------------------- decorator get ------------------------------*/


MFColor3f *GradientBackgroundBase::editMFColor(void)
{
    editMField(ColorFieldMask, _mfColor);

    return &_mfColor;
}

const MFColor3f *GradientBackgroundBase::getMFColor(void) const
{
    return &_mfColor;
}

#ifdef OSG_1_COMPAT
MFColor3f           *GradientBackgroundBase::getMFColor          (void)
{
    return this->editMFColor          ();
}
#endif

MFReal32 *GradientBackgroundBase::editMFPosition(void)
{
    editMField(PositionFieldMask, _mfPosition);

    return &_mfPosition;
}

const MFReal32 *GradientBackgroundBase::getMFPosition(void) const
{
    return &_mfPosition;
}

#ifdef OSG_1_COMPAT
MFReal32            *GradientBackgroundBase::getMFPosition       (void)
{
    return this->editMFPosition       ();
}
#endif



/*********************************** Non-ptr code ********************************/
void GradientBackgroundBase::pushToColor(const Color3f& value)
{
    editMField(ColorFieldMask, _mfColor);
    _mfColor.push_back(value);
}

void GradientBackgroundBase::insertIntoColor(UInt32                uiIndex,
                                                   const Color3f& value   )
{
    editMField(ColorFieldMask, _mfColor);

    MFColor3f::iterator fieldIt = _mfColor.begin();

    fieldIt += uiIndex;

    _mfColor.insert(fieldIt, value);
}

void GradientBackgroundBase::replaceInColor(UInt32                uiIndex,
                                                       const Color3f& value   )
{
    if(uiIndex >= _mfColor.size())
        return;

    editMField(ColorFieldMask, _mfColor);

    _mfColor[uiIndex] = value;
}

void GradientBackgroundBase::replaceInColor(const Color3f& pOldElem,
                                                        const Color3f& pNewElem)
{
    Int32  elemIdx = _mfColor.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(ColorFieldMask, _mfColor);

        MFColor3f::iterator fieldIt = _mfColor.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void GradientBackgroundBase::removeFromColor(UInt32 uiIndex)
{
    if(uiIndex < _mfColor.size())
    {
        editMField(ColorFieldMask, _mfColor);

        MFColor3f::iterator fieldIt = _mfColor.begin();

        fieldIt += uiIndex;
        _mfColor.erase(fieldIt);
    }
}

void GradientBackgroundBase::removeFromColor(const Color3f& value)
{
    Int32 iElemIdx = _mfColor.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ColorFieldMask, _mfColor);

        MFColor3f::iterator fieldIt = _mfColor.begin();

        fieldIt += iElemIdx;

        _mfColor.erase(fieldIt);
    }
}

void GradientBackgroundBase::clearColor(void)
{
    editMField(ColorFieldMask, _mfColor);

    _mfColor.clear();
}
/*********************************** Non-ptr code ********************************/
void GradientBackgroundBase::pushToPosition(const Real32& value)
{
    editMField(PositionFieldMask, _mfPosition);
    _mfPosition.push_back(value);
}

void GradientBackgroundBase::insertIntoPosition(UInt32                uiIndex,
                                                   const Real32& value   )
{
    editMField(PositionFieldMask, _mfPosition);

    MFReal32::iterator fieldIt = _mfPosition.begin();

    fieldIt += uiIndex;

    _mfPosition.insert(fieldIt, value);
}

void GradientBackgroundBase::replaceInPosition(UInt32                uiIndex,
                                                       const Real32& value   )
{
    if(uiIndex >= _mfPosition.size())
        return;

    editMField(PositionFieldMask, _mfPosition);

    _mfPosition[uiIndex] = value;
}

void GradientBackgroundBase::replaceInPosition(const Real32& pOldElem,
                                                        const Real32& pNewElem)
{
    Int32  elemIdx = _mfPosition.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(PositionFieldMask, _mfPosition);

        MFReal32::iterator fieldIt = _mfPosition.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void GradientBackgroundBase::removeFromPosition(UInt32 uiIndex)
{
    if(uiIndex < _mfPosition.size())
    {
        editMField(PositionFieldMask, _mfPosition);

        MFReal32::iterator fieldIt = _mfPosition.begin();

        fieldIt += uiIndex;
        _mfPosition.erase(fieldIt);
    }
}

void GradientBackgroundBase::removeFromPosition(const Real32& value)
{
    Int32 iElemIdx = _mfPosition.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(PositionFieldMask, _mfPosition);

        MFReal32::iterator fieldIt = _mfPosition.begin();

        fieldIt += iElemIdx;

        _mfPosition.erase(fieldIt);
    }
}

void GradientBackgroundBase::clearPosition(void)
{
    editMField(PositionFieldMask, _mfPosition);

    _mfPosition.clear();
}


/*------------------------------ access -----------------------------------*/

UInt32 GradientBackgroundBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        returnValue += _mfColor.getBinSize();
    }
    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        returnValue += _mfPosition.getBinSize();
    }

    return returnValue;
}

void GradientBackgroundBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _mfColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        _mfPosition.copyToBin(pMem);
    }
}

void GradientBackgroundBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ColorFieldMask & whichField))
    {
        _mfColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        _mfPosition.copyFromBin(pMem);
    }
}

//! create an empty new instance of the class, do not copy the prototype
GradientBackgroundPtr GradientBackgroundBase::createEmpty(void)
{
    GradientBackgroundPtr returnValue;

    newPtr<GradientBackground>(returnValue);

    return returnValue;
}

FieldContainerPtr GradientBackgroundBase::shallowCopy(void) const
{
    GradientBackgroundPtr returnValue;

    newPtr(returnValue, dynamic_cast<const GradientBackground *>(this));

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

GradientBackgroundBase::GradientBackgroundBase(void) :
    Inherited(),
    _mfColor                  (),
    _mfPosition               ()
{
}

GradientBackgroundBase::GradientBackgroundBase(const GradientBackgroundBase &source) :
    Inherited(source),
    _mfColor                  (source._mfColor                  ),
    _mfPosition               (source._mfPosition               )
{
}

/*-------------------------- destructors ----------------------------------*/

GradientBackgroundBase::~GradientBackgroundBase(void)
{
}


#ifdef OSG_MT_FIELDCONTAINERPTR
void GradientBackgroundBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo,
                                        UInt32             uiCopyOffset)
{
    this->execSync(static_cast<GradientBackgroundBase *>(&oFrom),
                   whichField,
                   syncMode,
                   uiSyncInfo,
                   uiCopyOffset);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
void GradientBackgroundBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<GradientBackgroundBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif

#if 0
void GradientBackgroundBase::execBeginEditV(ConstFieldMaskArg whichField,
                                       UInt32            uiAspect,
                                       UInt32            uiContainerSize)
{
    this->execBeginEdit(whichField, uiAspect, uiContainerSize);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr GradientBackgroundBase::createAspectCopy(void) const
{
    GradientBackgroundPtr returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const GradientBackground *>(this));

    return returnValue;
}
#endif

void GradientBackgroundBase::resolveLinks(void)
{
    Inherited::resolveLinks();
}


OSG_END_NAMESPACE

#include "OSGMFieldAdaptor.ins"

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<GradientBackgroundPtr>::_type("GradientBackgroundPtr", "BackgroundPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(GradientBackgroundPtr)

OSG_FIELD_DLLEXPORT_DEF2(MFieldAdaptor, GradientBackgroundPtr, MFFieldContainerPtr);

OSG_END_NAMESPACE
