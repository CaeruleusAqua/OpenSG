/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PolygonBackground!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &PolygonBackgroundBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 PolygonBackgroundBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 PolygonBackgroundBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the PolygonBackground::_sfMaterial field.
inline
MaterialPtrConst PolygonBackgroundBase::getMaterial(void) const
{
    return _sfMaterial.getValue();
}

//! Set the value of the PolygonBackground::_sfMaterial field.
inline
void PolygonBackgroundBase::setMaterial(MaterialPtrConstArg value)
{
    editSField(MaterialFieldMask);

    setRefd(_sfMaterial.getValue(), value);

}
//! Get the value of the PolygonBackground::_sfNormalizedX field.

inline
bool &PolygonBackgroundBase::editNormalizedX(void)
{
    editSField(NormalizedXFieldMask);

    return _sfNormalizedX.getValue();
}

//! Get the value of the PolygonBackground::_sfNormalizedX field.
inline
const bool &PolygonBackgroundBase::getNormalizedX(void) const
{
    return _sfNormalizedX.getValue();
}

#ifdef OSG_1_COMPAT
inline
bool                &PolygonBackgroundBase::getNormalizedX    (void)
{
    return this->editNormalizedX    ();
}
#endif

//! Set the value of the PolygonBackground::_sfNormalizedX field.
inline
void PolygonBackgroundBase::setNormalizedX(const bool &value)
{
    editSField(NormalizedXFieldMask);

    _sfNormalizedX.setValue(value);
}
//! Get the value of the PolygonBackground::_sfNormalizedY field.

inline
bool &PolygonBackgroundBase::editNormalizedY(void)
{
    editSField(NormalizedYFieldMask);

    return _sfNormalizedY.getValue();
}

//! Get the value of the PolygonBackground::_sfNormalizedY field.
inline
const bool &PolygonBackgroundBase::getNormalizedY(void) const
{
    return _sfNormalizedY.getValue();
}

#ifdef OSG_1_COMPAT
inline
bool                &PolygonBackgroundBase::getNormalizedY    (void)
{
    return this->editNormalizedY    ();
}
#endif

//! Set the value of the PolygonBackground::_sfNormalizedY field.
inline
void PolygonBackgroundBase::setNormalizedY(const bool &value)
{
    editSField(NormalizedYFieldMask);

    _sfNormalizedY.setValue(value);
}
//! Get the value of the PolygonBackground::_sfAspectHeight field.

inline
UInt16 &PolygonBackgroundBase::editAspectHeight(void)
{
    editSField(AspectHeightFieldMask);

    return _sfAspectHeight.getValue();
}

//! Get the value of the PolygonBackground::_sfAspectHeight field.
inline
const UInt16 &PolygonBackgroundBase::getAspectHeight(void) const
{
    return _sfAspectHeight.getValue();
}

#ifdef OSG_1_COMPAT
inline
UInt16              &PolygonBackgroundBase::getAspectHeight   (void)
{
    return this->editAspectHeight   ();
}
#endif

//! Set the value of the PolygonBackground::_sfAspectHeight field.
inline
void PolygonBackgroundBase::setAspectHeight(const UInt16 &value)
{
    editSField(AspectHeightFieldMask);

    _sfAspectHeight.setValue(value);
}
//! Get the value of the PolygonBackground::_sfAspectWidth field.

inline
UInt16 &PolygonBackgroundBase::editAspectWidth(void)
{
    editSField(AspectWidthFieldMask);

    return _sfAspectWidth.getValue();
}

//! Get the value of the PolygonBackground::_sfAspectWidth field.
inline
const UInt16 &PolygonBackgroundBase::getAspectWidth(void) const
{
    return _sfAspectWidth.getValue();
}

#ifdef OSG_1_COMPAT
inline
UInt16              &PolygonBackgroundBase::getAspectWidth    (void)
{
    return this->editAspectWidth    ();
}
#endif

//! Set the value of the PolygonBackground::_sfAspectWidth field.
inline
void PolygonBackgroundBase::setAspectWidth(const UInt16 &value)
{
    editSField(AspectWidthFieldMask);

    _sfAspectWidth.setValue(value);
}

//! Get the value of the \a index element the PolygonBackground::_mfTexCoords field.
inline
const Vec3f &PolygonBackgroundBase::getTexCoords(const UInt32 index) const
{
    return _mfTexCoords[index];
}

inline
Vec3f &PolygonBackgroundBase::editTexCoords(const UInt32 index)
{
    editMField(TexCoordsFieldMask, _mfTexCoords);

    return _mfTexCoords[index];
}

//! Get the PolygonBackground::_mfTexCoords field.
inline
MFVec3f &PolygonBackgroundBase::editTexCoords(void)
{
    editMField(TexCoordsFieldMask, _mfTexCoords);

    return _mfTexCoords;
}

#ifdef OSG_1_COMPAT
inline
Vec3f               &PolygonBackgroundBase::getTexCoords      (const UInt32 index)
{
    return this->editTexCoords      (index);
}

inline
MFVec3f             &PolygonBackgroundBase::getTexCoords      (void)
{
    return this->editTexCoords      ();
}

#endif


//! Get the PolygonBackground::_mfTexCoords field.
inline
const MFVec3f &PolygonBackgroundBase::getTexCoords(void) const
{
    return _mfTexCoords;
}

//! Get the value of the \a index element the PolygonBackground::_mfPositions field.
inline
const Pnt2f &PolygonBackgroundBase::getPositions(const UInt32 index) const
{
    return _mfPositions[index];
}

inline
Pnt2f &PolygonBackgroundBase::editPositions(const UInt32 index)
{
    editMField(PositionsFieldMask, _mfPositions);

    return _mfPositions[index];
}

//! Get the PolygonBackground::_mfPositions field.
inline
MFPnt2f &PolygonBackgroundBase::editPositions(void)
{
    editMField(PositionsFieldMask, _mfPositions);

    return _mfPositions;
}

#ifdef OSG_1_COMPAT
inline
Pnt2f               &PolygonBackgroundBase::getPositions      (const UInt32 index)
{
    return this->editPositions      (index);
}

inline
MFPnt2f             &PolygonBackgroundBase::getPositions      (void)
{
    return this->editPositions      ();
}

#endif


//! Get the PolygonBackground::_mfPositions field.
inline
const MFPnt2f &PolygonBackgroundBase::getPositions(void) const
{
    return _mfPositions;
}

//! create a new instance of the class
inline
PolygonBackgroundPtr PolygonBackgroundBase::create(void)
{
    PolygonBackgroundPtr fc;

    if(getClassType().getPrototype() != NullFC)
    {
        fc = OSG::cast_dynamic<PolygonBackground::ObjPtr>(
            getClassType().getPrototype()-> shallowCopy());
    }

    return fc;
}

#ifdef OSG_MT_FIELDCONTAINERPTR
inline
void PolygonBackgroundBase::execSync(      PolygonBackgroundBase *pOther,
                                       ConstFieldMaskArg  whichField,
                                       ConstFieldMaskArg  syncMode,
                                 const UInt32             uiSyncInfo,
                                       UInt32             uiCopyOffset)
{
    Inherited::execSync(pOther, whichField, syncMode, uiSyncInfo, uiCopyOffset);

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
        _sfMaterial.syncWith(pOther->_sfMaterial);

    if(FieldBits::NoField != (TexCoordsFieldMask & whichField))
        _mfTexCoords.syncWith(pOther->_mfTexCoords,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (PositionsFieldMask & whichField))
        _mfPositions.syncWith(pOther->_mfPositions,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);

    if(FieldBits::NoField != (NormalizedXFieldMask & whichField))
        _sfNormalizedX.syncWith(pOther->_sfNormalizedX);

    if(FieldBits::NoField != (NormalizedYFieldMask & whichField))
        _sfNormalizedY.syncWith(pOther->_sfNormalizedY);

    if(FieldBits::NoField != (AspectHeightFieldMask & whichField))
        _sfAspectHeight.syncWith(pOther->_sfAspectHeight);

    if(FieldBits::NoField != (AspectWidthFieldMask & whichField))
        _sfAspectWidth.syncWith(pOther->_sfAspectWidth);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
inline
void PolygonBackgroundBase::execSync (      PolygonBackgroundBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
        _sfMaterial.syncWith(pFrom->_sfMaterial);

    if(FieldBits::NoField != (TexCoordsFieldMask & whichField))
        _mfTexCoords.syncWith(pFrom->_mfTexCoords,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (PositionsFieldMask & whichField))
        _mfPositions.syncWith(pFrom->_mfPositions,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (NormalizedXFieldMask & whichField))
        _sfNormalizedX.syncWith(pFrom->_sfNormalizedX);

    if(FieldBits::NoField != (NormalizedYFieldMask & whichField))
        _sfNormalizedY.syncWith(pFrom->_sfNormalizedY);

    if(FieldBits::NoField != (AspectHeightFieldMask & whichField))
        _sfAspectHeight.syncWith(pFrom->_sfAspectHeight);

    if(FieldBits::NoField != (AspectWidthFieldMask & whichField))
        _sfAspectWidth.syncWith(pFrom->_sfAspectWidth);
}
#endif

#if 0
inline
void PolygonBackgroundBase::execBeginEdit(ConstFieldMaskArg whichField,
                                      UInt32            uiAspect,
                                      UInt32            uiContainerSize)
{
    Inherited::execBeginEdit(whichField, uiAspect, uiContainerSize);

    if(FieldBits::NoField != (TexCoordsFieldMask & whichField))
    {
        _mfTexCoords.beginEdit(uiAspect, uiContainerSize);
    }

    if(FieldBits::NoField != (PositionsFieldMask & whichField))
    {
        _mfPositions.beginEdit(uiAspect, uiContainerSize);
    }
}
#endif


inline
Char8 *PolygonBackgroundBase::getClassname(void)
{
    return "PolygonBackground";
}

typedef PointerBuilder<PolygonBackground>::ObjPtr          PolygonBackgroundPtr;
typedef PointerBuilder<PolygonBackground>::ObjPtrConst     PolygonBackgroundPtrConst;
typedef PointerBuilder<PolygonBackground>::ObjConstPtr     PolygonBackgroundConstPtr;

typedef PointerBuilder<PolygonBackground>::ObjPtrArg       PolygonBackgroundPtrArg;
typedef PointerBuilder<PolygonBackground>::ObjConstPtrArg  PolygonBackgroundConstPtrArg;
typedef PointerBuilder<PolygonBackground>::ObjPtrConstArg  PolygonBackgroundPtrConstArg;

OSG_END_NAMESPACE

#define OSGPOLYGONBACKGROUNDBASE_INLINE_CVSID "@(#)$Id$"
