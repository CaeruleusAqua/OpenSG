/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PolygonBackground!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEPOLYGONBACKGROUNDINST

#include <stdlib.h>
#include <stdio.h>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>



#include <OSGMaterial.h> // Material Class

#include "OSGPolygonBackgroundBase.h"
#include "OSGPolygonBackground.h"

OSG_USING_NAMESPACE

// Field descriptions

/*! \var MaterialPtr PolygonBackgroundBase::_sfMaterial
    	The material used to display.

*/
/*! \var Vec3f PolygonBackgroundBase::_mfTexCoords
    	The texture coordinates of the geometry to display.

*/
/*! \var Pnt2f PolygonBackgroundBase::_mfPositions
    	The positions of the geometry to display.

*/
/*! \var bool PolygonBackgroundBase::_sfNormalizedX
    	Define whether the x coordinates are normalized (0-1) or pixel-based .

*/
/*! \var bool PolygonBackgroundBase::_sfNormalizedY
    	Define whether the y coordinates are normalized (0-1) or pixel-based .

*/
/*! \var UInt16 PolygonBackgroundBase::_sfAspectHeight
    	Useful for keeping aspect ratio when rendering things like images.

*/
/*! \var UInt16 PolygonBackgroundBase::_sfAspectWidth
    	Useful for keeping aspect ratio when rendering things like images.

*/

void PolygonBackgroundBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL; 


    pDesc = new SFMaterialPtr::Description(
        SFMaterialPtr::getClassType(), 
        "material", 
        "	The material used to display.\n",
        MaterialFieldId, MaterialFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&PolygonBackgroundBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&PolygonBackgroundBase::getSFMaterial));

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFVec3f *(PolygonBackgroundBase::*GetMFTexCoordsF)(void) const;

    GetMFTexCoordsF GetMFTexCoords = &PolygonBackgroundBase::getMFTexCoords;
#endif

    pDesc = new MFVec3f::Description(
        MFVec3f::getClassType(), 
        "texCoords", 
        "	The texture coordinates of the geometry to display.\n",
        TexCoordsFieldId, TexCoordsFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&PolygonBackgroundBase::editMFTexCoords),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFTexCoords));
#else
        reinterpret_cast<FieldGetMethodSig >(&PolygonBackgroundBase::getMFTexCoords));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFPnt2f *(PolygonBackgroundBase::*GetMFPositionsF)(void) const;

    GetMFPositionsF GetMFPositions = &PolygonBackgroundBase::getMFPositions;
#endif

    pDesc = new MFPnt2f::Description(
        MFPnt2f::getClassType(), 
        "positions", 
        "	The positions of the geometry to display.\n",
        PositionsFieldId, PositionsFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&PolygonBackgroundBase::editMFPositions),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFPositions));
#else
        reinterpret_cast<FieldGetMethodSig >(&PolygonBackgroundBase::getMFPositions));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFBool *(PolygonBackgroundBase::*GetSFNormalizedXF)(void) const;

    GetSFNormalizedXF GetSFNormalizedX = &PolygonBackgroundBase::getSFNormalizedX;
#endif

    pDesc = new SFBool::Description(
        SFBool::getClassType(), 
        "normalizedX", 
        "	Define whether the x coordinates are normalized (0-1) or pixel-based .\n",
        NormalizedXFieldId, NormalizedXFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&PolygonBackgroundBase::editSFNormalizedX),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFNormalizedX));
#else
        reinterpret_cast<FieldGetMethodSig >(&PolygonBackgroundBase::getSFNormalizedX));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFBool *(PolygonBackgroundBase::*GetSFNormalizedYF)(void) const;

    GetSFNormalizedYF GetSFNormalizedY = &PolygonBackgroundBase::getSFNormalizedY;
#endif

    pDesc = new SFBool::Description(
        SFBool::getClassType(), 
        "normalizedY", 
        "	Define whether the y coordinates are normalized (0-1) or pixel-based .\n",
        NormalizedYFieldId, NormalizedYFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&PolygonBackgroundBase::editSFNormalizedY),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFNormalizedY));
#else
        reinterpret_cast<FieldGetMethodSig >(&PolygonBackgroundBase::getSFNormalizedY));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFUInt16 *(PolygonBackgroundBase::*GetSFAspectHeightF)(void) const;

    GetSFAspectHeightF GetSFAspectHeight = &PolygonBackgroundBase::getSFAspectHeight;
#endif

    pDesc = new SFUInt16::Description(
        SFUInt16::getClassType(), 
        "aspectHeight", 
        "	Useful for keeping aspect ratio when rendering things like images.\n",
        AspectHeightFieldId, AspectHeightFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&PolygonBackgroundBase::editSFAspectHeight),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFAspectHeight));
#else
        reinterpret_cast<FieldGetMethodSig >(&PolygonBackgroundBase::getSFAspectHeight));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFUInt16 *(PolygonBackgroundBase::*GetSFAspectWidthF)(void) const;

    GetSFAspectWidthF GetSFAspectWidth = &PolygonBackgroundBase::getSFAspectWidth;
#endif

    pDesc = new SFUInt16::Description(
        SFUInt16::getClassType(), 
        "aspectWidth", 
        "	Useful for keeping aspect ratio when rendering things like images.\n",
        AspectWidthFieldId, AspectWidthFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&PolygonBackgroundBase::editSFAspectWidth),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFAspectWidth));
#else
        reinterpret_cast<FieldGetMethodSig >(&PolygonBackgroundBase::getSFAspectWidth));
#endif

    oType.addInitialDesc(pDesc);
}


PolygonBackgroundBase::TypeObject PolygonBackgroundBase::_type(true,
    PolygonBackgroundBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &PolygonBackgroundBase::createEmpty,
    PolygonBackground::initMethod,
    (InitalInsertDescFunc) &PolygonBackgroundBase::classDescInserter,
    false,
    "<?xml version=\"1.0\"?>\n"
"\n"
"<FieldContainer\n"
"	name=\"PolygonBackground\"\n"
"	parent=\"Background\"\n"
"	library=\"Window\"\n"
"	pointerfieldtypes=\"both\"\n"
"	structure=\"concrete\"\n"
"	systemcomponent=\"true\"\n"
"	parentsystemcomponent=\"true\"\n"
"	decoratable=\"false\"\n"
"	useLocalIncludes=\"false\"\n"
">\n"
"A Background that renders a single polygon using the specified material.\n"
"	<Field\n"
"		name=\"material\"\n"
"		type=\"MaterialPtr\"\n"
"		cardinality=\"single\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	The material used to display.\n"
"	</Field>\n"
"	<Field\n"
"		name=\"texCoords\"\n"
"		type=\"Vec3f\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	The texture coordinates of the geometry to display.\n"
"	</Field>\n"
"	<Field\n"
"		name=\"positions\"\n"
"		type=\"Pnt2f\"\n"
"		cardinality=\"multi\"\n"
"		visibility=\"external\"\n"
"		access=\"public\"\n"
"	>\n"
"	The positions of the geometry to display.\n"
"	</Field>\n"
"	<Field\n"
"		name=\"normalizedX\"\n"
"		type=\"bool\"\n"
"		cardinality=\"single\"\n"
"		visibility=\"external\"\n"
"		defaultValue=\"true\"\n"
"		access=\"public\"\n"
"	>\n"
"	Define whether the x coordinates are normalized (0-1) or pixel-based .\n"
"	</Field>\n"
"	<Field\n"
"		name=\"normalizedY\"\n"
"		type=\"bool\"\n"
"		cardinality=\"single\"\n"
"		visibility=\"external\"\n"
"		defaultValue=\"true\"\n"
"		access=\"public\"\n"
"	>\n"
"	Define whether the y coordinates are normalized (0-1) or pixel-based .\n"
"	</Field>\n"
"	<Field\n"
"		name=\"aspectHeight\"\n"
"		type=\"UInt16\"\n"
"		cardinality=\"single\"\n"
"		visibility=\"external\"\n"
"		defaultValue=\"0\"\n"
"		access=\"public\"\n"
"	>\n"
"	Useful for keeping aspect ratio when rendering things like images.\n"
"	</Field>\n"
"	<Field\n"
"		name=\"aspectWidth\"\n"
"		type=\"UInt16\"\n"
"		cardinality=\"single\"\n"
"		visibility=\"external\"\n"
"		defaultValue=\"0\"\n"
"		access=\"public\"\n"
"	>\n"
"	Useful for keeping aspect ratio when rendering things like images.\n"
"	</Field>\n"
"</FieldContainer>\n"
,
    "A Background that renders a single polygon using the specified material.\n" 
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &PolygonBackgroundBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &PolygonBackgroundBase::getType(void) const 
{
    return _type;
} 

UInt32 PolygonBackgroundBase::getContainerSize(void) const 
{ 
    return sizeof(PolygonBackground); 
}

/*------------------------- decorator get ------------------------------*/


//! Get the PolygonBackground::_sfMaterial field.
const SFMaterialPtr *PolygonBackgroundBase::getSFMaterial(void) const
{
    return &_sfMaterial;
}

MFVec3f *PolygonBackgroundBase::editMFTexCoords(void)
{
    editMField(TexCoordsFieldMask, _mfTexCoords);

    return &_mfTexCoords;
}

const MFVec3f *PolygonBackgroundBase::getMFTexCoords(void) const
{
    return &_mfTexCoords;
}

#ifdef OSG_1_COMPAT
MFVec3f *PolygonBackgroundBase::getMFTexCoords(void)
{
    return this->editMFTexCoords();
}
#endif

MFPnt2f *PolygonBackgroundBase::editMFPositions(void)
{
    editMField(PositionsFieldMask, _mfPositions);

    return &_mfPositions;
}

const MFPnt2f *PolygonBackgroundBase::getMFPositions(void) const
{
    return &_mfPositions;
}

#ifdef OSG_1_COMPAT
MFPnt2f *PolygonBackgroundBase::getMFPositions(void)
{
    return this->editMFPositions();
}
#endif

SFBool *PolygonBackgroundBase::editSFNormalizedX(void)
{
    editSField(NormalizedXFieldMask);

    return &_sfNormalizedX;
}

const SFBool *PolygonBackgroundBase::getSFNormalizedX(void) const
{
    return &_sfNormalizedX;
}

#ifdef OSG_1_COMPAT
SFBool *PolygonBackgroundBase::getSFNormalizedX(void)
{
    return this->editSFNormalizedX();
}
#endif

SFBool *PolygonBackgroundBase::editSFNormalizedY(void)
{
    editSField(NormalizedYFieldMask);

    return &_sfNormalizedY;
}

const SFBool *PolygonBackgroundBase::getSFNormalizedY(void) const
{
    return &_sfNormalizedY;
}

#ifdef OSG_1_COMPAT
SFBool *PolygonBackgroundBase::getSFNormalizedY(void)
{
    return this->editSFNormalizedY();
}
#endif

SFUInt16 *PolygonBackgroundBase::editSFAspectHeight(void)
{
    editSField(AspectHeightFieldMask);

    return &_sfAspectHeight;
}

const SFUInt16 *PolygonBackgroundBase::getSFAspectHeight(void) const
{
    return &_sfAspectHeight;
}

#ifdef OSG_1_COMPAT
SFUInt16 *PolygonBackgroundBase::getSFAspectHeight(void)
{
    return this->editSFAspectHeight();
}
#endif

SFUInt16 *PolygonBackgroundBase::editSFAspectWidth(void)
{
    editSField(AspectWidthFieldMask);

    return &_sfAspectWidth;
}

const SFUInt16 *PolygonBackgroundBase::getSFAspectWidth(void) const
{
    return &_sfAspectWidth;
}

#ifdef OSG_1_COMPAT
SFUInt16 *PolygonBackgroundBase::getSFAspectWidth(void)
{
    return this->editSFAspectWidth();
}
#endif


void PolygonBackgroundBase::pushToField(      FieldContainerPtrConstArg pNewElement,
                                    const UInt32                    uiFieldId  )
{
    Inherited::pushToField(pNewElement, uiFieldId);

    if(uiFieldId == MaterialFieldId)
    {
        static_cast<PolygonBackground *>(this)->setMaterial(
            cast_dynamic<MaterialPtr>(pNewElement));
    }
}

void PolygonBackgroundBase::insertIntoMField(const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::insertIntoMField(uiIndex, pNewElement, uiFieldId);

}

void PolygonBackgroundBase::replaceInMField (const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::replaceInMField(uiIndex, pNewElement, uiFieldId);

}

void PolygonBackgroundBase::replaceInMField (      FieldContainerPtrConstArg pOldElement,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::replaceInMField(pOldElement, pNewElement, uiFieldId);

}

void PolygonBackgroundBase::removeFromMField(const UInt32 uiIndex,
                                         const UInt32 uiFieldId)
{
    Inherited::removeFromMField(uiIndex, uiFieldId);

}

void PolygonBackgroundBase::removeFromMField(      FieldContainerPtrConstArg pElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::removeFromMField(pElement, uiFieldId);

}

void PolygonBackgroundBase::clearField(const UInt32 uiFieldId)
{
    Inherited::clearField(uiFieldId);

    if(uiFieldId == MaterialFieldId)
    {
        static_cast<PolygonBackground *>(this)->setMaterial(NullFC);
    }
}





/*------------------------------ access -----------------------------------*/

UInt32 PolygonBackgroundBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
    {
        returnValue += _sfMaterial.getBinSize();
    }
    if(FieldBits::NoField != (TexCoordsFieldMask & whichField))
    {
        returnValue += _mfTexCoords.getBinSize();
    }
    if(FieldBits::NoField != (PositionsFieldMask & whichField))
    {
        returnValue += _mfPositions.getBinSize();
    }
    if(FieldBits::NoField != (NormalizedXFieldMask & whichField))
    {
        returnValue += _sfNormalizedX.getBinSize();
    }
    if(FieldBits::NoField != (NormalizedYFieldMask & whichField))
    {
        returnValue += _sfNormalizedY.getBinSize();
    }
    if(FieldBits::NoField != (AspectHeightFieldMask & whichField))
    {
        returnValue += _sfAspectHeight.getBinSize();
    }
    if(FieldBits::NoField != (AspectWidthFieldMask & whichField))
    {
        returnValue += _sfAspectWidth.getBinSize();
    }

    return returnValue;
}

void PolygonBackgroundBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
    {
        _sfMaterial.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TexCoordsFieldMask & whichField))
    {
        _mfTexCoords.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PositionsFieldMask & whichField))
    {
        _mfPositions.copyToBin(pMem);
    }
    if(FieldBits::NoField != (NormalizedXFieldMask & whichField))
    {
        _sfNormalizedX.copyToBin(pMem);
    }
    if(FieldBits::NoField != (NormalizedYFieldMask & whichField))
    {
        _sfNormalizedY.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AspectHeightFieldMask & whichField))
    {
        _sfAspectHeight.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AspectWidthFieldMask & whichField))
    {
        _sfAspectWidth.copyToBin(pMem);
    }
}

void PolygonBackgroundBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
    {
        _sfMaterial.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TexCoordsFieldMask & whichField))
    {
        _mfTexCoords.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PositionsFieldMask & whichField))
    {
        _mfPositions.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (NormalizedXFieldMask & whichField))
    {
        _sfNormalizedX.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (NormalizedYFieldMask & whichField))
    {
        _sfNormalizedY.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AspectHeightFieldMask & whichField))
    {
        _sfAspectHeight.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AspectWidthFieldMask & whichField))
    {
        _sfAspectWidth.copyFromBin(pMem);
    }
}

//! create an empty new instance of the class, do not copy the prototype
PolygonBackgroundPtr PolygonBackgroundBase::createEmpty(void) 
{ 
    PolygonBackgroundPtr returnValue; 
    
    newPtr<PolygonBackground>(returnValue); 

    return returnValue; 
}

FieldContainerPtr PolygonBackgroundBase::shallowCopy(void) const 
{ 
    PolygonBackgroundPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const PolygonBackground *>(this)); 

    return returnValue; 
}



/*------------------------- constructors ----------------------------------*/

PolygonBackgroundBase::PolygonBackgroundBase(void) :
    Inherited(),
    _sfMaterial(),
    _mfTexCoords(),
    _mfPositions(),
    _sfNormalizedX(bool(true)),
    _sfNormalizedY(bool(true)),
    _sfAspectHeight(UInt16(0)),
    _sfAspectWidth(UInt16(0))
{
}

PolygonBackgroundBase::PolygonBackgroundBase(const PolygonBackgroundBase &source) :
    Inherited(source),
    _sfMaterial(),
    _mfTexCoords(source._mfTexCoords),
    _mfPositions(source._mfPositions),
    _sfNormalizedX(source._sfNormalizedX),
    _sfNormalizedY(source._sfNormalizedY),
    _sfAspectHeight(source._sfAspectHeight),
    _sfAspectWidth(source._sfAspectWidth)
{
}

/*-------------------------- destructors ----------------------------------*/

PolygonBackgroundBase::~PolygonBackgroundBase(void)
{
}

void PolygonBackgroundBase::onCreate(const PolygonBackground *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {

        this->setMaterial(source->getMaterial());
    }
}

#ifdef OSG_MT_FIELDCONTAINERPTR
void PolygonBackgroundBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo,
                                        UInt32             uiCopyOffset)
{
    this->execSync(static_cast<PolygonBackgroundBase *>(&oFrom),
                   whichField, 
                   syncMode, 
                   uiSyncInfo,
                   uiCopyOffset);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
void PolygonBackgroundBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<PolygonBackgroundBase *>(&oFrom), 
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif

#if 0
void PolygonBackgroundBase::execBeginEditV(ConstFieldMaskArg whichField,
                                       UInt32            uiAspect,
                                       UInt32            uiContainerSize)
{
    this->execBeginEdit(whichField, uiAspect, uiContainerSize);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr PolygonBackgroundBase::createAspectCopy(void) const
{
    PolygonBackgroundPtr returnValue; 

    newAspectCopy(returnValue, 
                  dynamic_cast<const PolygonBackground *>(this)); 

    return returnValue; 
}
#endif

void PolygonBackgroundBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<PolygonBackground *>(this)->setMaterial(NullFC);
}


#include "OSGSField.ins"
#include "OSGMField.ins"

#if defined(OSG_TMPL_STATIC_MEMBER_NEEDS_FUNCTION_INSTANTIATION) || \
    defined(OSG_TMPL_STATIC_MEMBER_NEEDS_CLASS_INSTANTIATION   )

#include "OSGSFieldFuncs.ins"
#include "OSGMFieldFuncs.ins"
#endif

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<PolygonBackgroundPtr>::_type("PolygonBackgroundPtr", "BackgroundPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(PolygonBackgroundPtr)

OSG_FIELD_DLLEXPORT_DEF1(SField, PolygonBackgroundPtr);
OSG_FIELD_DLLEXPORT_DEF1(MField, PolygonBackgroundPtr);

OSG_END_NAMESPACE


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id$";
    static Char8 cvsid_hpp       [] = OSGPOLYGONBACKGROUNDBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGPOLYGONBACKGROUNDBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGPOLYGONBACKGROUNDFIELDS_HEADER_CVSID;
}
