/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SkyBackground
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGSKYBACKGROUNDBASE_H_
#define _OSGSKYBACKGROUNDBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGWindowDef.h"

//#include "OSGBaseTypes.h"

#include "OSGBackground.h" // Parent

#include "OSGBaseFields.h"              // SkyColor type
#include "OSGSysFields.h"               // SkyAngle type
#include "OSGTextureBaseChunkFields.h"  // BackTexture type
#include "OSGVecFields.h"               // TopTexCoord type
#include "OSGNodeFields.h"              // Beacon type

#include "OSGSkyBackgroundFields.h"

OSG_BEGIN_NAMESPACE

class SkyBackground;

//! \brief SkyBackground Base Class.

class OSG_WINDOW_DLLMAPPING SkyBackgroundBase : public Background
{
  public:

    typedef Background Inherited;
    typedef Background ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(SkyBackground);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        SkyColorFieldId = Inherited::NextFieldId,
        SkyAngleFieldId = SkyColorFieldId + 1,
        GroundColorFieldId = SkyAngleFieldId + 1,
        GroundAngleFieldId = GroundColorFieldId + 1,
        SphereResFieldId = GroundAngleFieldId + 1,
        BackTextureFieldId = SphereResFieldId + 1,
        BottomTextureFieldId = BackTextureFieldId + 1,
        FrontTextureFieldId = BottomTextureFieldId + 1,
        LeftTextureFieldId = FrontTextureFieldId + 1,
        RightTextureFieldId = LeftTextureFieldId + 1,
        TopTextureFieldId = RightTextureFieldId + 1,
        BoxInsideFieldId = TopTextureFieldId + 1,
        TopTexCoordFieldId = BoxInsideFieldId + 1,
        BottomTexCoordFieldId = TopTexCoordFieldId + 1,
        RightTexCoordFieldId = BottomTexCoordFieldId + 1,
        LeftTexCoordFieldId = RightTexCoordFieldId + 1,
        FrontTexCoordFieldId = LeftTexCoordFieldId + 1,
        BackTexCoordFieldId = FrontTexCoordFieldId + 1,
        BeaconFieldId = BackTexCoordFieldId + 1,
        UseVRMLCubeTextureSemanticsFieldId = BeaconFieldId + 1,
        NextFieldId = UseVRMLCubeTextureSemanticsFieldId + 1
    };

    static const OSG::BitVector SkyColorFieldMask =
        (TypeTraits<BitVector>::One << SkyColorFieldId);
    static const OSG::BitVector SkyAngleFieldMask =
        (TypeTraits<BitVector>::One << SkyAngleFieldId);
    static const OSG::BitVector GroundColorFieldMask =
        (TypeTraits<BitVector>::One << GroundColorFieldId);
    static const OSG::BitVector GroundAngleFieldMask =
        (TypeTraits<BitVector>::One << GroundAngleFieldId);
    static const OSG::BitVector SphereResFieldMask =
        (TypeTraits<BitVector>::One << SphereResFieldId);
    static const OSG::BitVector BackTextureFieldMask =
        (TypeTraits<BitVector>::One << BackTextureFieldId);
    static const OSG::BitVector BottomTextureFieldMask =
        (TypeTraits<BitVector>::One << BottomTextureFieldId);
    static const OSG::BitVector FrontTextureFieldMask =
        (TypeTraits<BitVector>::One << FrontTextureFieldId);
    static const OSG::BitVector LeftTextureFieldMask =
        (TypeTraits<BitVector>::One << LeftTextureFieldId);
    static const OSG::BitVector RightTextureFieldMask =
        (TypeTraits<BitVector>::One << RightTextureFieldId);
    static const OSG::BitVector TopTextureFieldMask =
        (TypeTraits<BitVector>::One << TopTextureFieldId);
    static const OSG::BitVector BoxInsideFieldMask =
        (TypeTraits<BitVector>::One << BoxInsideFieldId);
    static const OSG::BitVector TopTexCoordFieldMask =
        (TypeTraits<BitVector>::One << TopTexCoordFieldId);
    static const OSG::BitVector BottomTexCoordFieldMask =
        (TypeTraits<BitVector>::One << BottomTexCoordFieldId);
    static const OSG::BitVector RightTexCoordFieldMask =
        (TypeTraits<BitVector>::One << RightTexCoordFieldId);
    static const OSG::BitVector LeftTexCoordFieldMask =
        (TypeTraits<BitVector>::One << LeftTexCoordFieldId);
    static const OSG::BitVector FrontTexCoordFieldMask =
        (TypeTraits<BitVector>::One << FrontTexCoordFieldId);
    static const OSG::BitVector BackTexCoordFieldMask =
        (TypeTraits<BitVector>::One << BackTexCoordFieldId);
    static const OSG::BitVector BeaconFieldMask =
        (TypeTraits<BitVector>::One << BeaconFieldId);
    static const OSG::BitVector UseVRMLCubeTextureSemanticsFieldMask =
        (TypeTraits<BitVector>::One << UseVRMLCubeTextureSemanticsFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef MFColor4f         MFSkyColorType;
    typedef MFReal32          MFSkyAngleType;
    typedef MFColor4f         MFGroundColorType;
    typedef MFReal32          MFGroundAngleType;
    typedef SFUInt32          SFSphereResType;
    typedef SFUnrecTextureBaseChunkPtr SFBackTextureType;
    typedef SFUnrecTextureBaseChunkPtr SFBottomTextureType;
    typedef SFUnrecTextureBaseChunkPtr SFFrontTextureType;
    typedef SFUnrecTextureBaseChunkPtr SFLeftTextureType;
    typedef SFUnrecTextureBaseChunkPtr SFRightTextureType;
    typedef SFUnrecTextureBaseChunkPtr SFTopTextureType;
    typedef SFBool            SFBoxInsideType;
    typedef MFVec3f           MFTopTexCoordType;
    typedef MFVec3f           MFBottomTexCoordType;
    typedef MFVec3f           MFRightTexCoordType;
    typedef MFVec3f           MFLeftTexCoordType;
    typedef MFVec3f           MFFrontTexCoordType;
    typedef MFVec3f           MFBackTexCoordType;
    typedef SFWeakNodePtr     SFBeaconType;
    typedef SFBool            SFUseVRMLCubeTextureSemanticsType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  MFColor4f           *editMFSkyColor       (void);
            const MFColor4f           *getMFSkyColor        (void) const;

                  MFReal32            *editMFSkyAngle       (void);
            const MFReal32            *getMFSkyAngle        (void) const;

                  MFColor4f           *editMFGroundColor    (void);
            const MFColor4f           *getMFGroundColor     (void) const;

                  MFReal32            *editMFGroundAngle    (void);
            const MFReal32            *getMFGroundAngle     (void) const;

                  SFUInt32            *editSFSphereRes      (void);
            const SFUInt32            *getSFSphereRes       (void) const;
            const SFUnrecTextureBaseChunkPtr *getSFBackTexture    (void) const;
                  SFUnrecTextureBaseChunkPtr *editSFBackTexture    (void);
            const SFUnrecTextureBaseChunkPtr *getSFBottomTexture  (void) const;
                  SFUnrecTextureBaseChunkPtr *editSFBottomTexture  (void);
            const SFUnrecTextureBaseChunkPtr *getSFFrontTexture   (void) const;
                  SFUnrecTextureBaseChunkPtr *editSFFrontTexture   (void);
            const SFUnrecTextureBaseChunkPtr *getSFLeftTexture    (void) const;
                  SFUnrecTextureBaseChunkPtr *editSFLeftTexture    (void);
            const SFUnrecTextureBaseChunkPtr *getSFRightTexture   (void) const;
                  SFUnrecTextureBaseChunkPtr *editSFRightTexture   (void);
            const SFUnrecTextureBaseChunkPtr *getSFTopTexture     (void) const;
                  SFUnrecTextureBaseChunkPtr *editSFTopTexture     (void);

                  SFBool              *editSFBoxInside      (void);
            const SFBool              *getSFBoxInside       (void) const;

                  MFVec3f             *editMFTopTexCoord    (void);
            const MFVec3f             *getMFTopTexCoord     (void) const;

                  MFVec3f             *editMFBottomTexCoord (void);
            const MFVec3f             *getMFBottomTexCoord  (void) const;

                  MFVec3f             *editMFRightTexCoord  (void);
            const MFVec3f             *getMFRightTexCoord   (void) const;

                  MFVec3f             *editMFLeftTexCoord   (void);
            const MFVec3f             *getMFLeftTexCoord    (void) const;

                  MFVec3f             *editMFFrontTexCoord  (void);
            const MFVec3f             *getMFFrontTexCoord   (void) const;

                  MFVec3f             *editMFBackTexCoord   (void);
            const MFVec3f             *getMFBackTexCoord    (void) const;
            const SFWeakNodePtr       *getSFBeacon         (void) const;
                  SFWeakNodePtr       *editSFBeacon         (void);

                  SFBool              *editSFUseVRMLCubeTextureSemantics(void);
            const SFBool              *getSFUseVRMLCubeTextureSemantics (void) const;


                  Color4f             &editSkyColor       (const UInt32 index);
            const Color4f             &getSkyColor        (const UInt32 index) const;

                  Real32              &editSkyAngle       (const UInt32 index);
                  Real32               getSkyAngle        (const UInt32 index) const;

                  Color4f             &editGroundColor    (const UInt32 index);
            const Color4f             &getGroundColor     (const UInt32 index) const;

                  Real32              &editGroundAngle    (const UInt32 index);
                  Real32               getGroundAngle     (const UInt32 index) const;

                  UInt32              &editSphereRes      (void);
                  UInt32               getSphereRes       (void) const;

                  TextureBaseChunk * getBackTexture    (void) const;

                  TextureBaseChunk * getBottomTexture  (void) const;

                  TextureBaseChunk * getFrontTexture   (void) const;

                  TextureBaseChunk * getLeftTexture    (void) const;

                  TextureBaseChunk * getRightTexture   (void) const;

                  TextureBaseChunk * getTopTexture     (void) const;

                  bool                &editBoxInside      (void);
                  bool                 getBoxInside       (void) const;

                  Vec3f               &editTopTexCoord    (const UInt32 index);
            const Vec3f               &getTopTexCoord     (const UInt32 index) const;

                  Vec3f               &editBottomTexCoord (const UInt32 index);
            const Vec3f               &getBottomTexCoord  (const UInt32 index) const;

                  Vec3f               &editRightTexCoord  (const UInt32 index);
            const Vec3f               &getRightTexCoord   (const UInt32 index) const;

                  Vec3f               &editLeftTexCoord   (const UInt32 index);
            const Vec3f               &getLeftTexCoord    (const UInt32 index) const;

                  Vec3f               &editFrontTexCoord  (const UInt32 index);
            const Vec3f               &getFrontTexCoord   (const UInt32 index) const;

                  Vec3f               &editBackTexCoord   (const UInt32 index);
            const Vec3f               &getBackTexCoord    (const UInt32 index) const;

                  Node * getBeacon         (void) const;

                  bool                &editUseVRMLCubeTextureSemantics(void);
                  bool                 getUseVRMLCubeTextureSemantics (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setSphereRes      (const UInt32 value);
            void setBackTexture    (TextureBaseChunk * const value);
            void setBottomTexture  (TextureBaseChunk * const value);
            void setFrontTexture   (TextureBaseChunk * const value);
            void setLeftTexture    (TextureBaseChunk * const value);
            void setRightTexture   (TextureBaseChunk * const value);
            void setTopTexture     (TextureBaseChunk * const value);
            void setBoxInside      (const bool value);
            void setBeacon         (Node * const value);
            void setUseVRMLCubeTextureSemantics(const bool value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  SkyBackgroundTransitPtr  create          (void);
    static  SkyBackground           *createEmpty     (void);

    static  SkyBackgroundTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  SkyBackground            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  SkyBackgroundTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    MFColor4f         _mfSkyColor;
    MFReal32          _mfSkyAngle;
    MFColor4f         _mfGroundColor;
    MFReal32          _mfGroundAngle;
    SFUInt32          _sfSphereRes;
    SFUnrecTextureBaseChunkPtr _sfBackTexture;
    SFUnrecTextureBaseChunkPtr _sfBottomTexture;
    SFUnrecTextureBaseChunkPtr _sfFrontTexture;
    SFUnrecTextureBaseChunkPtr _sfLeftTexture;
    SFUnrecTextureBaseChunkPtr _sfRightTexture;
    SFUnrecTextureBaseChunkPtr _sfTopTexture;
    SFBool            _sfBoxInside;
    MFVec3f           _mfTopTexCoord;
    MFVec3f           _mfBottomTexCoord;
    MFVec3f           _mfRightTexCoord;
    MFVec3f           _mfLeftTexCoord;
    MFVec3f           _mfFrontTexCoord;
    MFVec3f           _mfBackTexCoord;
    SFWeakNodePtr     _sfBeacon;
    SFBool            _sfUseVRMLCubeTextureSemantics;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    SkyBackgroundBase(void);
    SkyBackgroundBase(const SkyBackgroundBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~SkyBackgroundBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const SkyBackground *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleSkyColor        (void) const;
    EditFieldHandlePtr editHandleSkyColor       (void);
    GetFieldHandlePtr  getHandleSkyAngle        (void) const;
    EditFieldHandlePtr editHandleSkyAngle       (void);
    GetFieldHandlePtr  getHandleGroundColor     (void) const;
    EditFieldHandlePtr editHandleGroundColor    (void);
    GetFieldHandlePtr  getHandleGroundAngle     (void) const;
    EditFieldHandlePtr editHandleGroundAngle    (void);
    GetFieldHandlePtr  getHandleSphereRes       (void) const;
    EditFieldHandlePtr editHandleSphereRes      (void);
    GetFieldHandlePtr  getHandleBackTexture     (void) const;
    EditFieldHandlePtr editHandleBackTexture    (void);
    GetFieldHandlePtr  getHandleBottomTexture   (void) const;
    EditFieldHandlePtr editHandleBottomTexture  (void);
    GetFieldHandlePtr  getHandleFrontTexture    (void) const;
    EditFieldHandlePtr editHandleFrontTexture   (void);
    GetFieldHandlePtr  getHandleLeftTexture     (void) const;
    EditFieldHandlePtr editHandleLeftTexture    (void);
    GetFieldHandlePtr  getHandleRightTexture    (void) const;
    EditFieldHandlePtr editHandleRightTexture   (void);
    GetFieldHandlePtr  getHandleTopTexture      (void) const;
    EditFieldHandlePtr editHandleTopTexture     (void);
    GetFieldHandlePtr  getHandleBoxInside       (void) const;
    EditFieldHandlePtr editHandleBoxInside      (void);
    GetFieldHandlePtr  getHandleTopTexCoord     (void) const;
    EditFieldHandlePtr editHandleTopTexCoord    (void);
    GetFieldHandlePtr  getHandleBottomTexCoord  (void) const;
    EditFieldHandlePtr editHandleBottomTexCoord (void);
    GetFieldHandlePtr  getHandleRightTexCoord   (void) const;
    EditFieldHandlePtr editHandleRightTexCoord  (void);
    GetFieldHandlePtr  getHandleLeftTexCoord    (void) const;
    EditFieldHandlePtr editHandleLeftTexCoord   (void);
    GetFieldHandlePtr  getHandleFrontTexCoord   (void) const;
    EditFieldHandlePtr editHandleFrontTexCoord  (void);
    GetFieldHandlePtr  getHandleBackTexCoord    (void) const;
    EditFieldHandlePtr editHandleBackTexCoord   (void);
    GetFieldHandlePtr  getHandleBeacon          (void) const;
    EditFieldHandlePtr editHandleBeacon         (void);
    GetFieldHandlePtr  getHandleUseVRMLCubeTextureSemantics (void) const;
    EditFieldHandlePtr editHandleUseVRMLCubeTextureSemantics(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      SkyBackgroundBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const SkyBackgroundBase &source);
};

typedef SkyBackgroundBase *SkyBackgroundBaseP;

OSG_END_NAMESPACE

#endif /* _OSGSKYBACKGROUNDBASE_H_ */
