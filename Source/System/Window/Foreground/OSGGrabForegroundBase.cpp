/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class GrabForeground!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEGRABFOREGROUNDINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>



#include <OSGImage.h> // Image Class

#include "OSGGrabForegroundBase.h"
#include "OSGGrabForeground.h"

OSG_USING_NAMESPACE

// Field descriptions

/*! \var ImagePtr GrabForegroundBase::_sfImage
    	The image to write to.

*/
/*! \var bool GrabForegroundBase::_sfAutoResize
    	Automatically resize the image when the viewport size changes.

*/

void GrabForegroundBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL; 


    pDesc = new SFImagePtr::Description(
        SFImagePtr::getClassType(), 
        "image", 
        ImageFieldId, ImageFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&GrabForegroundBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&GrabForegroundBase::getSFImage));

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFBool *(GrabForegroundBase::*GetSFAutoResizeF)(void) const;

    GetSFAutoResizeF GetSFAutoResize = &GrabForegroundBase::getSFAutoResize;
#endif

    pDesc = new SFBool::Description(
        SFBool::getClassType(), 
        "autoResize", 
        AutoResizeFieldId, AutoResizeFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&GrabForegroundBase::editSFAutoResize),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFAutoResize));
#else
        reinterpret_cast<FieldGetMethodSig >(&GrabForegroundBase::getSFAutoResize));
#endif

    oType.addInitialDesc(pDesc);
}


GrabForegroundBase::TypeObject GrabForegroundBase::_type(true,
    GrabForegroundBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &GrabForegroundBase::createEmpty,
    GrabForeground::initMethod,
    (InitalInsertDescFunc) &GrabForegroundBase::classDescInserter,
    false);

/*------------------------------ get -----------------------------------*/

FieldContainerType &GrabForegroundBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &GrabForegroundBase::getType(void) const 
{
    return _type;
} 

UInt32 GrabForegroundBase::getContainerSize(void) const 
{ 
    return sizeof(GrabForeground); 
}

/*------------------------- decorator get ------------------------------*/


//! Get the GrabForeground::_sfImage field.
const SFImagePtr *GrabForegroundBase::getSFImage(void) const
{
    return &_sfImage;
}

SFBool *GrabForegroundBase::editSFAutoResize(void)
{
    editSField(AutoResizeFieldMask);

    return &_sfAutoResize;
}

const SFBool *GrabForegroundBase::getSFAutoResize(void) const
{
    return &_sfAutoResize;
}


void GrabForegroundBase::pushToField(      FieldContainerPtrConstArg pNewElement,
                                    const UInt32                    uiFieldId  )
{
    Inherited::pushToField(pNewElement, uiFieldId);

    if(uiFieldId == ImageFieldId)
    {
        static_cast<GrabForeground *>(this)->setImage(
            cast_dynamic<ImagePtr>(pNewElement));
    }
}

void GrabForegroundBase::insertIntoMField(const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::insertIntoMField(uiIndex, pNewElement, uiFieldId);

}

void GrabForegroundBase::replaceInMField (const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::replaceInMField(uiIndex, pNewElement, uiFieldId);

}

void GrabForegroundBase::replaceInMField (      FieldContainerPtrConstArg pOldElement,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::replaceInMField(pOldElement, pNewElement, uiFieldId);

}

void GrabForegroundBase::removeFromMField(const UInt32 uiIndex,
                                         const UInt32 uiFieldId)
{
    Inherited::removeFromMField(uiIndex, uiFieldId);

}

void GrabForegroundBase::removeFromMField(      FieldContainerPtrConstArg pElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::removeFromMField(pElement, uiFieldId);

}

void GrabForegroundBase::clearField(const UInt32 uiFieldId)
{
    Inherited::clearField(uiFieldId);

    if(uiFieldId == ImageFieldId)
    {
        static_cast<GrabForeground *>(this)->setImage(NullFC);
    }
}



/*------------------------------ access -----------------------------------*/

UInt32 GrabForegroundBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ImageFieldMask & whichField))
    {
        returnValue += _sfImage.getBinSize();
    }
    if(FieldBits::NoField != (AutoResizeFieldMask & whichField))
    {
        returnValue += _sfAutoResize.getBinSize();
    }

    return returnValue;
}

void GrabForegroundBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ImageFieldMask & whichField))
    {
        _sfImage.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AutoResizeFieldMask & whichField))
    {
        _sfAutoResize.copyToBin(pMem);
    }
}

void GrabForegroundBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ImageFieldMask & whichField))
    {
        _sfImage.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AutoResizeFieldMask & whichField))
    {
        _sfAutoResize.copyFromBin(pMem);
    }
}

//! create an empty new instance of the class, do not copy the prototype
GrabForegroundPtr GrabForegroundBase::createEmpty(void) 
{ 
    GrabForegroundPtr returnValue; 
    
    newPtr<GrabForeground>(returnValue); 

    return returnValue; 
}

FieldContainerPtr GrabForegroundBase::shallowCopy(void) const 
{ 
    GrabForegroundPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const GrabForeground *>(this)); 

    return returnValue; 
}



/*------------------------- constructors ----------------------------------*/

GrabForegroundBase::GrabForegroundBase(void) :
    Inherited(),
    _sfImage(),
    _sfAutoResize(bool(false))
{
}

GrabForegroundBase::GrabForegroundBase(const GrabForegroundBase &source) :
    Inherited(source),
    _sfImage(),
    _sfAutoResize(source._sfAutoResize)
{
}

/*-------------------------- destructors ----------------------------------*/

GrabForegroundBase::~GrabForegroundBase(void)
{
}

void GrabForegroundBase::onCreate(const GrabForeground *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {

        this->setImage(source->getImage());
    }
}

#ifdef OSG_MT_FIELDCONTAINERPTR
void GrabForegroundBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo,
                                        UInt32             uiCopyOffset)
{
    this->execSync(static_cast<GrabForegroundBase *>(&oFrom),
                   whichField, 
                   syncMode, 
                   uiSyncInfo,
                   uiCopyOffset);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
void GrabForegroundBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<GrabForegroundBase *>(&oFrom), 
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif

#if 0
void GrabForegroundBase::execBeginEditV(ConstFieldMaskArg whichField,
                                       UInt32            uiAspect,
                                       UInt32            uiContainerSize)
{
    this->execBeginEdit(whichField, uiAspect, uiContainerSize);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr GrabForegroundBase::createAspectCopy(void) const
{
    GrabForegroundPtr returnValue; 

    newAspectCopy(returnValue, 
                  dynamic_cast<const GrabForeground *>(this)); 

    return returnValue; 
}
#endif

void GrabForegroundBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<GrabForeground *>(this)->setImage(NullFC);
}


#include "OSGSField.ins"
#include "OSGMField.ins"

#if defined(OSG_TMPL_STATIC_MEMBER_NEEDS_FUNCTION_INSTANTIATION) || \
    defined(OSG_TMPL_STATIC_MEMBER_NEEDS_CLASS_INSTANTIATION   )

#include "OSGSFieldFuncs.ins"
#include "OSGMFieldFuncs.ins"
#endif

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<GrabForegroundPtr>::_type("GrabForegroundPtr", "ForegroundPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(GrabForegroundPtr)

OSG_FIELD_DLLEXPORT_DEF1(SField, GrabForegroundPtr);
OSG_FIELD_DLLEXPORT_DEF1(MField, GrabForegroundPtr);

OSG_END_NAMESPACE


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: $";
    static Char8 cvsid_hpp       [] = OSGGRABFOREGROUNDBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGGRABFOREGROUNDBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGGRABFOREGROUNDFIELDS_HEADER_CVSID;
}
