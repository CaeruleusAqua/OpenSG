/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PolygonForeground!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEPOLYGONFOREGROUNDINST

#include <stdlib.h>
#include <stdio.h>

#include <OSGConfig.h>



#include <OSGMaterial.h> // Material Class

#include "OSGPolygonForegroundBase.h"
#include "OSGPolygonForeground.h"

OSG_USING_NAMESPACE

// Field descriptions

/*! \var MaterialPtr PolygonForegroundBase::_sfMaterial
    	The material used to display.

*/
/*! \var Pnt2f PolygonForegroundBase::_mfPositions
    	The vertices of the geometry to display.

*/
/*! \var Vec3f PolygonForegroundBase::_mfTexCoords
    	The texture coordinates of the geometry to display.

*/
/*! \var bool PolygonForegroundBase::_sfNormalizedX
    	Define whether the x coordinates are normalized (0-1) or pixel-based .

*/
/*! \var bool PolygonForegroundBase::_sfNormalizedY
    	Define whether the y coordinates are normalized (0-1) or pixel-based .

*/

void PolygonForegroundBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL; 


    pDesc = new SFMaterialPtr::Description(
        SFMaterialPtr::getClassType(), 
        "material", 
        MaterialFieldId, MaterialFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&PolygonForegroundBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&PolygonForegroundBase::getSFMaterial));

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFPnt2f *(PolygonForegroundBase::*GetMFPositionsF)(void) const;

    GetMFPositionsF GetMFPositions = &PolygonForegroundBase::getMFPositions;
#endif

    pDesc = new MFPnt2f::Description(
        MFPnt2f::getClassType(), 
        "positions", 
        PositionsFieldId, PositionsFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&PolygonForegroundBase::editMFPositions),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFPositions));
#else
        reinterpret_cast<FieldGetMethodSig >(&PolygonForegroundBase::getMFPositions));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const MFVec3f *(PolygonForegroundBase::*GetMFTexCoordsF)(void) const;

    GetMFTexCoordsF GetMFTexCoords = &PolygonForegroundBase::getMFTexCoords;
#endif

    pDesc = new MFVec3f::Description(
        MFVec3f::getClassType(), 
        "texCoords", 
        TexCoordsFieldId, TexCoordsFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&PolygonForegroundBase::editMFTexCoords),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFTexCoords));
#else
        reinterpret_cast<FieldGetMethodSig >(&PolygonForegroundBase::getMFTexCoords));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFBool *(PolygonForegroundBase::*GetSFNormalizedXF)(void) const;

    GetSFNormalizedXF GetSFNormalizedX = &PolygonForegroundBase::getSFNormalizedX;
#endif

    pDesc = new SFBool::Description(
        SFBool::getClassType(), 
        "normalizedX", 
        NormalizedXFieldId, NormalizedXFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&PolygonForegroundBase::editSFNormalizedX),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFNormalizedX));
#else
        reinterpret_cast<FieldGetMethodSig >(&PolygonForegroundBase::getSFNormalizedX));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_COMPAT
    typedef const SFBool *(PolygonForegroundBase::*GetSFNormalizedYF)(void) const;

    GetSFNormalizedYF GetSFNormalizedY = &PolygonForegroundBase::getSFNormalizedY;
#endif

    pDesc = new SFBool::Description(
        SFBool::getClassType(), 
        "normalizedY", 
        NormalizedYFieldId, NormalizedYFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&PolygonForegroundBase::editSFNormalizedY),
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFNormalizedY));
#else
        reinterpret_cast<FieldGetMethodSig >(&PolygonForegroundBase::getSFNormalizedY));
#endif

    oType.addInitialDesc(pDesc);
}


PolygonForegroundBase::TypeObject PolygonForegroundBase::_type(true,
    PolygonForegroundBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &PolygonForegroundBase::createEmpty,
    PolygonForeground::initMethod,
    (InitalInsertDescFunc) &PolygonForegroundBase::classDescInserter,
    false);

/*------------------------------ get -----------------------------------*/

FieldContainerType &PolygonForegroundBase::getType(void) 
{
    return _type; 
} 

const FieldContainerType &PolygonForegroundBase::getType(void) const 
{
    return _type;
} 

UInt32 PolygonForegroundBase::getContainerSize(void) const 
{ 
    return sizeof(PolygonForeground); 
}

/*------------------------- decorator get ------------------------------*/


//! Get the PolygonForeground::_sfMaterial field.
const SFMaterialPtr *PolygonForegroundBase::getSFMaterial(void) const
{
    return &_sfMaterial;
}

MFPnt2f *PolygonForegroundBase::editMFPositions(void)
{
    editMField(PositionsFieldMask, _mfPositions);

    return &_mfPositions;
}

const MFPnt2f *PolygonForegroundBase::getMFPositions(void) const
{
    return &_mfPositions;
}

#ifdef OSG_1_COMPAT
MFPnt2f *PolygonForegroundBase::getMFPositions(void)
{
    return this->editMFPositions();
}
#endif

MFVec3f *PolygonForegroundBase::editMFTexCoords(void)
{
    editMField(TexCoordsFieldMask, _mfTexCoords);

    return &_mfTexCoords;
}

const MFVec3f *PolygonForegroundBase::getMFTexCoords(void) const
{
    return &_mfTexCoords;
}

#ifdef OSG_1_COMPAT
MFVec3f *PolygonForegroundBase::getMFTexCoords(void)
{
    return this->editMFTexCoords();
}
#endif

SFBool *PolygonForegroundBase::editSFNormalizedX(void)
{
    editSField(NormalizedXFieldMask);

    return &_sfNormalizedX;
}

const SFBool *PolygonForegroundBase::getSFNormalizedX(void) const
{
    return &_sfNormalizedX;
}

#ifdef OSG_1_COMPAT
SFBool *PolygonForegroundBase::getSFNormalizedX(void)
{
    return this->editSFNormalizedX();
}
#endif

SFBool *PolygonForegroundBase::editSFNormalizedY(void)
{
    editSField(NormalizedYFieldMask);

    return &_sfNormalizedY;
}

const SFBool *PolygonForegroundBase::getSFNormalizedY(void) const
{
    return &_sfNormalizedY;
}

#ifdef OSG_1_COMPAT
SFBool *PolygonForegroundBase::getSFNormalizedY(void)
{
    return this->editSFNormalizedY();
}
#endif


void PolygonForegroundBase::pushToField(      FieldContainerPtrConstArg pNewElement,
                                    const UInt32                    uiFieldId  )
{
    Inherited::pushToField(pNewElement, uiFieldId);

    if(uiFieldId == MaterialFieldId)
    {
        static_cast<PolygonForeground *>(this)->setMaterial(
            cast_dynamic<MaterialPtr>(pNewElement));
    }
}

void PolygonForegroundBase::insertIntoMField(const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::insertIntoMField(uiIndex, pNewElement, uiFieldId);

}

void PolygonForegroundBase::replaceInMField (const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::replaceInMField(uiIndex, pNewElement, uiFieldId);

}

void PolygonForegroundBase::replaceInMField (      FieldContainerPtrConstArg pOldElement,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::replaceInMField(pOldElement, pNewElement, uiFieldId);

}

void PolygonForegroundBase::removeFromMField(const UInt32 uiIndex,
                                         const UInt32 uiFieldId)
{
    Inherited::removeFromMField(uiIndex, uiFieldId);

}

void PolygonForegroundBase::removeFromMField(      FieldContainerPtrConstArg pElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::removeFromMField(pElement, uiFieldId);

}

void PolygonForegroundBase::clearField(const UInt32 uiFieldId)
{
    Inherited::clearField(uiFieldId);

    if(uiFieldId == MaterialFieldId)
    {
        static_cast<PolygonForeground *>(this)->setMaterial(NullFC);
    }
}





/*------------------------------ access -----------------------------------*/

UInt32 PolygonForegroundBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
    {
        returnValue += _sfMaterial.getBinSize();
    }
    if(FieldBits::NoField != (PositionsFieldMask & whichField))
    {
        returnValue += _mfPositions.getBinSize();
    }
    if(FieldBits::NoField != (TexCoordsFieldMask & whichField))
    {
        returnValue += _mfTexCoords.getBinSize();
    }
    if(FieldBits::NoField != (NormalizedXFieldMask & whichField))
    {
        returnValue += _sfNormalizedX.getBinSize();
    }
    if(FieldBits::NoField != (NormalizedYFieldMask & whichField))
    {
        returnValue += _sfNormalizedY.getBinSize();
    }

    return returnValue;
}

void PolygonForegroundBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
    {
        _sfMaterial.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PositionsFieldMask & whichField))
    {
        _mfPositions.copyToBin(pMem);
    }
    if(FieldBits::NoField != (TexCoordsFieldMask & whichField))
    {
        _mfTexCoords.copyToBin(pMem);
    }
    if(FieldBits::NoField != (NormalizedXFieldMask & whichField))
    {
        _sfNormalizedX.copyToBin(pMem);
    }
    if(FieldBits::NoField != (NormalizedYFieldMask & whichField))
    {
        _sfNormalizedY.copyToBin(pMem);
    }
}

void PolygonForegroundBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (MaterialFieldMask & whichField))
    {
        _sfMaterial.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PositionsFieldMask & whichField))
    {
        _mfPositions.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (TexCoordsFieldMask & whichField))
    {
        _mfTexCoords.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (NormalizedXFieldMask & whichField))
    {
        _sfNormalizedX.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (NormalizedYFieldMask & whichField))
    {
        _sfNormalizedY.copyFromBin(pMem);
    }
}

//! create an empty new instance of the class, do not copy the prototype
PolygonForegroundPtr PolygonForegroundBase::createEmpty(void) 
{ 
    PolygonForegroundPtr returnValue; 
    
    newPtr<PolygonForeground>(returnValue); 

    return returnValue; 
}

FieldContainerPtr PolygonForegroundBase::shallowCopy(void) const 
{ 
    PolygonForegroundPtr returnValue; 

    newPtr(returnValue, dynamic_cast<const PolygonForeground *>(this)); 

    return returnValue; 
}



/*------------------------- constructors ----------------------------------*/

PolygonForegroundBase::PolygonForegroundBase(void) :
    Inherited(),
    _sfMaterial(),
    _mfPositions(),
    _mfTexCoords(),
    _sfNormalizedX(bool(true)),
    _sfNormalizedY(bool(true))
{
}

PolygonForegroundBase::PolygonForegroundBase(const PolygonForegroundBase &source) :
    Inherited(source),
    _sfMaterial(),
    _mfPositions(source._mfPositions),
    _mfTexCoords(source._mfTexCoords),
    _sfNormalizedX(source._sfNormalizedX),
    _sfNormalizedY(source._sfNormalizedY)
{
}

/*-------------------------- destructors ----------------------------------*/

PolygonForegroundBase::~PolygonForegroundBase(void)
{
}

void PolygonForegroundBase::onCreate(const PolygonForeground *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {

        this->setMaterial(source->getMaterial());
    }
}

#ifdef OSG_MT_FIELDCONTAINERPTR
void PolygonForegroundBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo,
                                        UInt32             uiCopyOffset)
{
    this->execSync(static_cast<PolygonForegroundBase *>(&oFrom),
                   whichField, 
                   syncMode, 
                   uiSyncInfo,
                   uiCopyOffset);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
void PolygonForegroundBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode  ,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<PolygonForegroundBase *>(&oFrom), 
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif

#if 0
void PolygonForegroundBase::execBeginEditV(ConstFieldMaskArg whichField,
                                       UInt32            uiAspect,
                                       UInt32            uiContainerSize)
{
    this->execBeginEdit(whichField, uiAspect, uiContainerSize);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr PolygonForegroundBase::createAspectCopy(void) const
{
    PolygonForegroundPtr returnValue; 

    newAspectCopy(returnValue, 
                  dynamic_cast<const PolygonForeground *>(this)); 

    return returnValue; 
}
#endif

void PolygonForegroundBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<PolygonForeground *>(this)->setMaterial(NullFC);
}


#include "OSGSField.ins"
#include "OSGMField.ins"

#if defined(OSG_TMPL_STATIC_MEMBER_NEEDS_FUNCTION_INSTANTIATION) || \
    defined(OSG_TMPL_STATIC_MEMBER_NEEDS_CLASS_INSTANTIATION   )

#include "OSGSFieldFuncs.ins"
#include "OSGMFieldFuncs.ins"
#endif

OSG_BEGIN_NAMESPACE

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<PolygonForegroundPtr>::_type("PolygonForegroundPtr", "ForegroundPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(PolygonForegroundPtr)

OSG_FIELD_DLLEXPORT_DEF1(SField, PolygonForegroundPtr);
OSG_FIELD_DLLEXPORT_DEF1(MField, PolygonForegroundPtr);

OSG_END_NAMESPACE


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: $";
    static Char8 cvsid_hpp       [] = OSGPOLYGONFOREGROUNDBASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSGPOLYGONFOREGROUNDBASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSGPOLYGONFOREGROUNDFIELDS_HEADER_CVSID;
}
