/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextureChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &TextureChunkBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 TextureChunkBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 TextureChunkBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the TextureChunk::_sfImage field.
inline
Image * TextureChunkBase::getImage(void) const
{
    return _sfImage.getValue();
}

//! Set the value of the TextureChunk::_sfImage field.
inline
void TextureChunkBase::setImage(Image * const value)
{
    editSField(ImageFieldMask);

    _sfImage.setValue(value);
}
//! Get the value of the TextureChunk::_sfInternalFormat field.

inline
GLenum &TextureChunkBase::editInternalFormat(void)
{
    editSField(InternalFormatFieldMask);

    return _sfInternalFormat.getValue();
}

//! Get the value of the TextureChunk::_sfInternalFormat field.
inline
const GLenum &TextureChunkBase::getInternalFormat(void) const
{
    return _sfInternalFormat.getValue();
}

//! Set the value of the TextureChunk::_sfInternalFormat field.
inline
void TextureChunkBase::setInternalFormat(const GLenum &value)
{
    editSField(InternalFormatFieldMask);

    _sfInternalFormat.setValue(value);
}
//! Get the value of the TextureChunk::_sfExternalFormat field.

inline
GLenum &TextureChunkBase::editExternalFormat(void)
{
    editSField(ExternalFormatFieldMask);

    return _sfExternalFormat.getValue();
}

//! Get the value of the TextureChunk::_sfExternalFormat field.
inline
const GLenum &TextureChunkBase::getExternalFormat(void) const
{
    return _sfExternalFormat.getValue();
}

//! Set the value of the TextureChunk::_sfExternalFormat field.
inline
void TextureChunkBase::setExternalFormat(const GLenum &value)
{
    editSField(ExternalFormatFieldMask);

    _sfExternalFormat.setValue(value);
}
//! Get the value of the TextureChunk::_sfScale field.

inline
bool &TextureChunkBase::editScale(void)
{
    editSField(ScaleFieldMask);

    return _sfScale.getValue();
}

//! Get the value of the TextureChunk::_sfScale field.
inline
      bool  TextureChunkBase::getScale(void) const
{
    return _sfScale.getValue();
}

//! Set the value of the TextureChunk::_sfScale field.
inline
void TextureChunkBase::setScale(const bool value)
{
    editSField(ScaleFieldMask);

    _sfScale.setValue(value);
}
//! Get the value of the TextureChunk::_sfFrame field.

inline
UInt32 &TextureChunkBase::editFrame(void)
{
    editSField(FrameFieldMask);

    return _sfFrame.getValue();
}

//! Get the value of the TextureChunk::_sfFrame field.
inline
      UInt32  TextureChunkBase::getFrame(void) const
{
    return _sfFrame.getValue();
}

//! Set the value of the TextureChunk::_sfFrame field.
inline
void TextureChunkBase::setFrame(const UInt32 value)
{
    editSField(FrameFieldMask);

    _sfFrame.setValue(value);
}
//! Get the value of the TextureChunk::_sfMinFilter field.

inline
GLenum &TextureChunkBase::editMinFilter(void)
{
    editSField(MinFilterFieldMask);

    return _sfMinFilter.getValue();
}

//! Get the value of the TextureChunk::_sfMinFilter field.
inline
const GLenum &TextureChunkBase::getMinFilter(void) const
{
    return _sfMinFilter.getValue();
}

//! Set the value of the TextureChunk::_sfMinFilter field.
inline
void TextureChunkBase::setMinFilter(const GLenum &value)
{
    editSField(MinFilterFieldMask);

    _sfMinFilter.setValue(value);
}
//! Get the value of the TextureChunk::_sfMagFilter field.

inline
GLenum &TextureChunkBase::editMagFilter(void)
{
    editSField(MagFilterFieldMask);

    return _sfMagFilter.getValue();
}

//! Get the value of the TextureChunk::_sfMagFilter field.
inline
const GLenum &TextureChunkBase::getMagFilter(void) const
{
    return _sfMagFilter.getValue();
}

//! Set the value of the TextureChunk::_sfMagFilter field.
inline
void TextureChunkBase::setMagFilter(const GLenum &value)
{
    editSField(MagFilterFieldMask);

    _sfMagFilter.setValue(value);
}
//! Get the value of the TextureChunk::_sfWrapS field.

inline
GLenum &TextureChunkBase::editWrapS(void)
{
    editSField(WrapSFieldMask);

    return _sfWrapS.getValue();
}

//! Get the value of the TextureChunk::_sfWrapS field.
inline
const GLenum &TextureChunkBase::getWrapS(void) const
{
    return _sfWrapS.getValue();
}

//! Set the value of the TextureChunk::_sfWrapS field.
inline
void TextureChunkBase::setWrapS(const GLenum &value)
{
    editSField(WrapSFieldMask);

    _sfWrapS.setValue(value);
}
//! Get the value of the TextureChunk::_sfWrapT field.

inline
GLenum &TextureChunkBase::editWrapT(void)
{
    editSField(WrapTFieldMask);

    return _sfWrapT.getValue();
}

//! Get the value of the TextureChunk::_sfWrapT field.
inline
const GLenum &TextureChunkBase::getWrapT(void) const
{
    return _sfWrapT.getValue();
}

//! Set the value of the TextureChunk::_sfWrapT field.
inline
void TextureChunkBase::setWrapT(const GLenum &value)
{
    editSField(WrapTFieldMask);

    _sfWrapT.setValue(value);
}
//! Get the value of the TextureChunk::_sfWrapR field.

inline
GLenum &TextureChunkBase::editWrapR(void)
{
    editSField(WrapRFieldMask);

    return _sfWrapR.getValue();
}

//! Get the value of the TextureChunk::_sfWrapR field.
inline
const GLenum &TextureChunkBase::getWrapR(void) const
{
    return _sfWrapR.getValue();
}

//! Set the value of the TextureChunk::_sfWrapR field.
inline
void TextureChunkBase::setWrapR(const GLenum &value)
{
    editSField(WrapRFieldMask);

    _sfWrapR.setValue(value);
}
//! Get the value of the TextureChunk::_sfEnvMode field.

inline
GLenum &TextureChunkBase::editEnvMode(void)
{
    editSField(EnvModeFieldMask);

    return _sfEnvMode.getValue();
}

//! Get the value of the TextureChunk::_sfEnvMode field.
inline
const GLenum &TextureChunkBase::getEnvMode(void) const
{
    return _sfEnvMode.getValue();
}

//! Set the value of the TextureChunk::_sfEnvMode field.
inline
void TextureChunkBase::setEnvMode(const GLenum &value)
{
    editSField(EnvModeFieldMask);

    _sfEnvMode.setValue(value);
}
//! Get the value of the TextureChunk::_sfEnvColor field.

inline
Color4f &TextureChunkBase::editEnvColor(void)
{
    editSField(EnvColorFieldMask);

    return _sfEnvColor.getValue();
}

//! Get the value of the TextureChunk::_sfEnvColor field.
inline
const Color4f &TextureChunkBase::getEnvColor(void) const
{
    return _sfEnvColor.getValue();
}

//! Set the value of the TextureChunk::_sfEnvColor field.
inline
void TextureChunkBase::setEnvColor(const Color4f &value)
{
    editSField(EnvColorFieldMask);

    _sfEnvColor.setValue(value);
}
//! Get the value of the TextureChunk::_sfEnvCombineRGB field.

inline
GLenum &TextureChunkBase::editEnvCombineRGB(void)
{
    editSField(EnvCombineRGBFieldMask);

    return _sfEnvCombineRGB.getValue();
}

//! Get the value of the TextureChunk::_sfEnvCombineRGB field.
inline
const GLenum &TextureChunkBase::getEnvCombineRGB(void) const
{
    return _sfEnvCombineRGB.getValue();
}

//! Set the value of the TextureChunk::_sfEnvCombineRGB field.
inline
void TextureChunkBase::setEnvCombineRGB(const GLenum &value)
{
    editSField(EnvCombineRGBFieldMask);

    _sfEnvCombineRGB.setValue(value);
}
//! Get the value of the TextureChunk::_sfEnvCombineAlpha field.

inline
GLenum &TextureChunkBase::editEnvCombineAlpha(void)
{
    editSField(EnvCombineAlphaFieldMask);

    return _sfEnvCombineAlpha.getValue();
}

//! Get the value of the TextureChunk::_sfEnvCombineAlpha field.
inline
const GLenum &TextureChunkBase::getEnvCombineAlpha(void) const
{
    return _sfEnvCombineAlpha.getValue();
}

//! Set the value of the TextureChunk::_sfEnvCombineAlpha field.
inline
void TextureChunkBase::setEnvCombineAlpha(const GLenum &value)
{
    editSField(EnvCombineAlphaFieldMask);

    _sfEnvCombineAlpha.setValue(value);
}
//! Get the value of the TextureChunk::_sfEnvScaleRGB field.

inline
Real32 &TextureChunkBase::editEnvScaleRGB(void)
{
    editSField(EnvScaleRGBFieldMask);

    return _sfEnvScaleRGB.getValue();
}

//! Get the value of the TextureChunk::_sfEnvScaleRGB field.
inline
      Real32  TextureChunkBase::getEnvScaleRGB(void) const
{
    return _sfEnvScaleRGB.getValue();
}

//! Set the value of the TextureChunk::_sfEnvScaleRGB field.
inline
void TextureChunkBase::setEnvScaleRGB(const Real32 value)
{
    editSField(EnvScaleRGBFieldMask);

    _sfEnvScaleRGB.setValue(value);
}
//! Get the value of the TextureChunk::_sfEnvScaleAlpha field.

inline
Real32 &TextureChunkBase::editEnvScaleAlpha(void)
{
    editSField(EnvScaleAlphaFieldMask);

    return _sfEnvScaleAlpha.getValue();
}

//! Get the value of the TextureChunk::_sfEnvScaleAlpha field.
inline
      Real32  TextureChunkBase::getEnvScaleAlpha(void) const
{
    return _sfEnvScaleAlpha.getValue();
}

//! Set the value of the TextureChunk::_sfEnvScaleAlpha field.
inline
void TextureChunkBase::setEnvScaleAlpha(const Real32 value)
{
    editSField(EnvScaleAlphaFieldMask);

    _sfEnvScaleAlpha.setValue(value);
}
//! Get the value of the TextureChunk::_sfEnvSource0RGB field.

inline
GLenum &TextureChunkBase::editEnvSource0RGB(void)
{
    editSField(EnvSource0RGBFieldMask);

    return _sfEnvSource0RGB.getValue();
}

//! Get the value of the TextureChunk::_sfEnvSource0RGB field.
inline
const GLenum &TextureChunkBase::getEnvSource0RGB(void) const
{
    return _sfEnvSource0RGB.getValue();
}

//! Set the value of the TextureChunk::_sfEnvSource0RGB field.
inline
void TextureChunkBase::setEnvSource0RGB(const GLenum &value)
{
    editSField(EnvSource0RGBFieldMask);

    _sfEnvSource0RGB.setValue(value);
}
//! Get the value of the TextureChunk::_sfEnvSource1RGB field.

inline
GLenum &TextureChunkBase::editEnvSource1RGB(void)
{
    editSField(EnvSource1RGBFieldMask);

    return _sfEnvSource1RGB.getValue();
}

//! Get the value of the TextureChunk::_sfEnvSource1RGB field.
inline
const GLenum &TextureChunkBase::getEnvSource1RGB(void) const
{
    return _sfEnvSource1RGB.getValue();
}

//! Set the value of the TextureChunk::_sfEnvSource1RGB field.
inline
void TextureChunkBase::setEnvSource1RGB(const GLenum &value)
{
    editSField(EnvSource1RGBFieldMask);

    _sfEnvSource1RGB.setValue(value);
}
//! Get the value of the TextureChunk::_sfEnvSource2RGB field.

inline
GLenum &TextureChunkBase::editEnvSource2RGB(void)
{
    editSField(EnvSource2RGBFieldMask);

    return _sfEnvSource2RGB.getValue();
}

//! Get the value of the TextureChunk::_sfEnvSource2RGB field.
inline
const GLenum &TextureChunkBase::getEnvSource2RGB(void) const
{
    return _sfEnvSource2RGB.getValue();
}

//! Set the value of the TextureChunk::_sfEnvSource2RGB field.
inline
void TextureChunkBase::setEnvSource2RGB(const GLenum &value)
{
    editSField(EnvSource2RGBFieldMask);

    _sfEnvSource2RGB.setValue(value);
}
//! Get the value of the TextureChunk::_sfEnvSource0Alpha field.

inline
GLenum &TextureChunkBase::editEnvSource0Alpha(void)
{
    editSField(EnvSource0AlphaFieldMask);

    return _sfEnvSource0Alpha.getValue();
}

//! Get the value of the TextureChunk::_sfEnvSource0Alpha field.
inline
const GLenum &TextureChunkBase::getEnvSource0Alpha(void) const
{
    return _sfEnvSource0Alpha.getValue();
}

//! Set the value of the TextureChunk::_sfEnvSource0Alpha field.
inline
void TextureChunkBase::setEnvSource0Alpha(const GLenum &value)
{
    editSField(EnvSource0AlphaFieldMask);

    _sfEnvSource0Alpha.setValue(value);
}
//! Get the value of the TextureChunk::_sfEnvSource1Alpha field.

inline
GLenum &TextureChunkBase::editEnvSource1Alpha(void)
{
    editSField(EnvSource1AlphaFieldMask);

    return _sfEnvSource1Alpha.getValue();
}

//! Get the value of the TextureChunk::_sfEnvSource1Alpha field.
inline
const GLenum &TextureChunkBase::getEnvSource1Alpha(void) const
{
    return _sfEnvSource1Alpha.getValue();
}

//! Set the value of the TextureChunk::_sfEnvSource1Alpha field.
inline
void TextureChunkBase::setEnvSource1Alpha(const GLenum &value)
{
    editSField(EnvSource1AlphaFieldMask);

    _sfEnvSource1Alpha.setValue(value);
}
//! Get the value of the TextureChunk::_sfEnvSource2Alpha field.

inline
GLenum &TextureChunkBase::editEnvSource2Alpha(void)
{
    editSField(EnvSource2AlphaFieldMask);

    return _sfEnvSource2Alpha.getValue();
}

//! Get the value of the TextureChunk::_sfEnvSource2Alpha field.
inline
const GLenum &TextureChunkBase::getEnvSource2Alpha(void) const
{
    return _sfEnvSource2Alpha.getValue();
}

//! Set the value of the TextureChunk::_sfEnvSource2Alpha field.
inline
void TextureChunkBase::setEnvSource2Alpha(const GLenum &value)
{
    editSField(EnvSource2AlphaFieldMask);

    _sfEnvSource2Alpha.setValue(value);
}
//! Get the value of the TextureChunk::_sfEnvOperand0RGB field.

inline
GLenum &TextureChunkBase::editEnvOperand0RGB(void)
{
    editSField(EnvOperand0RGBFieldMask);

    return _sfEnvOperand0RGB.getValue();
}

//! Get the value of the TextureChunk::_sfEnvOperand0RGB field.
inline
const GLenum &TextureChunkBase::getEnvOperand0RGB(void) const
{
    return _sfEnvOperand0RGB.getValue();
}

//! Set the value of the TextureChunk::_sfEnvOperand0RGB field.
inline
void TextureChunkBase::setEnvOperand0RGB(const GLenum &value)
{
    editSField(EnvOperand0RGBFieldMask);

    _sfEnvOperand0RGB.setValue(value);
}
//! Get the value of the TextureChunk::_sfEnvOperand1RGB field.

inline
GLenum &TextureChunkBase::editEnvOperand1RGB(void)
{
    editSField(EnvOperand1RGBFieldMask);

    return _sfEnvOperand1RGB.getValue();
}

//! Get the value of the TextureChunk::_sfEnvOperand1RGB field.
inline
const GLenum &TextureChunkBase::getEnvOperand1RGB(void) const
{
    return _sfEnvOperand1RGB.getValue();
}

//! Set the value of the TextureChunk::_sfEnvOperand1RGB field.
inline
void TextureChunkBase::setEnvOperand1RGB(const GLenum &value)
{
    editSField(EnvOperand1RGBFieldMask);

    _sfEnvOperand1RGB.setValue(value);
}
//! Get the value of the TextureChunk::_sfEnvOperand2RGB field.

inline
GLenum &TextureChunkBase::editEnvOperand2RGB(void)
{
    editSField(EnvOperand2RGBFieldMask);

    return _sfEnvOperand2RGB.getValue();
}

//! Get the value of the TextureChunk::_sfEnvOperand2RGB field.
inline
const GLenum &TextureChunkBase::getEnvOperand2RGB(void) const
{
    return _sfEnvOperand2RGB.getValue();
}

//! Set the value of the TextureChunk::_sfEnvOperand2RGB field.
inline
void TextureChunkBase::setEnvOperand2RGB(const GLenum &value)
{
    editSField(EnvOperand2RGBFieldMask);

    _sfEnvOperand2RGB.setValue(value);
}
//! Get the value of the TextureChunk::_sfEnvOperand0Alpha field.

inline
GLenum &TextureChunkBase::editEnvOperand0Alpha(void)
{
    editSField(EnvOperand0AlphaFieldMask);

    return _sfEnvOperand0Alpha.getValue();
}

//! Get the value of the TextureChunk::_sfEnvOperand0Alpha field.
inline
const GLenum &TextureChunkBase::getEnvOperand0Alpha(void) const
{
    return _sfEnvOperand0Alpha.getValue();
}

//! Set the value of the TextureChunk::_sfEnvOperand0Alpha field.
inline
void TextureChunkBase::setEnvOperand0Alpha(const GLenum &value)
{
    editSField(EnvOperand0AlphaFieldMask);

    _sfEnvOperand0Alpha.setValue(value);
}
//! Get the value of the TextureChunk::_sfEnvOperand1Alpha field.

inline
GLenum &TextureChunkBase::editEnvOperand1Alpha(void)
{
    editSField(EnvOperand1AlphaFieldMask);

    return _sfEnvOperand1Alpha.getValue();
}

//! Get the value of the TextureChunk::_sfEnvOperand1Alpha field.
inline
const GLenum &TextureChunkBase::getEnvOperand1Alpha(void) const
{
    return _sfEnvOperand1Alpha.getValue();
}

//! Set the value of the TextureChunk::_sfEnvOperand1Alpha field.
inline
void TextureChunkBase::setEnvOperand1Alpha(const GLenum &value)
{
    editSField(EnvOperand1AlphaFieldMask);

    _sfEnvOperand1Alpha.setValue(value);
}
//! Get the value of the TextureChunk::_sfEnvOperand2Alpha field.

inline
GLenum &TextureChunkBase::editEnvOperand2Alpha(void)
{
    editSField(EnvOperand2AlphaFieldMask);

    return _sfEnvOperand2Alpha.getValue();
}

//! Get the value of the TextureChunk::_sfEnvOperand2Alpha field.
inline
const GLenum &TextureChunkBase::getEnvOperand2Alpha(void) const
{
    return _sfEnvOperand2Alpha.getValue();
}

//! Set the value of the TextureChunk::_sfEnvOperand2Alpha field.
inline
void TextureChunkBase::setEnvOperand2Alpha(const GLenum &value)
{
    editSField(EnvOperand2AlphaFieldMask);

    _sfEnvOperand2Alpha.setValue(value);
}
//! Get the value of the TextureChunk::_sfGLId field.

inline
GLenum &TextureChunkBase::editGLId(void)
{
    editSField(GLIdFieldMask);

    return _sfGLId.getValue();
}

//! Get the value of the TextureChunk::_sfGLId field.
inline
const GLenum &TextureChunkBase::getGLId(void) const
{
    return _sfGLId.getValue();
}

//! Set the value of the TextureChunk::_sfGLId field.
inline
void TextureChunkBase::setGLId(const GLenum &value)
{
    editSField(GLIdFieldMask);

    _sfGLId.setValue(value);
}
//! Get the value of the TextureChunk::_sfIgnoreGLForAspect field.

inline
Int32 &TextureChunkBase::editIgnoreGLForAspect(void)
{
    editSField(IgnoreGLForAspectFieldMask);

    return _sfIgnoreGLForAspect.getValue();
}

//! Get the value of the TextureChunk::_sfIgnoreGLForAspect field.
inline
      Int32  TextureChunkBase::getIgnoreGLForAspect(void) const
{
    return _sfIgnoreGLForAspect.getValue();
}

//! Set the value of the TextureChunk::_sfIgnoreGLForAspect field.
inline
void TextureChunkBase::setIgnoreGLForAspect(const Int32 value)
{
    editSField(IgnoreGLForAspectFieldMask);

    _sfIgnoreGLForAspect.setValue(value);
}
//! Get the value of the TextureChunk::_sfPointSprite field.

inline
bool &TextureChunkBase::editPointSprite(void)
{
    editSField(PointSpriteFieldMask);

    return _sfPointSprite.getValue();
}

//! Get the value of the TextureChunk::_sfPointSprite field.
inline
      bool  TextureChunkBase::getPointSprite(void) const
{
    return _sfPointSprite.getValue();
}

//! Set the value of the TextureChunk::_sfPointSprite field.
inline
void TextureChunkBase::setPointSprite(const bool value)
{
    editSField(PointSpriteFieldMask);

    _sfPointSprite.setValue(value);
}
//! Get the value of the TextureChunk::_sfPriority field.

inline
Real32 &TextureChunkBase::editPriority(void)
{
    editSField(PriorityFieldMask);

    return _sfPriority.getValue();
}

//! Get the value of the TextureChunk::_sfPriority field.
inline
      Real32  TextureChunkBase::getPriority(void) const
{
    return _sfPriority.getValue();
}

//! Set the value of the TextureChunk::_sfPriority field.
inline
void TextureChunkBase::setPriority(const Real32 value)
{
    editSField(PriorityFieldMask);

    _sfPriority.setValue(value);
}
//! Get the value of the TextureChunk::_sfShaderOperation field.

inline
GLenum &TextureChunkBase::editShaderOperation(void)
{
    editSField(ShaderOperationFieldMask);

    return _sfShaderOperation.getValue();
}

//! Get the value of the TextureChunk::_sfShaderOperation field.
inline
const GLenum &TextureChunkBase::getShaderOperation(void) const
{
    return _sfShaderOperation.getValue();
}

//! Set the value of the TextureChunk::_sfShaderOperation field.
inline
void TextureChunkBase::setShaderOperation(const GLenum &value)
{
    editSField(ShaderOperationFieldMask);

    _sfShaderOperation.setValue(value);
}
//! Get the value of the TextureChunk::_sfShaderInput field.

inline
GLenum &TextureChunkBase::editShaderInput(void)
{
    editSField(ShaderInputFieldMask);

    return _sfShaderInput.getValue();
}

//! Get the value of the TextureChunk::_sfShaderInput field.
inline
const GLenum &TextureChunkBase::getShaderInput(void) const
{
    return _sfShaderInput.getValue();
}

//! Set the value of the TextureChunk::_sfShaderInput field.
inline
void TextureChunkBase::setShaderInput(const GLenum &value)
{
    editSField(ShaderInputFieldMask);

    _sfShaderInput.setValue(value);
}
//! Get the value of the TextureChunk::_sfShaderOffsetScale field.

inline
Real32 &TextureChunkBase::editShaderOffsetScale(void)
{
    editSField(ShaderOffsetScaleFieldMask);

    return _sfShaderOffsetScale.getValue();
}

//! Get the value of the TextureChunk::_sfShaderOffsetScale field.
inline
      Real32  TextureChunkBase::getShaderOffsetScale(void) const
{
    return _sfShaderOffsetScale.getValue();
}

//! Set the value of the TextureChunk::_sfShaderOffsetScale field.
inline
void TextureChunkBase::setShaderOffsetScale(const Real32 value)
{
    editSField(ShaderOffsetScaleFieldMask);

    _sfShaderOffsetScale.setValue(value);
}
//! Get the value of the TextureChunk::_sfShaderOffsetBias field.

inline
Real32 &TextureChunkBase::editShaderOffsetBias(void)
{
    editSField(ShaderOffsetBiasFieldMask);

    return _sfShaderOffsetBias.getValue();
}

//! Get the value of the TextureChunk::_sfShaderOffsetBias field.
inline
      Real32  TextureChunkBase::getShaderOffsetBias(void) const
{
    return _sfShaderOffsetBias.getValue();
}

//! Set the value of the TextureChunk::_sfShaderOffsetBias field.
inline
void TextureChunkBase::setShaderOffsetBias(const Real32 value)
{
    editSField(ShaderOffsetBiasFieldMask);

    _sfShaderOffsetBias.setValue(value);
}
//! Get the value of the TextureChunk::_sfShaderRGBADotProduct field.

inline
GLenum &TextureChunkBase::editShaderRGBADotProduct(void)
{
    editSField(ShaderRGBADotProductFieldMask);

    return _sfShaderRGBADotProduct.getValue();
}

//! Get the value of the TextureChunk::_sfShaderRGBADotProduct field.
inline
const GLenum &TextureChunkBase::getShaderRGBADotProduct(void) const
{
    return _sfShaderRGBADotProduct.getValue();
}

//! Set the value of the TextureChunk::_sfShaderRGBADotProduct field.
inline
void TextureChunkBase::setShaderRGBADotProduct(const GLenum &value)
{
    editSField(ShaderRGBADotProductFieldMask);

    _sfShaderRGBADotProduct.setValue(value);
}
//! Get the value of the TextureChunk::_sfShaderCullModes field.

inline
UInt8 &TextureChunkBase::editShaderCullModes(void)
{
    editSField(ShaderCullModesFieldMask);

    return _sfShaderCullModes.getValue();
}

//! Get the value of the TextureChunk::_sfShaderCullModes field.
inline
      UInt8  TextureChunkBase::getShaderCullModes(void) const
{
    return _sfShaderCullModes.getValue();
}

//! Set the value of the TextureChunk::_sfShaderCullModes field.
inline
void TextureChunkBase::setShaderCullModes(const UInt8 value)
{
    editSField(ShaderCullModesFieldMask);

    _sfShaderCullModes.setValue(value);
}
//! Get the value of the TextureChunk::_sfShaderConstEye field.

inline
Vec3f &TextureChunkBase::editShaderConstEye(void)
{
    editSField(ShaderConstEyeFieldMask);

    return _sfShaderConstEye.getValue();
}

//! Get the value of the TextureChunk::_sfShaderConstEye field.
inline
const Vec3f &TextureChunkBase::getShaderConstEye(void) const
{
    return _sfShaderConstEye.getValue();
}

//! Set the value of the TextureChunk::_sfShaderConstEye field.
inline
void TextureChunkBase::setShaderConstEye(const Vec3f &value)
{
    editSField(ShaderConstEyeFieldMask);

    _sfShaderConstEye.setValue(value);
}
//! Get the value of the TextureChunk::_sfLodBias field.

inline
Real32 &TextureChunkBase::editLodBias(void)
{
    editSField(LodBiasFieldMask);

    return _sfLodBias.getValue();
}

//! Get the value of the TextureChunk::_sfLodBias field.
inline
      Real32  TextureChunkBase::getLodBias(void) const
{
    return _sfLodBias.getValue();
}

//! Set the value of the TextureChunk::_sfLodBias field.
inline
void TextureChunkBase::setLodBias(const Real32 value)
{
    editSField(LodBiasFieldMask);

    _sfLodBias.setValue(value);
}
//! Get the value of the TextureChunk::_sfDirtyLeft field.

inline
Int32 &TextureChunkBase::editDirtyLeft(void)
{
    editSField(DirtyLeftFieldMask);

    return _sfDirtyLeft.getValue();
}

//! Get the value of the TextureChunk::_sfDirtyLeft field.
inline
      Int32  TextureChunkBase::getDirtyLeft(void) const
{
    return _sfDirtyLeft.getValue();
}

//! Set the value of the TextureChunk::_sfDirtyLeft field.
inline
void TextureChunkBase::setDirtyLeft(const Int32 value)
{
    editSField(DirtyLeftFieldMask);

    _sfDirtyLeft.setValue(value);
}
//! Get the value of the TextureChunk::_sfDirtyMinX field.

inline
Int32 &TextureChunkBase::editDirtyMinX(void)
{
    editSField(DirtyMinXFieldMask);

    return _sfDirtyMinX.getValue();
}

//! Get the value of the TextureChunk::_sfDirtyMinX field.
inline
      Int32  TextureChunkBase::getDirtyMinX(void) const
{
    return _sfDirtyMinX.getValue();
}

//! Set the value of the TextureChunk::_sfDirtyMinX field.
inline
void TextureChunkBase::setDirtyMinX(const Int32 value)
{
    editSField(DirtyMinXFieldMask);

    _sfDirtyMinX.setValue(value);
}
//! Get the value of the TextureChunk::_sfDirtyMaxX field.

inline
Int32 &TextureChunkBase::editDirtyMaxX(void)
{
    editSField(DirtyMaxXFieldMask);

    return _sfDirtyMaxX.getValue();
}

//! Get the value of the TextureChunk::_sfDirtyMaxX field.
inline
      Int32  TextureChunkBase::getDirtyMaxX(void) const
{
    return _sfDirtyMaxX.getValue();
}

//! Set the value of the TextureChunk::_sfDirtyMaxX field.
inline
void TextureChunkBase::setDirtyMaxX(const Int32 value)
{
    editSField(DirtyMaxXFieldMask);

    _sfDirtyMaxX.setValue(value);
}
//! Get the value of the TextureChunk::_sfDirtyMinY field.

inline
Int32 &TextureChunkBase::editDirtyMinY(void)
{
    editSField(DirtyMinYFieldMask);

    return _sfDirtyMinY.getValue();
}

//! Get the value of the TextureChunk::_sfDirtyMinY field.
inline
      Int32  TextureChunkBase::getDirtyMinY(void) const
{
    return _sfDirtyMinY.getValue();
}

//! Set the value of the TextureChunk::_sfDirtyMinY field.
inline
void TextureChunkBase::setDirtyMinY(const Int32 value)
{
    editSField(DirtyMinYFieldMask);

    _sfDirtyMinY.setValue(value);
}
//! Get the value of the TextureChunk::_sfDirtyMaxY field.

inline
Int32 &TextureChunkBase::editDirtyMaxY(void)
{
    editSField(DirtyMaxYFieldMask);

    return _sfDirtyMaxY.getValue();
}

//! Get the value of the TextureChunk::_sfDirtyMaxY field.
inline
      Int32  TextureChunkBase::getDirtyMaxY(void) const
{
    return _sfDirtyMaxY.getValue();
}

//! Set the value of the TextureChunk::_sfDirtyMaxY field.
inline
void TextureChunkBase::setDirtyMaxY(const Int32 value)
{
    editSField(DirtyMaxYFieldMask);

    _sfDirtyMaxY.setValue(value);
}
//! Get the value of the TextureChunk::_sfDirtyMinZ field.

inline
Int32 &TextureChunkBase::editDirtyMinZ(void)
{
    editSField(DirtyMinZFieldMask);

    return _sfDirtyMinZ.getValue();
}

//! Get the value of the TextureChunk::_sfDirtyMinZ field.
inline
      Int32  TextureChunkBase::getDirtyMinZ(void) const
{
    return _sfDirtyMinZ.getValue();
}

//! Set the value of the TextureChunk::_sfDirtyMinZ field.
inline
void TextureChunkBase::setDirtyMinZ(const Int32 value)
{
    editSField(DirtyMinZFieldMask);

    _sfDirtyMinZ.setValue(value);
}
//! Get the value of the TextureChunk::_sfDirtyMaxZ field.

inline
Int32 &TextureChunkBase::editDirtyMaxZ(void)
{
    editSField(DirtyMaxZFieldMask);

    return _sfDirtyMaxZ.getValue();
}

//! Get the value of the TextureChunk::_sfDirtyMaxZ field.
inline
      Int32  TextureChunkBase::getDirtyMaxZ(void) const
{
    return _sfDirtyMaxZ.getValue();
}

//! Set the value of the TextureChunk::_sfDirtyMaxZ field.
inline
void TextureChunkBase::setDirtyMaxZ(const Int32 value)
{
    editSField(DirtyMaxZFieldMask);

    _sfDirtyMaxZ.setValue(value);
}
//! Get the value of the TextureChunk::_sfAnisotropy field.

inline
Real32 &TextureChunkBase::editAnisotropy(void)
{
    editSField(AnisotropyFieldMask);

    return _sfAnisotropy.getValue();
}

//! Get the value of the TextureChunk::_sfAnisotropy field.
inline
      Real32  TextureChunkBase::getAnisotropy(void) const
{
    return _sfAnisotropy.getValue();
}

//! Set the value of the TextureChunk::_sfAnisotropy field.
inline
void TextureChunkBase::setAnisotropy(const Real32 value)
{
    editSField(AnisotropyFieldMask);

    _sfAnisotropy.setValue(value);
}
//! Get the value of the TextureChunk::_sfBorderColor field.

inline
Color4f &TextureChunkBase::editBorderColor(void)
{
    editSField(BorderColorFieldMask);

    return _sfBorderColor.getValue();
}

//! Get the value of the TextureChunk::_sfBorderColor field.
inline
const Color4f &TextureChunkBase::getBorderColor(void) const
{
    return _sfBorderColor.getValue();
}

//! Set the value of the TextureChunk::_sfBorderColor field.
inline
void TextureChunkBase::setBorderColor(const Color4f &value)
{
    editSField(BorderColorFieldMask);

    _sfBorderColor.setValue(value);
}
//! Get the value of the TextureChunk::_sfCompareMode field.

inline
GLenum &TextureChunkBase::editCompareMode(void)
{
    editSField(CompareModeFieldMask);

    return _sfCompareMode.getValue();
}

//! Get the value of the TextureChunk::_sfCompareMode field.
inline
const GLenum &TextureChunkBase::getCompareMode(void) const
{
    return _sfCompareMode.getValue();
}

//! Set the value of the TextureChunk::_sfCompareMode field.
inline
void TextureChunkBase::setCompareMode(const GLenum &value)
{
    editSField(CompareModeFieldMask);

    _sfCompareMode.setValue(value);
}
//! Get the value of the TextureChunk::_sfCompareFunc field.

inline
GLenum &TextureChunkBase::editCompareFunc(void)
{
    editSField(CompareFuncFieldMask);

    return _sfCompareFunc.getValue();
}

//! Get the value of the TextureChunk::_sfCompareFunc field.
inline
const GLenum &TextureChunkBase::getCompareFunc(void) const
{
    return _sfCompareFunc.getValue();
}

//! Set the value of the TextureChunk::_sfCompareFunc field.
inline
void TextureChunkBase::setCompareFunc(const GLenum &value)
{
    editSField(CompareFuncFieldMask);

    _sfCompareFunc.setValue(value);
}
//! Get the value of the TextureChunk::_sfDepthMode field.

inline
GLenum &TextureChunkBase::editDepthMode(void)
{
    editSField(DepthModeFieldMask);

    return _sfDepthMode.getValue();
}

//! Get the value of the TextureChunk::_sfDepthMode field.
inline
const GLenum &TextureChunkBase::getDepthMode(void) const
{
    return _sfDepthMode.getValue();
}

//! Set the value of the TextureChunk::_sfDepthMode field.
inline
void TextureChunkBase::setDepthMode(const GLenum &value)
{
    editSField(DepthModeFieldMask);

    _sfDepthMode.setValue(value);
}
//! Get the value of the TextureChunk::_sfBorderWidth field.

inline
UInt32 &TextureChunkBase::editBorderWidth(void)
{
    editSField(BorderWidthFieldMask);

    return _sfBorderWidth.getValue();
}

//! Get the value of the TextureChunk::_sfBorderWidth field.
inline
      UInt32  TextureChunkBase::getBorderWidth(void) const
{
    return _sfBorderWidth.getValue();
}

//! Set the value of the TextureChunk::_sfBorderWidth field.
inline
void TextureChunkBase::setBorderWidth(const UInt32 value)
{
    editSField(BorderWidthFieldMask);

    _sfBorderWidth.setValue(value);
}
//! Get the value of the TextureChunk::_sfNPOTMatrixScale field.

inline
UInt32 &TextureChunkBase::editNPOTMatrixScale(void)
{
    editSField(NPOTMatrixScaleFieldMask);

    return _sfNPOTMatrixScale.getValue();
}

//! Get the value of the TextureChunk::_sfNPOTMatrixScale field.
inline
      UInt32  TextureChunkBase::getNPOTMatrixScale(void) const
{
    return _sfNPOTMatrixScale.getValue();
}

//! Set the value of the TextureChunk::_sfNPOTMatrixScale field.
inline
void TextureChunkBase::setNPOTMatrixScale(const UInt32 value)
{
    editSField(NPOTMatrixScaleFieldMask);

    _sfNPOTMatrixScale.setValue(value);
}
//! Get the value of the TextureChunk::_sfSkipMipMapLevels field.

inline
Real32 &TextureChunkBase::editSkipMipMapLevels(void)
{
    editSField(SkipMipMapLevelsFieldMask);

    return _sfSkipMipMapLevels.getValue();
}

//! Get the value of the TextureChunk::_sfSkipMipMapLevels field.
inline
      Real32  TextureChunkBase::getSkipMipMapLevels(void) const
{
    return _sfSkipMipMapLevels.getValue();
}

//! Set the value of the TextureChunk::_sfSkipMipMapLevels field.
inline
void TextureChunkBase::setSkipMipMapLevels(const Real32 value)
{
    editSField(SkipMipMapLevelsFieldMask);

    _sfSkipMipMapLevels.setValue(value);
}

//! Get the value of the \a index element the TextureChunk::_mfShaderOffsetMatrix field.
inline
      Real32  TextureChunkBase::getShaderOffsetMatrix(const UInt32 index) const
{
    return _mfShaderOffsetMatrix[index];
}

inline
Real32 &TextureChunkBase::editShaderOffsetMatrix(const UInt32 index)
{
    editMField(ShaderOffsetMatrixFieldMask, _mfShaderOffsetMatrix);

    return _mfShaderOffsetMatrix[index];
}



#ifdef OSG_MT_CPTR_ASPECT
inline
void TextureChunkBase::execSync (      TextureChunkBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (ImageFieldMask & whichField))
        _sfImage.syncWith(pFrom->_sfImage);

    if(FieldBits::NoField != (InternalFormatFieldMask & whichField))
        _sfInternalFormat.syncWith(pFrom->_sfInternalFormat);

    if(FieldBits::NoField != (ExternalFormatFieldMask & whichField))
        _sfExternalFormat.syncWith(pFrom->_sfExternalFormat);

    if(FieldBits::NoField != (ScaleFieldMask & whichField))
        _sfScale.syncWith(pFrom->_sfScale);

    if(FieldBits::NoField != (FrameFieldMask & whichField))
        _sfFrame.syncWith(pFrom->_sfFrame);

    if(FieldBits::NoField != (MinFilterFieldMask & whichField))
        _sfMinFilter.syncWith(pFrom->_sfMinFilter);

    if(FieldBits::NoField != (MagFilterFieldMask & whichField))
        _sfMagFilter.syncWith(pFrom->_sfMagFilter);

    if(FieldBits::NoField != (WrapSFieldMask & whichField))
        _sfWrapS.syncWith(pFrom->_sfWrapS);

    if(FieldBits::NoField != (WrapTFieldMask & whichField))
        _sfWrapT.syncWith(pFrom->_sfWrapT);

    if(FieldBits::NoField != (WrapRFieldMask & whichField))
        _sfWrapR.syncWith(pFrom->_sfWrapR);

    if(FieldBits::NoField != (EnvModeFieldMask & whichField))
        _sfEnvMode.syncWith(pFrom->_sfEnvMode);

    if(FieldBits::NoField != (EnvColorFieldMask & whichField))
        _sfEnvColor.syncWith(pFrom->_sfEnvColor);

    if(FieldBits::NoField != (EnvCombineRGBFieldMask & whichField))
        _sfEnvCombineRGB.syncWith(pFrom->_sfEnvCombineRGB);

    if(FieldBits::NoField != (EnvCombineAlphaFieldMask & whichField))
        _sfEnvCombineAlpha.syncWith(pFrom->_sfEnvCombineAlpha);

    if(FieldBits::NoField != (EnvScaleRGBFieldMask & whichField))
        _sfEnvScaleRGB.syncWith(pFrom->_sfEnvScaleRGB);

    if(FieldBits::NoField != (EnvScaleAlphaFieldMask & whichField))
        _sfEnvScaleAlpha.syncWith(pFrom->_sfEnvScaleAlpha);

    if(FieldBits::NoField != (EnvSource0RGBFieldMask & whichField))
        _sfEnvSource0RGB.syncWith(pFrom->_sfEnvSource0RGB);

    if(FieldBits::NoField != (EnvSource1RGBFieldMask & whichField))
        _sfEnvSource1RGB.syncWith(pFrom->_sfEnvSource1RGB);

    if(FieldBits::NoField != (EnvSource2RGBFieldMask & whichField))
        _sfEnvSource2RGB.syncWith(pFrom->_sfEnvSource2RGB);

    if(FieldBits::NoField != (EnvSource0AlphaFieldMask & whichField))
        _sfEnvSource0Alpha.syncWith(pFrom->_sfEnvSource0Alpha);

    if(FieldBits::NoField != (EnvSource1AlphaFieldMask & whichField))
        _sfEnvSource1Alpha.syncWith(pFrom->_sfEnvSource1Alpha);

    if(FieldBits::NoField != (EnvSource2AlphaFieldMask & whichField))
        _sfEnvSource2Alpha.syncWith(pFrom->_sfEnvSource2Alpha);

    if(FieldBits::NoField != (EnvOperand0RGBFieldMask & whichField))
        _sfEnvOperand0RGB.syncWith(pFrom->_sfEnvOperand0RGB);

    if(FieldBits::NoField != (EnvOperand1RGBFieldMask & whichField))
        _sfEnvOperand1RGB.syncWith(pFrom->_sfEnvOperand1RGB);

    if(FieldBits::NoField != (EnvOperand2RGBFieldMask & whichField))
        _sfEnvOperand2RGB.syncWith(pFrom->_sfEnvOperand2RGB);

    if(FieldBits::NoField != (EnvOperand0AlphaFieldMask & whichField))
        _sfEnvOperand0Alpha.syncWith(pFrom->_sfEnvOperand0Alpha);

    if(FieldBits::NoField != (EnvOperand1AlphaFieldMask & whichField))
        _sfEnvOperand1Alpha.syncWith(pFrom->_sfEnvOperand1Alpha);

    if(FieldBits::NoField != (EnvOperand2AlphaFieldMask & whichField))
        _sfEnvOperand2Alpha.syncWith(pFrom->_sfEnvOperand2Alpha);

    if(FieldBits::NoField != (GLIdFieldMask & whichField))
        _sfGLId.syncWith(pFrom->_sfGLId);

    if(FieldBits::NoField != (IgnoreGLForAspectFieldMask & whichField))
        _sfIgnoreGLForAspect.syncWith(pFrom->_sfIgnoreGLForAspect);

    if(FieldBits::NoField != (PointSpriteFieldMask & whichField))
        _sfPointSprite.syncWith(pFrom->_sfPointSprite);

    if(FieldBits::NoField != (PriorityFieldMask & whichField))
        _sfPriority.syncWith(pFrom->_sfPriority);

    if(FieldBits::NoField != (ShaderOperationFieldMask & whichField))
        _sfShaderOperation.syncWith(pFrom->_sfShaderOperation);

    if(FieldBits::NoField != (ShaderInputFieldMask & whichField))
        _sfShaderInput.syncWith(pFrom->_sfShaderInput);

    if(FieldBits::NoField != (ShaderOffsetMatrixFieldMask & whichField))
        _mfShaderOffsetMatrix.syncWith(pFrom->_mfShaderOffsetMatrix,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (ShaderOffsetScaleFieldMask & whichField))
        _sfShaderOffsetScale.syncWith(pFrom->_sfShaderOffsetScale);

    if(FieldBits::NoField != (ShaderOffsetBiasFieldMask & whichField))
        _sfShaderOffsetBias.syncWith(pFrom->_sfShaderOffsetBias);

    if(FieldBits::NoField != (ShaderRGBADotProductFieldMask & whichField))
        _sfShaderRGBADotProduct.syncWith(pFrom->_sfShaderRGBADotProduct);

    if(FieldBits::NoField != (ShaderCullModesFieldMask & whichField))
        _sfShaderCullModes.syncWith(pFrom->_sfShaderCullModes);

    if(FieldBits::NoField != (ShaderConstEyeFieldMask & whichField))
        _sfShaderConstEye.syncWith(pFrom->_sfShaderConstEye);

    if(FieldBits::NoField != (LodBiasFieldMask & whichField))
        _sfLodBias.syncWith(pFrom->_sfLodBias);

    if(FieldBits::NoField != (DirtyLeftFieldMask & whichField))
        _sfDirtyLeft.syncWith(pFrom->_sfDirtyLeft);

    if(FieldBits::NoField != (DirtyMinXFieldMask & whichField))
        _sfDirtyMinX.syncWith(pFrom->_sfDirtyMinX);

    if(FieldBits::NoField != (DirtyMaxXFieldMask & whichField))
        _sfDirtyMaxX.syncWith(pFrom->_sfDirtyMaxX);

    if(FieldBits::NoField != (DirtyMinYFieldMask & whichField))
        _sfDirtyMinY.syncWith(pFrom->_sfDirtyMinY);

    if(FieldBits::NoField != (DirtyMaxYFieldMask & whichField))
        _sfDirtyMaxY.syncWith(pFrom->_sfDirtyMaxY);

    if(FieldBits::NoField != (DirtyMinZFieldMask & whichField))
        _sfDirtyMinZ.syncWith(pFrom->_sfDirtyMinZ);

    if(FieldBits::NoField != (DirtyMaxZFieldMask & whichField))
        _sfDirtyMaxZ.syncWith(pFrom->_sfDirtyMaxZ);

    if(FieldBits::NoField != (AnisotropyFieldMask & whichField))
        _sfAnisotropy.syncWith(pFrom->_sfAnisotropy);

    if(FieldBits::NoField != (BorderColorFieldMask & whichField))
        _sfBorderColor.syncWith(pFrom->_sfBorderColor);

    if(FieldBits::NoField != (CompareModeFieldMask & whichField))
        _sfCompareMode.syncWith(pFrom->_sfCompareMode);

    if(FieldBits::NoField != (CompareFuncFieldMask & whichField))
        _sfCompareFunc.syncWith(pFrom->_sfCompareFunc);

    if(FieldBits::NoField != (DepthModeFieldMask & whichField))
        _sfDepthMode.syncWith(pFrom->_sfDepthMode);

    if(FieldBits::NoField != (BorderWidthFieldMask & whichField))
        _sfBorderWidth.syncWith(pFrom->_sfBorderWidth);

    if(FieldBits::NoField != (NPOTMatrixScaleFieldMask & whichField))
        _sfNPOTMatrixScale.syncWith(pFrom->_sfNPOTMatrixScale);

    if(FieldBits::NoField != (SkipMipMapLevelsFieldMask & whichField))
        _sfSkipMipMapLevels.syncWith(pFrom->_sfSkipMipMapLevels);
}
#endif


inline
Char8 *TextureChunkBase::getClassname(void)
{
    return "TextureChunk";
}
OSG_GEN_CONTAINERPTR(TextureChunk);

OSG_END_NAMESPACE

