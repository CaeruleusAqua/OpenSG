/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TextureChunk!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILETEXTURECHUNKINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>


#include <OSGGL.h>                        // InternalFormat default header
#include <OSGGL.h>                        // ExternalFormat default header
#include <OSGGL.h>                        // MinFilter default header
#include <OSGGL.h>                        // MagFilter default header
#include <OSGGL.h>                        // WrapS default header
#include <OSGGL.h>                        // WrapT default header
#include <OSGGL.h>                        // WrapR default header
#include <OSGGL.h>                        // EnvMode default header
#include <OSGGL.h>                        // EnvCombineRGB default header
#include <OSGGL.h>                        // EnvCombineAlpha default header
#include <OSGGL.h>                        // EnvSource0RGB default header
#include <OSGGLEXT.h>                     // EnvSource1RGB default header
#include <OSGGLEXT.h>                     // EnvSource2RGB default header
#include <OSGGL.h>                        // EnvSource0Alpha default header
#include <OSGGLEXT.h>                     // EnvSource1Alpha default header
#include <OSGGLEXT.h>                     // EnvSource2Alpha default header
#include <OSGGL.h>                        // EnvOperand0RGB default header
#include <OSGGL.h>                        // EnvOperand1RGB default header
#include <OSGGL.h>                        // EnvOperand2RGB default header
#include <OSGGL.h>                        // EnvOperand0Alpha default header
#include <OSGGL.h>                        // EnvOperand1Alpha default header
#include <OSGGL.h>                        // EnvOperand2Alpha default header
#include <OSGGL.h>                        // PointSprite default header
#include <OSGGL.h>                        // ShaderOperation default header
#include <OSGGL.h>                        // ShaderInput default header
#include <OSGGL.h>                        // ShaderRGBADotProduct default header
#include <OSGGL.h>                        // CompareMode default header
#include <OSGGL.h>                        // CompareFunc default header
#include <OSGGL.h>                        // DepthMode default header

#include <OSGImage.h> // Image Class

#include "OSGTextureChunkBase.h"
#include "OSGTextureChunk.h"

#include "boost/bind.hpp"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::TextureChunk
    \ingroup GrpSystemState

    See \ref PageSystemTextureChunk for a description.

    This chunk wraps glTexImage[123]D (OSG::TextureChunk::_sfImage,
    OSG::TextureChunk::_sfInternalFormat, OSG::TextureChunk::_sfExternalFormat),
    glTexParameter (OSG::TextureChunk::_sfMinFilter,
    OSG::TextureChunk::_sfMagFilter, OSG::TextureChunk::_sfWrapS,
    OSG::TextureChunk::_sfWrapT, OSG::TextureChunk::_sfWrapR), glTexEnv
    (OSG::TextureChunk::_sfEnvMode, OSG::TextureChunk::_sfEnvColor,
    OSG::TextureChunk::_sfPriority). The ARB combine extension is also supported,
    where available (OSG::TextureChunk::_sfEnvCombineRGB,
    OSG::TextureChunk::_sfEnvScaleRGB, OSG::TextureChunk::_sfEnvSource0RGB,
    OSG::TextureChunk::_sfEnvSource1RGB, OSG::TextureChunk::_sfEnvSource2RGB,
    OSG::TextureChunk::_sfEnvOperand0RGB, OSG::TextureChunk::_sfEnvOperand1RGB,
    OSG::TextureChunk::_sfEnvOperand2RGB,
    OSG::TextureChunk::_sfEnvCombineAlpha,   OSG::TextureChunk::_sfEnvScaleAlpha,
    OSG::TextureChunk::_sfEnvSource0Alpha, OSG::TextureChunk::_sfEnvSource1Alpha,
    OSG::TextureChunk::_sfEnvSource2Alpha, OSG::TextureChunk::_sfEnvOperand0Alpha,
    OSG::TextureChunk::_sfEnvOperand1Alpha,
    OSG::TextureChunk::_sfEnvOperand2Alpha). It is possible to enable the point
    sprite coordinate replacement  (OSG::TextureChunk::_sfPointSprite), see \ref
    PageSystemPointChunk for details. The two parameters
    OSG::TextureChunk::_sfScale and OSG::TextureChunk::_sfFrame specify details
    about the texture.

    On hardware that supports it (i.e. NVidia boards) the texture shader
    extension(s) are also available.

    \deprecated Use OSG::TextureObjChunk instead.
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var Image *         TextureChunkBase::_sfImage
    The texture image.
*/

/*! \var GLenum          TextureChunkBase::_sfInternalFormat
    The internal texture format.
*/

/*! \var GLenum          TextureChunkBase::_sfExternalFormat
    The external texture format - overwrites 
    external format of image when set to a value not equal to 
    GL_NONE (which is the default).
*/

/*! \var bool            TextureChunkBase::_sfScale
    Specifies whether the image should be scaled to the next power of two,
    thus filling the whole texture coordinate range, or if it should be put
    in the lower left corner, leaving the rest of the texture undefined.
    This is mainly used for rapidly changing non power of two textures, to
    get around the scaling overhead.
*/

/*! \var UInt32          TextureChunkBase::_sfFrame
    Select the frame of the image to be used. See OSG::Image about details
    concerning multi-frame images.
    @hint For fast update use GL_LINEAR or GL_NEAREST filters, as mipmap creation is slow right now.
*/

/*! \var GLenum          TextureChunkBase::_sfMinFilter
    The minimisation filter, default GL_LINEAR_MIPMAP_LINEAR.
*/

/*! \var GLenum          TextureChunkBase::_sfMagFilter
    The magnification filter, default GL_LINEAR.
*/

/*! \var GLenum          TextureChunkBase::_sfWrapS
    Texture coordinate S wrapping, default GL_REPEAT.
*/

/*! \var GLenum          TextureChunkBase::_sfWrapT
    Texture coordinate T wrapping, default GL_REPEAT.
*/

/*! \var GLenum          TextureChunkBase::_sfWrapR
    Texture coordinate R wrapping, default GL_REPEAT.
*/

/*! \var GLenum          TextureChunkBase::_sfEnvMode
    Texture environment mode, default GL_REPLACE
*/

/*! \var Color4f         TextureChunkBase::_sfEnvColor
    Texture environment color default transparent black.
*/

/*! \var GLenum          TextureChunkBase::_sfEnvCombineRGB
    Texture environment rgb combine mode, default GL_MODULATE
*/

/*! \var GLenum          TextureChunkBase::_sfEnvCombineAlpha
    Texture environment alpha combine mode, default GL_MODULATE
*/

/*! \var Real32          TextureChunkBase::_sfEnvScaleRGB
    Texture environment combine rgb scale factor, default 1.f
*/

/*! \var Real32          TextureChunkBase::_sfEnvScaleAlpha
    Texture environment combine alpha scale factor, default 1.f
*/

/*! \var GLenum          TextureChunkBase::_sfEnvSource0RGB
    Texture environment combine source 0 rgb, default GL_TEXTURE
*/

/*! \var GLenum          TextureChunkBase::_sfEnvSource1RGB
    Texture environment combine source 1 rgb, default GL_PREVIOUS_EXT
*/

/*! \var GLenum          TextureChunkBase::_sfEnvSource2RGB
    Texture environment combine source 2 rgb, default GL_CONSTANT_EXT
*/

/*! \var GLenum          TextureChunkBase::_sfEnvSource0Alpha
    Texture environment combine source 0 alpha, default GL_TEXTURE
*/

/*! \var GLenum          TextureChunkBase::_sfEnvSource1Alpha
    Texture environment combine source 1 alpha, default GL_PREVIOUS_EXT
*/

/*! \var GLenum          TextureChunkBase::_sfEnvSource2Alpha
    Texture environment combine source 2 alpha, default GL_CONSTANT_EXT
*/

/*! \var GLenum          TextureChunkBase::_sfEnvOperand0RGB
    Texture environment combine operand 0 rgb, default GL_SRC_COLOR
*/

/*! \var GLenum          TextureChunkBase::_sfEnvOperand1RGB
    Texture environment combine operand 1 rgb, default GL_SRC_COLOR
*/

/*! \var GLenum          TextureChunkBase::_sfEnvOperand2RGB
    Texture environment combine operand 2 rgb, default GL_SRC_ALPHA
*/

/*! \var GLenum          TextureChunkBase::_sfEnvOperand0Alpha
    Texture environment combine operand 0 alpha, default GL_SRC_ALPHA
*/

/*! \var GLenum          TextureChunkBase::_sfEnvOperand1Alpha
    Texture environment combine operand 1 alpha, default GL_SRC_ALPHA
*/

/*! \var GLenum          TextureChunkBase::_sfEnvOperand2Alpha
    Texture environment combine operand 2 alpha, default GL_SRC_ALPHA
*/

/*! \var GLenum          TextureChunkBase::_sfGLId
    The OpenGL texture id for this texture.
*/

/*! \var Int32           TextureChunkBase::_sfIgnoreGLForAspect
    Don't do any GL calls for aspect of given id.
*/

/*! \var bool            TextureChunkBase::_sfPointSprite
    Flag to use this texture for Point Sprites.
*/

/*! \var Real32          TextureChunkBase::_sfPriority
    Priority of this texture, between 0 and 1, the default is 0.
*/

/*! \var GLenum          TextureChunkBase::_sfShaderOperation
    Shader operation of this texture unit, default GL_NONE. If unit 0 uses
    GL_NONE, shading is switched off.
*/

/*! \var GLenum          TextureChunkBase::_sfShaderInput
    Input texture unit for this shader's operation.
*/

/*! \var Real32          TextureChunkBase::_mfShaderOffsetMatrix
    The 2x2 transformation matrix for offset textures.
*/

/*! \var Real32          TextureChunkBase::_sfShaderOffsetScale
    The scaling factor for scaled offset textures.
*/

/*! \var Real32          TextureChunkBase::_sfShaderOffsetBias
    The bias factor for scaled offset textures.
*/

/*! \var GLenum          TextureChunkBase::_sfShaderRGBADotProduct
    The RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV value.
*/

/*! \var UInt8           TextureChunkBase::_sfShaderCullModes
    The CULL_MODES_NV value, coded into a single byte. The first 4 bits of
    the byte are used to indicate the wnated cull modes, a value of 0 
    signifies GL_LESS, a value of 1 GL_GEQUAL. Bit 0 (mask 1) is used for 
    the S coordinate, bit 1 (mask 2) for T, bit 2 (mask 4) for R and bit 4 
    (mask 8) for Q.
*/

/*! \var Vec3f           TextureChunkBase::_sfShaderConstEye
    The CONST_EYE_NV value, i.e. the constant eye position used by the 
    DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV shader.
*/

/*! \var Real32          TextureChunkBase::_sfLodBias
    Bias of LOD calculation for texture access.
*/

/*! \var Int32           TextureChunkBase::_sfDirtyLeft
    Left coordinate of the dirty rectangle to use for 
    imageContentChanged(). This doesn't make sense to be stored in files, 
    it does make sense on a cluster, though, that's why it's external.
*/

/*! \var Int32           TextureChunkBase::_sfDirtyMinX
    Minimum X coordinate of the dirty rectangle to use for 
    imageContentChanged(). This doesn't make sense to be stored in files, 
    it does make sense on a cluster, though, that's why it's external.
*/

/*! \var Int32           TextureChunkBase::_sfDirtyMaxX
    Maximum X coordinate of the dirty rectangle to use for 
    imageContentChanged(). This doesn't make sense to be stored in files, 
    it does make sense on a cluster, though, that's why it's external.
*/

/*! \var Int32           TextureChunkBase::_sfDirtyMinY
    Minimum Y coordinate of the dirty rectangle to use for 
    imageContentChanged(). This doesn't make sense to be stored in files, 
    it does make sense on a cluster, though, that's why it's external.
*/

/*! \var Int32           TextureChunkBase::_sfDirtyMaxY
    Maximum Y coordinate of the dirty rectangle to use for 
    imageContentChanged(). This doesn't make sense to be stored in files, 
    it does make sense on a cluster, though, that's why it's external.
*/

/*! \var Int32           TextureChunkBase::_sfDirtyMinZ
    Minimum Z coordinate of the dirty rectangle to use for 
    imageContentChanged(). This doesn't make sense to be stored in files, 
    it does make sense on a cluster, though, that's why it's external.
*/

/*! \var Int32           TextureChunkBase::_sfDirtyMaxZ
    Maximum Z coordinate of the dirty rectangle to use for 
    imageContentChanged(). This doesn't make sense to be stored in files, 
    it does make sense on a cluster, though, that's why it's external.
*/

/*! \var Real32          TextureChunkBase::_sfAnisotropy
    Anisotropic filtering the default 1.0f means isotropic filtering.
*/

/*! \var Color4f         TextureChunkBase::_sfBorderColor
    Texture border color
*/

/*! \var GLenum          TextureChunkBase::_sfCompareMode
    
*/

/*! \var GLenum          TextureChunkBase::_sfCompareFunc
    
*/

/*! \var GLenum          TextureChunkBase::_sfDepthMode
    
*/

/*! \var UInt32          TextureChunkBase::_sfBorderWidth
    Texture border width in pixels.
*/

/*! \var UInt32          TextureChunkBase::_sfNPOTMatrixScale
    Use the texture matrix to scale the texture coordinates for NPOT images. Only used if neither rectangular nor NPOT textures are supported. If set to false, the image is scaled to the next power of two before being used as a texture. For convenience xFlip/ yFlip can also be set. Note that this will interfere with other TextureTransform and TexGen chunks. Do not use it if you need to use those chunks!
*/

/*! \var Real32          TextureChunkBase::_sfSkipMipMapLevels
    Percentage of mipmap levels to be skipped. Especially useful in combination with image formats that already hold all levels and GPUs with only low mem.
*/


void TextureChunkBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecImagePtr::Description(
        SFUnrecImagePtr::getClassType(),
        "image",
        "The texture image.\n",
        ImageFieldId, ImageFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleImage),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleImage));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "internalFormat",
        "The internal texture format.\n",
        InternalFormatFieldId, InternalFormatFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleInternalFormat),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleInternalFormat));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "externalFormat",
        "The external texture format - overwrites \n"
        "external format of image when set to a value not equal to \n"
        "GL_NONE (which is the default).\n",
        ExternalFormatFieldId, ExternalFormatFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleExternalFormat),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleExternalFormat));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "scale",
        "Specifies whether the image should be scaled to the next power of two,\n"
        "thus filling the whole texture coordinate range, or if it should be put\n"
        "in the lower left corner, leaving the rest of the texture undefined.\n"
        "This is mainly used for rapidly changing non power of two textures, to\n"
        "get around the scaling overhead.\n",
        ScaleFieldId, ScaleFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleScale),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleScale));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "frame",
        "Select the frame of the image to be used. See OSG::Image about details\n"
        "concerning multi-frame images.\n"
        "@hint For fast update use GL_LINEAR or GL_NEAREST filters, as mipmap creation is slow right now.\n",
        FrameFieldId, FrameFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleFrame),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleFrame));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "minFilter",
        "The minimisation filter, default GL_LINEAR_MIPMAP_LINEAR.\n",
        MinFilterFieldId, MinFilterFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleMinFilter),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleMinFilter));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "magFilter",
        "The magnification filter, default GL_LINEAR.\n",
        MagFilterFieldId, MagFilterFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleMagFilter),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleMagFilter));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "wrapS",
        "Texture coordinate S wrapping, default GL_REPEAT.\n",
        WrapSFieldId, WrapSFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleWrapS),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleWrapS));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "wrapT",
        "Texture coordinate T wrapping, default GL_REPEAT.\n",
        WrapTFieldId, WrapTFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleWrapT),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleWrapT));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "wrapR",
        "Texture coordinate R wrapping, default GL_REPEAT.\n",
        WrapRFieldId, WrapRFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleWrapR),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleWrapR));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envMode",
        "Texture environment mode, default GL_REPLACE\n",
        EnvModeFieldId, EnvModeFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleEnvMode),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleEnvMode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "envColor",
        "Texture environment color default transparent black.\n",
        EnvColorFieldId, EnvColorFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleEnvColor),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleEnvColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envCombineRGB",
        "Texture environment rgb combine mode, default GL_MODULATE\n",
        EnvCombineRGBFieldId, EnvCombineRGBFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleEnvCombineRGB),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleEnvCombineRGB));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envCombineAlpha",
        "Texture environment alpha combine mode, default GL_MODULATE\n",
        EnvCombineAlphaFieldId, EnvCombineAlphaFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleEnvCombineAlpha),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleEnvCombineAlpha));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "envScaleRGB",
        "Texture environment combine rgb scale factor, default 1.f\n",
        EnvScaleRGBFieldId, EnvScaleRGBFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleEnvScaleRGB),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleEnvScaleRGB));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "envScaleAlpha",
        "Texture environment combine alpha scale factor, default 1.f\n",
        EnvScaleAlphaFieldId, EnvScaleAlphaFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleEnvScaleAlpha),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleEnvScaleAlpha));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envSource0RGB",
        "Texture environment combine source 0 rgb, default GL_TEXTURE\n",
        EnvSource0RGBFieldId, EnvSource0RGBFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleEnvSource0RGB),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleEnvSource0RGB));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envSource1RGB",
        "Texture environment combine source 1 rgb, default GL_PREVIOUS_EXT\n",
        EnvSource1RGBFieldId, EnvSource1RGBFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleEnvSource1RGB),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleEnvSource1RGB));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envSource2RGB",
        "Texture environment combine source 2 rgb, default GL_CONSTANT_EXT\n",
        EnvSource2RGBFieldId, EnvSource2RGBFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleEnvSource2RGB),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleEnvSource2RGB));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envSource0Alpha",
        "Texture environment combine source 0 alpha, default GL_TEXTURE\n",
        EnvSource0AlphaFieldId, EnvSource0AlphaFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleEnvSource0Alpha),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleEnvSource0Alpha));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envSource1Alpha",
        "Texture environment combine source 1 alpha, default GL_PREVIOUS_EXT\n",
        EnvSource1AlphaFieldId, EnvSource1AlphaFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleEnvSource1Alpha),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleEnvSource1Alpha));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envSource2Alpha",
        "Texture environment combine source 2 alpha, default GL_CONSTANT_EXT\n",
        EnvSource2AlphaFieldId, EnvSource2AlphaFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleEnvSource2Alpha),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleEnvSource2Alpha));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envOperand0RGB",
        "Texture environment combine operand 0 rgb, default GL_SRC_COLOR\n",
        EnvOperand0RGBFieldId, EnvOperand0RGBFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleEnvOperand0RGB),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleEnvOperand0RGB));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envOperand1RGB",
        "Texture environment combine operand 1 rgb, default GL_SRC_COLOR\n",
        EnvOperand1RGBFieldId, EnvOperand1RGBFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleEnvOperand1RGB),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleEnvOperand1RGB));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envOperand2RGB",
        "Texture environment combine operand 2 rgb, default GL_SRC_ALPHA\n",
        EnvOperand2RGBFieldId, EnvOperand2RGBFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleEnvOperand2RGB),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleEnvOperand2RGB));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envOperand0Alpha",
        "Texture environment combine operand 0 alpha, default GL_SRC_ALPHA\n",
        EnvOperand0AlphaFieldId, EnvOperand0AlphaFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleEnvOperand0Alpha),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleEnvOperand0Alpha));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envOperand1Alpha",
        "Texture environment combine operand 1 alpha, default GL_SRC_ALPHA\n",
        EnvOperand1AlphaFieldId, EnvOperand1AlphaFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleEnvOperand1Alpha),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleEnvOperand1Alpha));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "envOperand2Alpha",
        "Texture environment combine operand 2 alpha, default GL_SRC_ALPHA\n",
        EnvOperand2AlphaFieldId, EnvOperand2AlphaFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleEnvOperand2Alpha),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleEnvOperand2Alpha));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "GLId",
        "The OpenGL texture id for this texture.\n",
        GLIdFieldId, GLIdFieldMask,
        true,
        (Field::FClusterLocal),
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleGLId),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleGLId));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "IgnoreGLForAspect",
        "Don't do any GL calls for aspect of given id.\n",
        IgnoreGLForAspectFieldId, IgnoreGLForAspectFieldMask,
        true,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleIgnoreGLForAspect),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleIgnoreGLForAspect));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "pointSprite",
        "Flag to use this texture for Point Sprites.\n",
        PointSpriteFieldId, PointSpriteFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandlePointSprite),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandlePointSprite));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "priority",
        "Priority of this texture, between 0 and 1, the default is 0.\n",
        PriorityFieldId, PriorityFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandlePriority),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandlePriority));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "shaderOperation",
        "Shader operation of this texture unit, default GL_NONE. If unit 0 uses\n"
        "GL_NONE, shading is switched off.\n",
        ShaderOperationFieldId, ShaderOperationFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleShaderOperation),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleShaderOperation));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "shaderInput",
        "Input texture unit for this shader's operation.\n",
        ShaderInputFieldId, ShaderInputFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleShaderInput),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleShaderInput));

    oType.addInitialDesc(pDesc);

    pDesc = new MFReal32::Description(
        MFReal32::getClassType(),
        "shaderOffsetMatrix",
        "The 2x2 transformation matrix for offset textures.\n",
        ShaderOffsetMatrixFieldId, ShaderOffsetMatrixFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleShaderOffsetMatrix),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleShaderOffsetMatrix));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "shaderOffsetScale",
        "The scaling factor for scaled offset textures.\n",
        ShaderOffsetScaleFieldId, ShaderOffsetScaleFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleShaderOffsetScale),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleShaderOffsetScale));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "shaderOffsetBias",
        "The bias factor for scaled offset textures.\n",
        ShaderOffsetBiasFieldId, ShaderOffsetBiasFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleShaderOffsetBias),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleShaderOffsetBias));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "shaderRGBADotProduct",
        "The RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV value.\n",
        ShaderRGBADotProductFieldId, ShaderRGBADotProductFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleShaderRGBADotProduct),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleShaderRGBADotProduct));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt8::Description(
        SFUInt8::getClassType(),
        "shaderCullModes",
        "The CULL_MODES_NV value, coded into a single byte. The first 4 bits of\n"
        "the byte are used to indicate the wnated cull modes, a value of 0 \n"
        "signifies GL_LESS, a value of 1 GL_GEQUAL. Bit 0 (mask 1) is used for \n"
        "the S coordinate, bit 1 (mask 2) for T, bit 2 (mask 4) for R and bit 4 \n"
        "(mask 8) for Q.\n",
        ShaderCullModesFieldId, ShaderCullModesFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleShaderCullModes),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleShaderCullModes));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec3f::Description(
        SFVec3f::getClassType(),
        "shaderConstEye",
        "The CONST_EYE_NV value, i.e. the constant eye position used by the \n"
        "DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV shader.\n",
        ShaderConstEyeFieldId, ShaderConstEyeFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleShaderConstEye),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleShaderConstEye));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "lodBias",
        "Bias of LOD calculation for texture access.\n",
        LodBiasFieldId, LodBiasFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleLodBias),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleLodBias));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "dirtyLeft",
        "Left coordinate of the dirty rectangle to use for \n"
        "imageContentChanged(). This doesn't make sense to be stored in files, \n"
        "it does make sense on a cluster, though, that's why it's external.\n",
        DirtyLeftFieldId, DirtyLeftFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleDirtyLeft),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleDirtyLeft));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "dirtyMinX",
        "Minimum X coordinate of the dirty rectangle to use for \n"
        "imageContentChanged(). This doesn't make sense to be stored in files, \n"
        "it does make sense on a cluster, though, that's why it's external.\n",
        DirtyMinXFieldId, DirtyMinXFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleDirtyMinX),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleDirtyMinX));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "dirtyMaxX",
        "Maximum X coordinate of the dirty rectangle to use for \n"
        "imageContentChanged(). This doesn't make sense to be stored in files, \n"
        "it does make sense on a cluster, though, that's why it's external.\n",
        DirtyMaxXFieldId, DirtyMaxXFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleDirtyMaxX),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleDirtyMaxX));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "dirtyMinY",
        "Minimum Y coordinate of the dirty rectangle to use for \n"
        "imageContentChanged(). This doesn't make sense to be stored in files, \n"
        "it does make sense on a cluster, though, that's why it's external.\n",
        DirtyMinYFieldId, DirtyMinYFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleDirtyMinY),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleDirtyMinY));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "dirtyMaxY",
        "Maximum Y coordinate of the dirty rectangle to use for \n"
        "imageContentChanged(). This doesn't make sense to be stored in files, \n"
        "it does make sense on a cluster, though, that's why it's external.\n",
        DirtyMaxYFieldId, DirtyMaxYFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleDirtyMaxY),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleDirtyMaxY));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "dirtyMinZ",
        "Minimum Z coordinate of the dirty rectangle to use for \n"
        "imageContentChanged(). This doesn't make sense to be stored in files, \n"
        "it does make sense on a cluster, though, that's why it's external.\n",
        DirtyMinZFieldId, DirtyMinZFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleDirtyMinZ),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleDirtyMinZ));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "dirtyMaxZ",
        "Maximum Z coordinate of the dirty rectangle to use for \n"
        "imageContentChanged(). This doesn't make sense to be stored in files, \n"
        "it does make sense on a cluster, though, that's why it's external.\n",
        DirtyMaxZFieldId, DirtyMaxZFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleDirtyMaxZ),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleDirtyMaxZ));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "anisotropy",
        "Anisotropic filtering the default 1.0f means isotropic filtering.\n",
        AnisotropyFieldId, AnisotropyFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleAnisotropy),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleAnisotropy));

    oType.addInitialDesc(pDesc);

    pDesc = new SFColor4f::Description(
        SFColor4f::getClassType(),
        "borderColor",
        "Texture border color\n",
        BorderColorFieldId, BorderColorFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleBorderColor),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleBorderColor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "compareMode",
        "",
        CompareModeFieldId, CompareModeFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleCompareMode),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleCompareMode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "compareFunc",
        "",
        CompareFuncFieldId, CompareFuncFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleCompareFunc),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleCompareFunc));

    oType.addInitialDesc(pDesc);

    pDesc = new SFGLenum::Description(
        SFGLenum::getClassType(),
        "depthMode",
        "",
        DepthModeFieldId, DepthModeFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleDepthMode),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleDepthMode));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "borderWidth",
        "Texture border width in pixels.\n",
        BorderWidthFieldId, BorderWidthFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleBorderWidth),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleBorderWidth));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "NPOTMatrixScale",
        "Use the texture matrix to scale the texture coordinates for NPOT images. Only used if neither rectangular nor NPOT textures are supported. If set to false, the image is scaled to the next power of two before being used as a texture. For convenience xFlip/ yFlip can also be set. Note that this will interfere with other TextureTransform and TexGen chunks. Do not use it if you need to use those chunks!\n",
        NPOTMatrixScaleFieldId, NPOTMatrixScaleFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleNPOTMatrixScale),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleNPOTMatrixScale));

    oType.addInitialDesc(pDesc);

    pDesc = new SFReal32::Description(
        SFReal32::getClassType(),
        "skipMipMapLevels",
        "Percentage of mipmap levels to be skipped. Especially useful in combination with image formats that already hold all levels and GPUs with only low mem.\n",
        SkipMipMapLevelsFieldId, SkipMipMapLevelsFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&TextureChunk::editHandleSkipMipMapLevels),
        static_cast<FieldGetMethodSig >(&TextureChunk::getHandleSkipMipMapLevels));

    oType.addInitialDesc(pDesc);
}


TextureChunkBase::TypeObject TextureChunkBase::_type(
    TextureChunkBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&TextureChunkBase::createEmptyLocal),
    TextureChunk::initMethod,
    TextureChunk::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&TextureChunkBase::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"TextureChunk\"\n"
    "\tparent=\"TextureBaseChunk\"\n"
    "\tlibrary=\"System\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"false\"\n"
    ">\n"
    "\\ingroup GrpSystemState\n"
    "\n"
    "See \\ref PageSystemTextureChunk for a description.\n"
    "\n"
    "This chunk wraps glTexImage[123]D (OSG::TextureChunk::_sfImage,\n"
    "OSG::TextureChunk::_sfInternalFormat, OSG::TextureChunk::_sfExternalFormat),\n"
    "glTexParameter (OSG::TextureChunk::_sfMinFilter,\n"
    "OSG::TextureChunk::_sfMagFilter, OSG::TextureChunk::_sfWrapS,\n"
    "OSG::TextureChunk::_sfWrapT, OSG::TextureChunk::_sfWrapR), glTexEnv\n"
    "(OSG::TextureChunk::_sfEnvMode, OSG::TextureChunk::_sfEnvColor,\n"
    "OSG::TextureChunk::_sfPriority). The ARB combine extension is also supported,\n"
    "where available (OSG::TextureChunk::_sfEnvCombineRGB,\n"
    "OSG::TextureChunk::_sfEnvScaleRGB, OSG::TextureChunk::_sfEnvSource0RGB,\n"
    "OSG::TextureChunk::_sfEnvSource1RGB, OSG::TextureChunk::_sfEnvSource2RGB,\n"
    "OSG::TextureChunk::_sfEnvOperand0RGB, OSG::TextureChunk::_sfEnvOperand1RGB,\n"
    "OSG::TextureChunk::_sfEnvOperand2RGB,\n"
    "OSG::TextureChunk::_sfEnvCombineAlpha,   OSG::TextureChunk::_sfEnvScaleAlpha,\n"
    "OSG::TextureChunk::_sfEnvSource0Alpha, OSG::TextureChunk::_sfEnvSource1Alpha,\n"
    "OSG::TextureChunk::_sfEnvSource2Alpha, OSG::TextureChunk::_sfEnvOperand0Alpha,\n"
    "OSG::TextureChunk::_sfEnvOperand1Alpha,\n"
    "OSG::TextureChunk::_sfEnvOperand2Alpha). It is possible to enable the point\n"
    "sprite coordinate replacement  (OSG::TextureChunk::_sfPointSprite), see \\ref\n"
    "PageSystemPointChunk for details. The two parameters\n"
    "OSG::TextureChunk::_sfScale and OSG::TextureChunk::_sfFrame specify details\n"
    "about the texture.\n"
    "\n"
    "On hardware that supports it (i.e. NVidia boards) the texture shader\n"
    "extension(s) are also available.\n"
    "\n"
    "\\deprecated Use OSG::TextureObjChunk instead.\n"
    "\t<Field\n"
    "\t\tname=\"image\"\n"
    "\t\ttype=\"ImagePtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe texture image.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"internalFormat\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_NONE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tThe internal texture format.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"externalFormat\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_NONE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t    The external texture format - overwrites \n"
    "        external format of image when set to a value not equal to \n"
    "        GL_NONE (which is the default).\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"scale\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"true\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Specifies whether the image should be scaled to the next power of two,\n"
    "        thus filling the whole texture coordinate range, or if it should be put\n"
    "        in the lower left corner, leaving the rest of the texture undefined.\n"
    "        This is mainly used for rapidly changing non power of two textures, to\n"
    "        get around the scaling overhead.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"frame\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Select the frame of the image to be used. See OSG::Image about details\n"
    "        concerning multi-frame images.\n"
    "        @hint For fast update use GL_LINEAR or GL_NEAREST filters, as mipmap creation is slow right now.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"minFilter\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_LINEAR_MIPMAP_LINEAR\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        The minimisation filter, default GL_LINEAR_MIPMAP_LINEAR.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"magFilter\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_LINEAR\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        The magnification filter, default GL_LINEAR.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"wrapS\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_REPEAT\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture coordinate S wrapping, default GL_REPEAT.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"wrapT\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_REPEAT\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture coordinate T wrapping, default GL_REPEAT.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"wrapR\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_REPEAT\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture coordinate R wrapping, default GL_REPEAT.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envMode\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_REPLACE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment mode, default GL_REPLACE\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0,0,0,0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment color default transparent black.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envCombineRGB\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_MODULATE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment rgb combine mode, default GL_MODULATE\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envCombineAlpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_MODULATE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment alpha combine mode, default GL_MODULATE\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envScaleRGB\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1.0f\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine rgb scale factor, default 1.f\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envScaleAlpha\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"1.0f\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine alpha scale factor, default 1.f\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envSource0RGB\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_TEXTURE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine source 0 rgb, default GL_TEXTURE\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envSource1RGB\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_PREVIOUS_EXT\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGLEXT.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine source 1 rgb, default GL_PREVIOUS_EXT\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envSource2RGB\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_CONSTANT_EXT\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGLEXT.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine source 2 rgb, default GL_CONSTANT_EXT\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envSource0Alpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_TEXTURE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine source 0 alpha, default GL_TEXTURE\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envSource1Alpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_PREVIOUS_EXT\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGLEXT.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine source 1 alpha, default GL_PREVIOUS_EXT\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envSource2Alpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_CONSTANT_EXT\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGLEXT.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine source 2 alpha, default GL_CONSTANT_EXT\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envOperand0RGB\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_SRC_COLOR\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine operand 0 rgb, default GL_SRC_COLOR\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envOperand1RGB\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_SRC_COLOR\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine operand 1 rgb, default GL_SRC_COLOR\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envOperand2RGB\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_SRC_ALPHA\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine operand 2 rgb, default GL_SRC_ALPHA\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envOperand0Alpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_SRC_ALPHA\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine operand 0 alpha, default GL_SRC_ALPHA\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envOperand1Alpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_SRC_ALPHA\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine operand 1 alpha, default GL_SRC_ALPHA\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"envOperand2Alpha\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_SRC_ALPHA\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        Texture environment combine operand 2 alpha, default GL_SRC_ALPHA\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"GLId\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "        fieldFlags=\"FClusterLocal\"\n"
    "\t>\n"
    "        The OpenGL texture id for this texture.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"IgnoreGLForAspect\"\n"
    "\t\ttype=\"Int32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\tdefaultValue=\"-1\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t    Don't do any GL calls for aspect of given id.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"pointSprite\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"GL_FALSE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t>\n"
    "        Flag to use this texture for Point Sprites.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"priority\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1.f\"\n"
    "\t>\n"
    "        Priority of this texture, between 0 and 1, the default is 0.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shaderOperation\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"GL_NONE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t>\n"
    "        Shader operation of this texture unit, default GL_NONE. If unit 0 uses\n"
    "        GL_NONE, shading is switched off.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shaderInput\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"GL_NONE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t>\n"
    "        Input texture unit for this shader's operation.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shaderOffsetMatrix\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        The 2x2 transformation matrix for offset textures.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shaderOffsetScale\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"1.f\"\n"
    "\t>\n"
    "        The scaling factor for scaled offset textures.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shaderOffsetBias\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.f\"\n"
    "\t>\n"
    "        The bias factor for scaled offset textures.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shaderRGBADotProduct\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"GL_NONE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t>\n"
    "        The RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV value.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shaderCullModes\"\n"
    "\t\ttype=\"UInt8\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t>\n"
    "        The CULL_MODES_NV value, coded into a single byte. The first 4 bits of\n"
    "        the byte are used to indicate the wnated cull modes, a value of 0 \n"
    "        signifies GL_LESS, a value of 1 GL_GEQUAL. Bit 0 (mask 1) is used for \n"
    "        the S coordinate, bit 1 (mask 2) for T, bit 2 (mask 4) for R and bit 4 \n"
    "        (mask 8) for Q.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"shaderConstEye\"\n"
    "\t\ttype=\"Vec3f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "        The CONST_EYE_NV value, i.e. the constant eye position used by the \n"
    "        DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV shader.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"lodBias\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t\tdefaultValue=\"0.f\"\n"
    "\t\tdefaultHeader=\"\"\n"
    "\t>\n"
    "        Bias of LOD calculation for texture access.\n"
    "\t</Field>\n"
    "    <Field\n"
    "        name=\"dirtyLeft\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"-1\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "        Left coordinate of the dirty rectangle to use for \n"
    "        imageContentChanged(). This doesn't make sense to be stored in files, \n"
    "        it does make sense on a cluster, though, that's why it's external.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"dirtyMinX\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"-1\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "        Minimum X coordinate of the dirty rectangle to use for \n"
    "        imageContentChanged(). This doesn't make sense to be stored in files, \n"
    "        it does make sense on a cluster, though, that's why it's external.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"dirtyMaxX\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"-1\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "        Maximum X coordinate of the dirty rectangle to use for \n"
    "        imageContentChanged(). This doesn't make sense to be stored in files, \n"
    "        it does make sense on a cluster, though, that's why it's external.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"dirtyMinY\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"-1\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "        Minimum Y coordinate of the dirty rectangle to use for \n"
    "        imageContentChanged(). This doesn't make sense to be stored in files, \n"
    "        it does make sense on a cluster, though, that's why it's external.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"dirtyMaxY\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"-1\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "        Maximum Y coordinate of the dirty rectangle to use for \n"
    "        imageContentChanged(). This doesn't make sense to be stored in files, \n"
    "        it does make sense on a cluster, though, that's why it's external.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"dirtyMinZ\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"-1\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "        Minimum Z coordinate of the dirty rectangle to use for \n"
    "        imageContentChanged(). This doesn't make sense to be stored in files, \n"
    "        it does make sense on a cluster, though, that's why it's external.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"dirtyMaxZ\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"-1\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "        Maximum Z coordinate of the dirty rectangle to use for \n"
    "        imageContentChanged(). This doesn't make sense to be stored in files, \n"
    "        it does make sense on a cluster, though, that's why it's external.\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"anisotropy\"\n"
    "        type=\"Real32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"1.0f\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "        Anisotropic filtering the default 1.0f means isotropic filtering.\n"
    "        </Field>\n"
    "\t<Field\n"
    "\t\tname=\"borderColor\"\n"
    "\t\ttype=\"Color4f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0,0,0,0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tTexture border color\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"compareMode\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_NONE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"compareFunc\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_LEQUAL\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"depthMode\"\n"
    "\t\ttype=\"GLenum\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"GL_LUMINANCE\"\n"
    "\t\tdefaultHeader=\"&lt;OSGGL.h&gt;\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"borderWidth\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tTexture border width in pixels.\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"NPOTMatrixScale\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tUse the texture matrix to scale the texture coordinates for NPOT images. Only used if neither rectangular nor NPOT textures are supported. If set to false, the image is scaled to the next power of two before being used as a texture. For convenience xFlip/ yFlip can also be set. Note that this will interfere with other TextureTransform and TexGen chunks. Do not use it if you need to use those chunks!\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"skipMipMapLevels\"\n"
    "\t\ttype=\"Real32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tPercentage of mipmap levels to be skipped. Especially useful in combination with image formats that already hold all levels and GPUs with only low mem.\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "\\ingroup GrpSystemState\n"
    "\n"
    "See \\ref PageSystemTextureChunk for a description.\n"
    "\n"
    "This chunk wraps glTexImage[123]D (OSG::TextureChunk::_sfImage,\n"
    "OSG::TextureChunk::_sfInternalFormat, OSG::TextureChunk::_sfExternalFormat),\n"
    "glTexParameter (OSG::TextureChunk::_sfMinFilter,\n"
    "OSG::TextureChunk::_sfMagFilter, OSG::TextureChunk::_sfWrapS,\n"
    "OSG::TextureChunk::_sfWrapT, OSG::TextureChunk::_sfWrapR), glTexEnv\n"
    "(OSG::TextureChunk::_sfEnvMode, OSG::TextureChunk::_sfEnvColor,\n"
    "OSG::TextureChunk::_sfPriority). The ARB combine extension is also supported,\n"
    "where available (OSG::TextureChunk::_sfEnvCombineRGB,\n"
    "OSG::TextureChunk::_sfEnvScaleRGB, OSG::TextureChunk::_sfEnvSource0RGB,\n"
    "OSG::TextureChunk::_sfEnvSource1RGB, OSG::TextureChunk::_sfEnvSource2RGB,\n"
    "OSG::TextureChunk::_sfEnvOperand0RGB, OSG::TextureChunk::_sfEnvOperand1RGB,\n"
    "OSG::TextureChunk::_sfEnvOperand2RGB,\n"
    "OSG::TextureChunk::_sfEnvCombineAlpha,   OSG::TextureChunk::_sfEnvScaleAlpha,\n"
    "OSG::TextureChunk::_sfEnvSource0Alpha, OSG::TextureChunk::_sfEnvSource1Alpha,\n"
    "OSG::TextureChunk::_sfEnvSource2Alpha, OSG::TextureChunk::_sfEnvOperand0Alpha,\n"
    "OSG::TextureChunk::_sfEnvOperand1Alpha,\n"
    "OSG::TextureChunk::_sfEnvOperand2Alpha). It is possible to enable the point\n"
    "sprite coordinate replacement  (OSG::TextureChunk::_sfPointSprite), see \\ref\n"
    "PageSystemPointChunk for details. The two parameters\n"
    "OSG::TextureChunk::_sfScale and OSG::TextureChunk::_sfFrame specify details\n"
    "about the texture.\n"
    "\n"
    "On hardware that supports it (i.e. NVidia boards) the texture shader\n"
    "extension(s) are also available.\n"
    "\n"
    "\\deprecated Use OSG::TextureObjChunk instead.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &TextureChunkBase::getType(void)
{
    return _type;
}

const FieldContainerType &TextureChunkBase::getType(void) const
{
    return _type;
}

UInt32 TextureChunkBase::getContainerSize(void) const
{
    return sizeof(TextureChunk);
}

/*------------------------- decorator get ------------------------------*/


//! Get the TextureChunk::_sfImage field.
const SFUnrecImagePtr *TextureChunkBase::getSFImage(void) const
{
    return &_sfImage;
}

SFUnrecImagePtr     *TextureChunkBase::editSFImage          (void)
{
    editSField(ImageFieldMask);

    return &_sfImage;
}

SFGLenum *TextureChunkBase::editSFInternalFormat(void)
{
    editSField(InternalFormatFieldMask);

    return &_sfInternalFormat;
}

const SFGLenum *TextureChunkBase::getSFInternalFormat(void) const
{
    return &_sfInternalFormat;
}


SFGLenum *TextureChunkBase::editSFExternalFormat(void)
{
    editSField(ExternalFormatFieldMask);

    return &_sfExternalFormat;
}

const SFGLenum *TextureChunkBase::getSFExternalFormat(void) const
{
    return &_sfExternalFormat;
}


SFBool *TextureChunkBase::editSFScale(void)
{
    editSField(ScaleFieldMask);

    return &_sfScale;
}

const SFBool *TextureChunkBase::getSFScale(void) const
{
    return &_sfScale;
}


SFUInt32 *TextureChunkBase::editSFFrame(void)
{
    editSField(FrameFieldMask);

    return &_sfFrame;
}

const SFUInt32 *TextureChunkBase::getSFFrame(void) const
{
    return &_sfFrame;
}


SFGLenum *TextureChunkBase::editSFMinFilter(void)
{
    editSField(MinFilterFieldMask);

    return &_sfMinFilter;
}

const SFGLenum *TextureChunkBase::getSFMinFilter(void) const
{
    return &_sfMinFilter;
}


SFGLenum *TextureChunkBase::editSFMagFilter(void)
{
    editSField(MagFilterFieldMask);

    return &_sfMagFilter;
}

const SFGLenum *TextureChunkBase::getSFMagFilter(void) const
{
    return &_sfMagFilter;
}


SFGLenum *TextureChunkBase::editSFWrapS(void)
{
    editSField(WrapSFieldMask);

    return &_sfWrapS;
}

const SFGLenum *TextureChunkBase::getSFWrapS(void) const
{
    return &_sfWrapS;
}


SFGLenum *TextureChunkBase::editSFWrapT(void)
{
    editSField(WrapTFieldMask);

    return &_sfWrapT;
}

const SFGLenum *TextureChunkBase::getSFWrapT(void) const
{
    return &_sfWrapT;
}


SFGLenum *TextureChunkBase::editSFWrapR(void)
{
    editSField(WrapRFieldMask);

    return &_sfWrapR;
}

const SFGLenum *TextureChunkBase::getSFWrapR(void) const
{
    return &_sfWrapR;
}


SFGLenum *TextureChunkBase::editSFEnvMode(void)
{
    editSField(EnvModeFieldMask);

    return &_sfEnvMode;
}

const SFGLenum *TextureChunkBase::getSFEnvMode(void) const
{
    return &_sfEnvMode;
}


SFColor4f *TextureChunkBase::editSFEnvColor(void)
{
    editSField(EnvColorFieldMask);

    return &_sfEnvColor;
}

const SFColor4f *TextureChunkBase::getSFEnvColor(void) const
{
    return &_sfEnvColor;
}


SFGLenum *TextureChunkBase::editSFEnvCombineRGB(void)
{
    editSField(EnvCombineRGBFieldMask);

    return &_sfEnvCombineRGB;
}

const SFGLenum *TextureChunkBase::getSFEnvCombineRGB(void) const
{
    return &_sfEnvCombineRGB;
}


SFGLenum *TextureChunkBase::editSFEnvCombineAlpha(void)
{
    editSField(EnvCombineAlphaFieldMask);

    return &_sfEnvCombineAlpha;
}

const SFGLenum *TextureChunkBase::getSFEnvCombineAlpha(void) const
{
    return &_sfEnvCombineAlpha;
}


SFReal32 *TextureChunkBase::editSFEnvScaleRGB(void)
{
    editSField(EnvScaleRGBFieldMask);

    return &_sfEnvScaleRGB;
}

const SFReal32 *TextureChunkBase::getSFEnvScaleRGB(void) const
{
    return &_sfEnvScaleRGB;
}


SFReal32 *TextureChunkBase::editSFEnvScaleAlpha(void)
{
    editSField(EnvScaleAlphaFieldMask);

    return &_sfEnvScaleAlpha;
}

const SFReal32 *TextureChunkBase::getSFEnvScaleAlpha(void) const
{
    return &_sfEnvScaleAlpha;
}


SFGLenum *TextureChunkBase::editSFEnvSource0RGB(void)
{
    editSField(EnvSource0RGBFieldMask);

    return &_sfEnvSource0RGB;
}

const SFGLenum *TextureChunkBase::getSFEnvSource0RGB(void) const
{
    return &_sfEnvSource0RGB;
}


SFGLenum *TextureChunkBase::editSFEnvSource1RGB(void)
{
    editSField(EnvSource1RGBFieldMask);

    return &_sfEnvSource1RGB;
}

const SFGLenum *TextureChunkBase::getSFEnvSource1RGB(void) const
{
    return &_sfEnvSource1RGB;
}


SFGLenum *TextureChunkBase::editSFEnvSource2RGB(void)
{
    editSField(EnvSource2RGBFieldMask);

    return &_sfEnvSource2RGB;
}

const SFGLenum *TextureChunkBase::getSFEnvSource2RGB(void) const
{
    return &_sfEnvSource2RGB;
}


SFGLenum *TextureChunkBase::editSFEnvSource0Alpha(void)
{
    editSField(EnvSource0AlphaFieldMask);

    return &_sfEnvSource0Alpha;
}

const SFGLenum *TextureChunkBase::getSFEnvSource0Alpha(void) const
{
    return &_sfEnvSource0Alpha;
}


SFGLenum *TextureChunkBase::editSFEnvSource1Alpha(void)
{
    editSField(EnvSource1AlphaFieldMask);

    return &_sfEnvSource1Alpha;
}

const SFGLenum *TextureChunkBase::getSFEnvSource1Alpha(void) const
{
    return &_sfEnvSource1Alpha;
}


SFGLenum *TextureChunkBase::editSFEnvSource2Alpha(void)
{
    editSField(EnvSource2AlphaFieldMask);

    return &_sfEnvSource2Alpha;
}

const SFGLenum *TextureChunkBase::getSFEnvSource2Alpha(void) const
{
    return &_sfEnvSource2Alpha;
}


SFGLenum *TextureChunkBase::editSFEnvOperand0RGB(void)
{
    editSField(EnvOperand0RGBFieldMask);

    return &_sfEnvOperand0RGB;
}

const SFGLenum *TextureChunkBase::getSFEnvOperand0RGB(void) const
{
    return &_sfEnvOperand0RGB;
}


SFGLenum *TextureChunkBase::editSFEnvOperand1RGB(void)
{
    editSField(EnvOperand1RGBFieldMask);

    return &_sfEnvOperand1RGB;
}

const SFGLenum *TextureChunkBase::getSFEnvOperand1RGB(void) const
{
    return &_sfEnvOperand1RGB;
}


SFGLenum *TextureChunkBase::editSFEnvOperand2RGB(void)
{
    editSField(EnvOperand2RGBFieldMask);

    return &_sfEnvOperand2RGB;
}

const SFGLenum *TextureChunkBase::getSFEnvOperand2RGB(void) const
{
    return &_sfEnvOperand2RGB;
}


SFGLenum *TextureChunkBase::editSFEnvOperand0Alpha(void)
{
    editSField(EnvOperand0AlphaFieldMask);

    return &_sfEnvOperand0Alpha;
}

const SFGLenum *TextureChunkBase::getSFEnvOperand0Alpha(void) const
{
    return &_sfEnvOperand0Alpha;
}


SFGLenum *TextureChunkBase::editSFEnvOperand1Alpha(void)
{
    editSField(EnvOperand1AlphaFieldMask);

    return &_sfEnvOperand1Alpha;
}

const SFGLenum *TextureChunkBase::getSFEnvOperand1Alpha(void) const
{
    return &_sfEnvOperand1Alpha;
}


SFGLenum *TextureChunkBase::editSFEnvOperand2Alpha(void)
{
    editSField(EnvOperand2AlphaFieldMask);

    return &_sfEnvOperand2Alpha;
}

const SFGLenum *TextureChunkBase::getSFEnvOperand2Alpha(void) const
{
    return &_sfEnvOperand2Alpha;
}


SFGLenum *TextureChunkBase::editSFGLId(void)
{
    editSField(GLIdFieldMask);

    return &_sfGLId;
}

const SFGLenum *TextureChunkBase::getSFGLId(void) const
{
    return &_sfGLId;
}


SFInt32 *TextureChunkBase::editSFIgnoreGLForAspect(void)
{
    editSField(IgnoreGLForAspectFieldMask);

    return &_sfIgnoreGLForAspect;
}

const SFInt32 *TextureChunkBase::getSFIgnoreGLForAspect(void) const
{
    return &_sfIgnoreGLForAspect;
}


SFBool *TextureChunkBase::editSFPointSprite(void)
{
    editSField(PointSpriteFieldMask);

    return &_sfPointSprite;
}

const SFBool *TextureChunkBase::getSFPointSprite(void) const
{
    return &_sfPointSprite;
}


SFReal32 *TextureChunkBase::editSFPriority(void)
{
    editSField(PriorityFieldMask);

    return &_sfPriority;
}

const SFReal32 *TextureChunkBase::getSFPriority(void) const
{
    return &_sfPriority;
}


SFGLenum *TextureChunkBase::editSFShaderOperation(void)
{
    editSField(ShaderOperationFieldMask);

    return &_sfShaderOperation;
}

const SFGLenum *TextureChunkBase::getSFShaderOperation(void) const
{
    return &_sfShaderOperation;
}


SFGLenum *TextureChunkBase::editSFShaderInput(void)
{
    editSField(ShaderInputFieldMask);

    return &_sfShaderInput;
}

const SFGLenum *TextureChunkBase::getSFShaderInput(void) const
{
    return &_sfShaderInput;
}


MFReal32 *TextureChunkBase::editMFShaderOffsetMatrix(void)
{
    editMField(ShaderOffsetMatrixFieldMask, _mfShaderOffsetMatrix);

    return &_mfShaderOffsetMatrix;
}

const MFReal32 *TextureChunkBase::getMFShaderOffsetMatrix(void) const
{
    return &_mfShaderOffsetMatrix;
}


SFReal32 *TextureChunkBase::editSFShaderOffsetScale(void)
{
    editSField(ShaderOffsetScaleFieldMask);

    return &_sfShaderOffsetScale;
}

const SFReal32 *TextureChunkBase::getSFShaderOffsetScale(void) const
{
    return &_sfShaderOffsetScale;
}


SFReal32 *TextureChunkBase::editSFShaderOffsetBias(void)
{
    editSField(ShaderOffsetBiasFieldMask);

    return &_sfShaderOffsetBias;
}

const SFReal32 *TextureChunkBase::getSFShaderOffsetBias(void) const
{
    return &_sfShaderOffsetBias;
}


SFGLenum *TextureChunkBase::editSFShaderRGBADotProduct(void)
{
    editSField(ShaderRGBADotProductFieldMask);

    return &_sfShaderRGBADotProduct;
}

const SFGLenum *TextureChunkBase::getSFShaderRGBADotProduct(void) const
{
    return &_sfShaderRGBADotProduct;
}


SFUInt8 *TextureChunkBase::editSFShaderCullModes(void)
{
    editSField(ShaderCullModesFieldMask);

    return &_sfShaderCullModes;
}

const SFUInt8 *TextureChunkBase::getSFShaderCullModes(void) const
{
    return &_sfShaderCullModes;
}


SFVec3f *TextureChunkBase::editSFShaderConstEye(void)
{
    editSField(ShaderConstEyeFieldMask);

    return &_sfShaderConstEye;
}

const SFVec3f *TextureChunkBase::getSFShaderConstEye(void) const
{
    return &_sfShaderConstEye;
}


SFReal32 *TextureChunkBase::editSFLodBias(void)
{
    editSField(LodBiasFieldMask);

    return &_sfLodBias;
}

const SFReal32 *TextureChunkBase::getSFLodBias(void) const
{
    return &_sfLodBias;
}


SFInt32 *TextureChunkBase::editSFDirtyLeft(void)
{
    editSField(DirtyLeftFieldMask);

    return &_sfDirtyLeft;
}

const SFInt32 *TextureChunkBase::getSFDirtyLeft(void) const
{
    return &_sfDirtyLeft;
}


SFInt32 *TextureChunkBase::editSFDirtyMinX(void)
{
    editSField(DirtyMinXFieldMask);

    return &_sfDirtyMinX;
}

const SFInt32 *TextureChunkBase::getSFDirtyMinX(void) const
{
    return &_sfDirtyMinX;
}


SFInt32 *TextureChunkBase::editSFDirtyMaxX(void)
{
    editSField(DirtyMaxXFieldMask);

    return &_sfDirtyMaxX;
}

const SFInt32 *TextureChunkBase::getSFDirtyMaxX(void) const
{
    return &_sfDirtyMaxX;
}


SFInt32 *TextureChunkBase::editSFDirtyMinY(void)
{
    editSField(DirtyMinYFieldMask);

    return &_sfDirtyMinY;
}

const SFInt32 *TextureChunkBase::getSFDirtyMinY(void) const
{
    return &_sfDirtyMinY;
}


SFInt32 *TextureChunkBase::editSFDirtyMaxY(void)
{
    editSField(DirtyMaxYFieldMask);

    return &_sfDirtyMaxY;
}

const SFInt32 *TextureChunkBase::getSFDirtyMaxY(void) const
{
    return &_sfDirtyMaxY;
}


SFInt32 *TextureChunkBase::editSFDirtyMinZ(void)
{
    editSField(DirtyMinZFieldMask);

    return &_sfDirtyMinZ;
}

const SFInt32 *TextureChunkBase::getSFDirtyMinZ(void) const
{
    return &_sfDirtyMinZ;
}


SFInt32 *TextureChunkBase::editSFDirtyMaxZ(void)
{
    editSField(DirtyMaxZFieldMask);

    return &_sfDirtyMaxZ;
}

const SFInt32 *TextureChunkBase::getSFDirtyMaxZ(void) const
{
    return &_sfDirtyMaxZ;
}


SFReal32 *TextureChunkBase::editSFAnisotropy(void)
{
    editSField(AnisotropyFieldMask);

    return &_sfAnisotropy;
}

const SFReal32 *TextureChunkBase::getSFAnisotropy(void) const
{
    return &_sfAnisotropy;
}


SFColor4f *TextureChunkBase::editSFBorderColor(void)
{
    editSField(BorderColorFieldMask);

    return &_sfBorderColor;
}

const SFColor4f *TextureChunkBase::getSFBorderColor(void) const
{
    return &_sfBorderColor;
}


SFGLenum *TextureChunkBase::editSFCompareMode(void)
{
    editSField(CompareModeFieldMask);

    return &_sfCompareMode;
}

const SFGLenum *TextureChunkBase::getSFCompareMode(void) const
{
    return &_sfCompareMode;
}


SFGLenum *TextureChunkBase::editSFCompareFunc(void)
{
    editSField(CompareFuncFieldMask);

    return &_sfCompareFunc;
}

const SFGLenum *TextureChunkBase::getSFCompareFunc(void) const
{
    return &_sfCompareFunc;
}


SFGLenum *TextureChunkBase::editSFDepthMode(void)
{
    editSField(DepthModeFieldMask);

    return &_sfDepthMode;
}

const SFGLenum *TextureChunkBase::getSFDepthMode(void) const
{
    return &_sfDepthMode;
}


SFUInt32 *TextureChunkBase::editSFBorderWidth(void)
{
    editSField(BorderWidthFieldMask);

    return &_sfBorderWidth;
}

const SFUInt32 *TextureChunkBase::getSFBorderWidth(void) const
{
    return &_sfBorderWidth;
}


SFUInt32 *TextureChunkBase::editSFNPOTMatrixScale(void)
{
    editSField(NPOTMatrixScaleFieldMask);

    return &_sfNPOTMatrixScale;
}

const SFUInt32 *TextureChunkBase::getSFNPOTMatrixScale(void) const
{
    return &_sfNPOTMatrixScale;
}


SFReal32 *TextureChunkBase::editSFSkipMipMapLevels(void)
{
    editSField(SkipMipMapLevelsFieldMask);

    return &_sfSkipMipMapLevels;
}

const SFReal32 *TextureChunkBase::getSFSkipMipMapLevels(void) const
{
    return &_sfSkipMipMapLevels;
}






/*------------------------------ access -----------------------------------*/

UInt32 TextureChunkBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ImageFieldMask & whichField))
    {
        returnValue += _sfImage.getBinSize();
    }
    if(FieldBits::NoField != (InternalFormatFieldMask & whichField))
    {
        returnValue += _sfInternalFormat.getBinSize();
    }
    if(FieldBits::NoField != (ExternalFormatFieldMask & whichField))
    {
        returnValue += _sfExternalFormat.getBinSize();
    }
    if(FieldBits::NoField != (ScaleFieldMask & whichField))
    {
        returnValue += _sfScale.getBinSize();
    }
    if(FieldBits::NoField != (FrameFieldMask & whichField))
    {
        returnValue += _sfFrame.getBinSize();
    }
    if(FieldBits::NoField != (MinFilterFieldMask & whichField))
    {
        returnValue += _sfMinFilter.getBinSize();
    }
    if(FieldBits::NoField != (MagFilterFieldMask & whichField))
    {
        returnValue += _sfMagFilter.getBinSize();
    }
    if(FieldBits::NoField != (WrapSFieldMask & whichField))
    {
        returnValue += _sfWrapS.getBinSize();
    }
    if(FieldBits::NoField != (WrapTFieldMask & whichField))
    {
        returnValue += _sfWrapT.getBinSize();
    }
    if(FieldBits::NoField != (WrapRFieldMask & whichField))
    {
        returnValue += _sfWrapR.getBinSize();
    }
    if(FieldBits::NoField != (EnvModeFieldMask & whichField))
    {
        returnValue += _sfEnvMode.getBinSize();
    }
    if(FieldBits::NoField != (EnvColorFieldMask & whichField))
    {
        returnValue += _sfEnvColor.getBinSize();
    }
    if(FieldBits::NoField != (EnvCombineRGBFieldMask & whichField))
    {
        returnValue += _sfEnvCombineRGB.getBinSize();
    }
    if(FieldBits::NoField != (EnvCombineAlphaFieldMask & whichField))
    {
        returnValue += _sfEnvCombineAlpha.getBinSize();
    }
    if(FieldBits::NoField != (EnvScaleRGBFieldMask & whichField))
    {
        returnValue += _sfEnvScaleRGB.getBinSize();
    }
    if(FieldBits::NoField != (EnvScaleAlphaFieldMask & whichField))
    {
        returnValue += _sfEnvScaleAlpha.getBinSize();
    }
    if(FieldBits::NoField != (EnvSource0RGBFieldMask & whichField))
    {
        returnValue += _sfEnvSource0RGB.getBinSize();
    }
    if(FieldBits::NoField != (EnvSource1RGBFieldMask & whichField))
    {
        returnValue += _sfEnvSource1RGB.getBinSize();
    }
    if(FieldBits::NoField != (EnvSource2RGBFieldMask & whichField))
    {
        returnValue += _sfEnvSource2RGB.getBinSize();
    }
    if(FieldBits::NoField != (EnvSource0AlphaFieldMask & whichField))
    {
        returnValue += _sfEnvSource0Alpha.getBinSize();
    }
    if(FieldBits::NoField != (EnvSource1AlphaFieldMask & whichField))
    {
        returnValue += _sfEnvSource1Alpha.getBinSize();
    }
    if(FieldBits::NoField != (EnvSource2AlphaFieldMask & whichField))
    {
        returnValue += _sfEnvSource2Alpha.getBinSize();
    }
    if(FieldBits::NoField != (EnvOperand0RGBFieldMask & whichField))
    {
        returnValue += _sfEnvOperand0RGB.getBinSize();
    }
    if(FieldBits::NoField != (EnvOperand1RGBFieldMask & whichField))
    {
        returnValue += _sfEnvOperand1RGB.getBinSize();
    }
    if(FieldBits::NoField != (EnvOperand2RGBFieldMask & whichField))
    {
        returnValue += _sfEnvOperand2RGB.getBinSize();
    }
    if(FieldBits::NoField != (EnvOperand0AlphaFieldMask & whichField))
    {
        returnValue += _sfEnvOperand0Alpha.getBinSize();
    }
    if(FieldBits::NoField != (EnvOperand1AlphaFieldMask & whichField))
    {
        returnValue += _sfEnvOperand1Alpha.getBinSize();
    }
    if(FieldBits::NoField != (EnvOperand2AlphaFieldMask & whichField))
    {
        returnValue += _sfEnvOperand2Alpha.getBinSize();
    }
    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        returnValue += _sfGLId.getBinSize();
    }
    if(FieldBits::NoField != (IgnoreGLForAspectFieldMask & whichField))
    {
        returnValue += _sfIgnoreGLForAspect.getBinSize();
    }
    if(FieldBits::NoField != (PointSpriteFieldMask & whichField))
    {
        returnValue += _sfPointSprite.getBinSize();
    }
    if(FieldBits::NoField != (PriorityFieldMask & whichField))
    {
        returnValue += _sfPriority.getBinSize();
    }
    if(FieldBits::NoField != (ShaderOperationFieldMask & whichField))
    {
        returnValue += _sfShaderOperation.getBinSize();
    }
    if(FieldBits::NoField != (ShaderInputFieldMask & whichField))
    {
        returnValue += _sfShaderInput.getBinSize();
    }
    if(FieldBits::NoField != (ShaderOffsetMatrixFieldMask & whichField))
    {
        returnValue += _mfShaderOffsetMatrix.getBinSize();
    }
    if(FieldBits::NoField != (ShaderOffsetScaleFieldMask & whichField))
    {
        returnValue += _sfShaderOffsetScale.getBinSize();
    }
    if(FieldBits::NoField != (ShaderOffsetBiasFieldMask & whichField))
    {
        returnValue += _sfShaderOffsetBias.getBinSize();
    }
    if(FieldBits::NoField != (ShaderRGBADotProductFieldMask & whichField))
    {
        returnValue += _sfShaderRGBADotProduct.getBinSize();
    }
    if(FieldBits::NoField != (ShaderCullModesFieldMask & whichField))
    {
        returnValue += _sfShaderCullModes.getBinSize();
    }
    if(FieldBits::NoField != (ShaderConstEyeFieldMask & whichField))
    {
        returnValue += _sfShaderConstEye.getBinSize();
    }
    if(FieldBits::NoField != (LodBiasFieldMask & whichField))
    {
        returnValue += _sfLodBias.getBinSize();
    }
    if(FieldBits::NoField != (DirtyLeftFieldMask & whichField))
    {
        returnValue += _sfDirtyLeft.getBinSize();
    }
    if(FieldBits::NoField != (DirtyMinXFieldMask & whichField))
    {
        returnValue += _sfDirtyMinX.getBinSize();
    }
    if(FieldBits::NoField != (DirtyMaxXFieldMask & whichField))
    {
        returnValue += _sfDirtyMaxX.getBinSize();
    }
    if(FieldBits::NoField != (DirtyMinYFieldMask & whichField))
    {
        returnValue += _sfDirtyMinY.getBinSize();
    }
    if(FieldBits::NoField != (DirtyMaxYFieldMask & whichField))
    {
        returnValue += _sfDirtyMaxY.getBinSize();
    }
    if(FieldBits::NoField != (DirtyMinZFieldMask & whichField))
    {
        returnValue += _sfDirtyMinZ.getBinSize();
    }
    if(FieldBits::NoField != (DirtyMaxZFieldMask & whichField))
    {
        returnValue += _sfDirtyMaxZ.getBinSize();
    }
    if(FieldBits::NoField != (AnisotropyFieldMask & whichField))
    {
        returnValue += _sfAnisotropy.getBinSize();
    }
    if(FieldBits::NoField != (BorderColorFieldMask & whichField))
    {
        returnValue += _sfBorderColor.getBinSize();
    }
    if(FieldBits::NoField != (CompareModeFieldMask & whichField))
    {
        returnValue += _sfCompareMode.getBinSize();
    }
    if(FieldBits::NoField != (CompareFuncFieldMask & whichField))
    {
        returnValue += _sfCompareFunc.getBinSize();
    }
    if(FieldBits::NoField != (DepthModeFieldMask & whichField))
    {
        returnValue += _sfDepthMode.getBinSize();
    }
    if(FieldBits::NoField != (BorderWidthFieldMask & whichField))
    {
        returnValue += _sfBorderWidth.getBinSize();
    }
    if(FieldBits::NoField != (NPOTMatrixScaleFieldMask & whichField))
    {
        returnValue += _sfNPOTMatrixScale.getBinSize();
    }
    if(FieldBits::NoField != (SkipMipMapLevelsFieldMask & whichField))
    {
        returnValue += _sfSkipMipMapLevels.getBinSize();
    }

    return returnValue;
}

void TextureChunkBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ImageFieldMask & whichField))
    {
        _sfImage.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InternalFormatFieldMask & whichField))
    {
        _sfInternalFormat.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ExternalFormatFieldMask & whichField))
    {
        _sfExternalFormat.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ScaleFieldMask & whichField))
    {
        _sfScale.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FrameFieldMask & whichField))
    {
        _sfFrame.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MinFilterFieldMask & whichField))
    {
        _sfMinFilter.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MagFilterFieldMask & whichField))
    {
        _sfMagFilter.copyToBin(pMem);
    }
    if(FieldBits::NoField != (WrapSFieldMask & whichField))
    {
        _sfWrapS.copyToBin(pMem);
    }
    if(FieldBits::NoField != (WrapTFieldMask & whichField))
    {
        _sfWrapT.copyToBin(pMem);
    }
    if(FieldBits::NoField != (WrapRFieldMask & whichField))
    {
        _sfWrapR.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvModeFieldMask & whichField))
    {
        _sfEnvMode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvColorFieldMask & whichField))
    {
        _sfEnvColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvCombineRGBFieldMask & whichField))
    {
        _sfEnvCombineRGB.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvCombineAlphaFieldMask & whichField))
    {
        _sfEnvCombineAlpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvScaleRGBFieldMask & whichField))
    {
        _sfEnvScaleRGB.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvScaleAlphaFieldMask & whichField))
    {
        _sfEnvScaleAlpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource0RGBFieldMask & whichField))
    {
        _sfEnvSource0RGB.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource1RGBFieldMask & whichField))
    {
        _sfEnvSource1RGB.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource2RGBFieldMask & whichField))
    {
        _sfEnvSource2RGB.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource0AlphaFieldMask & whichField))
    {
        _sfEnvSource0Alpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource1AlphaFieldMask & whichField))
    {
        _sfEnvSource1Alpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource2AlphaFieldMask & whichField))
    {
        _sfEnvSource2Alpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand0RGBFieldMask & whichField))
    {
        _sfEnvOperand0RGB.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand1RGBFieldMask & whichField))
    {
        _sfEnvOperand1RGB.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand2RGBFieldMask & whichField))
    {
        _sfEnvOperand2RGB.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand0AlphaFieldMask & whichField))
    {
        _sfEnvOperand0Alpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand1AlphaFieldMask & whichField))
    {
        _sfEnvOperand1Alpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand2AlphaFieldMask & whichField))
    {
        _sfEnvOperand2Alpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        _sfGLId.copyToBin(pMem);
    }
    if(FieldBits::NoField != (IgnoreGLForAspectFieldMask & whichField))
    {
        _sfIgnoreGLForAspect.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PointSpriteFieldMask & whichField))
    {
        _sfPointSprite.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PriorityFieldMask & whichField))
    {
        _sfPriority.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShaderOperationFieldMask & whichField))
    {
        _sfShaderOperation.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShaderInputFieldMask & whichField))
    {
        _sfShaderInput.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShaderOffsetMatrixFieldMask & whichField))
    {
        _mfShaderOffsetMatrix.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShaderOffsetScaleFieldMask & whichField))
    {
        _sfShaderOffsetScale.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShaderOffsetBiasFieldMask & whichField))
    {
        _sfShaderOffsetBias.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShaderRGBADotProductFieldMask & whichField))
    {
        _sfShaderRGBADotProduct.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShaderCullModesFieldMask & whichField))
    {
        _sfShaderCullModes.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ShaderConstEyeFieldMask & whichField))
    {
        _sfShaderConstEye.copyToBin(pMem);
    }
    if(FieldBits::NoField != (LodBiasFieldMask & whichField))
    {
        _sfLodBias.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DirtyLeftFieldMask & whichField))
    {
        _sfDirtyLeft.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMinXFieldMask & whichField))
    {
        _sfDirtyMinX.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMaxXFieldMask & whichField))
    {
        _sfDirtyMaxX.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMinYFieldMask & whichField))
    {
        _sfDirtyMinY.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMaxYFieldMask & whichField))
    {
        _sfDirtyMaxY.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMinZFieldMask & whichField))
    {
        _sfDirtyMinZ.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMaxZFieldMask & whichField))
    {
        _sfDirtyMaxZ.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AnisotropyFieldMask & whichField))
    {
        _sfAnisotropy.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BorderColorFieldMask & whichField))
    {
        _sfBorderColor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CompareModeFieldMask & whichField))
    {
        _sfCompareMode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (CompareFuncFieldMask & whichField))
    {
        _sfCompareFunc.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DepthModeFieldMask & whichField))
    {
        _sfDepthMode.copyToBin(pMem);
    }
    if(FieldBits::NoField != (BorderWidthFieldMask & whichField))
    {
        _sfBorderWidth.copyToBin(pMem);
    }
    if(FieldBits::NoField != (NPOTMatrixScaleFieldMask & whichField))
    {
        _sfNPOTMatrixScale.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SkipMipMapLevelsFieldMask & whichField))
    {
        _sfSkipMipMapLevels.copyToBin(pMem);
    }
}

void TextureChunkBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ImageFieldMask & whichField))
    {
        _sfImage.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InternalFormatFieldMask & whichField))
    {
        _sfInternalFormat.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ExternalFormatFieldMask & whichField))
    {
        _sfExternalFormat.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ScaleFieldMask & whichField))
    {
        _sfScale.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FrameFieldMask & whichField))
    {
        _sfFrame.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MinFilterFieldMask & whichField))
    {
        _sfMinFilter.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MagFilterFieldMask & whichField))
    {
        _sfMagFilter.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (WrapSFieldMask & whichField))
    {
        _sfWrapS.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (WrapTFieldMask & whichField))
    {
        _sfWrapT.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (WrapRFieldMask & whichField))
    {
        _sfWrapR.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvModeFieldMask & whichField))
    {
        _sfEnvMode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvColorFieldMask & whichField))
    {
        _sfEnvColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvCombineRGBFieldMask & whichField))
    {
        _sfEnvCombineRGB.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvCombineAlphaFieldMask & whichField))
    {
        _sfEnvCombineAlpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvScaleRGBFieldMask & whichField))
    {
        _sfEnvScaleRGB.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvScaleAlphaFieldMask & whichField))
    {
        _sfEnvScaleAlpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource0RGBFieldMask & whichField))
    {
        _sfEnvSource0RGB.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource1RGBFieldMask & whichField))
    {
        _sfEnvSource1RGB.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource2RGBFieldMask & whichField))
    {
        _sfEnvSource2RGB.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource0AlphaFieldMask & whichField))
    {
        _sfEnvSource0Alpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource1AlphaFieldMask & whichField))
    {
        _sfEnvSource1Alpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvSource2AlphaFieldMask & whichField))
    {
        _sfEnvSource2Alpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand0RGBFieldMask & whichField))
    {
        _sfEnvOperand0RGB.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand1RGBFieldMask & whichField))
    {
        _sfEnvOperand1RGB.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand2RGBFieldMask & whichField))
    {
        _sfEnvOperand2RGB.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand0AlphaFieldMask & whichField))
    {
        _sfEnvOperand0Alpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand1AlphaFieldMask & whichField))
    {
        _sfEnvOperand1Alpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnvOperand2AlphaFieldMask & whichField))
    {
        _sfEnvOperand2Alpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GLIdFieldMask & whichField))
    {
        _sfGLId.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (IgnoreGLForAspectFieldMask & whichField))
    {
        _sfIgnoreGLForAspect.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PointSpriteFieldMask & whichField))
    {
        _sfPointSprite.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PriorityFieldMask & whichField))
    {
        _sfPriority.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShaderOperationFieldMask & whichField))
    {
        _sfShaderOperation.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShaderInputFieldMask & whichField))
    {
        _sfShaderInput.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShaderOffsetMatrixFieldMask & whichField))
    {
        _mfShaderOffsetMatrix.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShaderOffsetScaleFieldMask & whichField))
    {
        _sfShaderOffsetScale.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShaderOffsetBiasFieldMask & whichField))
    {
        _sfShaderOffsetBias.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShaderRGBADotProductFieldMask & whichField))
    {
        _sfShaderRGBADotProduct.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShaderCullModesFieldMask & whichField))
    {
        _sfShaderCullModes.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ShaderConstEyeFieldMask & whichField))
    {
        _sfShaderConstEye.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (LodBiasFieldMask & whichField))
    {
        _sfLodBias.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DirtyLeftFieldMask & whichField))
    {
        _sfDirtyLeft.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMinXFieldMask & whichField))
    {
        _sfDirtyMinX.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMaxXFieldMask & whichField))
    {
        _sfDirtyMaxX.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMinYFieldMask & whichField))
    {
        _sfDirtyMinY.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMaxYFieldMask & whichField))
    {
        _sfDirtyMaxY.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMinZFieldMask & whichField))
    {
        _sfDirtyMinZ.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DirtyMaxZFieldMask & whichField))
    {
        _sfDirtyMaxZ.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AnisotropyFieldMask & whichField))
    {
        _sfAnisotropy.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BorderColorFieldMask & whichField))
    {
        _sfBorderColor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CompareModeFieldMask & whichField))
    {
        _sfCompareMode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (CompareFuncFieldMask & whichField))
    {
        _sfCompareFunc.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DepthModeFieldMask & whichField))
    {
        _sfDepthMode.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (BorderWidthFieldMask & whichField))
    {
        _sfBorderWidth.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (NPOTMatrixScaleFieldMask & whichField))
    {
        _sfNPOTMatrixScale.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SkipMipMapLevelsFieldMask & whichField))
    {
        _sfSkipMipMapLevels.copyFromBin(pMem);
    }
}

//! create a new instance of the class
TextureChunkTransitPtr TextureChunkBase::create(void)
{
    TextureChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<TextureChunk>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
TextureChunkTransitPtr TextureChunkBase::createLocal(BitVector bFlags)
{
    TextureChunkTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<TextureChunk>(tmpPtr);
    }

    return fc;
}

//! create an empty new instance of the class, do not copy the prototype
TextureChunk *TextureChunkBase::createEmpty(void)
{
    TextureChunk *returnValue;

    newPtr<TextureChunk>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &= 
        ~Thread::getCurrentLocalFlags(); 

    return returnValue;
}

TextureChunk *TextureChunkBase::createEmptyLocal(BitVector bFlags)
{
    TextureChunk *returnValue;

    newPtr<TextureChunk>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr TextureChunkBase::shallowCopy(void) const
{
    TextureChunk *tmpPtr;

    newPtr(tmpPtr, 
           dynamic_cast<const TextureChunk *>(this), 
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}

FieldContainerTransitPtr TextureChunkBase::shallowCopyLocal(
    BitVector bFlags) const
{
    TextureChunk *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const TextureChunk *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

TextureChunkBase::TextureChunkBase(void) :
    Inherited(),
    _sfImage                  (NULL),
    _sfInternalFormat         (GLenum(GL_NONE)),
    _sfExternalFormat         (GLenum(GL_NONE)),
    _sfScale                  (bool(true)),
    _sfFrame                  (UInt32(0)),
    _sfMinFilter              (GLenum(GL_LINEAR_MIPMAP_LINEAR)),
    _sfMagFilter              (GLenum(GL_LINEAR)),
    _sfWrapS                  (GLenum(GL_REPEAT)),
    _sfWrapT                  (GLenum(GL_REPEAT)),
    _sfWrapR                  (GLenum(GL_REPEAT)),
    _sfEnvMode                (GLenum(GL_REPLACE)),
    _sfEnvColor               (Color4f(0,0,0,0)),
    _sfEnvCombineRGB          (GLenum(GL_MODULATE)),
    _sfEnvCombineAlpha        (GLenum(GL_MODULATE)),
    _sfEnvScaleRGB            (Real32(1.0f)),
    _sfEnvScaleAlpha          (Real32(1.0f)),
    _sfEnvSource0RGB          (GLenum(GL_TEXTURE)),
    _sfEnvSource1RGB          (GLenum(GL_PREVIOUS_EXT)),
    _sfEnvSource2RGB          (GLenum(GL_CONSTANT_EXT)),
    _sfEnvSource0Alpha        (GLenum(GL_TEXTURE)),
    _sfEnvSource1Alpha        (GLenum(GL_PREVIOUS_EXT)),
    _sfEnvSource2Alpha        (GLenum(GL_CONSTANT_EXT)),
    _sfEnvOperand0RGB         (GLenum(GL_SRC_COLOR)),
    _sfEnvOperand1RGB         (GLenum(GL_SRC_COLOR)),
    _sfEnvOperand2RGB         (GLenum(GL_SRC_ALPHA)),
    _sfEnvOperand0Alpha       (GLenum(GL_SRC_ALPHA)),
    _sfEnvOperand1Alpha       (GLenum(GL_SRC_ALPHA)),
    _sfEnvOperand2Alpha       (GLenum(GL_SRC_ALPHA)),
    _sfGLId                   (GLenum(0)),
    _sfIgnoreGLForAspect      (Int32(-1)),
    _sfPointSprite            (bool(GL_FALSE)),
    _sfPriority               (Real32(1.f)),
    _sfShaderOperation        (GLenum(GL_NONE)),
    _sfShaderInput            (GLenum(GL_NONE)),
    _mfShaderOffsetMatrix     (),
    _sfShaderOffsetScale      (Real32(1.f)),
    _sfShaderOffsetBias       (Real32(0.f)),
    _sfShaderRGBADotProduct   (GLenum(GL_NONE)),
    _sfShaderCullModes        (UInt8(0)),
    _sfShaderConstEye         (),
    _sfLodBias                (Real32(0.f)),
    _sfDirtyLeft              (Int32(-1)),
    _sfDirtyMinX              (Int32(-1)),
    _sfDirtyMaxX              (Int32(-1)),
    _sfDirtyMinY              (Int32(-1)),
    _sfDirtyMaxY              (Int32(-1)),
    _sfDirtyMinZ              (Int32(-1)),
    _sfDirtyMaxZ              (Int32(-1)),
    _sfAnisotropy             (Real32(1.0f)),
    _sfBorderColor            (Color4f(0,0,0,0)),
    _sfCompareMode            (GLenum(GL_NONE)),
    _sfCompareFunc            (GLenum(GL_LEQUAL)),
    _sfDepthMode              (GLenum(GL_LUMINANCE)),
    _sfBorderWidth            (UInt32(0)),
    _sfNPOTMatrixScale        (UInt32(0)),
    _sfSkipMipMapLevels       (Real32(0))
{
}

TextureChunkBase::TextureChunkBase(const TextureChunkBase &source) :
    Inherited(source),
    _sfImage                  (NULL),
    _sfInternalFormat         (source._sfInternalFormat         ),
    _sfExternalFormat         (source._sfExternalFormat         ),
    _sfScale                  (source._sfScale                  ),
    _sfFrame                  (source._sfFrame                  ),
    _sfMinFilter              (source._sfMinFilter              ),
    _sfMagFilter              (source._sfMagFilter              ),
    _sfWrapS                  (source._sfWrapS                  ),
    _sfWrapT                  (source._sfWrapT                  ),
    _sfWrapR                  (source._sfWrapR                  ),
    _sfEnvMode                (source._sfEnvMode                ),
    _sfEnvColor               (source._sfEnvColor               ),
    _sfEnvCombineRGB          (source._sfEnvCombineRGB          ),
    _sfEnvCombineAlpha        (source._sfEnvCombineAlpha        ),
    _sfEnvScaleRGB            (source._sfEnvScaleRGB            ),
    _sfEnvScaleAlpha          (source._sfEnvScaleAlpha          ),
    _sfEnvSource0RGB          (source._sfEnvSource0RGB          ),
    _sfEnvSource1RGB          (source._sfEnvSource1RGB          ),
    _sfEnvSource2RGB          (source._sfEnvSource2RGB          ),
    _sfEnvSource0Alpha        (source._sfEnvSource0Alpha        ),
    _sfEnvSource1Alpha        (source._sfEnvSource1Alpha        ),
    _sfEnvSource2Alpha        (source._sfEnvSource2Alpha        ),
    _sfEnvOperand0RGB         (source._sfEnvOperand0RGB         ),
    _sfEnvOperand1RGB         (source._sfEnvOperand1RGB         ),
    _sfEnvOperand2RGB         (source._sfEnvOperand2RGB         ),
    _sfEnvOperand0Alpha       (source._sfEnvOperand0Alpha       ),
    _sfEnvOperand1Alpha       (source._sfEnvOperand1Alpha       ),
    _sfEnvOperand2Alpha       (source._sfEnvOperand2Alpha       ),
    _sfGLId                   (source._sfGLId                   ),
    _sfIgnoreGLForAspect      (source._sfIgnoreGLForAspect      ),
    _sfPointSprite            (source._sfPointSprite            ),
    _sfPriority               (source._sfPriority               ),
    _sfShaderOperation        (source._sfShaderOperation        ),
    _sfShaderInput            (source._sfShaderInput            ),
    _mfShaderOffsetMatrix     (source._mfShaderOffsetMatrix     ),
    _sfShaderOffsetScale      (source._sfShaderOffsetScale      ),
    _sfShaderOffsetBias       (source._sfShaderOffsetBias       ),
    _sfShaderRGBADotProduct   (source._sfShaderRGBADotProduct   ),
    _sfShaderCullModes        (source._sfShaderCullModes        ),
    _sfShaderConstEye         (source._sfShaderConstEye         ),
    _sfLodBias                (source._sfLodBias                ),
    _sfDirtyLeft              (source._sfDirtyLeft              ),
    _sfDirtyMinX              (source._sfDirtyMinX              ),
    _sfDirtyMaxX              (source._sfDirtyMaxX              ),
    _sfDirtyMinY              (source._sfDirtyMinY              ),
    _sfDirtyMaxY              (source._sfDirtyMaxY              ),
    _sfDirtyMinZ              (source._sfDirtyMinZ              ),
    _sfDirtyMaxZ              (source._sfDirtyMaxZ              ),
    _sfAnisotropy             (source._sfAnisotropy             ),
    _sfBorderColor            (source._sfBorderColor            ),
    _sfCompareMode            (source._sfCompareMode            ),
    _sfCompareFunc            (source._sfCompareFunc            ),
    _sfDepthMode              (source._sfDepthMode              ),
    _sfBorderWidth            (source._sfBorderWidth            ),
    _sfNPOTMatrixScale        (source._sfNPOTMatrixScale        ),
    _sfSkipMipMapLevels       (source._sfSkipMipMapLevels       )
{
}


/*-------------------------- destructors ----------------------------------*/

TextureChunkBase::~TextureChunkBase(void)
{
}

void TextureChunkBase::onCreate(const TextureChunk *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        TextureChunk *pThis = static_cast<TextureChunk *>(this);

        pThis->setImage(source->getImage());
    }
}

GetFieldHandlePtr TextureChunkBase::getHandleImage           (void) const
{
    SFUnrecImagePtr::GetHandlePtr returnValue(
        new  SFUnrecImagePtr::GetHandle(
             &_sfImage, 
             this->getType().getFieldDesc(ImageFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleImage          (void)
{
    SFUnrecImagePtr::EditHandlePtr returnValue(
        new  SFUnrecImagePtr::EditHandle(
             &_sfImage, 
             this->getType().getFieldDesc(ImageFieldId)));

    returnValue->setSetMethod(boost::bind(&TextureChunk::setImage, 
                                          static_cast<TextureChunk *>(this), _1));

    editSField(ImageFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleInternalFormat  (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfInternalFormat, 
             this->getType().getFieldDesc(InternalFormatFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleInternalFormat (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfInternalFormat, 
             this->getType().getFieldDesc(InternalFormatFieldId)));

    editSField(InternalFormatFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleExternalFormat  (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfExternalFormat, 
             this->getType().getFieldDesc(ExternalFormatFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleExternalFormat (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfExternalFormat, 
             this->getType().getFieldDesc(ExternalFormatFieldId)));

    editSField(ExternalFormatFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleScale           (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfScale, 
             this->getType().getFieldDesc(ScaleFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleScale          (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfScale, 
             this->getType().getFieldDesc(ScaleFieldId)));

    editSField(ScaleFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleFrame           (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfFrame, 
             this->getType().getFieldDesc(FrameFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleFrame          (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfFrame, 
             this->getType().getFieldDesc(FrameFieldId)));

    editSField(FrameFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleMinFilter       (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfMinFilter, 
             this->getType().getFieldDesc(MinFilterFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleMinFilter      (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfMinFilter, 
             this->getType().getFieldDesc(MinFilterFieldId)));

    editSField(MinFilterFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleMagFilter       (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfMagFilter, 
             this->getType().getFieldDesc(MagFilterFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleMagFilter      (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfMagFilter, 
             this->getType().getFieldDesc(MagFilterFieldId)));

    editSField(MagFilterFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleWrapS           (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfWrapS, 
             this->getType().getFieldDesc(WrapSFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleWrapS          (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfWrapS, 
             this->getType().getFieldDesc(WrapSFieldId)));

    editSField(WrapSFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleWrapT           (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfWrapT, 
             this->getType().getFieldDesc(WrapTFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleWrapT          (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfWrapT, 
             this->getType().getFieldDesc(WrapTFieldId)));

    editSField(WrapTFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleWrapR           (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfWrapR, 
             this->getType().getFieldDesc(WrapRFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleWrapR          (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfWrapR, 
             this->getType().getFieldDesc(WrapRFieldId)));

    editSField(WrapRFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleEnvMode         (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvMode, 
             this->getType().getFieldDesc(EnvModeFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleEnvMode        (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvMode, 
             this->getType().getFieldDesc(EnvModeFieldId)));

    editSField(EnvModeFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleEnvColor        (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfEnvColor, 
             this->getType().getFieldDesc(EnvColorFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleEnvColor       (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfEnvColor, 
             this->getType().getFieldDesc(EnvColorFieldId)));

    editSField(EnvColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleEnvCombineRGB   (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvCombineRGB, 
             this->getType().getFieldDesc(EnvCombineRGBFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleEnvCombineRGB  (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvCombineRGB, 
             this->getType().getFieldDesc(EnvCombineRGBFieldId)));

    editSField(EnvCombineRGBFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleEnvCombineAlpha (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvCombineAlpha, 
             this->getType().getFieldDesc(EnvCombineAlphaFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleEnvCombineAlpha(void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvCombineAlpha, 
             this->getType().getFieldDesc(EnvCombineAlphaFieldId)));

    editSField(EnvCombineAlphaFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleEnvScaleRGB     (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfEnvScaleRGB, 
             this->getType().getFieldDesc(EnvScaleRGBFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleEnvScaleRGB    (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfEnvScaleRGB, 
             this->getType().getFieldDesc(EnvScaleRGBFieldId)));

    editSField(EnvScaleRGBFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleEnvScaleAlpha   (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfEnvScaleAlpha, 
             this->getType().getFieldDesc(EnvScaleAlphaFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleEnvScaleAlpha  (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfEnvScaleAlpha, 
             this->getType().getFieldDesc(EnvScaleAlphaFieldId)));

    editSField(EnvScaleAlphaFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleEnvSource0RGB   (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvSource0RGB, 
             this->getType().getFieldDesc(EnvSource0RGBFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleEnvSource0RGB  (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvSource0RGB, 
             this->getType().getFieldDesc(EnvSource0RGBFieldId)));

    editSField(EnvSource0RGBFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleEnvSource1RGB   (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvSource1RGB, 
             this->getType().getFieldDesc(EnvSource1RGBFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleEnvSource1RGB  (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvSource1RGB, 
             this->getType().getFieldDesc(EnvSource1RGBFieldId)));

    editSField(EnvSource1RGBFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleEnvSource2RGB   (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvSource2RGB, 
             this->getType().getFieldDesc(EnvSource2RGBFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleEnvSource2RGB  (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvSource2RGB, 
             this->getType().getFieldDesc(EnvSource2RGBFieldId)));

    editSField(EnvSource2RGBFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleEnvSource0Alpha (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvSource0Alpha, 
             this->getType().getFieldDesc(EnvSource0AlphaFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleEnvSource0Alpha(void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvSource0Alpha, 
             this->getType().getFieldDesc(EnvSource0AlphaFieldId)));

    editSField(EnvSource0AlphaFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleEnvSource1Alpha (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvSource1Alpha, 
             this->getType().getFieldDesc(EnvSource1AlphaFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleEnvSource1Alpha(void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvSource1Alpha, 
             this->getType().getFieldDesc(EnvSource1AlphaFieldId)));

    editSField(EnvSource1AlphaFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleEnvSource2Alpha (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvSource2Alpha, 
             this->getType().getFieldDesc(EnvSource2AlphaFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleEnvSource2Alpha(void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvSource2Alpha, 
             this->getType().getFieldDesc(EnvSource2AlphaFieldId)));

    editSField(EnvSource2AlphaFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleEnvOperand0RGB  (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvOperand0RGB, 
             this->getType().getFieldDesc(EnvOperand0RGBFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleEnvOperand0RGB (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvOperand0RGB, 
             this->getType().getFieldDesc(EnvOperand0RGBFieldId)));

    editSField(EnvOperand0RGBFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleEnvOperand1RGB  (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvOperand1RGB, 
             this->getType().getFieldDesc(EnvOperand1RGBFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleEnvOperand1RGB (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvOperand1RGB, 
             this->getType().getFieldDesc(EnvOperand1RGBFieldId)));

    editSField(EnvOperand1RGBFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleEnvOperand2RGB  (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvOperand2RGB, 
             this->getType().getFieldDesc(EnvOperand2RGBFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleEnvOperand2RGB (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvOperand2RGB, 
             this->getType().getFieldDesc(EnvOperand2RGBFieldId)));

    editSField(EnvOperand2RGBFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleEnvOperand0Alpha (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvOperand0Alpha, 
             this->getType().getFieldDesc(EnvOperand0AlphaFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleEnvOperand0Alpha(void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvOperand0Alpha, 
             this->getType().getFieldDesc(EnvOperand0AlphaFieldId)));

    editSField(EnvOperand0AlphaFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleEnvOperand1Alpha (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvOperand1Alpha, 
             this->getType().getFieldDesc(EnvOperand1AlphaFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleEnvOperand1Alpha(void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvOperand1Alpha, 
             this->getType().getFieldDesc(EnvOperand1AlphaFieldId)));

    editSField(EnvOperand1AlphaFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleEnvOperand2Alpha (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfEnvOperand2Alpha, 
             this->getType().getFieldDesc(EnvOperand2AlphaFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleEnvOperand2Alpha(void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfEnvOperand2Alpha, 
             this->getType().getFieldDesc(EnvOperand2AlphaFieldId)));

    editSField(EnvOperand2AlphaFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleGLId            (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfGLId, 
             this->getType().getFieldDesc(GLIdFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleGLId           (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfGLId, 
             this->getType().getFieldDesc(GLIdFieldId)));

    editSField(GLIdFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleIgnoreGLForAspect (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfIgnoreGLForAspect, 
             this->getType().getFieldDesc(IgnoreGLForAspectFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleIgnoreGLForAspect(void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfIgnoreGLForAspect, 
             this->getType().getFieldDesc(IgnoreGLForAspectFieldId)));

    editSField(IgnoreGLForAspectFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandlePointSprite     (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfPointSprite, 
             this->getType().getFieldDesc(PointSpriteFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandlePointSprite    (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfPointSprite, 
             this->getType().getFieldDesc(PointSpriteFieldId)));

    editSField(PointSpriteFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandlePriority        (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfPriority, 
             this->getType().getFieldDesc(PriorityFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandlePriority       (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfPriority, 
             this->getType().getFieldDesc(PriorityFieldId)));

    editSField(PriorityFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleShaderOperation (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfShaderOperation, 
             this->getType().getFieldDesc(ShaderOperationFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleShaderOperation(void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfShaderOperation, 
             this->getType().getFieldDesc(ShaderOperationFieldId)));

    editSField(ShaderOperationFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleShaderInput     (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfShaderInput, 
             this->getType().getFieldDesc(ShaderInputFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleShaderInput    (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfShaderInput, 
             this->getType().getFieldDesc(ShaderInputFieldId)));

    editSField(ShaderInputFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleShaderOffsetMatrix (void) const
{
    MFReal32::GetHandlePtr returnValue(
        new  MFReal32::GetHandle(
             &_mfShaderOffsetMatrix, 
             this->getType().getFieldDesc(ShaderOffsetMatrixFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleShaderOffsetMatrix(void)
{
    MFReal32::EditHandlePtr returnValue(
        new  MFReal32::EditHandle(
             &_mfShaderOffsetMatrix, 
             this->getType().getFieldDesc(ShaderOffsetMatrixFieldId)));

    editMField(ShaderOffsetMatrixFieldMask, _mfShaderOffsetMatrix);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleShaderOffsetScale (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfShaderOffsetScale, 
             this->getType().getFieldDesc(ShaderOffsetScaleFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleShaderOffsetScale(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfShaderOffsetScale, 
             this->getType().getFieldDesc(ShaderOffsetScaleFieldId)));

    editSField(ShaderOffsetScaleFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleShaderOffsetBias (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfShaderOffsetBias, 
             this->getType().getFieldDesc(ShaderOffsetBiasFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleShaderOffsetBias(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfShaderOffsetBias, 
             this->getType().getFieldDesc(ShaderOffsetBiasFieldId)));

    editSField(ShaderOffsetBiasFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleShaderRGBADotProduct (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfShaderRGBADotProduct, 
             this->getType().getFieldDesc(ShaderRGBADotProductFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleShaderRGBADotProduct(void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfShaderRGBADotProduct, 
             this->getType().getFieldDesc(ShaderRGBADotProductFieldId)));

    editSField(ShaderRGBADotProductFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleShaderCullModes (void) const
{
    SFUInt8::GetHandlePtr returnValue(
        new  SFUInt8::GetHandle(
             &_sfShaderCullModes, 
             this->getType().getFieldDesc(ShaderCullModesFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleShaderCullModes(void)
{
    SFUInt8::EditHandlePtr returnValue(
        new  SFUInt8::EditHandle(
             &_sfShaderCullModes, 
             this->getType().getFieldDesc(ShaderCullModesFieldId)));

    editSField(ShaderCullModesFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleShaderConstEye  (void) const
{
    SFVec3f::GetHandlePtr returnValue(
        new  SFVec3f::GetHandle(
             &_sfShaderConstEye, 
             this->getType().getFieldDesc(ShaderConstEyeFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleShaderConstEye (void)
{
    SFVec3f::EditHandlePtr returnValue(
        new  SFVec3f::EditHandle(
             &_sfShaderConstEye, 
             this->getType().getFieldDesc(ShaderConstEyeFieldId)));

    editSField(ShaderConstEyeFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleLodBias         (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfLodBias, 
             this->getType().getFieldDesc(LodBiasFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleLodBias        (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfLodBias, 
             this->getType().getFieldDesc(LodBiasFieldId)));

    editSField(LodBiasFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleDirtyLeft       (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfDirtyLeft, 
             this->getType().getFieldDesc(DirtyLeftFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleDirtyLeft      (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfDirtyLeft, 
             this->getType().getFieldDesc(DirtyLeftFieldId)));

    editSField(DirtyLeftFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleDirtyMinX       (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfDirtyMinX, 
             this->getType().getFieldDesc(DirtyMinXFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleDirtyMinX      (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfDirtyMinX, 
             this->getType().getFieldDesc(DirtyMinXFieldId)));

    editSField(DirtyMinXFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleDirtyMaxX       (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfDirtyMaxX, 
             this->getType().getFieldDesc(DirtyMaxXFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleDirtyMaxX      (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfDirtyMaxX, 
             this->getType().getFieldDesc(DirtyMaxXFieldId)));

    editSField(DirtyMaxXFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleDirtyMinY       (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfDirtyMinY, 
             this->getType().getFieldDesc(DirtyMinYFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleDirtyMinY      (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfDirtyMinY, 
             this->getType().getFieldDesc(DirtyMinYFieldId)));

    editSField(DirtyMinYFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleDirtyMaxY       (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfDirtyMaxY, 
             this->getType().getFieldDesc(DirtyMaxYFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleDirtyMaxY      (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfDirtyMaxY, 
             this->getType().getFieldDesc(DirtyMaxYFieldId)));

    editSField(DirtyMaxYFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleDirtyMinZ       (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfDirtyMinZ, 
             this->getType().getFieldDesc(DirtyMinZFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleDirtyMinZ      (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfDirtyMinZ, 
             this->getType().getFieldDesc(DirtyMinZFieldId)));

    editSField(DirtyMinZFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleDirtyMaxZ       (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfDirtyMaxZ, 
             this->getType().getFieldDesc(DirtyMaxZFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleDirtyMaxZ      (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfDirtyMaxZ, 
             this->getType().getFieldDesc(DirtyMaxZFieldId)));

    editSField(DirtyMaxZFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleAnisotropy      (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfAnisotropy, 
             this->getType().getFieldDesc(AnisotropyFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleAnisotropy     (void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfAnisotropy, 
             this->getType().getFieldDesc(AnisotropyFieldId)));

    editSField(AnisotropyFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleBorderColor     (void) const
{
    SFColor4f::GetHandlePtr returnValue(
        new  SFColor4f::GetHandle(
             &_sfBorderColor, 
             this->getType().getFieldDesc(BorderColorFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleBorderColor    (void)
{
    SFColor4f::EditHandlePtr returnValue(
        new  SFColor4f::EditHandle(
             &_sfBorderColor, 
             this->getType().getFieldDesc(BorderColorFieldId)));

    editSField(BorderColorFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleCompareMode     (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfCompareMode, 
             this->getType().getFieldDesc(CompareModeFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleCompareMode    (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfCompareMode, 
             this->getType().getFieldDesc(CompareModeFieldId)));

    editSField(CompareModeFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleCompareFunc     (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfCompareFunc, 
             this->getType().getFieldDesc(CompareFuncFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleCompareFunc    (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfCompareFunc, 
             this->getType().getFieldDesc(CompareFuncFieldId)));

    editSField(CompareFuncFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleDepthMode       (void) const
{
    SFGLenum::GetHandlePtr returnValue(
        new  SFGLenum::GetHandle(
             &_sfDepthMode, 
             this->getType().getFieldDesc(DepthModeFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleDepthMode      (void)
{
    SFGLenum::EditHandlePtr returnValue(
        new  SFGLenum::EditHandle(
             &_sfDepthMode, 
             this->getType().getFieldDesc(DepthModeFieldId)));

    editSField(DepthModeFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleBorderWidth     (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfBorderWidth, 
             this->getType().getFieldDesc(BorderWidthFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleBorderWidth    (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfBorderWidth, 
             this->getType().getFieldDesc(BorderWidthFieldId)));

    editSField(BorderWidthFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleNPOTMatrixScale (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfNPOTMatrixScale, 
             this->getType().getFieldDesc(NPOTMatrixScaleFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleNPOTMatrixScale(void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfNPOTMatrixScale, 
             this->getType().getFieldDesc(NPOTMatrixScaleFieldId)));

    editSField(NPOTMatrixScaleFieldMask);

    return returnValue;
}

GetFieldHandlePtr TextureChunkBase::getHandleSkipMipMapLevels (void) const
{
    SFReal32::GetHandlePtr returnValue(
        new  SFReal32::GetHandle(
             &_sfSkipMipMapLevels, 
             this->getType().getFieldDesc(SkipMipMapLevelsFieldId)));

    return returnValue;
}

EditFieldHandlePtr TextureChunkBase::editHandleSkipMipMapLevels(void)
{
    SFReal32::EditHandlePtr returnValue(
        new  SFReal32::EditHandle(
             &_sfSkipMipMapLevels, 
             this->getType().getFieldDesc(SkipMipMapLevelsFieldId)));

    editSField(SkipMipMapLevelsFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void TextureChunkBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<TextureChunkBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *TextureChunkBase::createAspectCopy(void) const
{
    TextureChunk *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const TextureChunk *>(this));

    return returnValue;
}
#endif

void TextureChunkBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<TextureChunk *>(this)->setImage(NULL);

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfShaderOffsetMatrix.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
}


#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<TextureChunk *>::_type("TextureChunkPtr", "TextureBaseChunkPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(TextureChunk *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField, 
                           TextureChunk *, 
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField, 
                           TextureChunk *, 
                           0);

OSG_END_NAMESPACE
