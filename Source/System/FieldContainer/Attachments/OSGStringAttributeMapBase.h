/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class StringAttributeMap
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGSTRINGATTRIBUTEMAPBASE_H_
#define _OSGSTRINGATTRIBUTEMAPBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGSystemDef.h"

#include "OSGBaseTypes.h"

#include "OSGFieldContainerAttachment.h" // Parent

#include "OSGStringFields.h" // Keys type
#include "OSGStringFields.h" // Values type

#include "OSGStringAttributeMapFields.h"

OSG_BEGIN_NAMESPACE

class StringAttributeMap;

//! \brief StringAttributeMap Base Class.

class OSG_SYSTEM_DLLMAPPING StringAttributeMapBase : public FieldContainerAttachment
{
  public:

    typedef FieldContainerAttachment Inherited;
    typedef FieldContainerAttachment ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(StringAttributeMap);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        KeysFieldId = Inherited::NextFieldId,
        ValuesFieldId = KeysFieldId + 1,
        NextFieldId = ValuesFieldId + 1
    };

    static const OSG::BitVector KeysFieldMask =
        (TypeTraits<BitVector>::One << KeysFieldId);
    static const OSG::BitVector ValuesFieldMask =
        (TypeTraits<BitVector>::One << ValuesFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  StringAttributeMapPtr create     (void);
    static  StringAttributeMapPtr createEmpty(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr shallowCopy(void) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static void   classDescInserter(TypeObject &oType);
    static Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    MFString          _mfKeys;
    MFString          _mfValues;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    StringAttributeMapBase(void);
    StringAttributeMapBase(const StringAttributeMapBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~StringAttributeMapBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


#ifdef OSG_1_GET_COMPAT
                  MFString            *getMFKeys            (void);
#endif
                  MFString            *editMFKeys           (void);
            const MFString            *getMFKeys            (void) const;

#ifdef OSG_1_GET_COMPAT
                  MFString            *getMFValues          (void);
#endif
                  MFString            *editMFValues         (void);
            const MFString            *getMFValues          (void) const;


#ifdef OSG_1_GET_COMPAT
                  std::string         &getKeys            (const UInt32 index);
                  MFString            &getKeys           (void);
#endif
                  std::string         &editKeys           (const UInt32 index);
            const std::string         &getKeys            (const UInt32 index) const;
                  MFString            &editKeys           (void);
            const MFString            &getKeys            (void) const;

#ifdef OSG_1_GET_COMPAT
                  std::string         &getValues          (const UInt32 index);
                  MFString            &getValues         (void);
#endif
                  std::string         &editValues         (const UInt32 index);
            const std::string         &getValues          (const UInt32 index) const;
                  MFString            &editValues         (void);
            const MFString            &getValues          (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */


    void pushToKeys                (const std::string& value   );
    void insertIntoKeys       (UInt32                uiIndex,
                                             const std::string& value   );
    void replaceInKeys    (UInt32                uiIndex,
                                             const std::string& value   );
    void replaceInKeys   (const std::string& pOldElem,
                                             const std::string& pNewElem);
    void removeFromKeys  (UInt32                uiIndex );
    void removeFromKeys (const std::string& value   );
    void clearKeys                  (void                          );



    void pushToValues              (const std::string& value   );
    void insertIntoValues      (UInt32                uiIndex,
                                             const std::string& value   );
    void replaceInValues  (UInt32                uiIndex,
                                             const std::string& value   );
    void replaceInValues (const std::string& pOldElem,
                                             const std::string& pNewElem);
    void removeFromValues (UInt32                uiIndex );
    void removeFromValues(const std::string& value   );
    void clearValues                (void                          );



    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      StringAttributeMapBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainerPtr createAspectCopy(void) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const StringAttributeMapBase &source);
};

typedef StringAttributeMapBase *StringAttributeMapBaseP;

/** Type specific RefPtr type for StringAttributeMap. */
typedef RefPtr<StringAttributeMapPtr> StringAttributeMapRefPtr;

typedef boost::mpl::if_<
    boost::mpl::bool_<StringAttributeMapBase::isNodeCore>,
    CoredNodePtr<StringAttributeMap>,
    FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC>::type

        StringAttributeMapNodePtr;

OSG_END_NAMESPACE

#endif /* _OSGSTRINGATTRIBUTEMAPBASE_H_ */
