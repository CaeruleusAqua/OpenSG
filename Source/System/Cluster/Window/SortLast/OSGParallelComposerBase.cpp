/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ParallelComposer!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEPARALLELCOMPOSERINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>




#include "OSGParallelComposerBase.h"
#include "OSGParallelComposer.h"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ParallelComposer
    
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var bool            ParallelComposerBase::_sfShort
    
*/

/*! \var bool            ParallelComposerBase::_sfAlpha
    
*/

/*! \var std::string     ParallelComposerBase::_sfPcLibPath
    
*/


void ParallelComposerBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


#ifdef OSG_1_GET_COMPAT
    typedef const SFBool *(ParallelComposerBase::*GetSFShortF)(void) const;

    GetSFShortF GetSFShort = &ParallelComposerBase::getSFShort;
#endif

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "short",
        "",
        ShortFieldId, ShortFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&ParallelComposerBase::editSFShort),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFShort));
#else
        reinterpret_cast<FieldGetMethodSig >(&ParallelComposerBase::getSFShort));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFBool *(ParallelComposerBase::*GetSFAlphaF)(void) const;

    GetSFAlphaF GetSFAlpha = &ParallelComposerBase::getSFAlpha;
#endif

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "alpha",
        "",
        AlphaFieldId, AlphaFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&ParallelComposerBase::editSFAlpha),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFAlpha));
#else
        reinterpret_cast<FieldGetMethodSig >(&ParallelComposerBase::getSFAlpha));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFString *(ParallelComposerBase::*GetSFPcLibPathF)(void) const;

    GetSFPcLibPathF GetSFPcLibPath = &ParallelComposerBase::getSFPcLibPath;
#endif

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "pcLibPath",
        "",
        PcLibPathFieldId, PcLibPathFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&ParallelComposerBase::editSFPcLibPath),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFPcLibPath));
#else
        reinterpret_cast<FieldGetMethodSig >(&ParallelComposerBase::getSFPcLibPath));
#endif

    oType.addInitialDesc(pDesc);
}


ParallelComposerBase::TypeObject ParallelComposerBase::_type(
    ParallelComposerBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &ParallelComposerBase::createEmpty,
    ParallelComposer::initMethod,
    (InitalInsertDescFunc) &ParallelComposerBase::classDescInserter,
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"ParallelComposer\"\n"
    "\tparent=\"ImageComposer\"\n"
    "\tlibrary=\"Cluster\"\n"
    "\tpointerfieldtypes=\"none\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"false\"\n"
    ">\n"
    "    <Field\n"
    "        name=\"short\"\n"
    "        type=\"bool\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"true\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"alpha\"\n"
    "        type=\"bool\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        defaultValue=\"false\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"pcLibPath\"\n"
    "        type=\"std::string\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "\tdefaultValye=\"\"\n"
    "    >\n"
    "    </Field>        \n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ParallelComposerBase::getType(void)
{
    return _type;
}

const FieldContainerType &ParallelComposerBase::getType(void) const
{
    return _type;
}

UInt32 ParallelComposerBase::getContainerSize(void) const
{
    return sizeof(ParallelComposer);
}

/*------------------------- decorator get ------------------------------*/


SFBool *ParallelComposerBase::editSFShort(void)
{
    editSField(ShortFieldMask);

    return &_sfShort;
}

const SFBool *ParallelComposerBase::getSFShort(void) const
{
    return &_sfShort;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *ParallelComposerBase::getSFShort          (void)
{
    return this->editSFShort          ();
}
#endif

SFBool *ParallelComposerBase::editSFAlpha(void)
{
    editSField(AlphaFieldMask);

    return &_sfAlpha;
}

const SFBool *ParallelComposerBase::getSFAlpha(void) const
{
    return &_sfAlpha;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *ParallelComposerBase::getSFAlpha          (void)
{
    return this->editSFAlpha          ();
}
#endif

SFString *ParallelComposerBase::editSFPcLibPath(void)
{
    editSField(PcLibPathFieldMask);

    return &_sfPcLibPath;
}

const SFString *ParallelComposerBase::getSFPcLibPath(void) const
{
    return &_sfPcLibPath;
}

#ifdef OSG_1_GET_COMPAT
SFString            *ParallelComposerBase::getSFPcLibPath      (void)
{
    return this->editSFPcLibPath      ();
}
#endif





/*------------------------------ access -----------------------------------*/

UInt32 ParallelComposerBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ShortFieldMask & whichField))
    {
        returnValue += _sfShort.getBinSize();
    }
    if(FieldBits::NoField != (AlphaFieldMask & whichField))
    {
        returnValue += _sfAlpha.getBinSize();
    }
    if(FieldBits::NoField != (PcLibPathFieldMask & whichField))
    {
        returnValue += _sfPcLibPath.getBinSize();
    }

    return returnValue;
}

void ParallelComposerBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ShortFieldMask & whichField))
    {
        _sfShort.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AlphaFieldMask & whichField))
    {
        _sfAlpha.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PcLibPathFieldMask & whichField))
    {
        _sfPcLibPath.copyToBin(pMem);
    }
}

void ParallelComposerBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ShortFieldMask & whichField))
    {
        _sfShort.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AlphaFieldMask & whichField))
    {
        _sfAlpha.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PcLibPathFieldMask & whichField))
    {
        _sfPcLibPath.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ParallelComposerPtr ParallelComposerBase::create(void)
{
    ParallelComposerPtr fc;

    if(getClassType().getPrototype() != NullFC)
    {
        fc = dynamic_cast<ParallelComposer::ObjPtr>(
            getClassType().getPrototype()-> shallowCopy());
    }

    return fc;
}

//! create an empty new instance of the class, do not copy the prototype
ParallelComposerPtr ParallelComposerBase::createEmpty(void)
{
    ParallelComposerPtr returnValue;

    newPtr<ParallelComposer>(returnValue);

    return returnValue;
}

FieldContainerPtr ParallelComposerBase::shallowCopy(void) const
{
    ParallelComposerPtr returnValue;

    newPtr(returnValue, dynamic_cast<const ParallelComposer *>(this));

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

ParallelComposerBase::ParallelComposerBase(void) :
    Inherited(),
    _sfShort                  (bool(true)),
    _sfAlpha                  (bool(false)),
    _sfPcLibPath              ()
{
}

ParallelComposerBase::ParallelComposerBase(const ParallelComposerBase &source) :
    Inherited(source),
    _sfShort                  (source._sfShort                  ),
    _sfAlpha                  (source._sfAlpha                  ),
    _sfPcLibPath              (source._sfPcLibPath              )
{
}


/*-------------------------- destructors ----------------------------------*/

ParallelComposerBase::~ParallelComposerBase(void)
{
}


#ifdef OSG_MT_CPTR_ASPECT
void ParallelComposerBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<ParallelComposerBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr ParallelComposerBase::createAspectCopy(void) const
{
    ParallelComposerPtr returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const ParallelComposer *>(this));

    return returnValue;
}
#endif

void ParallelComposerBase::resolveLinks(void)
{
    Inherited::resolveLinks();


}


#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<ParallelComposerPtr>::_type("ParallelComposerPtr", "ImageComposerPtr");
#endif


OSG_END_NAMESPACE
