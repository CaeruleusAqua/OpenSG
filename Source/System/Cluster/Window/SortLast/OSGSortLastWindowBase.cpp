/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SortLastWindow!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILESORTLASTWINDOWINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>



#include <OSGNode.h> // GroupNodes Class

#include "OSGSortLastWindowBase.h"
#include "OSGSortLastWindow.h"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::SortLastWindow
    Cluster rendering configuration for sort first image composition
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var NodePtr         SortLastWindowBase::_mfGroupNodes
    
*/

/*! \var UInt32          SortLastWindowBase::_mfGroupLengths
    
*/

/*! \var bool            SortLastWindowBase::_sfGroupsChanged
    
*/


void SortLastWindowBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFNodePtr::Description(
        MFNodePtr::getClassType(),
        "groupNodes",
        "",
        GroupNodesFieldId, GroupNodesFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&SortLastWindowBase::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&SortLastWindowBase::getMFGroupNodes));

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const MFUInt32 *(SortLastWindowBase::*GetMFGroupLengthsF)(void) const;

    GetMFGroupLengthsF GetMFGroupLengths = &SortLastWindowBase::getMFGroupLengths;
#endif

    pDesc = new MFUInt32::Description(
        MFUInt32::getClassType(),
        "groupLengths",
        "",
        GroupLengthsFieldId, GroupLengthsFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&SortLastWindowBase::editMFGroupLengths),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFGroupLengths));
#else
        reinterpret_cast<FieldGetMethodSig >(&SortLastWindowBase::getMFGroupLengths));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFBool *(SortLastWindowBase::*GetSFGroupsChangedF)(void) const;

    GetSFGroupsChangedF GetSFGroupsChanged = &SortLastWindowBase::getSFGroupsChanged;
#endif

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "groupsChanged",
        "",
        GroupsChangedFieldId, GroupsChangedFieldMask,
        true,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&SortLastWindowBase::editSFGroupsChanged),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFGroupsChanged));
#else
        reinterpret_cast<FieldGetMethodSig >(&SortLastWindowBase::getSFGroupsChanged));
#endif

    oType.addInitialDesc(pDesc);
}


SortLastWindowBase::TypeObject SortLastWindowBase::_type(
    SortLastWindowBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &SortLastWindowBase::createEmpty,
    SortLastWindow::initMethod,
    (InitalInsertDescFunc) &SortLastWindowBase::classDescInserter,
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"SortLastWindow\"\n"
    "\tparent=\"ClusterWindow\"\n"
    "\tlibrary=\"Cluster\"\n"
    "\tpointerfieldtypes=\"none\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"false\"\n"
    ">\n"
    "Cluster rendering configuration for sort first image composition\n"
    "\t<Field\n"
    "\t\tname=\"groupNodes\"\n"
    "\t\ttype=\"NodePtr\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"groupLengths\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"groupsChanged\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    "Cluster rendering configuration for sort first image composition\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &SortLastWindowBase::getType(void)
{
    return _type;
}

const FieldContainerType &SortLastWindowBase::getType(void) const
{
    return _type;
}

UInt32 SortLastWindowBase::getContainerSize(void) const
{
    return sizeof(SortLastWindow);
}

/*------------------------- decorator get ------------------------------*/


//! Get the SortLastWindow::_mfGroupNodes field.
const MFNodePtr *SortLastWindowBase::getMFGroupNodes(void) const
{
    return &_mfGroupNodes;
}

MFUInt32 *SortLastWindowBase::editMFGroupLengths(void)
{
    editMField(GroupLengthsFieldMask, _mfGroupLengths);

    return &_mfGroupLengths;
}

const MFUInt32 *SortLastWindowBase::getMFGroupLengths(void) const
{
    return &_mfGroupLengths;
}

#ifdef OSG_1_GET_COMPAT
MFUInt32            *SortLastWindowBase::getMFGroupLengths   (void)
{
    return this->editMFGroupLengths   ();
}
#endif

SFBool *SortLastWindowBase::editSFGroupsChanged(void)
{
    editSField(GroupsChangedFieldMask);

    return &_sfGroupsChanged;
}

const SFBool *SortLastWindowBase::getSFGroupsChanged(void) const
{
    return &_sfGroupsChanged;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *SortLastWindowBase::getSFGroupsChanged  (void)
{
    return this->editSFGroupsChanged  ();
}
#endif


void SortLastWindowBase::pushToField(      FieldContainerPtrConstArg pNewElement,
                                    const UInt32                    uiFieldId  )
{
    Inherited::pushToField(pNewElement, uiFieldId);

    if(uiFieldId == GroupNodesFieldId)
    {
        static_cast<SortLastWindow *>(this)->pushToGroupNodes(
            dynamic_cast<NodePtr>(pNewElement));
    }
}

void SortLastWindowBase::insertIntoMField(const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::insertIntoMField(uiIndex, pNewElement, uiFieldId);

    if(uiFieldId == GroupNodesFieldId)
    {
        static_cast<SortLastWindow *>(this)->insertIntoGroupNodes(
            uiIndex,
            dynamic_cast<NodePtr>(pNewElement));
    }
}

void SortLastWindowBase::replaceInMField (const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::replaceInMField(uiIndex, pNewElement, uiFieldId);

    if(uiFieldId == GroupNodesFieldId)
    {
        static_cast<SortLastWindow *>(this)->replaceInGroupNodes(
            uiIndex,
            dynamic_cast<NodePtr>(pNewElement));
    }
}

void SortLastWindowBase::replaceInMField (      FieldContainerPtrConstArg pOldElement,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::replaceInMField(pOldElement, pNewElement, uiFieldId);

    if(uiFieldId == GroupNodesFieldId)
    {
        static_cast<SortLastWindow *>(this)->replaceInGroupNodes(
            dynamic_cast<NodePtr>(pOldElement),
            dynamic_cast<NodePtr>(pNewElement));
    }
}

void SortLastWindowBase::removeFromMField(const UInt32 uiIndex,
                                         const UInt32 uiFieldId)
{
    Inherited::removeFromMField(uiIndex, uiFieldId);

    if(uiFieldId == GroupNodesFieldId)
    {
        static_cast<SortLastWindow *>(this)->removeFromGroupNodes(
            uiIndex);
    }
}

void SortLastWindowBase::removeFromMField(      FieldContainerPtrConstArg pElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::removeFromMField(pElement, uiFieldId);

    if(uiFieldId == GroupNodesFieldId)
    {
        static_cast<SortLastWindow *>(this)->removeFromGroupNodes(
            dynamic_cast<NodePtr>(pElement));
    }
}

void SortLastWindowBase::clearField(const UInt32 uiFieldId)
{
    Inherited::clearField(uiFieldId);

    if(uiFieldId == GroupNodesFieldId)
    {
        static_cast<SortLastWindow *>(this)->clearGroupNodes();
    }
}

void SortLastWindowBase::pushToGroupNodes(NodePtrConstArg value)
{
    if(value == NullFC)
        return;

    editMField(GroupNodesFieldMask, _mfGroupNodes);

    addRef(value);

    _mfGroupNodes.push_back(value);
}

void SortLastWindowBase::assignGroupNodes(const MFNodePtr         &value)
{
    MFNodePtr        ::const_iterator elemIt  =
        value.begin();
    MFNodePtr        ::const_iterator elemEnd =
        value.end  ();

    static_cast<SortLastWindow *>(this)->clearGroupNodes();

    while(elemIt != elemEnd)
    {
        this->pushToGroupNodes(*elemIt);

        ++elemIt;
    }
}

void SortLastWindowBase::insertIntoGroupNodes(UInt32                uiIndex,
                                                   NodePtrConstArg value   )
{
    if(value == NullFC)
        return;

    editMField(GroupNodesFieldMask, _mfGroupNodes);

    MFNodePtr::iterator fieldIt = _mfGroupNodes.begin();

    addRef(value);

    fieldIt += uiIndex;

    _mfGroupNodes.insert(fieldIt, value);
}

void SortLastWindowBase::replaceInGroupNodes(UInt32                uiIndex,
                                                       NodePtrConstArg value   )
{
    if(value == NullFC)
        return;

    if(uiIndex >= _mfGroupNodes.size())
        return;

    editMField(GroupNodesFieldMask, _mfGroupNodes);

    addRef(value);

    subRef(_mfGroupNodes[uiIndex]);

    _mfGroupNodes[uiIndex] = value;
}

void SortLastWindowBase::replaceInGroupNodes(NodePtrConstArg pOldElem,
                                                        NodePtrConstArg pNewElem)
{
    if(pNewElem == NullFC)
        return;

    Int32  elemIdx = _mfGroupNodes.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(GroupNodesFieldMask, _mfGroupNodes);

        MFNodePtr::iterator fieldIt = _mfGroupNodes.begin();

        fieldIt += elemIdx;

        addRef(pNewElem);
        subRef(pOldElem);

        (*fieldIt) = pNewElem;
    }
}

void SortLastWindowBase::removeFromGroupNodes(UInt32 uiIndex)
{
    if(uiIndex < _mfGroupNodes.size())
    {
        editMField(GroupNodesFieldMask, _mfGroupNodes);

        MFNodePtr::iterator fieldIt = _mfGroupNodes.begin();

        fieldIt += uiIndex;

        subRef(*fieldIt);

        _mfGroupNodes.erase(fieldIt);
    }
}

void SortLastWindowBase::removeFromGroupNodes(NodePtrConstArg value)
{
    Int32 iElemIdx = _mfGroupNodes.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(GroupNodesFieldMask, _mfGroupNodes);

        MFNodePtr::iterator fieldIt = _mfGroupNodes.begin();

        fieldIt += iElemIdx;

        subRef(*fieldIt);

        _mfGroupNodes.erase(fieldIt);
    }
}
void SortLastWindowBase::clearGroupNodes(void)
{
    editMField(GroupNodesFieldMask, _mfGroupNodes);

    MFNodePtr::iterator       fieldIt  = _mfGroupNodes.begin();
    MFNodePtr::const_iterator fieldEnd = _mfGroupNodes.end  ();

    while(fieldIt != fieldEnd)
    {
        subRef(*fieldIt);

        ++fieldIt;
    }

    _mfGroupNodes.clear();
}

/*********************************** Non-ptr code ********************************/
void SortLastWindowBase::pushToGroupLengths(const UInt32& value)
{
    editMField(GroupLengthsFieldMask, _mfGroupLengths);
    _mfGroupLengths.push_back(value);
}

void SortLastWindowBase::insertIntoGroupLengths(UInt32                uiIndex,
                                                   const UInt32& value   )
{
    editMField(GroupLengthsFieldMask, _mfGroupLengths);

    MFUInt32::iterator fieldIt = _mfGroupLengths.begin();

    fieldIt += uiIndex;

    _mfGroupLengths.insert(fieldIt, value);
}

void SortLastWindowBase::replaceInGroupLengths(UInt32                uiIndex,
                                                       const UInt32& value   )
{
    if(uiIndex >= _mfGroupLengths.size())
        return;

    editMField(GroupLengthsFieldMask, _mfGroupLengths);

    _mfGroupLengths[uiIndex] = value;
}

void SortLastWindowBase::replaceInGroupLengths(const UInt32& pOldElem,
                                                        const UInt32& pNewElem)
{
    Int32  elemIdx = _mfGroupLengths.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(GroupLengthsFieldMask, _mfGroupLengths);

        MFUInt32::iterator fieldIt = _mfGroupLengths.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void SortLastWindowBase::removeFromGroupLengths(UInt32 uiIndex)
{
    if(uiIndex < _mfGroupLengths.size())
    {
        editMField(GroupLengthsFieldMask, _mfGroupLengths);

        MFUInt32::iterator fieldIt = _mfGroupLengths.begin();

        fieldIt += uiIndex;
        _mfGroupLengths.erase(fieldIt);
    }
}

void SortLastWindowBase::removeFromGroupLengths(const UInt32& value)
{
    Int32 iElemIdx = _mfGroupLengths.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(GroupLengthsFieldMask, _mfGroupLengths);

        MFUInt32::iterator fieldIt = _mfGroupLengths.begin();

        fieldIt += iElemIdx;

        _mfGroupLengths.erase(fieldIt);
    }
}

void SortLastWindowBase::clearGroupLengths(void)
{
    editMField(GroupLengthsFieldMask, _mfGroupLengths);

    _mfGroupLengths.clear();
}


/*------------------------------ access -----------------------------------*/

UInt32 SortLastWindowBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (GroupNodesFieldMask & whichField))
    {
        returnValue += _mfGroupNodes.getBinSize();
    }
    if(FieldBits::NoField != (GroupLengthsFieldMask & whichField))
    {
        returnValue += _mfGroupLengths.getBinSize();
    }
    if(FieldBits::NoField != (GroupsChangedFieldMask & whichField))
    {
        returnValue += _sfGroupsChanged.getBinSize();
    }

    return returnValue;
}

void SortLastWindowBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (GroupNodesFieldMask & whichField))
    {
        _mfGroupNodes.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GroupLengthsFieldMask & whichField))
    {
        _mfGroupLengths.copyToBin(pMem);
    }
    if(FieldBits::NoField != (GroupsChangedFieldMask & whichField))
    {
        _sfGroupsChanged.copyToBin(pMem);
    }
}

void SortLastWindowBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (GroupNodesFieldMask & whichField))
    {
        _mfGroupNodes.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GroupLengthsFieldMask & whichField))
    {
        _mfGroupLengths.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (GroupsChangedFieldMask & whichField))
    {
        _sfGroupsChanged.copyFromBin(pMem);
    }
}

//! create a new instance of the class
SortLastWindowPtr SortLastWindowBase::create(void)
{
    SortLastWindowPtr fc;

    if(getClassType().getPrototype() != NullFC)
    {
        fc = dynamic_cast<SortLastWindow::ObjPtr>(
            getClassType().getPrototype()-> shallowCopy());
    }

    return fc;
}

//! create an empty new instance of the class, do not copy the prototype
SortLastWindowPtr SortLastWindowBase::createEmpty(void)
{
    SortLastWindowPtr returnValue;

    newPtr<SortLastWindow>(returnValue);

    return returnValue;
}

FieldContainerPtr SortLastWindowBase::shallowCopy(void) const
{
    SortLastWindowPtr returnValue;

    newPtr(returnValue, dynamic_cast<const SortLastWindow *>(this));

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

SortLastWindowBase::SortLastWindowBase(void) :
    Inherited(),
    _mfGroupNodes             (),
    _mfGroupLengths           (),
    _sfGroupsChanged          ()
{
}

SortLastWindowBase::SortLastWindowBase(const SortLastWindowBase &source) :
    Inherited(source),
    _mfGroupNodes             (),
    _mfGroupLengths           (source._mfGroupLengths           ),
    _sfGroupsChanged          (source._sfGroupsChanged          )
{
}


/*-------------------------- destructors ----------------------------------*/

SortLastWindowBase::~SortLastWindowBase(void)
{
}

void SortLastWindowBase::onCreate(const SortLastWindow *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {

        MFNodePtr::const_iterator GroupNodesIt  =
            source->_mfGroupNodes.begin();
        MFNodePtr::const_iterator GroupNodesEnd =
            source->_mfGroupNodes.end  ();

        while(GroupNodesIt != GroupNodesEnd)
        {
            this->pushToGroupNodes(*GroupNodesIt);

            ++GroupNodesIt;
        }
    }
}

#ifdef OSG_MT_CPTR_ASPECT
void SortLastWindowBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<SortLastWindowBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr SortLastWindowBase::createAspectCopy(void) const
{
    SortLastWindowPtr returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const SortLastWindow *>(this));

    return returnValue;
}
#endif

void SortLastWindowBase::resolveLinks(void)
{
    Inherited::resolveLinks();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

    static_cast<SortLastWindow *>(this)->clearGroupNodes();
#ifdef OSG_MT_CPTR_ASPECT
    _mfGroupLengths.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
}


#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<SortLastWindowPtr>::_type("SortLastWindowPtr", "ClusterWindowPtr");
#endif


OSG_END_NAMESPACE
