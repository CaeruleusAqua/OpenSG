/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ClusterWindow!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILECLUSTERWINDOWINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>



#include <OSGWindow.h> // ClientWindow Class
#include <OSGImageComposer.h> // Composer Class

#include "OSGClusterWindowBase.h"
#include "OSGClusterWindow.h"

#include "boost/bind.hpp"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::ClusterWindow
    The base class for all windows.
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var std::string     ClusterWindowBase::_mfServers
    List of all symbolic server names
*/

/*! \var std::string     ClusterWindowBase::_sfConnectionType
    How to connect to the servers
*/

/*! \var std::string     ClusterWindowBase::_sfConnectionInterface
    Which network interface to use for communication
*/

/*! \var std::string     ClusterWindowBase::_sfConnectionDestination
    Multicast address for multicast connections
*/

/*! \var std::string     ClusterWindowBase::_sfConnectionParams
    Optional parameters e.g. "TTL=2"
*/

/*! \var UInt32          ClusterWindowBase::_sfServicePort
    Broadcastport used for server search
*/

/*! \var std::string     ClusterWindowBase::_sfServiceAddress
    Broadcast or Multicast address used for server search
*/

/*! \var std::string     ClusterWindowBase::_sfServiceInterface
    Ethernet interface to be used for server search
*/

/*! \var Window *        ClusterWindowBase::_sfClientWindow
    Window for client rendering
*/

/*! \var UInt32          ClusterWindowBase::_sfInterleave
    
*/

/*! \var UInt32          ClusterWindowBase::_sfFrameCount
    
*/

/*! \var ImageComposer * ClusterWindowBase::_sfComposer
    
*/

/*! \var std::string     ClusterWindowBase::_mfAutostart
    
*/


void ClusterWindowBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFString::Description(
        MFString::getClassType(),
        "servers",
        "List of all symbolic server names\n",
        ServersFieldId, ServersFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&ClusterWindow::editHandleServers),
        static_cast<FieldGetMethodSig >(&ClusterWindow::getHandleServers));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "connectionType",
        "How to connect to the servers\n",
        ConnectionTypeFieldId, ConnectionTypeFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&ClusterWindow::editHandleConnectionType),
        static_cast<FieldGetMethodSig >(&ClusterWindow::getHandleConnectionType));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "connectionInterface",
        "Which network interface to use for communication\n",
        ConnectionInterfaceFieldId, ConnectionInterfaceFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&ClusterWindow::editHandleConnectionInterface),
        static_cast<FieldGetMethodSig >(&ClusterWindow::getHandleConnectionInterface));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "connectionDestination",
        "Multicast address for multicast connections\n",
        ConnectionDestinationFieldId, ConnectionDestinationFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&ClusterWindow::editHandleConnectionDestination),
        static_cast<FieldGetMethodSig >(&ClusterWindow::getHandleConnectionDestination));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "connectionParams",
        "Optional parameters e.g. \"TTL=2\"\n",
        ConnectionParamsFieldId, ConnectionParamsFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&ClusterWindow::editHandleConnectionParams),
        static_cast<FieldGetMethodSig >(&ClusterWindow::getHandleConnectionParams));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "servicePort",
        "Broadcastport used for server search\n",
        ServicePortFieldId, ServicePortFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&ClusterWindow::editHandleServicePort),
        static_cast<FieldGetMethodSig >(&ClusterWindow::getHandleServicePort));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "serviceAddress",
        "Broadcast or Multicast address used for server search\n",
        ServiceAddressFieldId, ServiceAddressFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&ClusterWindow::editHandleServiceAddress),
        static_cast<FieldGetMethodSig >(&ClusterWindow::getHandleServiceAddress));

    oType.addInitialDesc(pDesc);

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "serviceInterface",
        "Ethernet interface to be used for server search\n",
        ServiceInterfaceFieldId, ServiceInterfaceFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&ClusterWindow::editHandleServiceInterface),
        static_cast<FieldGetMethodSig >(&ClusterWindow::getHandleServiceInterface));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecWindowPtr::Description(
        SFUnrecWindowPtr::getClassType(),
        "clientWindow",
        "Window for client rendering\n",
        ClientWindowFieldId, ClientWindowFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&ClusterWindow::editHandleClientWindow),
        static_cast<FieldGetMethodSig >(&ClusterWindow::getHandleClientWindow));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "interleave",
        "",
        InterleaveFieldId, InterleaveFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&ClusterWindow::editHandleInterleave),
        static_cast<FieldGetMethodSig >(&ClusterWindow::getHandleInterleave));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUInt32::Description(
        SFUInt32::getClassType(),
        "frameCount",
        "",
        FrameCountFieldId, FrameCountFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&ClusterWindow::editHandleFrameCount),
        static_cast<FieldGetMethodSig >(&ClusterWindow::getHandleFrameCount));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecImageComposerPtr::Description(
        SFUnrecImageComposerPtr::getClassType(),
        "composer",
        "",
        ComposerFieldId, ComposerFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&ClusterWindow::editHandleComposer),
        static_cast<FieldGetMethodSig >(&ClusterWindow::getHandleComposer));

    oType.addInitialDesc(pDesc);

    pDesc = new MFString::Description(
        MFString::getClassType(),
        "autostart",
        "",
        AutostartFieldId, AutostartFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&ClusterWindow::editHandleAutostart),
        static_cast<FieldGetMethodSig >(&ClusterWindow::getHandleAutostart));

    oType.addInitialDesc(pDesc);
}


ClusterWindowBase::TypeObject ClusterWindowBase::_type(
    ClusterWindowBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&ClusterWindowBase::createEmptyLocal),
    ClusterWindow::initMethod,
    ClusterWindow::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&ClusterWindowBase::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"ClusterWindow\"\n"
    "\tparent=\"Window\"\n"
    "\tlibrary=\"Cluster\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"false\"\n"
    ">\n"
    "The base class for all windows.\n"
    "\t<Field\n"
    "\t\tname=\"servers\"\n"
    "\t\ttype=\"std::string\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tList of all symbolic server names\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"connectionType\"\n"
    "\t\ttype=\"std::string\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tHow to connect to the servers\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"connectionInterface\"\n"
    "\t\ttype=\"std::string\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tWhich network interface to use for communication\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"connectionDestination\"\n"
    "\t\ttype=\"std::string\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tMulticast address for multicast connections\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"connectionParams\"\n"
    "\t\ttype=\"std::string\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tOptional parameters e.g. \"TTL=2\"\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"servicePort\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"8437\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tBroadcastport used for server search\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"serviceAddress\"\n"
    "\t\ttype=\"std::string\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue='\"224.245.211.234\"'\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tBroadcast or Multicast address used for server search\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"serviceInterface\"\n"
    "\t\ttype=\"std::string\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tEthernet interface to be used for server search\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"clientWindow\"\n"
    "\t\ttype=\"WindowPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tWindow for client rendering\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"interleave\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"frameCount\"\n"
    "\t\ttype=\"UInt32\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"0\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"composer\"\n"
    "\t\ttype=\"ImageComposerPtr\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"autostart\"\n"
    "\t\ttype=\"std::string\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "<!--\n"
    "\t<Field\n"
    "\t\tname=\"calibration\"\n"
    "\t\ttype=\"DisplayCalibrationPtr\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"filter\"\n"
    "\t\ttype=\"DisplayFilterForegroundPtr\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\tDisplay filter foregrounds can be used instead of calibration\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"dirty\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\tdefaultValue=\"false\"\n"
    "\t\taccess=\"protected\"\n"
    "\t>\n"
    "\tInternally set for forceing re-initialization of foregrounds\n"
    "\t</Field>\n"
    "-->\n"
    "</FieldContainer>\n",
    "The base class for all windows.\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &ClusterWindowBase::getType(void)
{
    return _type;
}

const FieldContainerType &ClusterWindowBase::getType(void) const
{
    return _type;
}

UInt32 ClusterWindowBase::getContainerSize(void) const
{
    return sizeof(ClusterWindow);
}

/*------------------------- decorator get ------------------------------*/


MFString *ClusterWindowBase::editMFServers(void)
{
    editMField(ServersFieldMask, _mfServers);

    return &_mfServers;
}

const MFString *ClusterWindowBase::getMFServers(void) const
{
    return &_mfServers;
}

#ifdef OSG_1_GET_COMPAT
MFString            *ClusterWindowBase::getMFServers        (void)
{
    return this->editMFServers        ();
}
#endif

SFString *ClusterWindowBase::editSFConnectionType(void)
{
    editSField(ConnectionTypeFieldMask);

    return &_sfConnectionType;
}

const SFString *ClusterWindowBase::getSFConnectionType(void) const
{
    return &_sfConnectionType;
}

#ifdef OSG_1_GET_COMPAT
SFString            *ClusterWindowBase::getSFConnectionType (void)
{
    return this->editSFConnectionType ();
}
#endif

SFString *ClusterWindowBase::editSFConnectionInterface(void)
{
    editSField(ConnectionInterfaceFieldMask);

    return &_sfConnectionInterface;
}

const SFString *ClusterWindowBase::getSFConnectionInterface(void) const
{
    return &_sfConnectionInterface;
}

#ifdef OSG_1_GET_COMPAT
SFString            *ClusterWindowBase::getSFConnectionInterface(void)
{
    return this->editSFConnectionInterface();
}
#endif

SFString *ClusterWindowBase::editSFConnectionDestination(void)
{
    editSField(ConnectionDestinationFieldMask);

    return &_sfConnectionDestination;
}

const SFString *ClusterWindowBase::getSFConnectionDestination(void) const
{
    return &_sfConnectionDestination;
}

#ifdef OSG_1_GET_COMPAT
SFString            *ClusterWindowBase::getSFConnectionDestination(void)
{
    return this->editSFConnectionDestination();
}
#endif

SFString *ClusterWindowBase::editSFConnectionParams(void)
{
    editSField(ConnectionParamsFieldMask);

    return &_sfConnectionParams;
}

const SFString *ClusterWindowBase::getSFConnectionParams(void) const
{
    return &_sfConnectionParams;
}

#ifdef OSG_1_GET_COMPAT
SFString            *ClusterWindowBase::getSFConnectionParams(void)
{
    return this->editSFConnectionParams();
}
#endif

SFUInt32 *ClusterWindowBase::editSFServicePort(void)
{
    editSField(ServicePortFieldMask);

    return &_sfServicePort;
}

const SFUInt32 *ClusterWindowBase::getSFServicePort(void) const
{
    return &_sfServicePort;
}

#ifdef OSG_1_GET_COMPAT
SFUInt32            *ClusterWindowBase::getSFServicePort    (void)
{
    return this->editSFServicePort    ();
}
#endif

SFString *ClusterWindowBase::editSFServiceAddress(void)
{
    editSField(ServiceAddressFieldMask);

    return &_sfServiceAddress;
}

const SFString *ClusterWindowBase::getSFServiceAddress(void) const
{
    return &_sfServiceAddress;
}

#ifdef OSG_1_GET_COMPAT
SFString            *ClusterWindowBase::getSFServiceAddress (void)
{
    return this->editSFServiceAddress ();
}
#endif

SFString *ClusterWindowBase::editSFServiceInterface(void)
{
    editSField(ServiceInterfaceFieldMask);

    return &_sfServiceInterface;
}

const SFString *ClusterWindowBase::getSFServiceInterface(void) const
{
    return &_sfServiceInterface;
}

#ifdef OSG_1_GET_COMPAT
SFString            *ClusterWindowBase::getSFServiceInterface(void)
{
    return this->editSFServiceInterface();
}
#endif

//! Get the ClusterWindow::_sfClientWindow field.
const SFUnrecWindowPtr *ClusterWindowBase::getSFClientWindow(void) const
{
    return &_sfClientWindow;
}

SFUnrecWindowPtr    *ClusterWindowBase::editSFClientWindow   (void)
{
    editSField(ClientWindowFieldMask);

    return &_sfClientWindow;
}

SFUInt32 *ClusterWindowBase::editSFInterleave(void)
{
    editSField(InterleaveFieldMask);

    return &_sfInterleave;
}

const SFUInt32 *ClusterWindowBase::getSFInterleave(void) const
{
    return &_sfInterleave;
}

#ifdef OSG_1_GET_COMPAT
SFUInt32            *ClusterWindowBase::getSFInterleave     (void)
{
    return this->editSFInterleave     ();
}
#endif

SFUInt32 *ClusterWindowBase::editSFFrameCount(void)
{
    editSField(FrameCountFieldMask);

    return &_sfFrameCount;
}

const SFUInt32 *ClusterWindowBase::getSFFrameCount(void) const
{
    return &_sfFrameCount;
}

#ifdef OSG_1_GET_COMPAT
SFUInt32            *ClusterWindowBase::getSFFrameCount     (void)
{
    return this->editSFFrameCount     ();
}
#endif

//! Get the ClusterWindow::_sfComposer field.
const SFUnrecImageComposerPtr *ClusterWindowBase::getSFComposer(void) const
{
    return &_sfComposer;
}

SFUnrecImageComposerPtr *ClusterWindowBase::editSFComposer       (void)
{
    editSField(ComposerFieldMask);

    return &_sfComposer;
}

MFString *ClusterWindowBase::editMFAutostart(void)
{
    editMField(AutostartFieldMask, _mfAutostart);

    return &_mfAutostart;
}

const MFString *ClusterWindowBase::getMFAutostart(void) const
{
    return &_mfAutostart;
}

#ifdef OSG_1_GET_COMPAT
MFString            *ClusterWindowBase::getMFAutostart      (void)
{
    return this->editMFAutostart      ();
}
#endif





/*------------------------------ access -----------------------------------*/

UInt32 ClusterWindowBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ServersFieldMask & whichField))
    {
        returnValue += _mfServers.getBinSize();
    }
    if(FieldBits::NoField != (ConnectionTypeFieldMask & whichField))
    {
        returnValue += _sfConnectionType.getBinSize();
    }
    if(FieldBits::NoField != (ConnectionInterfaceFieldMask & whichField))
    {
        returnValue += _sfConnectionInterface.getBinSize();
    }
    if(FieldBits::NoField != (ConnectionDestinationFieldMask & whichField))
    {
        returnValue += _sfConnectionDestination.getBinSize();
    }
    if(FieldBits::NoField != (ConnectionParamsFieldMask & whichField))
    {
        returnValue += _sfConnectionParams.getBinSize();
    }
    if(FieldBits::NoField != (ServicePortFieldMask & whichField))
    {
        returnValue += _sfServicePort.getBinSize();
    }
    if(FieldBits::NoField != (ServiceAddressFieldMask & whichField))
    {
        returnValue += _sfServiceAddress.getBinSize();
    }
    if(FieldBits::NoField != (ServiceInterfaceFieldMask & whichField))
    {
        returnValue += _sfServiceInterface.getBinSize();
    }
    if(FieldBits::NoField != (ClientWindowFieldMask & whichField))
    {
        returnValue += _sfClientWindow.getBinSize();
    }
    if(FieldBits::NoField != (InterleaveFieldMask & whichField))
    {
        returnValue += _sfInterleave.getBinSize();
    }
    if(FieldBits::NoField != (FrameCountFieldMask & whichField))
    {
        returnValue += _sfFrameCount.getBinSize();
    }
    if(FieldBits::NoField != (ComposerFieldMask & whichField))
    {
        returnValue += _sfComposer.getBinSize();
    }
    if(FieldBits::NoField != (AutostartFieldMask & whichField))
    {
        returnValue += _mfAutostart.getBinSize();
    }

    return returnValue;
}

void ClusterWindowBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ServersFieldMask & whichField))
    {
        _mfServers.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ConnectionTypeFieldMask & whichField))
    {
        _sfConnectionType.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ConnectionInterfaceFieldMask & whichField))
    {
        _sfConnectionInterface.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ConnectionDestinationFieldMask & whichField))
    {
        _sfConnectionDestination.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ConnectionParamsFieldMask & whichField))
    {
        _sfConnectionParams.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ServicePortFieldMask & whichField))
    {
        _sfServicePort.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ServiceAddressFieldMask & whichField))
    {
        _sfServiceAddress.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ServiceInterfaceFieldMask & whichField))
    {
        _sfServiceInterface.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ClientWindowFieldMask & whichField))
    {
        _sfClientWindow.copyToBin(pMem);
    }
    if(FieldBits::NoField != (InterleaveFieldMask & whichField))
    {
        _sfInterleave.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FrameCountFieldMask & whichField))
    {
        _sfFrameCount.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ComposerFieldMask & whichField))
    {
        _sfComposer.copyToBin(pMem);
    }
    if(FieldBits::NoField != (AutostartFieldMask & whichField))
    {
        _mfAutostart.copyToBin(pMem);
    }
}

void ClusterWindowBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ServersFieldMask & whichField))
    {
        _mfServers.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ConnectionTypeFieldMask & whichField))
    {
        _sfConnectionType.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ConnectionInterfaceFieldMask & whichField))
    {
        _sfConnectionInterface.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ConnectionDestinationFieldMask & whichField))
    {
        _sfConnectionDestination.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ConnectionParamsFieldMask & whichField))
    {
        _sfConnectionParams.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ServicePortFieldMask & whichField))
    {
        _sfServicePort.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ServiceAddressFieldMask & whichField))
    {
        _sfServiceAddress.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ServiceInterfaceFieldMask & whichField))
    {
        _sfServiceInterface.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ClientWindowFieldMask & whichField))
    {
        _sfClientWindow.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (InterleaveFieldMask & whichField))
    {
        _sfInterleave.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FrameCountFieldMask & whichField))
    {
        _sfFrameCount.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ComposerFieldMask & whichField))
    {
        _sfComposer.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (AutostartFieldMask & whichField))
    {
        _mfAutostart.copyFromBin(pMem);
    }
}

//! create a new instance of the class
ClusterWindowTransitPtr ClusterWindowBase::create(void)
{
    ClusterWindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<ClusterWindow>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
ClusterWindowTransitPtr ClusterWindowBase::createLocal(BitVector bFlags)
{
    ClusterWindowTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<ClusterWindow>(tmpPtr);
    }

    return fc;
}

//! create an empty new instance of the class, do not copy the prototype
ClusterWindow *ClusterWindowBase::createEmpty(void)
{
    ClusterWindow *returnValue;

    newPtr<ClusterWindow>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &= 
        ~Thread::getCurrentLocalFlags(); 

    return returnValue;
}

ClusterWindow *ClusterWindowBase::createEmptyLocal(BitVector bFlags)
{
    ClusterWindow *returnValue;

    newPtr<ClusterWindow>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr ClusterWindowBase::shallowCopy(void) const
{
    ClusterWindow *tmpPtr;

    newPtr(tmpPtr, 
           dynamic_cast<const ClusterWindow *>(this), 
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}

FieldContainerTransitPtr ClusterWindowBase::shallowCopyLocal(
    BitVector bFlags) const
{
    ClusterWindow *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const ClusterWindow *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

ClusterWindowBase::ClusterWindowBase(void) :
    Inherited(),
    _mfServers                (),
    _sfConnectionType         (),
    _sfConnectionInterface    (),
    _sfConnectionDestination  (),
    _sfConnectionParams       (),
    _sfServicePort            (UInt32(8437)),
    _sfServiceAddress         (std::string("224.245.211.234")),
    _sfServiceInterface       (),
    _sfClientWindow           (NULL),
    _sfInterleave             (UInt32(0)),
    _sfFrameCount             (UInt32(0)),
    _sfComposer               (NULL),
    _mfAutostart              ()
{
}

ClusterWindowBase::ClusterWindowBase(const ClusterWindowBase &source) :
    Inherited(source),
    _mfServers                (source._mfServers                ),
    _sfConnectionType         (source._sfConnectionType         ),
    _sfConnectionInterface    (source._sfConnectionInterface    ),
    _sfConnectionDestination  (source._sfConnectionDestination  ),
    _sfConnectionParams       (source._sfConnectionParams       ),
    _sfServicePort            (source._sfServicePort            ),
    _sfServiceAddress         (source._sfServiceAddress         ),
    _sfServiceInterface       (source._sfServiceInterface       ),
    _sfClientWindow           (NULL),
    _sfInterleave             (source._sfInterleave             ),
    _sfFrameCount             (source._sfFrameCount             ),
    _sfComposer               (NULL),
    _mfAutostart              (source._mfAutostart              )
{
}


/*-------------------------- destructors ----------------------------------*/

ClusterWindowBase::~ClusterWindowBase(void)
{
}

void ClusterWindowBase::onCreate(const ClusterWindow *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        ClusterWindow *pThis = static_cast<ClusterWindow *>(this);

        pThis->setClientWindow(source->getClientWindow());

        pThis->setComposer(source->getComposer());
    }
}

GetFieldHandlePtr ClusterWindowBase::getHandleServers         (void) const
{
    MFString::GetHandlePtr returnValue(
        new  MFString::GetHandle(
             &_mfServers, 
             this->getType().getFieldDesc(ServersFieldId)));

    return returnValue;
}

EditFieldHandlePtr ClusterWindowBase::editHandleServers        (void)
{
    MFString::EditHandlePtr returnValue(
        new  MFString::EditHandle(
             &_mfServers, 
             this->getType().getFieldDesc(ServersFieldId)));

    editMField(ServersFieldMask, _mfServers);

    return returnValue;
}

GetFieldHandlePtr ClusterWindowBase::getHandleConnectionType  (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfConnectionType, 
             this->getType().getFieldDesc(ConnectionTypeFieldId)));

    return returnValue;
}

EditFieldHandlePtr ClusterWindowBase::editHandleConnectionType (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfConnectionType, 
             this->getType().getFieldDesc(ConnectionTypeFieldId)));

    editSField(ConnectionTypeFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterWindowBase::getHandleConnectionInterface (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfConnectionInterface, 
             this->getType().getFieldDesc(ConnectionInterfaceFieldId)));

    return returnValue;
}

EditFieldHandlePtr ClusterWindowBase::editHandleConnectionInterface(void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfConnectionInterface, 
             this->getType().getFieldDesc(ConnectionInterfaceFieldId)));

    editSField(ConnectionInterfaceFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterWindowBase::getHandleConnectionDestination (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfConnectionDestination, 
             this->getType().getFieldDesc(ConnectionDestinationFieldId)));

    return returnValue;
}

EditFieldHandlePtr ClusterWindowBase::editHandleConnectionDestination(void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfConnectionDestination, 
             this->getType().getFieldDesc(ConnectionDestinationFieldId)));

    editSField(ConnectionDestinationFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterWindowBase::getHandleConnectionParams (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfConnectionParams, 
             this->getType().getFieldDesc(ConnectionParamsFieldId)));

    return returnValue;
}

EditFieldHandlePtr ClusterWindowBase::editHandleConnectionParams(void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfConnectionParams, 
             this->getType().getFieldDesc(ConnectionParamsFieldId)));

    editSField(ConnectionParamsFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterWindowBase::getHandleServicePort     (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfServicePort, 
             this->getType().getFieldDesc(ServicePortFieldId)));

    return returnValue;
}

EditFieldHandlePtr ClusterWindowBase::editHandleServicePort    (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfServicePort, 
             this->getType().getFieldDesc(ServicePortFieldId)));

    editSField(ServicePortFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterWindowBase::getHandleServiceAddress  (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfServiceAddress, 
             this->getType().getFieldDesc(ServiceAddressFieldId)));

    return returnValue;
}

EditFieldHandlePtr ClusterWindowBase::editHandleServiceAddress (void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfServiceAddress, 
             this->getType().getFieldDesc(ServiceAddressFieldId)));

    editSField(ServiceAddressFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterWindowBase::getHandleServiceInterface (void) const
{
    SFString::GetHandlePtr returnValue(
        new  SFString::GetHandle(
             &_sfServiceInterface, 
             this->getType().getFieldDesc(ServiceInterfaceFieldId)));

    return returnValue;
}

EditFieldHandlePtr ClusterWindowBase::editHandleServiceInterface(void)
{
    SFString::EditHandlePtr returnValue(
        new  SFString::EditHandle(
             &_sfServiceInterface, 
             this->getType().getFieldDesc(ServiceInterfaceFieldId)));

    editSField(ServiceInterfaceFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterWindowBase::getHandleClientWindow    (void) const
{
    SFUnrecWindowPtr::GetHandlePtr returnValue(
        new  SFUnrecWindowPtr::GetHandle(
             &_sfClientWindow, 
             this->getType().getFieldDesc(ClientWindowFieldId)));

    return returnValue;
}

EditFieldHandlePtr ClusterWindowBase::editHandleClientWindow   (void)
{
    SFUnrecWindowPtr::EditHandlePtr returnValue(
        new  SFUnrecWindowPtr::EditHandle(
             &_sfClientWindow, 
             this->getType().getFieldDesc(ClientWindowFieldId)));

    returnValue->setSetMethod(boost::bind(&ClusterWindow::setClientWindow, 
                                          static_cast<ClusterWindow *>(this), _1));

    editSField(ClientWindowFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterWindowBase::getHandleInterleave      (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfInterleave, 
             this->getType().getFieldDesc(InterleaveFieldId)));

    return returnValue;
}

EditFieldHandlePtr ClusterWindowBase::editHandleInterleave     (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfInterleave, 
             this->getType().getFieldDesc(InterleaveFieldId)));

    editSField(InterleaveFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterWindowBase::getHandleFrameCount      (void) const
{
    SFUInt32::GetHandlePtr returnValue(
        new  SFUInt32::GetHandle(
             &_sfFrameCount, 
             this->getType().getFieldDesc(FrameCountFieldId)));

    return returnValue;
}

EditFieldHandlePtr ClusterWindowBase::editHandleFrameCount     (void)
{
    SFUInt32::EditHandlePtr returnValue(
        new  SFUInt32::EditHandle(
             &_sfFrameCount, 
             this->getType().getFieldDesc(FrameCountFieldId)));

    editSField(FrameCountFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterWindowBase::getHandleComposer        (void) const
{
    SFUnrecImageComposerPtr::GetHandlePtr returnValue(
        new  SFUnrecImageComposerPtr::GetHandle(
             &_sfComposer, 
             this->getType().getFieldDesc(ComposerFieldId)));

    return returnValue;
}

EditFieldHandlePtr ClusterWindowBase::editHandleComposer       (void)
{
    SFUnrecImageComposerPtr::EditHandlePtr returnValue(
        new  SFUnrecImageComposerPtr::EditHandle(
             &_sfComposer, 
             this->getType().getFieldDesc(ComposerFieldId)));

    returnValue->setSetMethod(boost::bind(&ClusterWindow::setComposer, 
                                          static_cast<ClusterWindow *>(this), _1));

    editSField(ComposerFieldMask);

    return returnValue;
}

GetFieldHandlePtr ClusterWindowBase::getHandleAutostart       (void) const
{
    MFString::GetHandlePtr returnValue(
        new  MFString::GetHandle(
             &_mfAutostart, 
             this->getType().getFieldDesc(AutostartFieldId)));

    return returnValue;
}

EditFieldHandlePtr ClusterWindowBase::editHandleAutostart      (void)
{
    MFString::EditHandlePtr returnValue(
        new  MFString::EditHandle(
             &_mfAutostart, 
             this->getType().getFieldDesc(AutostartFieldId)));

    editMField(AutostartFieldMask, _mfAutostart);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void ClusterWindowBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<ClusterWindowBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *ClusterWindowBase::createAspectCopy(void) const
{
    ClusterWindow *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const ClusterWindow *>(this));

    return returnValue;
}
#endif

void ClusterWindowBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<ClusterWindow *>(this)->setClientWindow(NULL);

    static_cast<ClusterWindow *>(this)->setComposer(NULL);

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfServers.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    _mfAutostart.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
}


#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<ClusterWindow *>::_type("ClusterWindowPtr", "WindowPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(ClusterWindow *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField, 
                           ClusterWindow *, 
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField, 
                           ClusterWindow *, 
                           0);

OSG_END_NAMESPACE
