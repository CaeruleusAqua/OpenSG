/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Drawer!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEDRAWERINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>



#include <OSGCSMWindow.h> // Windows Class

#include "OSGDrawerBase.h"
#include "OSGDrawer.h"

#include "boost/bind.hpp"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::Drawer
    
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var CSMWindow *     DrawerBase::_mfWindows
    
*/


void DrawerBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecCSMWindowPtr::Description(
        MFUnrecCSMWindowPtr::getClassType(),
        "windows",
        "",
        WindowsFieldId, WindowsFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&Drawer::editHandleWindows),
        static_cast<FieldGetMethodSig >(&Drawer::getHandleWindows));

    oType.addInitialDesc(pDesc);
}


DrawerBase::TypeObject DrawerBase::_type(
    DrawerBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&DrawerBase::createEmptyLocal),
    Drawer::initMethod,
    Drawer::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&DrawerBase::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"Drawer\"\n"
    "    parent=\"AttachmentContainer\"\n"
    "    library=\"ContribCSM\"\n"
    "    pointerfieldtypes=\"multi\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    isBundle=\"true\"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"windows\"\n"
    "\t\ttype=\"CSMWindow\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        category=\"pointer\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &DrawerBase::getType(void)
{
    return _type;
}

const FieldContainerType &DrawerBase::getType(void) const
{
    return _type;
}

UInt32 DrawerBase::getContainerSize(void) const
{
    return sizeof(Drawer);
}

/*------------------------- decorator get ------------------------------*/


//! Get the Drawer::_mfWindows field.
const MFUnrecCSMWindowPtr *DrawerBase::getMFWindows(void) const
{
    return &_mfWindows;
}

MFUnrecCSMWindowPtr *DrawerBase::editMFWindows        (void)
{
    editMField(WindowsFieldMask, _mfWindows);

    return &_mfWindows;
}



void DrawerBase::pushToWindows(CSMWindow * const value)
{
    editMField(WindowsFieldMask, _mfWindows);

    _mfWindows.push_back(value);
}

void DrawerBase::assignWindows  (const MFUnrecCSMWindowPtr &value)
{
    MFUnrecCSMWindowPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecCSMWindowPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<Drawer *>(this)->clearWindows();

    while(elemIt != elemEnd)
    {
        this->pushToWindows(*elemIt);

        ++elemIt;
    }
}

void DrawerBase::removeFromWindows(UInt32 uiIndex)
{
    if(uiIndex < _mfWindows.size())
    {
        editMField(WindowsFieldMask, _mfWindows);

        MFUnrecCSMWindowPtr::iterator fieldIt = _mfWindows.begin_nc();

        fieldIt += uiIndex;

        _mfWindows.erase(fieldIt);
    }
}

void DrawerBase::removeFromWindows(CSMWindow * const value)
{
    Int32 iElemIdx = _mfWindows.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(WindowsFieldMask, _mfWindows);

        MFUnrecCSMWindowPtr::iterator fieldIt = _mfWindows.begin_nc();

        fieldIt += iElemIdx;

        _mfWindows.erase(fieldIt);
    }
}
void DrawerBase::clearWindows(void)
{
    editMField(WindowsFieldMask, _mfWindows);


    _mfWindows.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 DrawerBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (WindowsFieldMask & whichField))
    {
        returnValue += _mfWindows.getBinSize();
    }

    return returnValue;
}

void DrawerBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (WindowsFieldMask & whichField))
    {
        _mfWindows.copyToBin(pMem);
    }
}

void DrawerBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (WindowsFieldMask & whichField))
    {
        _mfWindows.copyFromBin(pMem);
    }
}

//! create a new instance of the class
DrawerTransitPtr DrawerBase::createLocal(BitVector bFlags)
{
    DrawerTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<Drawer>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
DrawerTransitPtr DrawerBase::create(void)
{
    return createLocal();
}

Drawer *DrawerBase::createEmptyLocal(BitVector bFlags)
{
    Drawer *returnValue;

    newPtr<Drawer>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
Drawer *DrawerBase::createEmpty(void)
{
    return createEmptyLocal();
}


FieldContainerTransitPtr DrawerBase::shallowCopyLocal(
    BitVector bFlags) const
{
    Drawer *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const Drawer *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr DrawerBase::shallowCopy(void) const
{
    return shallowCopyLocal();
}




/*------------------------- constructors ----------------------------------*/

DrawerBase::DrawerBase(void) :
    Inherited(),
    _mfWindows                ()
{
}

DrawerBase::DrawerBase(const DrawerBase &source) :
    Inherited(source),
    _mfWindows                ()
{
}


/*-------------------------- destructors ----------------------------------*/

DrawerBase::~DrawerBase(void)
{
}

void DrawerBase::onCreate(const Drawer *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        Drawer *pThis = static_cast<Drawer *>(this);

        MFUnrecCSMWindowPtr::const_iterator WindowsIt  =
            source->_mfWindows.begin();
        MFUnrecCSMWindowPtr::const_iterator WindowsEnd =
            source->_mfWindows.end  ();

        while(WindowsIt != WindowsEnd)
        {
            pThis->pushToWindows(*WindowsIt);

            ++WindowsIt;
        }
    }
}

GetFieldHandlePtr DrawerBase::getHandleWindows         (void) const
{
    MFUnrecCSMWindowPtr::GetHandlePtr returnValue(
        new  MFUnrecCSMWindowPtr::GetHandle(
             &_mfWindows, 
             this->getType().getFieldDesc(WindowsFieldId)));

    return returnValue;
}

EditFieldHandlePtr DrawerBase::editHandleWindows        (void)
{
    MFUnrecCSMWindowPtr::EditHandlePtr returnValue(
        new  MFUnrecCSMWindowPtr::EditHandle(
             &_mfWindows, 
             this->getType().getFieldDesc(WindowsFieldId)));

    returnValue->setAddMethod(boost::bind(&Drawer::pushToWindows, 
                              static_cast<Drawer *>(this), _1));

    editMField(WindowsFieldMask, _mfWindows);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void DrawerBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<DrawerBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *DrawerBase::createAspectCopy(void) const
{
    Drawer *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const Drawer *>(this));

    return returnValue;
}
#endif

void DrawerBase::resolveLinks(void)
{
    Inherited::resolveLinks();


    static_cast<Drawer *>(this)->clearWindows();
}


#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<Drawer *>::_type("DrawerPtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(Drawer *)


OSG_EXPORT_PTR_MFIELD_FULL(PointerMField, 
                           Drawer *, 
                           0);

OSG_END_NAMESPACE
