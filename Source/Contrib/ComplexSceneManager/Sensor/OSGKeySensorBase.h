/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class KeySensor
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGKEYSENSORBASE_H_
#define _OSGKEYSENSORBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribCSMDef.h"

//#include "OSGBaseTypes.h"

#include "OSGAttachmentContainer.h" // Parent

#include "OSGBaseFields.h"              // Key type
#include "OSGSysFields.h"               // StateRaw type
#include "OSGOSGAnyFields.h"            // SignalPressed type

#include "OSGKeySensorFields.h"

OSG_BEGIN_NAMESPACE


class KeySensor;

//! \brief KeySensor Base Class.

class OSG_CONTRIBCSM_DLLMAPPING KeySensorBase : public AttachmentContainer
{
  public:

    typedef AttachmentContainer Inherited;
    typedef AttachmentContainer ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(KeySensor);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        KeyFieldId = Inherited::NextFieldId,
        StateRawFieldId = KeyFieldId + 1,
        StateFlipFlopFieldId = StateRawFieldId + 1,
        SignalPressedFieldId = StateFlipFlopFieldId + 1,
        SignalReleasedFieldId = SignalPressedFieldId + 1,
        NextFieldId = SignalReleasedFieldId + 1
    };

    static const OSG::BitVector KeyFieldMask =
        (TypeTraits<BitVector>::One << KeyFieldId);
    static const OSG::BitVector StateRawFieldMask =
        (TypeTraits<BitVector>::One << StateRawFieldId);
    static const OSG::BitVector StateFlipFlopFieldMask =
        (TypeTraits<BitVector>::One << StateFlipFlopFieldId);
    static const OSG::BitVector SignalPressedFieldMask =
        (TypeTraits<BitVector>::One << SignalPressedFieldId);
    static const OSG::BitVector SignalReleasedFieldMask =
        (TypeTraits<BitVector>::One << SignalReleasedFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFString          SFKeyType;
    typedef SFBool            SFStateRawType;
    typedef SFBool            SFStateFlipFlopType;
    typedef SFOSGAny          SFSignalPressedType;
    typedef SFOSGAny          SFSignalReleasedType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFBool              *editSFStateRaw       (void);
            const SFBool              *getSFStateRaw        (void) const;

                  SFBool              *editSFStateFlipFlop  (void);
            const SFBool              *getSFStateFlipFlop   (void) const;


                  bool                &editStateRaw       (void);
                  bool                 getStateRaw        (void) const;

                  bool                &editStateFlipFlop  (void);
                  bool                 getStateFlipFlop   (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setStateRaw       (const bool value);
            void setStateFlipFlop  (const bool value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual SizeT  getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  KeySensorTransitPtr  create          (void);
    static  KeySensor           *createEmpty     (void);

    static  KeySensorTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  KeySensor            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  KeySensorTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFString          _sfKey;
    SFBool            _sfStateRaw;
    SFBool            _sfStateFlipFlop;
    SFOSGAny          _sfSignalPressed;
    SFOSGAny          _sfSignalReleased;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    KeySensorBase(void);
    KeySensorBase(const KeySensorBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~KeySensorBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleKey             (void) const;
    EditFieldHandlePtr editHandleKey            (void);
    GetFieldHandlePtr  getHandleStateRaw        (void) const;
    EditFieldHandlePtr editHandleStateRaw       (void);
    GetFieldHandlePtr  getHandleStateFlipFlop   (void) const;
    EditFieldHandlePtr editHandleStateFlipFlop  (void);
    GetFieldHandlePtr  getHandleSignalPressed   (void) const;
    EditFieldHandlePtr editHandleSignalPressed  (void);
    GetFieldHandlePtr  getHandleSignalReleased  (void) const;
    EditFieldHandlePtr editHandleSignalReleased (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFString            *editSFKey            (void);
            const SFString            *getSFKey             (void) const;

                  SFOSGAny            *editSFSignalPressed  (void);
            const SFOSGAny            *getSFSignalPressed   (void) const;

                  SFOSGAny            *editSFSignalReleased (void);
            const SFOSGAny            *getSFSignalReleased  (void) const;


                  std::string         &editKey            (void);
            const std::string         &getKey             (void) const;

                  OSGAny              &editSignalPressed  (void);
            const OSGAny              &getSignalPressed   (void) const;

                  OSGAny              &editSignalReleased (void);
            const OSGAny              &getSignalReleased  (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setKey            (const std::string &value);
            void setSignalPressed  (const OSGAny &value);
            void setSignalReleased (const OSGAny &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      KeySensorBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const KeySensorBase &source);
};

typedef KeySensorBase *KeySensorBaseP;

OSG_END_NAMESPACE

#endif /* _OSGKEYSENSORBASE_H_ */
