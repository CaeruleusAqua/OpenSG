/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class SensorTask!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>



#include <OSGSensor.h> // Sensors Class

#include "OSGSensorTaskBase.h"
#include "OSGSensorTask.h"

#include "boost/bind.hpp"

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::SensorTask
    
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var Sensor *        SensorTaskBase::_mfSensors
    
*/


void SensorTaskBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUncountedSensorPtr::Description(
        MFUncountedSensorPtr::getClassType(),
        "sensors",
        "",
        SensorsFieldId, SensorsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&SensorTask::editHandleSensors),
        static_cast<FieldGetMethodSig >(&SensorTask::getHandleSensors));

    oType.addInitialDesc(pDesc);
}


SensorTaskBase::TypeObject SensorTaskBase::_type(
    SensorTaskBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    reinterpret_cast<PrototypeCreateF>(&SensorTaskBase::createEmptyLocal),
    SensorTask::initMethod,
    SensorTask::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&SensorTaskBase::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"SensorTask\"\n"
    "    parent=\"AttachmentContainer\"\n"
    "    library=\"ContribCSM\"\n"
    "    pointerfieldtypes=\"single\"\n"
    "    structure=\"concrete\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    isBundle=\"true\"\n"
    "    parentFields=\"none\"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"sensors\"\n"
    "\t\ttype=\"Sensor\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        category=\"uncountedpointer\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &SensorTaskBase::getType(void)
{
    return _type;
}

const FieldContainerType &SensorTaskBase::getType(void) const
{
    return _type;
}

UInt32 SensorTaskBase::getContainerSize(void) const
{
    return sizeof(SensorTask);
}

/*------------------------- decorator get ------------------------------*/


//! Get the SensorTask::_mfSensors field.
const MFUncountedSensorPtr *SensorTaskBase::getMFSensors(void) const
{
    return &_mfSensors;
}

MFUncountedSensorPtr *SensorTaskBase::editMFSensors        (void)
{
    editMField(SensorsFieldMask, _mfSensors);

    return &_mfSensors;
}



void SensorTaskBase::pushToSensors(Sensor * const value)
{
    editMField(SensorsFieldMask, _mfSensors);

    _mfSensors.push_back(value);
}

void SensorTaskBase::assignSensors  (const MFUncountedSensorPtr &value)
{
    MFUncountedSensorPtr::const_iterator elemIt  =
        value.begin();
    MFUncountedSensorPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<SensorTask *>(this)->clearSensors();

    while(elemIt != elemEnd)
    {
        this->pushToSensors(*elemIt);

        ++elemIt;
    }
}

void SensorTaskBase::removeFromSensors(UInt32 uiIndex)
{
    if(uiIndex < _mfSensors.size())
    {
        editMField(SensorsFieldMask, _mfSensors);

        _mfSensors.erase(uiIndex);
    }
}

void SensorTaskBase::removeObjFromSensors(Sensor * const value)
{
    Int32 iElemIdx = _mfSensors.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(SensorsFieldMask, _mfSensors);

        _mfSensors.erase(iElemIdx);
    }
}
void SensorTaskBase::clearSensors(void)
{
    editMField(SensorsFieldMask, _mfSensors);


    _mfSensors.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 SensorTaskBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (SensorsFieldMask & whichField))
    {
        returnValue += _mfSensors.getBinSize();
    }

    return returnValue;
}

void SensorTaskBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (SensorsFieldMask & whichField))
    {
        _mfSensors.copyToBin(pMem);
    }
}

void SensorTaskBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (SensorsFieldMask & whichField))
    {
        _mfSensors.copyFromBin(pMem);
    }
}

//! create a new instance of the class
SensorTaskTransitPtr SensorTaskBase::createLocal(BitVector bFlags)
{
    SensorTaskTransitPtr fc;

    if(getClassType().getPrototype() != NULL)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<SensorTask>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
SensorTaskTransitPtr SensorTaskBase::create(void)
{
    return createLocal();
}

SensorTask *SensorTaskBase::createEmptyLocal(BitVector bFlags)
{
    SensorTask *returnValue;

    newPtr<SensorTask>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

//! create an empty new instance of the class, do not copy the prototype
SensorTask *SensorTaskBase::createEmpty(void)
{
    return createEmptyLocal();
}


FieldContainerTransitPtr SensorTaskBase::shallowCopyLocal(
    BitVector bFlags) const
{
    SensorTask *tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const SensorTask *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr SensorTaskBase::shallowCopy(void) const
{
    return shallowCopyLocal();
}




/*------------------------- constructors ----------------------------------*/

SensorTaskBase::SensorTaskBase(void) :
    Inherited(),
    _mfSensors                ()
{
}

SensorTaskBase::SensorTaskBase(const SensorTaskBase &source) :
    Inherited(source),
    _mfSensors                ()
{
}


/*-------------------------- destructors ----------------------------------*/

SensorTaskBase::~SensorTaskBase(void)
{
}

void SensorTaskBase::onCreate(const SensorTask *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        SensorTask *pThis = static_cast<SensorTask *>(this);

        MFUncountedSensorPtr::const_iterator SensorsIt  =
            source->_mfSensors.begin();
        MFUncountedSensorPtr::const_iterator SensorsEnd =
            source->_mfSensors.end  ();

        while(SensorsIt != SensorsEnd)
        {
            pThis->pushToSensors(*SensorsIt);

            ++SensorsIt;
        }
    }
}

GetFieldHandlePtr SensorTaskBase::getHandleSensors         (void) const
{
    MFUncountedSensorPtr::GetHandlePtr returnValue(
        new  MFUncountedSensorPtr::GetHandle(
             &_mfSensors,
             this->getType().getFieldDesc(SensorsFieldId)));

    return returnValue;
}

EditFieldHandlePtr SensorTaskBase::editHandleSensors        (void)
{
    MFUncountedSensorPtr::EditHandlePtr returnValue(
        new  MFUncountedSensorPtr::EditHandle(
             &_mfSensors,
             this->getType().getFieldDesc(SensorsFieldId)));

    returnValue->setAddMethod(
        boost::bind(&SensorTask::pushToSensors,
                    static_cast<SensorTask *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&SensorTask::removeFromSensors,
                    static_cast<SensorTask *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&SensorTask::removeObjFromSensors,
                    static_cast<SensorTask *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&SensorTask::clearSensors,
                    static_cast<SensorTask *>(this)));

    editMField(SensorsFieldMask, _mfSensors);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void SensorTaskBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<SensorTaskBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainer *SensorTaskBase::createAspectCopy(void) const
{
    SensorTask *returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const SensorTask *>(this));

    return returnValue;
}
#endif

void SensorTaskBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<SensorTask *>(this)->clearSensors();


}


#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<SensorTask *>::_type("SensorTaskPtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(SensorTask *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           SensorTask *,
                           0);


OSG_END_NAMESPACE
