/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class CSMClusterWindow!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE



//! access the type of the class
inline
OSG::FieldContainerType &CSMClusterWindowBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 CSMClusterWindowBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 CSMClusterWindowBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the CSMClusterWindow::_sfRenderClient field.

inline
bool &CSMClusterWindowBase::editRenderClient(void)
{
    editSField(RenderClientFieldMask);

    return _sfRenderClient.getValue();
}

//! Get the value of the CSMClusterWindow::_sfRenderClient field.
inline
      bool  CSMClusterWindowBase::getRenderClient(void) const
{
    return _sfRenderClient.getValue();
}

//! Set the value of the CSMClusterWindow::_sfRenderClient field.
inline
void CSMClusterWindowBase::setRenderClient(const bool value)
{
    editSField(RenderClientFieldMask);

    _sfRenderClient.setValue(value);
}
//! Get the value of the CSMClusterWindow::_sfServerRows field.

inline
UInt32 &CSMClusterWindowBase::editServerRows(void)
{
    editSField(ServerRowsFieldMask);

    return _sfServerRows.getValue();
}

//! Get the value of the CSMClusterWindow::_sfServerRows field.
inline
      UInt32  CSMClusterWindowBase::getServerRows(void) const
{
    return _sfServerRows.getValue();
}

//! Set the value of the CSMClusterWindow::_sfServerRows field.
inline
void CSMClusterWindowBase::setServerRows(const UInt32 value)
{
    editSField(ServerRowsFieldMask);

    _sfServerRows.setValue(value);
}
//! Get the value of the CSMClusterWindow::_sfConnectionType field.

inline
std::string &CSMClusterWindowBase::editConnectionType(void)
{
    editSField(ConnectionTypeFieldMask);

    return _sfConnectionType.getValue();
}

//! Get the value of the CSMClusterWindow::_sfConnectionType field.
inline
const std::string &CSMClusterWindowBase::getConnectionType(void) const
{
    return _sfConnectionType.getValue();
}

//! Set the value of the CSMClusterWindow::_sfConnectionType field.
inline
void CSMClusterWindowBase::setConnectionType(const std::string &value)
{
    editSField(ConnectionTypeFieldMask);

    _sfConnectionType.setValue(value);
}
//! Get the value of the CSMClusterWindow::_sfClusterMode field.

inline
std::string &CSMClusterWindowBase::editClusterMode(void)
{
    editSField(ClusterModeFieldMask);

    return _sfClusterMode.getValue();
}

//! Get the value of the CSMClusterWindow::_sfClusterMode field.
inline
const std::string &CSMClusterWindowBase::getClusterMode(void) const
{
    return _sfClusterMode.getValue();
}

//! Set the value of the CSMClusterWindow::_sfClusterMode field.
inline
void CSMClusterWindowBase::setClusterMode(const std::string &value)
{
    editSField(ClusterModeFieldMask);

    _sfClusterMode.setValue(value);
}

//! Get the value of the \a index element the CSMClusterWindow::_mfServers field.
inline
const std::string &CSMClusterWindowBase::getServers(const UInt32 index) const
{
    return _mfServers[index];
}

inline
std::string &CSMClusterWindowBase::editServers(const UInt32 index)
{
    editMField(ServersFieldMask, _mfServers);

    return _mfServers[index];
}

//! Get the value of the \a index element the CSMClusterWindow::_mfServerIds field.
inline
      UInt32  CSMClusterWindowBase::getServerIds(const UInt32 index) const
{
    return _mfServerIds[index];
}

inline
UInt32 &CSMClusterWindowBase::editServerIds(const UInt32 index)
{
    editMField(ServerIdsFieldMask, _mfServerIds);

    return _mfServerIds[index];
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void CSMClusterWindowBase::execSync (      CSMClusterWindowBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (ClientWindowFieldMask & whichField))
        _sfClientWindow.syncWith(pFrom->_sfClientWindow);

    if(FieldBits::NoField != (RenderClientFieldMask & whichField))
        _sfRenderClient.syncWith(pFrom->_sfRenderClient);

    if(FieldBits::NoField != (ServersFieldMask & whichField))
        _mfServers.syncWith(pFrom->_mfServers,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (ServerIdsFieldMask & whichField))
        _mfServerIds.syncWith(pFrom->_mfServerIds,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (ServerRowsFieldMask & whichField))
        _sfServerRows.syncWith(pFrom->_sfServerRows);

    if(FieldBits::NoField != (ConnectionTypeFieldMask & whichField))
        _sfConnectionType.syncWith(pFrom->_sfConnectionType);

    if(FieldBits::NoField != (ClusterModeFieldMask & whichField))
        _sfClusterMode.syncWith(pFrom->_sfClusterMode);

    if(FieldBits::NoField != (ComposerFieldMask & whichField))
        _sfComposer.syncWith(pFrom->_sfComposer);

    if(FieldBits::NoField != (OptionsFieldMask & whichField))
        _sfOptions.syncWith(pFrom->_sfOptions);
}
#endif


inline
const Char8 *CSMClusterWindowBase::getClassname(void)
{
    return "CSMClusterWindow";
}
OSG_GEN_CONTAINERPTR(CSMClusterWindow);

OSG_END_NAMESPACE

