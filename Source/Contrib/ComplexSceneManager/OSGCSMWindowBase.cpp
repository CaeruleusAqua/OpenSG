/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class CSMWindow!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>



#include <OSGFieldContainer.h> // Parent Class
#include <OSGCSMViewport.h> // Viewports Class

#include "OSGCSMWindowBase.h"
#include "OSGCSMWindow.h"

#include "boost/bind.hpp"

#ifdef WIN32 // turn off 'this' : used in base member initializer list warning
#pragma warning(disable:4355)
#endif

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::CSMWindow
    
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var FieldContainer * CSMWindowBase::_sfParent
    
*/

/*! \var CSMViewport *   CSMWindowBase::_mfViewports
    
*/

/*! \var MouseData       CSMWindowBase::_sfMouseData
    
*/

/*! \var Vec2f           CSMWindowBase::_sfSize
    
*/

/*! \var Vec2f           CSMWindowBase::_sfPosition
    
*/

/*! \var bool            CSMWindowBase::_sfDecorEnabled
    
*/

/*! \var Int32           CSMWindowBase::_sfRequestMajor
    
*/

/*! \var Int32           CSMWindowBase::_sfRequestMinor
    
*/

/*! \var bool            CSMWindowBase::_sfEnableForwardCompatContext
    
*/

/*! \var bool            CSMWindowBase::_sfEnableDebugContext
    
*/

/*! \var std::string     CSMWindowBase::_mfIgnoreExtensions
    
*/


void CSMWindowBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFParentFieldContainerPtr::Description(
        SFParentFieldContainerPtr::getClassType(),
        "parent",
        "",
        ParentFieldId, ParentFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast     <FieldEditMethodSig>(&CSMWindow::invalidEditField),
        static_cast     <FieldGetMethodSig >(&CSMWindow::invalidGetField));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecCSMViewportPtr::Description(
        MFUnrecCSMViewportPtr::getClassType(),
        "viewports",
        "",
        ViewportsFieldId, ViewportsFieldMask,
        false,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CSMWindow::editHandleViewports),
        static_cast<FieldGetMethodSig >(&CSMWindow::getHandleViewports));

    oType.addInitialDesc(pDesc);

    pDesc = new SFMouseData::Description(
        SFMouseData::getClassType(),
        "mouseData",
        "",
        MouseDataFieldId, MouseDataFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CSMWindow::editHandleMouseData),
        static_cast<FieldGetMethodSig >(&CSMWindow::getHandleMouseData));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "size",
        "",
        SizeFieldId, SizeFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CSMWindow::editHandleSize),
        static_cast<FieldGetMethodSig >(&CSMWindow::getHandleSize));

    oType.addInitialDesc(pDesc);

    pDesc = new SFVec2f::Description(
        SFVec2f::getClassType(),
        "position",
        "",
        PositionFieldId, PositionFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CSMWindow::editHandlePosition),
        static_cast<FieldGetMethodSig >(&CSMWindow::getHandlePosition));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "decorEnabled",
        "",
        DecorEnabledFieldId, DecorEnabledFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CSMWindow::editHandleDecorEnabled),
        static_cast<FieldGetMethodSig >(&CSMWindow::getHandleDecorEnabled));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "requestMajor",
        "",
        RequestMajorFieldId, RequestMajorFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CSMWindow::editHandleRequestMajor),
        static_cast<FieldGetMethodSig >(&CSMWindow::getHandleRequestMajor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "requestMinor",
        "",
        RequestMinorFieldId, RequestMinorFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CSMWindow::editHandleRequestMinor),
        static_cast<FieldGetMethodSig >(&CSMWindow::getHandleRequestMinor));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "enableForwardCompatContext",
        "",
        EnableForwardCompatContextFieldId, EnableForwardCompatContextFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CSMWindow::editHandleEnableForwardCompatContext),
        static_cast<FieldGetMethodSig >(&CSMWindow::getHandleEnableForwardCompatContext));

    oType.addInitialDesc(pDesc);

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "enableDebugContext",
        "",
        EnableDebugContextFieldId, EnableDebugContextFieldMask,
        true,
        (Field::SFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CSMWindow::editHandleEnableDebugContext),
        static_cast<FieldGetMethodSig >(&CSMWindow::getHandleEnableDebugContext));

    oType.addInitialDesc(pDesc);

    pDesc = new MFString::Description(
        MFString::getClassType(),
        "ignoreExtensions",
        "",
        IgnoreExtensionsFieldId, IgnoreExtensionsFieldMask,
        true,
        (Field::MFDefaultFlags | Field::FStdAccess),
        static_cast<FieldEditMethodSig>(&CSMWindow::editHandleIgnoreExtensions),
        static_cast<FieldGetMethodSig >(&CSMWindow::getHandleIgnoreExtensions));

    oType.addInitialDesc(pDesc);
}


CSMWindowBase::TypeObject CSMWindowBase::_type(
    CSMWindowBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    CSMWindow::initMethod,
    CSMWindow::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&CSMWindowBase::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"CSMWindow\"\n"
    "    parent=\"AttachmentContainer\"\n"
    "    library=\"ContribCSM\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    isBundle=\"true\"\n"
    "    childfieldparent=\"FieldContainer\"\n"
    "    parentfieldcard=\"single\"\n"
    "    childFields=\"both\"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"parent\"\n"
    "\t\ttype=\"FieldContainer\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"none\"\n"
    "        category=\"parentpointer\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"viewports\"\n"
    "\t\ttype=\"CSMViewport\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        category=\"pointer\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"mouseData\"\n"
    "\t\ttype=\"MouseData\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"size\"\n"
    "\t\ttype=\"Vec2f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "        defaultValue=\"300, 300\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"position\"\n"
    "\t\ttype=\"Vec2f\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "        defaultValue=\"100, 100\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t\tname=\"decorEnabled\"\n"
    "\t\ttype=\"bool\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "        defaultValue=\"true\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t   name=\"requestMajor\"\n"
    "\t   type=\"Int32\"\n"
    "\t   cardinality=\"single\"\n"
    "\t   visibility=\"internal\"\n"
    "\t   access=\"public\"\n"
    "       fieldFlags=\"\"\n"
    "       defaultValue=\"-1\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t   name=\"requestMinor\"\n"
    "\t   type=\"Int32\"\n"
    "\t   cardinality=\"single\"\n"
    "\t   visibility=\"internal\"\n"
    "\t   access=\"public\"\n"
    "       fieldFlags=\"\"\n"
    "       defaultValue=\"0\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t   name=\"enableForwardCompatContext\"\n"
    "\t   type=\"bool\"\n"
    "\t   cardinality=\"single\"\n"
    "\t   visibility=\"internal\"\n"
    "\t   access=\"public\"\n"
    "       fieldFlags=\"\"\n"
    "       defaultValue=\"false\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t   name=\"enableDebugContext\"\n"
    "\t   type=\"bool\"\n"
    "\t   cardinality=\"single\"\n"
    "\t   visibility=\"internal\"\n"
    "\t   access=\"public\"\n"
    "       fieldFlags=\"\"\n"
    "       defaultValue=\"false\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\t<Field\n"
    "\t   name=\"ignoreExtensions\"\n"
    "\t   type=\"std::string\"\n"
    "\t   cardinality=\"multi\"\n"
    "\t   visibility=\"internal\"\n"
    "\t   access=\"public\"\n"
    "       fieldFlags=\"\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &CSMWindowBase::getType(void)
{
    return _type;
}

const FieldContainerType &CSMWindowBase::getType(void) const
{
    return _type;
}

UInt32 CSMWindowBase::getContainerSize(void) const
{
    return sizeof(CSMWindow);
}

/*------------------------- decorator get ------------------------------*/



//! Get the CSMWindow::_mfViewports field.
const MFUnrecCSMViewportPtr *CSMWindowBase::getMFViewports(void) const
{
    return &_mfViewports;
}

MFUnrecCSMViewportPtr *CSMWindowBase::editMFViewports      (void)
{
    editMField(ViewportsFieldMask, _mfViewports);

    return &_mfViewports;
}

SFMouseData *CSMWindowBase::editSFMouseData(void)
{
    editSField(MouseDataFieldMask);

    return &_sfMouseData;
}

const SFMouseData *CSMWindowBase::getSFMouseData(void) const
{
    return &_sfMouseData;
}


SFVec2f *CSMWindowBase::editSFSize(void)
{
    editSField(SizeFieldMask);

    return &_sfSize;
}

const SFVec2f *CSMWindowBase::getSFSize(void) const
{
    return &_sfSize;
}


SFVec2f *CSMWindowBase::editSFPosition(void)
{
    editSField(PositionFieldMask);

    return &_sfPosition;
}

const SFVec2f *CSMWindowBase::getSFPosition(void) const
{
    return &_sfPosition;
}


SFBool *CSMWindowBase::editSFDecorEnabled(void)
{
    editSField(DecorEnabledFieldMask);

    return &_sfDecorEnabled;
}

const SFBool *CSMWindowBase::getSFDecorEnabled(void) const
{
    return &_sfDecorEnabled;
}


SFInt32 *CSMWindowBase::editSFRequestMajor(void)
{
    editSField(RequestMajorFieldMask);

    return &_sfRequestMajor;
}

const SFInt32 *CSMWindowBase::getSFRequestMajor(void) const
{
    return &_sfRequestMajor;
}


SFInt32 *CSMWindowBase::editSFRequestMinor(void)
{
    editSField(RequestMinorFieldMask);

    return &_sfRequestMinor;
}

const SFInt32 *CSMWindowBase::getSFRequestMinor(void) const
{
    return &_sfRequestMinor;
}


SFBool *CSMWindowBase::editSFEnableForwardCompatContext(void)
{
    editSField(EnableForwardCompatContextFieldMask);

    return &_sfEnableForwardCompatContext;
}

const SFBool *CSMWindowBase::getSFEnableForwardCompatContext(void) const
{
    return &_sfEnableForwardCompatContext;
}


SFBool *CSMWindowBase::editSFEnableDebugContext(void)
{
    editSField(EnableDebugContextFieldMask);

    return &_sfEnableDebugContext;
}

const SFBool *CSMWindowBase::getSFEnableDebugContext(void) const
{
    return &_sfEnableDebugContext;
}


MFString *CSMWindowBase::editMFIgnoreExtensions(void)
{
    editMField(IgnoreExtensionsFieldMask, _mfIgnoreExtensions);

    return &_mfIgnoreExtensions;
}

const MFString *CSMWindowBase::getMFIgnoreExtensions(void) const
{
    return &_mfIgnoreExtensions;
}




void CSMWindowBase::pushToViewports(CSMViewport * const value)
{
    editMField(ViewportsFieldMask, _mfViewports);

    _mfViewports.push_back(value);
}

void CSMWindowBase::assignViewports(const MFUnrecCSMViewportPtr &value)
{
    MFUnrecCSMViewportPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecCSMViewportPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<CSMWindow *>(this)->clearViewports();

    while(elemIt != elemEnd)
    {
        this->pushToViewports(*elemIt);

        ++elemIt;
    }
}

void CSMWindowBase::removeFromViewports(UInt32 uiIndex)
{
    if(uiIndex < _mfViewports.size())
    {
        editMField(ViewportsFieldMask, _mfViewports);

        _mfViewports.erase(uiIndex);
    }
}

void CSMWindowBase::removeObjFromViewports(CSMViewport * const value)
{
    Int32 iElemIdx = _mfViewports.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ViewportsFieldMask, _mfViewports);

        _mfViewports.erase(iElemIdx);
    }
}
void CSMWindowBase::clearViewports(void)
{
    editMField(ViewportsFieldMask, _mfViewports);


    _mfViewports.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 CSMWindowBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ParentFieldMask & whichField))
    {
        returnValue += _sfParent.getBinSize();
    }
    if(FieldBits::NoField != (ViewportsFieldMask & whichField))
    {
        returnValue += _mfViewports.getBinSize();
    }
    if(FieldBits::NoField != (MouseDataFieldMask & whichField))
    {
        returnValue += _sfMouseData.getBinSize();
    }
    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        returnValue += _sfSize.getBinSize();
    }
    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        returnValue += _sfPosition.getBinSize();
    }
    if(FieldBits::NoField != (DecorEnabledFieldMask & whichField))
    {
        returnValue += _sfDecorEnabled.getBinSize();
    }
    if(FieldBits::NoField != (RequestMajorFieldMask & whichField))
    {
        returnValue += _sfRequestMajor.getBinSize();
    }
    if(FieldBits::NoField != (RequestMinorFieldMask & whichField))
    {
        returnValue += _sfRequestMinor.getBinSize();
    }
    if(FieldBits::NoField != (EnableForwardCompatContextFieldMask & whichField))
    {
        returnValue += _sfEnableForwardCompatContext.getBinSize();
    }
    if(FieldBits::NoField != (EnableDebugContextFieldMask & whichField))
    {
        returnValue += _sfEnableDebugContext.getBinSize();
    }
    if(FieldBits::NoField != (IgnoreExtensionsFieldMask & whichField))
    {
        returnValue += _mfIgnoreExtensions.getBinSize();
    }

    return returnValue;
}

void CSMWindowBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ParentFieldMask & whichField))
    {
        _sfParent.copyToBin(pMem);
    }
    if(FieldBits::NoField != (ViewportsFieldMask & whichField))
    {
        _mfViewports.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MouseDataFieldMask & whichField))
    {
        _sfMouseData.copyToBin(pMem);
    }
    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        _sfSize.copyToBin(pMem);
    }
    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        _sfPosition.copyToBin(pMem);
    }
    if(FieldBits::NoField != (DecorEnabledFieldMask & whichField))
    {
        _sfDecorEnabled.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RequestMajorFieldMask & whichField))
    {
        _sfRequestMajor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (RequestMinorFieldMask & whichField))
    {
        _sfRequestMinor.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnableForwardCompatContextFieldMask & whichField))
    {
        _sfEnableForwardCompatContext.copyToBin(pMem);
    }
    if(FieldBits::NoField != (EnableDebugContextFieldMask & whichField))
    {
        _sfEnableDebugContext.copyToBin(pMem);
    }
    if(FieldBits::NoField != (IgnoreExtensionsFieldMask & whichField))
    {
        _mfIgnoreExtensions.copyToBin(pMem);
    }
}

void CSMWindowBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ParentFieldMask & whichField))
    {
        _sfParent.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (ViewportsFieldMask & whichField))
    {
        _mfViewports.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MouseDataFieldMask & whichField))
    {
        _sfMouseData.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (SizeFieldMask & whichField))
    {
        _sfSize.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (PositionFieldMask & whichField))
    {
        _sfPosition.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (DecorEnabledFieldMask & whichField))
    {
        _sfDecorEnabled.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RequestMajorFieldMask & whichField))
    {
        _sfRequestMajor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (RequestMinorFieldMask & whichField))
    {
        _sfRequestMinor.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnableForwardCompatContextFieldMask & whichField))
    {
        _sfEnableForwardCompatContext.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (EnableDebugContextFieldMask & whichField))
    {
        _sfEnableDebugContext.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (IgnoreExtensionsFieldMask & whichField))
    {
        _mfIgnoreExtensions.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

CSMWindowBase::CSMWindowBase(void) :
    Inherited(),
    _sfParent                 (NULL),
    _mfViewports              (),
    _sfMouseData              (),
    _sfSize                   (Vec2f(300, 300)),
    _sfPosition               (Vec2f(100, 100)),
    _sfDecorEnabled           (bool(true)),
    _sfRequestMajor           (Int32(-1)),
    _sfRequestMinor           (Int32(0)),
    _sfEnableForwardCompatContext(bool(false)),
    _sfEnableDebugContext     (bool(false)),
    _mfIgnoreExtensions       ()
{
}

CSMWindowBase::CSMWindowBase(const CSMWindowBase &source) :
    Inherited(source),
    _sfParent                 (NULL),
    _mfViewports              (),
    _sfMouseData              (source._sfMouseData              ),
    _sfSize                   (source._sfSize                   ),
    _sfPosition               (source._sfPosition               ),
    _sfDecorEnabled           (source._sfDecorEnabled           ),
    _sfRequestMajor           (source._sfRequestMajor           ),
    _sfRequestMinor           (source._sfRequestMinor           ),
    _sfEnableForwardCompatContext(source._sfEnableForwardCompatContext),
    _sfEnableDebugContext     (source._sfEnableDebugContext     ),
    _mfIgnoreExtensions       (source._mfIgnoreExtensions       )
{
}


/*-------------------------- destructors ----------------------------------*/

CSMWindowBase::~CSMWindowBase(void)
{
}
/*-------------------------------------------------------------------------*/
/* Parent linking                                                          */

bool CSMWindowBase::linkParent(
    FieldContainer * const pParent,
    UInt16           const childFieldId,
    UInt16           const parentFieldId )
{
    if(parentFieldId == ParentFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            FieldContainer *pOldParent =
                _sfParent.getValue         ();

            UInt16 oldChildFieldId =
                _sfParent.getParentFieldPos();

            if(pOldParent != NULL)
            {
                pOldParent->unlinkChild(this, oldChildFieldId);
            }

            editSField(ParentFieldMask);

            _sfParent.setValue(static_cast<FieldContainer *>(pParent), childFieldId);

            return true;
        }

        return false;
    }

    return Inherited::linkParent(pParent, childFieldId, parentFieldId);
}

bool CSMWindowBase::unlinkParent(
    FieldContainer * const pParent,
    UInt16           const parentFieldId)
{
    if(parentFieldId == ParentFieldId)
    {
        FieldContainer * pTypedParent =
            dynamic_cast< FieldContainer * >(pParent);

        if(pTypedParent != NULL)
        {
            if(_sfParent.getValue() == pParent)
            {
                editSField(ParentFieldMask);

                _sfParent.setValue(NULL, 0xFFFF);

                return true;
            }

            FWARNING(("CSMWindowBase::unlinkParent: "
                      "Child <-> Parent link inconsistent.\n"));

            return false;
        }

        return false;
    }

    return Inherited::unlinkParent(pParent, parentFieldId);
}


void CSMWindowBase::onCreate(const CSMWindow *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        CSMWindow *pThis = static_cast<CSMWindow *>(this);

        MFUnrecCSMViewportPtr::const_iterator ViewportsIt  =
            source->_mfViewports.begin();
        MFUnrecCSMViewportPtr::const_iterator ViewportsEnd =
            source->_mfViewports.end  ();

        while(ViewportsIt != ViewportsEnd)
        {
            pThis->pushToViewports(*ViewportsIt);

            ++ViewportsIt;
        }
    }
}

GetFieldHandlePtr CSMWindowBase::getHandleParent          (void) const
{
    SFParentFieldContainerPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr CSMWindowBase::editHandleParent         (void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}

GetFieldHandlePtr CSMWindowBase::getHandleViewports       (void) const
{
    MFUnrecCSMViewportPtr::GetHandlePtr returnValue(
        new  MFUnrecCSMViewportPtr::GetHandle(
             &_mfViewports,
             this->getType().getFieldDesc(ViewportsFieldId)));

    return returnValue;
}

EditFieldHandlePtr CSMWindowBase::editHandleViewports      (void)
{
    MFUnrecCSMViewportPtr::EditHandlePtr returnValue(
        new  MFUnrecCSMViewportPtr::EditHandle(
             &_mfViewports,
             this->getType().getFieldDesc(ViewportsFieldId)));

    returnValue->setAddMethod(
        boost::bind(&CSMWindow::pushToViewports,
                    static_cast<CSMWindow *>(this), _1));
    returnValue->setRemoveMethod(
        boost::bind(&CSMWindow::removeFromViewports,
                    static_cast<CSMWindow *>(this), _1));
    returnValue->setRemoveObjMethod(
        boost::bind(&CSMWindow::removeObjFromViewports,
                    static_cast<CSMWindow *>(this), _1));
    returnValue->setClearMethod(
        boost::bind(&CSMWindow::clearViewports,
                    static_cast<CSMWindow *>(this)));

    editMField(ViewportsFieldMask, _mfViewports);

    return returnValue;
}

GetFieldHandlePtr CSMWindowBase::getHandleMouseData       (void) const
{
    SFMouseData::GetHandlePtr returnValue(
        new  SFMouseData::GetHandle(
             &_sfMouseData,
             this->getType().getFieldDesc(MouseDataFieldId)));

    return returnValue;
}

EditFieldHandlePtr CSMWindowBase::editHandleMouseData      (void)
{
    SFMouseData::EditHandlePtr returnValue(
        new  SFMouseData::EditHandle(
             &_sfMouseData,
             this->getType().getFieldDesc(MouseDataFieldId)));


    editSField(MouseDataFieldMask);

    return returnValue;
}

GetFieldHandlePtr CSMWindowBase::getHandleSize            (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfSize,
             this->getType().getFieldDesc(SizeFieldId)));

    return returnValue;
}

EditFieldHandlePtr CSMWindowBase::editHandleSize           (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfSize,
             this->getType().getFieldDesc(SizeFieldId)));


    editSField(SizeFieldMask);

    return returnValue;
}

GetFieldHandlePtr CSMWindowBase::getHandlePosition        (void) const
{
    SFVec2f::GetHandlePtr returnValue(
        new  SFVec2f::GetHandle(
             &_sfPosition,
             this->getType().getFieldDesc(PositionFieldId)));

    return returnValue;
}

EditFieldHandlePtr CSMWindowBase::editHandlePosition       (void)
{
    SFVec2f::EditHandlePtr returnValue(
        new  SFVec2f::EditHandle(
             &_sfPosition,
             this->getType().getFieldDesc(PositionFieldId)));


    editSField(PositionFieldMask);

    return returnValue;
}

GetFieldHandlePtr CSMWindowBase::getHandleDecorEnabled    (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfDecorEnabled,
             this->getType().getFieldDesc(DecorEnabledFieldId)));

    return returnValue;
}

EditFieldHandlePtr CSMWindowBase::editHandleDecorEnabled   (void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfDecorEnabled,
             this->getType().getFieldDesc(DecorEnabledFieldId)));


    editSField(DecorEnabledFieldMask);

    return returnValue;
}

GetFieldHandlePtr CSMWindowBase::getHandleRequestMajor    (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfRequestMajor,
             this->getType().getFieldDesc(RequestMajorFieldId)));

    return returnValue;
}

EditFieldHandlePtr CSMWindowBase::editHandleRequestMajor   (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfRequestMajor,
             this->getType().getFieldDesc(RequestMajorFieldId)));


    editSField(RequestMajorFieldMask);

    return returnValue;
}

GetFieldHandlePtr CSMWindowBase::getHandleRequestMinor    (void) const
{
    SFInt32::GetHandlePtr returnValue(
        new  SFInt32::GetHandle(
             &_sfRequestMinor,
             this->getType().getFieldDesc(RequestMinorFieldId)));

    return returnValue;
}

EditFieldHandlePtr CSMWindowBase::editHandleRequestMinor   (void)
{
    SFInt32::EditHandlePtr returnValue(
        new  SFInt32::EditHandle(
             &_sfRequestMinor,
             this->getType().getFieldDesc(RequestMinorFieldId)));


    editSField(RequestMinorFieldMask);

    return returnValue;
}

GetFieldHandlePtr CSMWindowBase::getHandleEnableForwardCompatContext (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfEnableForwardCompatContext,
             this->getType().getFieldDesc(EnableForwardCompatContextFieldId)));

    return returnValue;
}

EditFieldHandlePtr CSMWindowBase::editHandleEnableForwardCompatContext(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfEnableForwardCompatContext,
             this->getType().getFieldDesc(EnableForwardCompatContextFieldId)));


    editSField(EnableForwardCompatContextFieldMask);

    return returnValue;
}

GetFieldHandlePtr CSMWindowBase::getHandleEnableDebugContext (void) const
{
    SFBool::GetHandlePtr returnValue(
        new  SFBool::GetHandle(
             &_sfEnableDebugContext,
             this->getType().getFieldDesc(EnableDebugContextFieldId)));

    return returnValue;
}

EditFieldHandlePtr CSMWindowBase::editHandleEnableDebugContext(void)
{
    SFBool::EditHandlePtr returnValue(
        new  SFBool::EditHandle(
             &_sfEnableDebugContext,
             this->getType().getFieldDesc(EnableDebugContextFieldId)));


    editSField(EnableDebugContextFieldMask);

    return returnValue;
}

GetFieldHandlePtr CSMWindowBase::getHandleIgnoreExtensions (void) const
{
    MFString::GetHandlePtr returnValue(
        new  MFString::GetHandle(
             &_mfIgnoreExtensions,
             this->getType().getFieldDesc(IgnoreExtensionsFieldId)));

    return returnValue;
}

EditFieldHandlePtr CSMWindowBase::editHandleIgnoreExtensions(void)
{
    MFString::EditHandlePtr returnValue(
        new  MFString::EditHandle(
             &_mfIgnoreExtensions,
             this->getType().getFieldDesc(IgnoreExtensionsFieldId)));


    editMField(IgnoreExtensionsFieldMask, _mfIgnoreExtensions);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void CSMWindowBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    CSMWindow *pThis = static_cast<CSMWindow *>(this);

    pThis->execSync(static_cast<CSMWindow *>(&oFrom),
                    whichField,
                    oOffsets,
                    syncMode,
                    uiSyncInfo);
}
#endif



void CSMWindowBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<CSMWindow *>(this)->clearViewports();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfIgnoreExtensions.terminateShare(Thread::getCurrentAspect(),
                                      oOffsets);
#endif
}


#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<CSMWindow *>::_type("CSMWindowPtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(CSMWindow *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField,
                           CSMWindow *,
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField,
                           CSMWindow *,
                           0);

DataType &FieldTraits< CSMWindow *, 1 >::getType(void)
{
    return FieldTraits<CSMWindow *, 0>::getType();
}


OSG_EXPORT_PTR_SFIELD(ChildPointerSField,
                      CSMWindow *,
                      UnrecordedRefCountPolicy,
                      1);


OSG_EXPORT_PTR_MFIELD(ChildPointerMField,
                      CSMWindow *,
                      UnrecordedRefCountPolicy,
                      1);


OSG_END_NAMESPACE
