/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class CSMWindow!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILECSMWINDOWINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>



#include <OSGCSMViewport.h> // Viewports Class

#include "OSGCSMWindowBase.h"
#include "OSGCSMWindow.h"

#include "boost/bind.hpp"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::CSMWindow
    
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var CSMViewport *   CSMWindowBase::_mfViewports
    
*/

/*! \var MouseData       CSMWindowBase::_sfMouseData
    
*/


void CSMWindowBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new MFUnrecCSMViewportPtr::Description(
        MFUnrecCSMViewportPtr::getClassType(),
        "viewports",
        "",
        ViewportsFieldId, ViewportsFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&CSMWindow::editHandleViewports),
        static_cast<FieldGetMethodSig >(&CSMWindow::getHandleViewports));

    oType.addInitialDesc(pDesc);

    pDesc = new SFMouseData::Description(
        SFMouseData::getClassType(),
        "mouseData",
        "",
        MouseDataFieldId, MouseDataFieldMask,
        true,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&CSMWindow::editHandleMouseData),
        static_cast<FieldGetMethodSig >(&CSMWindow::getHandleMouseData));

    oType.addInitialDesc(pDesc);
}


CSMWindowBase::TypeObject CSMWindowBase::_type(
    CSMWindowBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    NULL,
    CSMWindow::initMethod,
    CSMWindow::exitMethod,
    reinterpret_cast<InitalInsertDescFunc>(&CSMWindowBase::classDescInserter),
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "    name=\"CSMWindow\"\n"
    "    parent=\"AttachmentContainer\"\n"
    "    library=\"ContribCSM\"\n"
    "    pointerfieldtypes=\"both\"\n"
    "    structure=\"abstract\"\n"
    "    systemcomponent=\"true\"\n"
    "    parentsystemcomponent=\"true\"\n"
    "    decoratable=\"false\"\n"
    "    useLocalIncludes=\"false\"\n"
    "    isNodeCore=\"false\"\n"
    "    isBundle=\"true\"\n"
    ">\n"
    "\t<Field\n"
    "\t\tname=\"viewports\"\n"
    "\t\ttype=\"CSMViewport\"\n"
    "\t\tcardinality=\"multi\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "        category=\"pointer\"\n"
    "\t>\n"
    "\t</Field>\n"
    "\n"
    "\t<Field\n"
    "\t\tname=\"mouseData\"\n"
    "\t\ttype=\"MouseData\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"internal\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &CSMWindowBase::getType(void)
{
    return _type;
}

const FieldContainerType &CSMWindowBase::getType(void) const
{
    return _type;
}

UInt32 CSMWindowBase::getContainerSize(void) const
{
    return sizeof(CSMWindow);
}

/*------------------------- decorator get ------------------------------*/


//! Get the CSMWindow::_mfViewports field.
const MFUnrecCSMViewportPtr *CSMWindowBase::getMFViewports(void) const
{
    return &_mfViewports;
}

MFUnrecCSMViewportPtr *CSMWindowBase::editMFViewports      (void)
{
    editMField(ViewportsFieldMask, _mfViewports);

    return &_mfViewports;
}

SFMouseData *CSMWindowBase::editSFMouseData(void)
{
    editSField(MouseDataFieldMask);

    return &_sfMouseData;
}

const SFMouseData *CSMWindowBase::getSFMouseData(void) const
{
    return &_sfMouseData;
}




void CSMWindowBase::pushToViewports(CSMViewport * const value)
{
    editMField(ViewportsFieldMask, _mfViewports);

    _mfViewports.push_back(value);
}

void CSMWindowBase::assignViewports(const MFUnrecCSMViewportPtr &value)
{
    MFUnrecCSMViewportPtr::const_iterator elemIt  =
        value.begin();
    MFUnrecCSMViewportPtr::const_iterator elemEnd =
        value.end  ();

    static_cast<CSMWindow *>(this)->clearViewports();

    while(elemIt != elemEnd)
    {
        this->pushToViewports(*elemIt);

        ++elemIt;
    }
}

void CSMWindowBase::removeFromViewports(UInt32 uiIndex)
{
    if(uiIndex < _mfViewports.size())
    {
        editMField(ViewportsFieldMask, _mfViewports);

        MFUnrecCSMViewportPtr::iterator fieldIt = _mfViewports.begin_nc();

        fieldIt += uiIndex;

        _mfViewports.erase(fieldIt);
    }
}

void CSMWindowBase::removeFromViewports(CSMViewport * const value)
{
    Int32 iElemIdx = _mfViewports.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(ViewportsFieldMask, _mfViewports);

        MFUnrecCSMViewportPtr::iterator fieldIt = _mfViewports.begin_nc();

        fieldIt += iElemIdx;

        _mfViewports.erase(fieldIt);
    }
}
void CSMWindowBase::clearViewports(void)
{
    editMField(ViewportsFieldMask, _mfViewports);


    _mfViewports.clear();
}



/*------------------------------ access -----------------------------------*/

UInt32 CSMWindowBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (ViewportsFieldMask & whichField))
    {
        returnValue += _mfViewports.getBinSize();
    }
    if(FieldBits::NoField != (MouseDataFieldMask & whichField))
    {
        returnValue += _sfMouseData.getBinSize();
    }

    return returnValue;
}

void CSMWindowBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (ViewportsFieldMask & whichField))
    {
        _mfViewports.copyToBin(pMem);
    }
    if(FieldBits::NoField != (MouseDataFieldMask & whichField))
    {
        _sfMouseData.copyToBin(pMem);
    }
}

void CSMWindowBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (ViewportsFieldMask & whichField))
    {
        _mfViewports.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (MouseDataFieldMask & whichField))
    {
        _sfMouseData.copyFromBin(pMem);
    }
}




/*------------------------- constructors ----------------------------------*/

CSMWindowBase::CSMWindowBase(void) :
    Inherited(),
    _mfViewports              (),
    _sfMouseData              ()
{
}

CSMWindowBase::CSMWindowBase(const CSMWindowBase &source) :
    Inherited(source),
    _mfViewports              (),
    _sfMouseData              (source._sfMouseData              )
{
}


/*-------------------------- destructors ----------------------------------*/

CSMWindowBase::~CSMWindowBase(void)
{
}

void CSMWindowBase::onCreate(const CSMWindow *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        CSMWindow *pThis = static_cast<CSMWindow *>(this);

        MFUnrecCSMViewportPtr::const_iterator ViewportsIt  =
            source->_mfViewports.begin();
        MFUnrecCSMViewportPtr::const_iterator ViewportsEnd =
            source->_mfViewports.end  ();

        while(ViewportsIt != ViewportsEnd)
        {
            pThis->pushToViewports(*ViewportsIt);

            ++ViewportsIt;
        }
    }
}

GetFieldHandlePtr CSMWindowBase::getHandleViewports       (void) const
{
    MFUnrecCSMViewportPtr::GetHandlePtr returnValue(
        new  MFUnrecCSMViewportPtr::GetHandle(
             &_mfViewports, 
             this->getType().getFieldDesc(ViewportsFieldId)));

    return returnValue;
}

EditFieldHandlePtr CSMWindowBase::editHandleViewports      (void)
{
    MFUnrecCSMViewportPtr::EditHandlePtr returnValue(
        new  MFUnrecCSMViewportPtr::EditHandle(
             &_mfViewports, 
             this->getType().getFieldDesc(ViewportsFieldId)));

    returnValue->setAddMethod(boost::bind(&CSMWindow::pushToViewports, 
                              static_cast<CSMWindow *>(this), _1));

    editMField(ViewportsFieldMask, _mfViewports);

    return returnValue;
}

GetFieldHandlePtr CSMWindowBase::getHandleMouseData       (void) const
{
    SFMouseData::GetHandlePtr returnValue(
        new  SFMouseData::GetHandle(
             &_sfMouseData, 
             this->getType().getFieldDesc(MouseDataFieldId)));

    return returnValue;
}

EditFieldHandlePtr CSMWindowBase::editHandleMouseData      (void)
{
    SFMouseData::EditHandlePtr returnValue(
        new  SFMouseData::EditHandle(
             &_sfMouseData, 
             this->getType().getFieldDesc(MouseDataFieldId)));

    editSField(MouseDataFieldMask);

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void CSMWindowBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<CSMWindowBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif



void CSMWindowBase::resolveLinks(void)
{
    Inherited::resolveLinks();


    static_cast<CSMWindow *>(this)->clearViewports();
}


#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<CSMWindow *>::_type("CSMWindowPtr", "AttachmentContainerPtr");
#endif

OSG_FIELDTRAITS_GETTYPE(CSMWindow *)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField, 
                           CSMWindow *, 
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField, 
                           CSMWindow *, 
                           0);

OSG_END_NAMESPACE
