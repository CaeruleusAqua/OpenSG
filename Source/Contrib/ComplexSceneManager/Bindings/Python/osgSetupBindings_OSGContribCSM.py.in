
from goodies import *

import osggen
import splitGenHelper

def preScanSetup(gen_classes, fc_infos, core_mods, free_funcs, free_func_mods, exc_types):

  return



def excludeFCDSetup(opensg_src_dir, fc_ignore_list, skip_fcds):

  # .fcd files to skip because they only cause trouble.
  skip_fcds.extend([os.path.join(opensg_src_dir, "Contrib", "ComplexSceneManager", "Sensor", "InterfaceSensors",
                                 "Devices", "OSGLinuxEventOptions.fcd")])



def genTemplatesSetup(template_builder, tbuilder, non_fc_template_instances):

  return



def postScanSetup(osg, template_alias_db):
  
  return



def postGenClassesSetup(osg, mb):

  return



def postFCDInfoSetup(osg, mb):

  splitGenHelper.handleFindNamedComponent(osg, "ComplexSceneManager")

  #c = osg["ComplexSceneManager"]
  # OSG::ComplexSceneManager
  c = osg["ComplexSceneManager"]
  c["the"].call_policies = return_value_policy(reference_existing_object)
  c["init"].exclude()
  c["setMainloop"].exclude()

  c.add_declaration_code("""
namespace
{

void mainLoopCallback(bp::object callable)
{
   callable();
}

bool wrapInit(OSG::ComplexSceneManager* csm, bp::list pythonArgv)
{
   const int argc(bp::extract<int>(pythonArgv.attr("__len__")()));
   std::vector<char*> argv(argc);

   for ( int i = 0; i < argc; ++i )
   {
      argv[i] = bp::extract<char*>(pythonArgv[i]);
   }

   return csm->init(argc, &argv[0]);
}

void wrapSetMainloop(OSG::ComplexSceneManager* csm, bp::object fMainLoop)
{
   csm->setMainloop(boost::bind(mainLoopCallback, fMainLoop));
}

}
""")

  c.add_registration_code('def("init", wrapInit)')
  c.add_registration_code('def("setMainloop", wrapSetMainloop, (bp::arg("fMainLoop")))')



  for class_name in ["CSMClusterWindow", "CSMDrawManager", "CSMDrawer", "CSMWindow"]:
    c = osg[class_name]
    c["findNamedComponent"].exclude()

    c.add_declaration_code("""
namespace
{

OSG::FieldContainerRecPtr
wrapFindNamedComponent(OSG::%(class_name)s* self, const OSG::Char8* szName)
{
   return OSG::FieldContainerRecPtr(self->findNamedComponent(szName));
}

}
""" % { 'class_name' : class_name })
    c.add_registration_code("""
         def("findNamedComponent", wrapFindNamedComponent, (bp::arg("szName")))
      """)



  c = osg.class_("CSMViewport")
  c["beginViewports"].exclude()
  c["endViewports"].exclude()


  return
