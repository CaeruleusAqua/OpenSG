/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class ComputeShaderChunk
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGCOMPUTESHADERCHUNKBASE_H_
#define _OSGCOMPUTESHADERCHUNKBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribComputeBaseDef.h"

//#include "OSGBaseTypes.h"

#include "OSGStateChunk.h" // Parent

#include "OSGShaderProgramFields.h"     // ComputeShader type
#include "OSGBaseFields.h"              // ComputeProgram type
#include "OSGShaderProgramVariablesFields.h" // Variables type
#include "OSGSysFields.h"               // VariableLocations type

#include "OSGComputeShaderChunkFields.h"

OSG_BEGIN_NAMESPACE


class ComputeShaderChunk;

//! \brief ComputeShaderChunk Base Class.

class OSG_CONTRIBCOMPUTEBASE_DLLMAPPING ComputeShaderChunkBase : public StateChunk
{
  public:

    typedef StateChunk Inherited;
    typedef StateChunk ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(ComputeShaderChunk);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        ComputeShaderFieldId = Inherited::NextFieldId,
        ComputeProgramFieldId = ComputeShaderFieldId + 1,
        VariablesFieldId = ComputeProgramFieldId + 1,
        VariableLocationsFieldId = VariablesFieldId + 1,
        ProceduralVariableLocationsFieldId = VariableLocationsFieldId + 1,
        GLIdFieldId = ProceduralVariableLocationsFieldId + 1,
        NextFieldId = GLIdFieldId + 1
    };

    static const OSG::BitVector ComputeShaderFieldMask =
        (TypeTraits<BitVector>::One << ComputeShaderFieldId);
    static const OSG::BitVector ComputeProgramFieldMask =
        (TypeTraits<BitVector>::One << ComputeProgramFieldId);
    static const OSG::BitVector VariablesFieldMask =
        (TypeTraits<BitVector>::One << VariablesFieldId);
    static const OSG::BitVector VariableLocationsFieldMask =
        (TypeTraits<BitVector>::One << VariableLocationsFieldId);
    static const OSG::BitVector ProceduralVariableLocationsFieldMask =
        (TypeTraits<BitVector>::One << ProceduralVariableLocationsFieldId);
    static const OSG::BitVector GLIdFieldMask =
        (TypeTraits<BitVector>::One << GLIdFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef MFUnrecShaderProgramPtr MFComputeShaderType;
    typedef SFString          SFComputeProgramType;
    typedef SFUnrecChildShaderProgramVariablesPtr SFVariablesType;
    typedef MFInt32           MFVariableLocationsType;
    typedef MFInt32           MFProceduralVariableLocationsType;
    typedef SFUInt32          SFGLIdType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

            const MFUnrecShaderProgramPtr *getMFComputeShader  (void) const;
                  MFUnrecShaderProgramPtr *editMFComputeShader  (void);

                  SFString            *editSFComputeProgram (void);
            const SFString            *getSFComputeProgram  (void) const;
            const SFUnrecChildShaderProgramVariablesPtr *getSFVariables      (void) const;
                  SFUnrecChildShaderProgramVariablesPtr *editSFVariables      (void);

                  SFUInt32            *editSFGLId           (void);
            const SFUInt32            *getSFGLId            (void) const;


                  ShaderProgram * getComputeShader  (const UInt32 index) const;

                  std::string         &editComputeProgram (void);
            const std::string         &getComputeProgram  (void) const;

                  ShaderProgramVariables * getVariables      (void) const;

                  UInt32              &editGLId           (void);
                  UInt32               getGLId            (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setComputeProgram (const std::string &value);
            void setVariables      (ShaderProgramVariables * const value);
            void setGLId           (const UInt32 value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    void addComputeShader           (ShaderProgram * const value   );
    void assignComputeShader          (const MFUnrecShaderProgramPtr &value);
    void subComputeShader (UInt32               uiIndex );
    void removeObjFromComputeShader(ShaderProgram * const value   );
    void clearComputeShaders            (void                         );

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual SizeT  getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  ComputeShaderChunkTransitPtr  create          (void);
    static  ComputeShaderChunk           *createEmpty     (void);

    static  ComputeShaderChunkTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  ComputeShaderChunk            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  ComputeShaderChunkTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    MFUnrecShaderProgramPtr _mfComputeShader;
    SFString          _sfComputeProgram;
    SFUnrecChildShaderProgramVariablesPtr _sfVariables;
    MFInt32           _mfVariableLocations;
    MFInt32           _mfProceduralVariableLocations;
    SFUInt32          _sfGLId;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    ComputeShaderChunkBase(void);
    ComputeShaderChunkBase(const ComputeShaderChunkBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~ComputeShaderChunkBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

    void onCreate(const ComputeShaderChunk *source = NULL);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name Child linking                                                */
    /*! \{                                                                 */

    virtual bool unlinkChild(FieldContainer * const pChild,
                             UInt16           const childFieldId);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

     GetFieldHandlePtr  getHandleComputeShader   (void) const;
     EditFieldHandlePtr editHandleComputeShader  (void);
     GetFieldHandlePtr  getHandleComputeProgram  (void) const;
     EditFieldHandlePtr editHandleComputeProgram (void);
     GetFieldHandlePtr  getHandleVariables       (void) const;
     EditFieldHandlePtr editHandleVariables      (void);
     GetFieldHandlePtr  getHandleVariableLocations (void) const;
     EditFieldHandlePtr editHandleVariableLocations(void);
     GetFieldHandlePtr  getHandleProceduralVariableLocations (void) const;
     EditFieldHandlePtr editHandleProceduralVariableLocations(void);
     GetFieldHandlePtr  getHandleGLId            (void) const;
     EditFieldHandlePtr editHandleGLId           (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  MFInt32             *editMFVariableLocations(void);
            const MFInt32             *getMFVariableLocations (void) const;

                  MFInt32             *editMFProceduralVariableLocations(void);
            const MFInt32             *getMFProceduralVariableLocations (void) const;


                  Int32               &editVariableLocations(const UInt32 index);
                  Int32                getVariableLocations (const UInt32 index) const;

                  Int32               &editProceduralVariableLocations(const UInt32 index);
                  Int32                getProceduralVariableLocations (const UInt32 index) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      ComputeShaderChunkBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const ComputeShaderChunkBase &source);
};

typedef ComputeShaderChunkBase *ComputeShaderChunkBaseP;

OSG_END_NAMESPACE

#endif /* _OSGCOMPUTESHADERCHUNKBASE_H_ */
