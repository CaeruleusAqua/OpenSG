/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class VTKMapper!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &VTKMapperBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 VTKMapperBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 VTKMapperBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/


//! Get the value of the VTKMapper::_sfRoot field.
inline
NodePtr VTKMapperBase::getRoot(void) const
{
    return _sfRoot.getValue();
}

//! Set the value of the VTKMapper::_sfRoot field.
inline
void VTKMapperBase::setRoot(const NodePtr value)
{
    editSField(RootFieldMask);

    _sfRoot.setValue(value);
}

//! Get the value of the \a index element the VTKMapper::_mfGeoRoots field.
inline
NodePtr VTKMapperBase::getGeoRoots(const UInt32 index) const
{
    return _mfGeoRoots[index];
}

//! Get the value of the \a index element the VTKMapper::_mfGeometries field.
inline
GeometryPtr VTKMapperBase::getGeometries(const UInt32 index) const
{
    return _mfGeometries[index];
}

//! Get the value of the \a index element the VTKMapper::_mfMaterials field.
inline
ChunkMaterialPtr VTKMapperBase::getMaterials(const UInt32 index) const
{
    return _mfMaterials[index];
}

//! Get the value of the \a index element the VTKMapper::_mfMaterialChunks field.
inline
MaterialChunkPtr VTKMapperBase::getMaterialChunks(const UInt32 index) const
{
    return _mfMaterialChunks[index];
}

//! Get the value of the \a index element the VTKMapper::_mfPositions field.
inline
GeoPnt3fPropertyPtr VTKMapperBase::getPositions(const UInt32 index) const
{
    return _mfPositions[index];
}

//! Get the value of the \a index element the VTKMapper::_mfLength field.
inline
GeoUInt32PropertyPtr VTKMapperBase::getLength(const UInt32 index) const
{
    return _mfLength[index];
}

//! Get the value of the \a index element the VTKMapper::_mfTypes field.
inline
GeoUInt8PropertyPtr VTKMapperBase::getTypes(const UInt32 index) const
{
    return _mfTypes[index];
}

//! Get the value of the \a index element the VTKMapper::_mfColors field.
inline
GeoColor4fPropertyPtr VTKMapperBase::getColors(const UInt32 index) const
{
    return _mfColors[index];
}

//! Get the value of the \a index element the VTKMapper::_mfNormals field.
inline
GeoVec3fPropertyPtr VTKMapperBase::getNormals(const UInt32 index) const
{
    return _mfNormals[index];
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void VTKMapperBase::execSync (      VTKMapperBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (RootFieldMask & whichField))
        _sfRoot.syncWith(pFrom->_sfRoot);

    if(FieldBits::NoField != (GeoRootsFieldMask & whichField))
        _mfGeoRoots.syncWith(pFrom->_mfGeoRoots,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (GeometriesFieldMask & whichField))
        _mfGeometries.syncWith(pFrom->_mfGeometries,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (MaterialsFieldMask & whichField))
        _mfMaterials.syncWith(pFrom->_mfMaterials,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (MaterialChunksFieldMask & whichField))
        _mfMaterialChunks.syncWith(pFrom->_mfMaterialChunks,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (PositionsFieldMask & whichField))
        _mfPositions.syncWith(pFrom->_mfPositions,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (LengthFieldMask & whichField))
        _mfLength.syncWith(pFrom->_mfLength,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (TypesFieldMask & whichField))
        _mfTypes.syncWith(pFrom->_mfTypes,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (ColorsFieldMask & whichField))
        _mfColors.syncWith(pFrom->_mfColors,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);

    if(FieldBits::NoField != (NormalsFieldMask & whichField))
        _mfNormals.syncWith(pFrom->_mfNormals,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);
}
#endif


inline
Char8 *VTKMapperBase::getClassname(void)
{
    return "VTKMapper";
}
OSG_GEN_CONTAINERPTR(VTKMapper);

OSG_END_NAMESPACE

