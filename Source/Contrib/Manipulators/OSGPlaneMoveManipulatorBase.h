/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class PlaneMoveManipulator
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSGPLANEMOVEMANIPULATORBASE_H_
#define _OSGPLANEMOVEMANIPULATORBASE_H_
#ifdef __sgi
#pragma once
#endif


#include "OSGConfig.h"
#include "OSGContribGUIDef.h"

//#include "OSGBaseTypes.h"

#include "OSGManipulator.h" // Parent

#include "OSGSysFields.h"               // Axis type
#include "OSGVecFields.h"               // BaseTranslation type
#include "OSGMathFields.h"              // BaseRotation type

#include "OSGPlaneMoveManipulatorFields.h"

OSG_BEGIN_NAMESPACE

class PlaneMoveManipulator;

//! \brief PlaneMoveManipulator Base Class.

class OSG_CONTRIBGUI_DLLMAPPING PlaneMoveManipulatorBase : public Manipulator
{
  public:

    typedef Manipulator Inherited;
    typedef Manipulator ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    OSG_GEN_INTERNALPTR(PlaneMoveManipulator);

    /*==========================  PUBLIC  =================================*/

  public:

    enum
    {
        AxisFieldId = Inherited::NextFieldId,
        BaseTranslationFieldId = AxisFieldId + 1,
        BaseRotationFieldId = BaseTranslationFieldId + 1,
        ClickPointFieldId = BaseRotationFieldId + 1,
        NextFieldId = ClickPointFieldId + 1
    };

    static const OSG::BitVector AxisFieldMask =
        (TypeTraits<BitVector>::One << AxisFieldId);
    static const OSG::BitVector BaseTranslationFieldMask =
        (TypeTraits<BitVector>::One << BaseTranslationFieldId);
    static const OSG::BitVector BaseRotationFieldMask =
        (TypeTraits<BitVector>::One << BaseRotationFieldId);
    static const OSG::BitVector ClickPointFieldMask =
        (TypeTraits<BitVector>::One << ClickPointFieldId);
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
        
    typedef SFUInt16          SFAxisType;
    typedef SFVec3f           SFBaseTranslationType;
    typedef SFQuaternion      SFBaseRotationType;
    typedef SFPnt3f           SFClickPointType;

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  PlaneMoveManipulatorTransitPtr  create          (void);
    static  PlaneMoveManipulator           *createEmpty     (void);

    static  PlaneMoveManipulatorTransitPtr  createLocal     (
                                               BitVector bFlags = FCLocal::All);

    static  PlaneMoveManipulator            *createEmptyLocal(
                                              BitVector bFlags = FCLocal::All);

    static  PlaneMoveManipulatorTransitPtr  createDependent  (BitVector bFlags);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerTransitPtr shallowCopy     (void) const;
    virtual FieldContainerTransitPtr shallowCopyLocal(
                                       BitVector bFlags = FCLocal::All) const;
    virtual FieldContainerTransitPtr shallowCopyDependent(
                                                      BitVector bFlags) const;

    /*! \}                                                                 */
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static       void   classDescInserter(TypeObject &oType);
    static const Char8 *getClassname     (void             );

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    SFUInt16          _sfAxis;
    SFVec3f           _sfBaseTranslation;
    SFQuaternion      _sfBaseRotation;
    SFPnt3f           _sfClickPoint;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    PlaneMoveManipulatorBase(void);
    PlaneMoveManipulatorBase(const PlaneMoveManipulatorBase &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~PlaneMoveManipulatorBase(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */


    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Generic Field Access                      */
    /*! \{                                                                 */

    GetFieldHandlePtr  getHandleAxis            (void) const;
    EditFieldHandlePtr editHandleAxis           (void);
    GetFieldHandlePtr  getHandleBaseTranslation (void) const;
    EditFieldHandlePtr editHandleBaseTranslation(void);
    GetFieldHandlePtr  getHandleBaseRotation    (void) const;
    EditFieldHandlePtr editHandleBaseRotation   (void);
    GetFieldHandlePtr  getHandleClickPoint      (void) const;
    EditFieldHandlePtr editHandleClickPoint     (void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */


                  SFUInt16            *editSFAxis           (void);
            const SFUInt16            *getSFAxis            (void) const;

                  SFVec3f             *editSFBaseTranslation(void);
            const SFVec3f             *getSFBaseTranslation (void) const;

                  SFQuaternion        *editSFBaseRotation   (void);
            const SFQuaternion        *getSFBaseRotation    (void) const;

                  SFPnt3f             *editSFClickPoint     (void);
            const SFPnt3f             *getSFClickPoint      (void) const;


                  UInt16              &editAxis           (void);
                  UInt16               getAxis            (void) const;

                  Vec3f               &editBaseTranslation(void);
            const Vec3f               &getBaseTranslation (void) const;

                  Quaternion          &editBaseRotation   (void);
            const Quaternion          &getBaseRotation    (void) const;

                  Pnt3f               &editClickPoint     (void);
            const Pnt3f               &getClickPoint      (void) const;

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

            void setAxis           (const UInt16 value);
            void setBaseTranslation(const Vec3f &value);
            void setBaseRotation   (const Quaternion &value);
            void setClickPoint     (const Pnt3f &value);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      PlaneMoveManipulatorBase *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainer *createAspectCopy(
                                    const FieldContainer *pRefAspect) const;
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
    /*---------------------------------------------------------------------*/

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const PlaneMoveManipulatorBase &source);
};

typedef PlaneMoveManipulatorBase *PlaneMoveManipulatorBaseP;

OSG_END_NAMESPACE

#endif /* _OSGPLANEMOVEMANIPULATORBASE_H_ */
