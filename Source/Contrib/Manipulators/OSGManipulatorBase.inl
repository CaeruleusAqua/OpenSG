/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2013 by the OpenSG Forum                 *
 *                                                                           *
 * contact: dirk@opensg.org, gerrit.voss@vossg.org, carsten_neumann@gmx.net  *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class Manipulator!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE



//! access the type of the class
inline
OSG::FieldContainerType &ManipulatorBase::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 ManipulatorBase::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 ManipulatorBase::getClassGroupId(void)
{
    return _type.getGroupId();
}

/*------------------------------ get -----------------------------------*/

//! Get the value of the Manipulator::_sfEnablePivot field.

inline
bool &ManipulatorBase::editEnablePivot(void)
{
    editSField(EnablePivotFieldMask);

    return _sfEnablePivot.getValue();
}

//! Get the value of the Manipulator::_sfEnablePivot field.
inline
      bool  ManipulatorBase::getEnablePivot(void) const
{
    return _sfEnablePivot.getValue();
}

//! Set the value of the Manipulator::_sfEnablePivot field.
inline
void ManipulatorBase::setEnablePivot(const bool value)
{
    editSField(EnablePivotFieldMask);

    _sfEnablePivot.setValue(value);
}
//! Get the value of the Manipulator::_sfLastMousePos field.

inline
Pnt2f &ManipulatorBase::editLastMousePos(void)
{
    editSField(LastMousePosFieldMask);

    return _sfLastMousePos.getValue();
}

//! Get the value of the Manipulator::_sfLastMousePos field.
inline
const Pnt2f &ManipulatorBase::getLastMousePos(void) const
{
    return _sfLastMousePos.getValue();
}

//! Set the value of the Manipulator::_sfLastMousePos field.
inline
void ManipulatorBase::setLastMousePos(const Pnt2f &value)
{
    editSField(LastMousePosFieldMask);

    _sfLastMousePos.setValue(value);
}
//! Get the value of the Manipulator::_sfActive field.

inline
bool &ManipulatorBase::editActive(void)
{
    editSField(ActiveFieldMask);

    return _sfActive.getValue();
}

//! Get the value of the Manipulator::_sfActive field.
inline
      bool  ManipulatorBase::getActive(void) const
{
    return _sfActive.getValue();
}

//! Set the value of the Manipulator::_sfActive field.
inline
void ManipulatorBase::setActive(const bool value)
{
    editSField(ActiveFieldMask);

    _sfActive.setValue(value);
}
//! Get the value of the Manipulator::_sfLength field.

inline
Vec3f &ManipulatorBase::editLength(void)
{
    editSField(LengthFieldMask);

    return _sfLength.getValue();
}

//! Get the value of the Manipulator::_sfLength field.
inline
const Vec3f &ManipulatorBase::getLength(void) const
{
    return _sfLength.getValue();
}

//! Set the value of the Manipulator::_sfLength field.
inline
void ManipulatorBase::setLength(const Vec3f &value)
{
    editSField(LengthFieldMask);

    _sfLength.setValue(value);
}
//! Get the value of the Manipulator::_sfPivot field.

inline
Pnt3f &ManipulatorBase::editPivot(void)
{
    editSField(PivotFieldMask);

    return _sfPivot.getValue();
}

//! Get the value of the Manipulator::_sfPivot field.
inline
const Pnt3f &ManipulatorBase::getPivot(void) const
{
    return _sfPivot.getValue();
}

//! Set the value of the Manipulator::_sfPivot field.
inline
void ManipulatorBase::setPivot(const Pnt3f &value)
{
    editSField(PivotFieldMask);

    _sfPivot.setValue(value);
}


#ifdef OSG_MT_CPTR_ASPECT
inline
void ManipulatorBase::execSync (      ManipulatorBase *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);

    if(FieldBits::NoField != (TargetFieldMask & whichField))
        _sfTarget.syncWith(pFrom->_sfTarget);

    if(FieldBits::NoField != (EnablePivotFieldMask & whichField))
        _sfEnablePivot.syncWith(pFrom->_sfEnablePivot);

    if(FieldBits::NoField != (ActiveSubHandleFieldMask & whichField))
        _sfActiveSubHandle.syncWith(pFrom->_sfActiveSubHandle);

    if(FieldBits::NoField != (LastMousePosFieldMask & whichField))
        _sfLastMousePos.syncWith(pFrom->_sfLastMousePos);

    if(FieldBits::NoField != (ViewportFieldMask & whichField))
        _sfViewport.syncWith(pFrom->_sfViewport);

    if(FieldBits::NoField != (ActiveFieldMask & whichField))
        _sfActive.syncWith(pFrom->_sfActive);

    if(FieldBits::NoField != (LengthFieldMask & whichField))
        _sfLength.syncWith(pFrom->_sfLength);

    if(FieldBits::NoField != (PivotFieldMask & whichField))
        _sfPivot.syncWith(pFrom->_sfPivot);

    if(FieldBits::NoField != (HandleXNodeFieldMask & whichField))
        _sfHandleXNode.syncWith(pFrom->_sfHandleXNode);

    if(FieldBits::NoField != (HandleYNodeFieldMask & whichField))
        _sfHandleYNode.syncWith(pFrom->_sfHandleYNode);

    if(FieldBits::NoField != (HandleZNodeFieldMask & whichField))
        _sfHandleZNode.syncWith(pFrom->_sfHandleZNode);

    if(FieldBits::NoField != (HandlePNodeFieldMask & whichField))
        _sfHandlePNode.syncWith(pFrom->_sfHandlePNode);

    if(FieldBits::NoField != (TransXNodeFieldMask & whichField))
        _sfTransXNode.syncWith(pFrom->_sfTransXNode);

    if(FieldBits::NoField != (TransYNodeFieldMask & whichField))
        _sfTransYNode.syncWith(pFrom->_sfTransYNode);

    if(FieldBits::NoField != (TransZNodeFieldMask & whichField))
        _sfTransZNode.syncWith(pFrom->_sfTransZNode);

    if(FieldBits::NoField != (PivotNodeFieldMask & whichField))
        _sfPivotNode.syncWith(pFrom->_sfPivotNode);

    if(FieldBits::NoField != (MaterialXFieldMask & whichField))
        _sfMaterialX.syncWith(pFrom->_sfMaterialX);

    if(FieldBits::NoField != (MaterialYFieldMask & whichField))
        _sfMaterialY.syncWith(pFrom->_sfMaterialY);

    if(FieldBits::NoField != (MaterialZFieldMask & whichField))
        _sfMaterialZ.syncWith(pFrom->_sfMaterialZ);

    if(FieldBits::NoField != (MaterialPivotFieldMask & whichField))
        _sfMaterialPivot.syncWith(pFrom->_sfMaterialPivot);

    if(FieldBits::NoField != (AxisLinesNFieldMask & whichField))
        _sfAxisLinesN.syncWith(pFrom->_sfAxisLinesN);
}
#endif


inline
const Char8 *ManipulatorBase::getClassname(void)
{
    return "Manipulator";
}
OSG_GEN_CONTAINERPTR(Manipulator);

OSG_END_NAMESPACE

