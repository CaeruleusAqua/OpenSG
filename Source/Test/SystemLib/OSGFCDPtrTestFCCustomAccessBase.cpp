/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class FCDPtrTestFCCustomAccess!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILEFCDPTRTESTFCCUSTOMACCESSINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>



#include <OSGFCDTestFC.h> // FieldSFPub_ptr Class
#include <OSGFCDTestFC.h> // FieldSFPub_weakptr Class
#include <OSGFCDTestFC.h> // FieldSFPub_mpchildptr Class
#include <OSGFCDTestFC.h> // FieldSFPro_ptr Class
#include <OSGFCDTestFC.h> // FieldSFPro_weakptr Class
#include <OSGFCDTestFC.h> // FieldSFPro_mpchildptr Class
#include <OSGFCDTestFC.h> // FieldSFPri_ptr Class
#include <OSGFCDTestFC.h> // FieldSFPri_weakptr Class
#include <OSGFCDTestFC.h> // FieldSFPri_mpchildptr Class
#include <OSGFCDTestFC.h> // FieldSFNo_ptr Class
#include <OSGFCDTestFC.h> // FieldSFNo_weakptr Class
#include <OSGFCDTestFC.h> // FieldSFNo_mpchildptr Class
#include <OSGFCDTestFC.h> // FieldMFPub_ptr Class
#include <OSGFCDTestFC.h> // FieldMFPub_weakptr Class
#include <OSGFCDTestFC.h> // FieldMFPub_mpchildptr Class
#include <OSGFCDTestFC.h> // FieldMFPro_ptr Class
#include <OSGFCDTestFC.h> // FieldMFPro_weakptr Class
#include <OSGFCDTestFC.h> // FieldMFPro_mpchildptr Class
#include <OSGFCDTestFC.h> // FieldMFPri_ptr Class
#include <OSGFCDTestFC.h> // FieldMFPri_weakptr Class
#include <OSGFCDTestFC.h> // FieldMFPri_mpchildptr Class
#include <OSGFCDTestFC.h> // FieldMFNo_ptr Class
#include <OSGFCDTestFC.h> // FieldMFNo_weakptr Class
#include <OSGFCDTestFC.h> // FieldMFNo_mpchildptr Class
#include <OSGFCDSParTestFC.h> // FieldSFPub_spchildptr Class
#include <OSGFCDSParTestFC.h> // FieldSFPro_spchildptr Class
#include <OSGFCDSParTestFC.h> // FieldSFPri_spchildptr Class
#include <OSGFCDSParTestFC.h> // FieldSFNo_spchildptr Class
#include <OSGFCDSParTestFC.h> // FieldMFPub_spchildptr Class
#include <OSGFCDSParTestFC.h> // FieldMFPro_spchildptr Class
#include <OSGFCDSParTestFC.h> // FieldMFPri_spchildptr Class
#include <OSGFCDSParTestFC.h> // FieldMFNo_spchildptr Class

#include "OSGFCDPtrTestFCCustomAccessBase.h"
#include "OSGFCDPtrTestFCCustomAccess.h"

#include "boost/bind.hpp"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::FCDPtrTestFCCustomAccess
    
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var FCDTestFCPtr    FCDPtrTestFCCustomAccessBase::_sfFieldSFPub_ptr
    
*/

/*! \var FCDTestFCPtr    FCDPtrTestFCCustomAccessBase::_sfFieldSFPub_weakptr
    
*/

/*! \var FCDTestFCPtr    FCDPtrTestFCCustomAccessBase::_sfFieldSFPub_mpchildptr
    
*/

/*! \var FCDTestFCPtr    FCDPtrTestFCCustomAccessBase::_sfFieldSFPro_ptr
    
*/

/*! \var FCDTestFCPtr    FCDPtrTestFCCustomAccessBase::_sfFieldSFPro_weakptr
    
*/

/*! \var FCDTestFCPtr    FCDPtrTestFCCustomAccessBase::_sfFieldSFPro_mpchildptr
    
*/

/*! \var FCDTestFCPtr    FCDPtrTestFCCustomAccessBase::_sfFieldSFPri_ptr
    
*/

/*! \var FCDTestFCPtr    FCDPtrTestFCCustomAccessBase::_sfFieldSFPri_weakptr
    
*/

/*! \var FCDTestFCPtr    FCDPtrTestFCCustomAccessBase::_sfFieldSFPri_mpchildptr
    
*/

/*! \var FCDTestFCPtr    FCDPtrTestFCCustomAccessBase::_sfFieldSFNo_ptr
    
*/

/*! \var FCDTestFCPtr    FCDPtrTestFCCustomAccessBase::_sfFieldSFNo_weakptr
    
*/

/*! \var FCDTestFCPtr    FCDPtrTestFCCustomAccessBase::_sfFieldSFNo_mpchildptr
    
*/

/*! \var FCDTestFCPtr    FCDPtrTestFCCustomAccessBase::_mfFieldMFPub_ptr
    
*/

/*! \var FCDTestFCPtr    FCDPtrTestFCCustomAccessBase::_mfFieldMFPub_weakptr
    
*/

/*! \var FCDTestFCPtr    FCDPtrTestFCCustomAccessBase::_mfFieldMFPub_mpchildptr
    
*/

/*! \var FCDTestFCPtr    FCDPtrTestFCCustomAccessBase::_mfFieldMFPro_ptr
    
*/

/*! \var FCDTestFCPtr    FCDPtrTestFCCustomAccessBase::_mfFieldMFPro_weakptr
    
*/

/*! \var FCDTestFCPtr    FCDPtrTestFCCustomAccessBase::_mfFieldMFPro_mpchildptr
    
*/

/*! \var FCDTestFCPtr    FCDPtrTestFCCustomAccessBase::_mfFieldMFPri_ptr
    
*/

/*! \var FCDTestFCPtr    FCDPtrTestFCCustomAccessBase::_mfFieldMFPri_weakptr
    
*/

/*! \var FCDTestFCPtr    FCDPtrTestFCCustomAccessBase::_mfFieldMFPri_mpchildptr
    
*/

/*! \var FCDTestFCPtr    FCDPtrTestFCCustomAccessBase::_mfFieldMFNo_ptr
    
*/

/*! \var FCDTestFCPtr    FCDPtrTestFCCustomAccessBase::_mfFieldMFNo_weakptr
    
*/

/*! \var FCDTestFCPtr    FCDPtrTestFCCustomAccessBase::_mfFieldMFNo_mpchildptr
    
*/

/*! \var FCDSParTestFCPtr FCDPtrTestFCCustomAccessBase::_sfFieldSFPub_spchildptr
    
*/

/*! \var FCDSParTestFCPtr FCDPtrTestFCCustomAccessBase::_sfFieldSFPro_spchildptr
    
*/

/*! \var FCDSParTestFCPtr FCDPtrTestFCCustomAccessBase::_sfFieldSFPri_spchildptr
    
*/

/*! \var FCDSParTestFCPtr FCDPtrTestFCCustomAccessBase::_sfFieldSFNo_spchildptr
    
*/

/*! \var FCDSParTestFCPtr FCDPtrTestFCCustomAccessBase::_mfFieldMFPub_spchildptr
    
*/

/*! \var FCDSParTestFCPtr FCDPtrTestFCCustomAccessBase::_mfFieldMFPro_spchildptr
    
*/

/*! \var FCDSParTestFCPtr FCDPtrTestFCCustomAccessBase::_mfFieldMFPri_spchildptr
    
*/

/*! \var FCDSParTestFCPtr FCDPtrTestFCCustomAccessBase::_mfFieldMFNo_spchildptr
    
*/


void FCDPtrTestFCCustomAccessBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


    pDesc = new SFUnrecFCDTestFCPtr::Description(
        SFUnrecFCDTestFCPtr::getClassType(),
        "fieldSFPub_ptr",
        "",
        FieldSFPub_ptrFieldId, FieldSFPub_ptrFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::editHandleFieldSFPub_ptr),
        static_cast<FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::getHandleFieldSFPub_ptr));

    oType.addInitialDesc(pDesc);

    pDesc = new SFWeakFCDTestFCPtr::Description(
        SFWeakFCDTestFCPtr::getClassType(),
        "fieldSFPub_weakptr",
        "",
        FieldSFPub_weakptrFieldId, FieldSFPub_weakptrFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::editHandleFieldSFPub_weakptr),
        static_cast<FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::getHandleFieldSFPub_weakptr));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChildFCDTestFCPtr::Description(
        SFUnrecChildFCDTestFCPtr::getClassType(),
        "fieldSFPub_mpchildptr",
        "",
        FieldSFPub_mpchildptrFieldId, FieldSFPub_mpchildptrFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::editHandleFieldSFPub_mpchildptr),
        static_cast<FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::getHandleFieldSFPub_mpchildptr));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecFCDTestFCPtr::Description(
        SFUnrecFCDTestFCPtr::getClassType(),
        "fieldSFPro_ptr",
        "",
        FieldSFPro_ptrFieldId, FieldSFPro_ptrFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::editHandleFieldSFPro_ptr),
        static_cast<FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::getHandleFieldSFPro_ptr));

    oType.addInitialDesc(pDesc);

    pDesc = new SFWeakFCDTestFCPtr::Description(
        SFWeakFCDTestFCPtr::getClassType(),
        "fieldSFPro_weakptr",
        "",
        FieldSFPro_weakptrFieldId, FieldSFPro_weakptrFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::editHandleFieldSFPro_weakptr),
        static_cast<FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::getHandleFieldSFPro_weakptr));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChildFCDTestFCPtr::Description(
        SFUnrecChildFCDTestFCPtr::getClassType(),
        "fieldSFPro_mpchildptr",
        "",
        FieldSFPro_mpchildptrFieldId, FieldSFPro_mpchildptrFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::editHandleFieldSFPro_mpchildptr),
        static_cast<FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::getHandleFieldSFPro_mpchildptr));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecFCDTestFCPtr::Description(
        SFUnrecFCDTestFCPtr::getClassType(),
        "fieldSFPri_ptr",
        "",
        FieldSFPri_ptrFieldId, FieldSFPri_ptrFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::editHandleFieldSFPri_ptr),
        static_cast<FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::getHandleFieldSFPri_ptr));

    oType.addInitialDesc(pDesc);

    pDesc = new SFWeakFCDTestFCPtr::Description(
        SFWeakFCDTestFCPtr::getClassType(),
        "fieldSFPri_weakptr",
        "",
        FieldSFPri_weakptrFieldId, FieldSFPri_weakptrFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::editHandleFieldSFPri_weakptr),
        static_cast<FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::getHandleFieldSFPri_weakptr));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChildFCDTestFCPtr::Description(
        SFUnrecChildFCDTestFCPtr::getClassType(),
        "fieldSFPri_mpchildptr",
        "",
        FieldSFPri_mpchildptrFieldId, FieldSFPri_mpchildptrFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::editHandleFieldSFPri_mpchildptr),
        static_cast<FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::getHandleFieldSFPri_mpchildptr));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecFCDTestFCPtr::Description(
        SFUnrecFCDTestFCPtr::getClassType(),
        "fieldSFNo_ptr",
        "",
        FieldSFNo_ptrFieldId, FieldSFNo_ptrFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::invalidEditField),
        static_cast     <FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::invalidGetField));

    oType.addInitialDesc(pDesc);

    pDesc = new SFWeakFCDTestFCPtr::Description(
        SFWeakFCDTestFCPtr::getClassType(),
        "fieldSFNo_weakptr",
        "",
        FieldSFNo_weakptrFieldId, FieldSFNo_weakptrFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::invalidEditField),
        static_cast     <FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::invalidGetField));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChildFCDTestFCPtr::Description(
        SFUnrecChildFCDTestFCPtr::getClassType(),
        "fieldSFNo_mpchildptr",
        "",
        FieldSFNo_mpchildptrFieldId, FieldSFNo_mpchildptrFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::invalidEditField),
        static_cast     <FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::invalidGetField));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecFCDTestFCPtr::Description(
        MFUnrecFCDTestFCPtr::getClassType(),
        "fieldMFPub_ptr",
        "",
        FieldMFPub_ptrFieldId, FieldMFPub_ptrFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::editHandleFieldMFPub_ptr),
        static_cast<FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::getHandleFieldMFPub_ptr));

    oType.addInitialDesc(pDesc);

    pDesc = new MFWeakFCDTestFCPtr::Description(
        MFWeakFCDTestFCPtr::getClassType(),
        "fieldMFPub_weakptr",
        "",
        FieldMFPub_weakptrFieldId, FieldMFPub_weakptrFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::editHandleFieldMFPub_weakptr),
        static_cast<FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::getHandleFieldMFPub_weakptr));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecChildFCDTestFCPtr::Description(
        MFUnrecChildFCDTestFCPtr::getClassType(),
        "fieldMFPub_mpchildptr",
        "",
        FieldMFPub_mpchildptrFieldId, FieldMFPub_mpchildptrFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::editHandleFieldMFPub_mpchildptr),
        static_cast<FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::getHandleFieldMFPub_mpchildptr));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecFCDTestFCPtr::Description(
        MFUnrecFCDTestFCPtr::getClassType(),
        "fieldMFPro_ptr",
        "",
        FieldMFPro_ptrFieldId, FieldMFPro_ptrFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::editHandleFieldMFPro_ptr),
        static_cast<FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::getHandleFieldMFPro_ptr));

    oType.addInitialDesc(pDesc);

    pDesc = new MFWeakFCDTestFCPtr::Description(
        MFWeakFCDTestFCPtr::getClassType(),
        "fieldMFPro_weakptr",
        "",
        FieldMFPro_weakptrFieldId, FieldMFPro_weakptrFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::editHandleFieldMFPro_weakptr),
        static_cast<FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::getHandleFieldMFPro_weakptr));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecChildFCDTestFCPtr::Description(
        MFUnrecChildFCDTestFCPtr::getClassType(),
        "fieldMFPro_mpchildptr",
        "",
        FieldMFPro_mpchildptrFieldId, FieldMFPro_mpchildptrFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::editHandleFieldMFPro_mpchildptr),
        static_cast<FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::getHandleFieldMFPro_mpchildptr));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecFCDTestFCPtr::Description(
        MFUnrecFCDTestFCPtr::getClassType(),
        "fieldMFPri_ptr",
        "",
        FieldMFPri_ptrFieldId, FieldMFPri_ptrFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::editHandleFieldMFPri_ptr),
        static_cast<FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::getHandleFieldMFPri_ptr));

    oType.addInitialDesc(pDesc);

    pDesc = new MFWeakFCDTestFCPtr::Description(
        MFWeakFCDTestFCPtr::getClassType(),
        "fieldMFPri_weakptr",
        "",
        FieldMFPri_weakptrFieldId, FieldMFPri_weakptrFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::editHandleFieldMFPri_weakptr),
        static_cast<FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::getHandleFieldMFPri_weakptr));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecChildFCDTestFCPtr::Description(
        MFUnrecChildFCDTestFCPtr::getClassType(),
        "fieldMFPri_mpchildptr",
        "",
        FieldMFPri_mpchildptrFieldId, FieldMFPri_mpchildptrFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::editHandleFieldMFPri_mpchildptr),
        static_cast<FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::getHandleFieldMFPri_mpchildptr));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecFCDTestFCPtr::Description(
        MFUnrecFCDTestFCPtr::getClassType(),
        "fieldMFNo_ptr",
        "",
        FieldMFNo_ptrFieldId, FieldMFNo_ptrFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::invalidEditField),
        static_cast     <FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::invalidGetField));

    oType.addInitialDesc(pDesc);

    pDesc = new MFWeakFCDTestFCPtr::Description(
        MFWeakFCDTestFCPtr::getClassType(),
        "fieldMFNo_weakptr",
        "",
        FieldMFNo_weakptrFieldId, FieldMFNo_weakptrFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::invalidEditField),
        static_cast     <FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::invalidGetField));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecChildFCDTestFCPtr::Description(
        MFUnrecChildFCDTestFCPtr::getClassType(),
        "fieldMFNo_mpchildptr",
        "",
        FieldMFNo_mpchildptrFieldId, FieldMFNo_mpchildptrFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::invalidEditField),
        static_cast     <FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::invalidGetField));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChildFCDSParTestFCPtr::Description(
        SFUnrecChildFCDSParTestFCPtr::getClassType(),
        "fieldSFPub_spchildptr",
        "",
        FieldSFPub_spchildptrFieldId, FieldSFPub_spchildptrFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::editHandleFieldSFPub_spchildptr),
        static_cast<FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::getHandleFieldSFPub_spchildptr));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChildFCDSParTestFCPtr::Description(
        SFUnrecChildFCDSParTestFCPtr::getClassType(),
        "fieldSFPro_spchildptr",
        "",
        FieldSFPro_spchildptrFieldId, FieldSFPro_spchildptrFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::editHandleFieldSFPro_spchildptr),
        static_cast<FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::getHandleFieldSFPro_spchildptr));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChildFCDSParTestFCPtr::Description(
        SFUnrecChildFCDSParTestFCPtr::getClassType(),
        "fieldSFPri_spchildptr",
        "",
        FieldSFPri_spchildptrFieldId, FieldSFPri_spchildptrFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast<FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::editHandleFieldSFPri_spchildptr),
        static_cast<FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::getHandleFieldSFPri_spchildptr));

    oType.addInitialDesc(pDesc);

    pDesc = new SFUnrecChildFCDSParTestFCPtr::Description(
        SFUnrecChildFCDSParTestFCPtr::getClassType(),
        "fieldSFNo_spchildptr",
        "",
        FieldSFNo_spchildptrFieldId, FieldSFNo_spchildptrFieldMask,
        false,
        Field::SFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::invalidEditField),
        static_cast     <FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::invalidGetField));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecChildFCDSParTestFCPtr::Description(
        MFUnrecChildFCDSParTestFCPtr::getClassType(),
        "fieldMFPub_spchildptr",
        "",
        FieldMFPub_spchildptrFieldId, FieldMFPub_spchildptrFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::editHandleFieldMFPub_spchildptr),
        static_cast<FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::getHandleFieldMFPub_spchildptr));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecChildFCDSParTestFCPtr::Description(
        MFUnrecChildFCDSParTestFCPtr::getClassType(),
        "fieldMFPro_spchildptr",
        "",
        FieldMFPro_spchildptrFieldId, FieldMFPro_spchildptrFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::editHandleFieldMFPro_spchildptr),
        static_cast<FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::getHandleFieldMFPro_spchildptr));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecChildFCDSParTestFCPtr::Description(
        MFUnrecChildFCDSParTestFCPtr::getClassType(),
        "fieldMFPri_spchildptr",
        "",
        FieldMFPri_spchildptrFieldId, FieldMFPri_spchildptrFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast<FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::editHandleFieldMFPri_spchildptr),
        static_cast<FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::getHandleFieldMFPri_spchildptr));

    oType.addInitialDesc(pDesc);

    pDesc = new MFUnrecChildFCDSParTestFCPtr::Description(
        MFUnrecChildFCDSParTestFCPtr::getClassType(),
        "fieldMFNo_spchildptr",
        "",
        FieldMFNo_spchildptrFieldId, FieldMFNo_spchildptrFieldMask,
        false,
        Field::MFDefaultFlags,
        static_cast     <FieldEditMethodSig>(&FCDPtrTestFCCustomAccessBase::invalidEditField),
        static_cast     <FieldGetMethodSig >(&FCDPtrTestFCCustomAccessBase::invalidGetField));

    oType.addInitialDesc(pDesc);
}


FCDPtrTestFCCustomAccessBase::TypeObject FCDPtrTestFCCustomAccessBase::_type(
    FCDPtrTestFCCustomAccessBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &FCDPtrTestFCCustomAccessBase::createEmptyLocal,
    FCDPtrTestFCCustomAccess::initMethod,
    FCDPtrTestFCCustomAccess::exitMethod,
    (InitalInsertDescFunc) &FCDPtrTestFCCustomAccessBase::classDescInserter,
    false,
    0,
    "<?xml version=\"1.0\" ?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"FCDPtrTestFCCustomAccess\"\n"
    "\tparent=\"NodeCore\"\n"
    "\tlibrary=\"System\"\n"
    "\tstructure=\"concrete\"\n"
    "\tpointerfieldtypes=\"both\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "    isNodeCore=\"true\"\n"
    ">\n"
    "  <!-- SF, multi parent, public -->\n"
    "    <Field\n"
    "        name = \"fieldSFPub_ptr\"\n"
    "        type = \"FCDTestFC\"\n"
    "        cardinality = \"single\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"public\"\n"
    "        category = \"pointer\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name = \"fieldSFPub_weakptr\"\n"
    "        type = \"FCDTestFC\"\n"
    "        cardinality = \"single\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"public\"\n"
    "        category = \"weakpointer\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name = \"fieldSFPub_mpchildptr\"\n"
    "        type = \"FCDTestFC\"\n"
    "        cardinality = \"single\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"public\"\n"
    "        category = \"childpointer\"\n"
    "        linkParentField=\"Parents\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "\n"
    "\n"
    "\n"
    "\n"
    "  <!-- SF, multi parent, protected -->\n"
    "    <Field\n"
    "        name = \"fieldSFPro_ptr\"\n"
    "        type = \"FCDTestFC\"\n"
    "        cardinality = \"single\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"protected\"\n"
    "        category = \"pointer\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name = \"fieldSFPro_weakptr\"\n"
    "        type = \"FCDTestFC\"\n"
    "        cardinality = \"single\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"protected\"\n"
    "        category = \"weakpointer\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name = \"fieldSFPro_mpchildptr\"\n"
    "        type = \"FCDTestFC\"\n"
    "        cardinality = \"single\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"protected\"\n"
    "        category = \"childpointer\"\n"
    "        linkParentField=\"Parents\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "\n"
    "  <!-- SF, multi parent, private -->\n"
    "    <Field\n"
    "        name = \"fieldSFPri_ptr\"\n"
    "        type = \"FCDTestFC\"\n"
    "        cardinality = \"single\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"private\"\n"
    "        category = \"pointer\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name = \"fieldSFPri_weakptr\"\n"
    "        type = \"FCDTestFC\"\n"
    "        cardinality = \"single\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"private\"\n"
    "        category = \"weakpointer\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name = \"fieldSFPri_mpchildptr\"\n"
    "        type = \"FCDTestFC\"\n"
    "        cardinality = \"single\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"private\"\n"
    "        category = \"childpointer\"\n"
    "        linkParentField=\"Parents\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "\n"
    "  <!-- SF, multi parent, none -->\n"
    "    <Field\n"
    "        name = \"fieldSFNo_ptr\"\n"
    "        type = \"FCDTestFC\"\n"
    "        cardinality = \"single\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"none\"\n"
    "        category = \"pointer\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name = \"fieldSFNo_weakptr\"\n"
    "        type = \"FCDTestFC\"\n"
    "        cardinality = \"single\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"none\"\n"
    "        category = \"weakpointer\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name = \"fieldSFNo_mpchildptr\"\n"
    "        type = \"FCDTestFC\"\n"
    "        cardinality = \"single\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"none\"\n"
    "        category = \"childpointer\"\n"
    "        linkParentField=\"Parents\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "\n"
    "\n"
    "\n"
    "\n"
    "  <!-- MF, multi parent, public -->\n"
    "    <Field\n"
    "        name = \"fieldMFPub_ptr\"\n"
    "        type = \"FCDTestFC\"\n"
    "        cardinality = \"multi\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"public\"\n"
    "        category = \"pointer\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name = \"fieldMFPub_weakptr\"\n"
    "        type = \"FCDTestFC\"\n"
    "        cardinality = \"multi\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"public\"\n"
    "        category = \"weakpointer\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name = \"fieldMFPub_mpchildptr\"\n"
    "        type = \"FCDTestFC\"\n"
    "        cardinality = \"multi\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"public\"\n"
    "        category = \"childpointer\"\n"
    "        linkParentField=\"Parents\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "\n"
    "\n"
    "\n"
    "  <!-- MF, multi parent, protected -->\n"
    "\n"
    "    <Field\n"
    "        name = \"fieldMFPro_ptr\"\n"
    "        type = \"FCDTestFC\"\n"
    "        cardinality = \"multi\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"protected\"\n"
    "        category = \"pointer\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name = \"fieldMFPro_weakptr\"\n"
    "        type = \"FCDTestFC\"\n"
    "        cardinality = \"multi\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"protected\"\n"
    "        category = \"weakpointer\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name = \"fieldMFPro_mpchildptr\"\n"
    "        type = \"FCDTestFC\"\n"
    "        cardinality = \"multi\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"protected\"\n"
    "        category = \"childpointer\"\n"
    "        linkParentField=\"Parents\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "\n"
    "  <!-- MF, multi parent, private -->\n"
    "\n"
    "    <Field\n"
    "        name = \"fieldMFPri_ptr\"\n"
    "        type = \"FCDTestFC\"\n"
    "        cardinality = \"multi\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"private\"\n"
    "        category = \"pointer\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name = \"fieldMFPri_weakptr\"\n"
    "        type = \"FCDTestFC\"\n"
    "        cardinality = \"multi\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"private\"\n"
    "        category = \"weakpointer\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name = \"fieldMFPri_mpchildptr\"\n"
    "        type = \"FCDTestFC\"\n"
    "        cardinality = \"multi\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"private\"\n"
    "        category = \"childpointer\"\n"
    "        linkParentField=\"Parents\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "\n"
    "  <!-- MF, multi parent, none -->\n"
    "    <Field\n"
    "        name = \"fieldMFNo_ptr\"\n"
    "        type = \"FCDTestFC\"\n"
    "        cardinality = \"multi\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"none\"\n"
    "        category = \"pointer\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name = \"fieldMFNo_weakptr\"\n"
    "        type = \"FCDTestFC\"\n"
    "        cardinality = \"multi\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"none\"\n"
    "        category = \"weakpointer\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "    <Field\n"
    "        name = \"fieldMFNo_mpchildptr\"\n"
    "        type = \"FCDTestFC\"\n"
    "        cardinality = \"multi\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"none\"\n"
    "        category = \"childpointer\"\n"
    "        linkParentField=\"Parents\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "\n"
    "\n"
    "\n"
    "  <!-- SF, single parent, public -->\n"
    "\n"
    "    <Field\n"
    "        name = \"fieldSFPub_spchildptr\"\n"
    "        type = \"FCDSParTestFC\"\n"
    "        cardinality = \"single\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"public\"\n"
    "        category = \"childpointer\"\n"
    "        linkParentField=\"Parent\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "  <!-- SF, single parent, protected -->\n"
    "\n"
    "    <Field\n"
    "        name = \"fieldSFPro_spchildptr\"\n"
    "        type = \"FCDSParTestFC\"\n"
    "        cardinality = \"single\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"protected\"\n"
    "        category = \"childpointer\"\n"
    "        linkParentField=\"Parent\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "  <!-- SF, single parent, private -->\n"
    "\n"
    "    <Field\n"
    "        name = \"fieldSFPri_spchildptr\"\n"
    "        type = \"FCDSParTestFC\"\n"
    "        cardinality = \"single\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"private\"\n"
    "        category = \"childpointer\"\n"
    "        linkParentField=\"Parent\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "  <!-- SF, single parent, none -->\n"
    "\n"
    "    <Field\n"
    "        name = \"fieldSFNo_spchildptr\"\n"
    "        type = \"FCDSParTestFC\"\n"
    "        cardinality = \"single\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"none\"\n"
    "        category = \"childpointer\"\n"
    "        linkParentField=\"Parent\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "\n"
    "  <!-- MF, single parent, public -->\n"
    "\n"
    "    <Field\n"
    "        name = \"fieldMFPub_spchildptr\"\n"
    "        type = \"FCDSParTestFC\"\n"
    "        cardinality = \"multi\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"public\"\n"
    "        category = \"childpointer\"\n"
    "        linkParentField=\"Parent\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "  <!-- MF, single parent, protected -->\n"
    "\n"
    "    <Field\n"
    "        name = \"fieldMFPro_spchildptr\"\n"
    "        type = \"FCDSParTestFC\"\n"
    "        cardinality = \"multi\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"protected\"\n"
    "        category = \"childpointer\"\n"
    "        linkParentField=\"Parent\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "  <!-- MF, single parent, private -->\n"
    "\n"
    "    <Field\n"
    "        name = \"fieldMFPri_spchildptr\"\n"
    "        type = \"FCDSParTestFC\"\n"
    "        cardinality = \"multi\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"private\"\n"
    "        category = \"childpointer\"\n"
    "        linkParentField=\"Parent\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "  <!-- MF, multi parent, none -->\n"
    "\n"
    "    <Field\n"
    "        name = \"fieldMFNo_spchildptr\"\n"
    "        type = \"FCDSParTestFC\"\n"
    "        cardinality = \"multi\"\n"
    "        visibility = \"external\"\n"
    "        default = \"0\"\n"
    "        access = \"none\"\n"
    "        category = \"childpointer\"\n"
    "        linkParentField=\"Parent\"\n"
    "        ptrFieldAccess = \"custom\"\n"
    "    >\n"
    "    </Field>\n"
    "\n"
    "</FieldContainer>\n",
    ""
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &FCDPtrTestFCCustomAccessBase::getType(void)
{
    return _type;
}

const FieldContainerType &FCDPtrTestFCCustomAccessBase::getType(void) const
{
    return _type;
}

UInt32 FCDPtrTestFCCustomAccessBase::getContainerSize(void) const
{
    return sizeof(FCDPtrTestFCCustomAccess);
}

/*------------------------- decorator get ------------------------------*/


//! Get the FCDPtrTestFCCustomAccess::_sfFieldSFPub_ptr field.
const SFUnrecFCDTestFCPtr *FCDPtrTestFCCustomAccessBase::getSFFieldSFPub_ptr(void) const
{
    return &_sfFieldSFPub_ptr;
}

//! Get the FCDPtrTestFCCustomAccess::_sfFieldSFPub_weakptr field.
const SFWeakFCDTestFCPtr *FCDPtrTestFCCustomAccessBase::getSFFieldSFPub_weakptr(void) const
{
    return &_sfFieldSFPub_weakptr;
}

//! Get the FCDPtrTestFCCustomAccess::_sfFieldSFPub_mpchildptr field.
const SFUnrecChildFCDTestFCPtr *FCDPtrTestFCCustomAccessBase::getSFFieldSFPub_mpchildptr(void) const
{
    return &_sfFieldSFPub_mpchildptr;
}

//! Get the FCDPtrTestFCCustomAccess::_sfFieldSFPro_ptr field.
const SFUnrecFCDTestFCPtr *FCDPtrTestFCCustomAccessBase::getSFFieldSFPro_ptr(void) const
{
    return &_sfFieldSFPro_ptr;
}

//! Get the FCDPtrTestFCCustomAccess::_sfFieldSFPro_weakptr field.
const SFWeakFCDTestFCPtr *FCDPtrTestFCCustomAccessBase::getSFFieldSFPro_weakptr(void) const
{
    return &_sfFieldSFPro_weakptr;
}

//! Get the FCDPtrTestFCCustomAccess::_sfFieldSFPro_mpchildptr field.
const SFUnrecChildFCDTestFCPtr *FCDPtrTestFCCustomAccessBase::getSFFieldSFPro_mpchildptr(void) const
{
    return &_sfFieldSFPro_mpchildptr;
}

//! Get the FCDPtrTestFCCustomAccess::_sfFieldSFPri_ptr field.
const SFUnrecFCDTestFCPtr *FCDPtrTestFCCustomAccessBase::getSFFieldSFPri_ptr(void) const
{
    return &_sfFieldSFPri_ptr;
}

//! Get the FCDPtrTestFCCustomAccess::_sfFieldSFPri_weakptr field.
const SFWeakFCDTestFCPtr *FCDPtrTestFCCustomAccessBase::getSFFieldSFPri_weakptr(void) const
{
    return &_sfFieldSFPri_weakptr;
}

//! Get the FCDPtrTestFCCustomAccess::_sfFieldSFPri_mpchildptr field.
const SFUnrecChildFCDTestFCPtr *FCDPtrTestFCCustomAccessBase::getSFFieldSFPri_mpchildptr(void) const
{
    return &_sfFieldSFPri_mpchildptr;
}




//! Get the FCDPtrTestFCCustomAccess::_mfFieldMFPub_ptr field.
const MFUnrecFCDTestFCPtr *FCDPtrTestFCCustomAccessBase::getMFFieldMFPub_ptr(void) const
{
    return &_mfFieldMFPub_ptr;
}

//! Get the FCDPtrTestFCCustomAccess::_mfFieldMFPub_weakptr field.
const MFWeakFCDTestFCPtr *FCDPtrTestFCCustomAccessBase::getMFFieldMFPub_weakptr(void) const
{
    return &_mfFieldMFPub_weakptr;
}

//! Get the FCDPtrTestFCCustomAccess::_mfFieldMFPub_mpchildptr field.
const MFUnrecChildFCDTestFCPtr *FCDPtrTestFCCustomAccessBase::getMFFieldMFPub_mpchildptr(void) const
{
    return &_mfFieldMFPub_mpchildptr;
}

//! Get the FCDPtrTestFCCustomAccess::_mfFieldMFPro_ptr field.
const MFUnrecFCDTestFCPtr *FCDPtrTestFCCustomAccessBase::getMFFieldMFPro_ptr(void) const
{
    return &_mfFieldMFPro_ptr;
}

//! Get the FCDPtrTestFCCustomAccess::_mfFieldMFPro_weakptr field.
const MFWeakFCDTestFCPtr *FCDPtrTestFCCustomAccessBase::getMFFieldMFPro_weakptr(void) const
{
    return &_mfFieldMFPro_weakptr;
}

//! Get the FCDPtrTestFCCustomAccess::_mfFieldMFPro_mpchildptr field.
const MFUnrecChildFCDTestFCPtr *FCDPtrTestFCCustomAccessBase::getMFFieldMFPro_mpchildptr(void) const
{
    return &_mfFieldMFPro_mpchildptr;
}

//! Get the FCDPtrTestFCCustomAccess::_mfFieldMFPri_ptr field.
const MFUnrecFCDTestFCPtr *FCDPtrTestFCCustomAccessBase::getMFFieldMFPri_ptr(void) const
{
    return &_mfFieldMFPri_ptr;
}

//! Get the FCDPtrTestFCCustomAccess::_mfFieldMFPri_weakptr field.
const MFWeakFCDTestFCPtr *FCDPtrTestFCCustomAccessBase::getMFFieldMFPri_weakptr(void) const
{
    return &_mfFieldMFPri_weakptr;
}

//! Get the FCDPtrTestFCCustomAccess::_mfFieldMFPri_mpchildptr field.
const MFUnrecChildFCDTestFCPtr *FCDPtrTestFCCustomAccessBase::getMFFieldMFPri_mpchildptr(void) const
{
    return &_mfFieldMFPri_mpchildptr;
}




//! Get the FCDPtrTestFCCustomAccess::_sfFieldSFPub_spchildptr field.
const SFUnrecChildFCDSParTestFCPtr *FCDPtrTestFCCustomAccessBase::getSFFieldSFPub_spchildptr(void) const
{
    return &_sfFieldSFPub_spchildptr;
}

//! Get the FCDPtrTestFCCustomAccess::_sfFieldSFPro_spchildptr field.
const SFUnrecChildFCDSParTestFCPtr *FCDPtrTestFCCustomAccessBase::getSFFieldSFPro_spchildptr(void) const
{
    return &_sfFieldSFPro_spchildptr;
}

//! Get the FCDPtrTestFCCustomAccess::_sfFieldSFPri_spchildptr field.
const SFUnrecChildFCDSParTestFCPtr *FCDPtrTestFCCustomAccessBase::getSFFieldSFPri_spchildptr(void) const
{
    return &_sfFieldSFPri_spchildptr;
}


//! Get the FCDPtrTestFCCustomAccess::_mfFieldMFPub_spchildptr field.
const MFUnrecChildFCDSParTestFCPtr *FCDPtrTestFCCustomAccessBase::getMFFieldMFPub_spchildptr(void) const
{
    return &_mfFieldMFPub_spchildptr;
}

//! Get the FCDPtrTestFCCustomAccess::_mfFieldMFPro_spchildptr field.
const MFUnrecChildFCDSParTestFCPtr *FCDPtrTestFCCustomAccessBase::getMFFieldMFPro_spchildptr(void) const
{
    return &_mfFieldMFPro_spchildptr;
}

//! Get the FCDPtrTestFCCustomAccess::_mfFieldMFPri_spchildptr field.
const MFUnrecChildFCDSParTestFCPtr *FCDPtrTestFCCustomAccessBase::getMFFieldMFPri_spchildptr(void) const
{
    return &_mfFieldMFPri_spchildptr;
}


















/*------------------------------ access -----------------------------------*/

UInt32 FCDPtrTestFCCustomAccessBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (FieldSFPub_ptrFieldMask & whichField))
    {
        returnValue += _sfFieldSFPub_ptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldSFPub_weakptrFieldMask & whichField))
    {
        returnValue += _sfFieldSFPub_weakptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldSFPub_mpchildptrFieldMask & whichField))
    {
        returnValue += _sfFieldSFPub_mpchildptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldSFPro_ptrFieldMask & whichField))
    {
        returnValue += _sfFieldSFPro_ptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldSFPro_weakptrFieldMask & whichField))
    {
        returnValue += _sfFieldSFPro_weakptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldSFPro_mpchildptrFieldMask & whichField))
    {
        returnValue += _sfFieldSFPro_mpchildptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldSFPri_ptrFieldMask & whichField))
    {
        returnValue += _sfFieldSFPri_ptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldSFPri_weakptrFieldMask & whichField))
    {
        returnValue += _sfFieldSFPri_weakptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldSFPri_mpchildptrFieldMask & whichField))
    {
        returnValue += _sfFieldSFPri_mpchildptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldSFNo_ptrFieldMask & whichField))
    {
        returnValue += _sfFieldSFNo_ptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldSFNo_weakptrFieldMask & whichField))
    {
        returnValue += _sfFieldSFNo_weakptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldSFNo_mpchildptrFieldMask & whichField))
    {
        returnValue += _sfFieldSFNo_mpchildptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldMFPub_ptrFieldMask & whichField))
    {
        returnValue += _mfFieldMFPub_ptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldMFPub_weakptrFieldMask & whichField))
    {
        returnValue += _mfFieldMFPub_weakptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldMFPub_mpchildptrFieldMask & whichField))
    {
        returnValue += _mfFieldMFPub_mpchildptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldMFPro_ptrFieldMask & whichField))
    {
        returnValue += _mfFieldMFPro_ptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldMFPro_weakptrFieldMask & whichField))
    {
        returnValue += _mfFieldMFPro_weakptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldMFPro_mpchildptrFieldMask & whichField))
    {
        returnValue += _mfFieldMFPro_mpchildptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldMFPri_ptrFieldMask & whichField))
    {
        returnValue += _mfFieldMFPri_ptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldMFPri_weakptrFieldMask & whichField))
    {
        returnValue += _mfFieldMFPri_weakptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldMFPri_mpchildptrFieldMask & whichField))
    {
        returnValue += _mfFieldMFPri_mpchildptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldMFNo_ptrFieldMask & whichField))
    {
        returnValue += _mfFieldMFNo_ptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldMFNo_weakptrFieldMask & whichField))
    {
        returnValue += _mfFieldMFNo_weakptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldMFNo_mpchildptrFieldMask & whichField))
    {
        returnValue += _mfFieldMFNo_mpchildptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldSFPub_spchildptrFieldMask & whichField))
    {
        returnValue += _sfFieldSFPub_spchildptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldSFPro_spchildptrFieldMask & whichField))
    {
        returnValue += _sfFieldSFPro_spchildptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldSFPri_spchildptrFieldMask & whichField))
    {
        returnValue += _sfFieldSFPri_spchildptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldSFNo_spchildptrFieldMask & whichField))
    {
        returnValue += _sfFieldSFNo_spchildptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldMFPub_spchildptrFieldMask & whichField))
    {
        returnValue += _mfFieldMFPub_spchildptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldMFPro_spchildptrFieldMask & whichField))
    {
        returnValue += _mfFieldMFPro_spchildptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldMFPri_spchildptrFieldMask & whichField))
    {
        returnValue += _mfFieldMFPri_spchildptr.getBinSize();
    }
    if(FieldBits::NoField != (FieldMFNo_spchildptrFieldMask & whichField))
    {
        returnValue += _mfFieldMFNo_spchildptr.getBinSize();
    }

    return returnValue;
}

void FCDPtrTestFCCustomAccessBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (FieldSFPub_ptrFieldMask & whichField))
    {
        _sfFieldSFPub_ptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFPub_weakptrFieldMask & whichField))
    {
        _sfFieldSFPub_weakptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFPub_mpchildptrFieldMask & whichField))
    {
        _sfFieldSFPub_mpchildptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFPro_ptrFieldMask & whichField))
    {
        _sfFieldSFPro_ptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFPro_weakptrFieldMask & whichField))
    {
        _sfFieldSFPro_weakptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFPro_mpchildptrFieldMask & whichField))
    {
        _sfFieldSFPro_mpchildptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFPri_ptrFieldMask & whichField))
    {
        _sfFieldSFPri_ptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFPri_weakptrFieldMask & whichField))
    {
        _sfFieldSFPri_weakptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFPri_mpchildptrFieldMask & whichField))
    {
        _sfFieldSFPri_mpchildptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFNo_ptrFieldMask & whichField))
    {
        _sfFieldSFNo_ptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFNo_weakptrFieldMask & whichField))
    {
        _sfFieldSFNo_weakptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFNo_mpchildptrFieldMask & whichField))
    {
        _sfFieldSFNo_mpchildptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFPub_ptrFieldMask & whichField))
    {
        _mfFieldMFPub_ptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFPub_weakptrFieldMask & whichField))
    {
        _mfFieldMFPub_weakptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFPub_mpchildptrFieldMask & whichField))
    {
        _mfFieldMFPub_mpchildptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFPro_ptrFieldMask & whichField))
    {
        _mfFieldMFPro_ptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFPro_weakptrFieldMask & whichField))
    {
        _mfFieldMFPro_weakptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFPro_mpchildptrFieldMask & whichField))
    {
        _mfFieldMFPro_mpchildptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFPri_ptrFieldMask & whichField))
    {
        _mfFieldMFPri_ptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFPri_weakptrFieldMask & whichField))
    {
        _mfFieldMFPri_weakptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFPri_mpchildptrFieldMask & whichField))
    {
        _mfFieldMFPri_mpchildptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFNo_ptrFieldMask & whichField))
    {
        _mfFieldMFNo_ptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFNo_weakptrFieldMask & whichField))
    {
        _mfFieldMFNo_weakptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFNo_mpchildptrFieldMask & whichField))
    {
        _mfFieldMFNo_mpchildptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFPub_spchildptrFieldMask & whichField))
    {
        _sfFieldSFPub_spchildptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFPro_spchildptrFieldMask & whichField))
    {
        _sfFieldSFPro_spchildptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFPri_spchildptrFieldMask & whichField))
    {
        _sfFieldSFPri_spchildptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFNo_spchildptrFieldMask & whichField))
    {
        _sfFieldSFNo_spchildptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFPub_spchildptrFieldMask & whichField))
    {
        _mfFieldMFPub_spchildptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFPro_spchildptrFieldMask & whichField))
    {
        _mfFieldMFPro_spchildptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFPri_spchildptrFieldMask & whichField))
    {
        _mfFieldMFPri_spchildptr.copyToBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFNo_spchildptrFieldMask & whichField))
    {
        _mfFieldMFNo_spchildptr.copyToBin(pMem);
    }
}

void FCDPtrTestFCCustomAccessBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (FieldSFPub_ptrFieldMask & whichField))
    {
        _sfFieldSFPub_ptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFPub_weakptrFieldMask & whichField))
    {
        _sfFieldSFPub_weakptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFPub_mpchildptrFieldMask & whichField))
    {
        _sfFieldSFPub_mpchildptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFPro_ptrFieldMask & whichField))
    {
        _sfFieldSFPro_ptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFPro_weakptrFieldMask & whichField))
    {
        _sfFieldSFPro_weakptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFPro_mpchildptrFieldMask & whichField))
    {
        _sfFieldSFPro_mpchildptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFPri_ptrFieldMask & whichField))
    {
        _sfFieldSFPri_ptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFPri_weakptrFieldMask & whichField))
    {
        _sfFieldSFPri_weakptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFPri_mpchildptrFieldMask & whichField))
    {
        _sfFieldSFPri_mpchildptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFNo_ptrFieldMask & whichField))
    {
        _sfFieldSFNo_ptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFNo_weakptrFieldMask & whichField))
    {
        _sfFieldSFNo_weakptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFNo_mpchildptrFieldMask & whichField))
    {
        _sfFieldSFNo_mpchildptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFPub_ptrFieldMask & whichField))
    {
        _mfFieldMFPub_ptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFPub_weakptrFieldMask & whichField))
    {
        _mfFieldMFPub_weakptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFPub_mpchildptrFieldMask & whichField))
    {
        _mfFieldMFPub_mpchildptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFPro_ptrFieldMask & whichField))
    {
        _mfFieldMFPro_ptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFPro_weakptrFieldMask & whichField))
    {
        _mfFieldMFPro_weakptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFPro_mpchildptrFieldMask & whichField))
    {
        _mfFieldMFPro_mpchildptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFPri_ptrFieldMask & whichField))
    {
        _mfFieldMFPri_ptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFPri_weakptrFieldMask & whichField))
    {
        _mfFieldMFPri_weakptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFPri_mpchildptrFieldMask & whichField))
    {
        _mfFieldMFPri_mpchildptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFNo_ptrFieldMask & whichField))
    {
        _mfFieldMFNo_ptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFNo_weakptrFieldMask & whichField))
    {
        _mfFieldMFNo_weakptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFNo_mpchildptrFieldMask & whichField))
    {
        _mfFieldMFNo_mpchildptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFPub_spchildptrFieldMask & whichField))
    {
        _sfFieldSFPub_spchildptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFPro_spchildptrFieldMask & whichField))
    {
        _sfFieldSFPro_spchildptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFPri_spchildptrFieldMask & whichField))
    {
        _sfFieldSFPri_spchildptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldSFNo_spchildptrFieldMask & whichField))
    {
        _sfFieldSFNo_spchildptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFPub_spchildptrFieldMask & whichField))
    {
        _mfFieldMFPub_spchildptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFPro_spchildptrFieldMask & whichField))
    {
        _mfFieldMFPro_spchildptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFPri_spchildptrFieldMask & whichField))
    {
        _mfFieldMFPri_spchildptr.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (FieldMFNo_spchildptrFieldMask & whichField))
    {
        _mfFieldMFNo_spchildptr.copyFromBin(pMem);
    }
}

//! create a new instance of the class
FCDPtrTestFCCustomAccessTransitPtr FCDPtrTestFCCustomAccessBase::create(void)
{
    FCDPtrTestFCCustomAccessTransitPtr fc;

    if(getClassType().getPrototype() != NullFC)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<FCDPtrTestFCCustomAccess>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
FCDPtrTestFCCustomAccessTransitPtr FCDPtrTestFCCustomAccessBase::createLocal(BitVector bFlags)
{
    FCDPtrTestFCCustomAccessTransitPtr fc;

    if(getClassType().getPrototype() != NullFC)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<FCDPtrTestFCCustomAccess>(tmpPtr);
    }

    return fc;
}

//! create an empty new instance of the class, do not copy the prototype
FCDPtrTestFCCustomAccessPtr FCDPtrTestFCCustomAccessBase::createEmpty(void)
{
    FCDPtrTestFCCustomAccessPtr returnValue;

    newPtr<FCDPtrTestFCCustomAccess>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &= 
        ~Thread::getCurrentLocalFlags(); 

    return returnValue;
}

FCDPtrTestFCCustomAccessPtr FCDPtrTestFCCustomAccessBase::createEmptyLocal(BitVector bFlags)
{
    FCDPtrTestFCCustomAccessPtr returnValue;

    newPtr<FCDPtrTestFCCustomAccess>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr FCDPtrTestFCCustomAccessBase::shallowCopy(void) const
{
    FCDPtrTestFCCustomAccessPtr tmpPtr;

    newPtr(tmpPtr, 
           dynamic_cast<const FCDPtrTestFCCustomAccess *>(this), 
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}

FieldContainerTransitPtr FCDPtrTestFCCustomAccessBase::shallowCopyLocal(
    BitVector bFlags) const
{
    FCDPtrTestFCCustomAccessPtr tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const FCDPtrTestFCCustomAccess *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

FCDPtrTestFCCustomAccessBase::FCDPtrTestFCCustomAccessBase(void) :
    Inherited(),
    _sfFieldSFPub_ptr         (NullFC),
    _sfFieldSFPub_weakptr     (NullFC),
    _sfFieldSFPub_mpchildptr  (this, 
                          FieldSFPub_mpchildptrFieldId,
                          FCDTestFC::ParentsFieldId),
    _sfFieldSFPro_ptr         (NullFC),
    _sfFieldSFPro_weakptr     (NullFC),
    _sfFieldSFPro_mpchildptr  (this, 
                          FieldSFPro_mpchildptrFieldId,
                          FCDTestFC::ParentsFieldId),
    _sfFieldSFPri_ptr         (NullFC),
    _sfFieldSFPri_weakptr     (NullFC),
    _sfFieldSFPri_mpchildptr  (this, 
                          FieldSFPri_mpchildptrFieldId,
                          FCDTestFC::ParentsFieldId),
    _sfFieldSFNo_ptr          (NullFC),
    _sfFieldSFNo_weakptr      (NullFC),
    _sfFieldSFNo_mpchildptr   (this, 
                          FieldSFNo_mpchildptrFieldId,
                          FCDTestFC::ParentsFieldId),
    _mfFieldMFPub_ptr         (),
    _mfFieldMFPub_weakptr     (),
    _mfFieldMFPub_mpchildptr  (this, 
                          FieldMFPub_mpchildptrFieldId,
                          FCDTestFC::ParentsFieldId),
    _mfFieldMFPro_ptr         (),
    _mfFieldMFPro_weakptr     (),
    _mfFieldMFPro_mpchildptr  (this, 
                          FieldMFPro_mpchildptrFieldId,
                          FCDTestFC::ParentsFieldId),
    _mfFieldMFPri_ptr         (),
    _mfFieldMFPri_weakptr     (),
    _mfFieldMFPri_mpchildptr  (this, 
                          FieldMFPri_mpchildptrFieldId,
                          FCDTestFC::ParentsFieldId),
    _mfFieldMFNo_ptr          (),
    _mfFieldMFNo_weakptr      (),
    _mfFieldMFNo_mpchildptr   (this, 
                          FieldMFNo_mpchildptrFieldId,
                          FCDTestFC::ParentsFieldId),
    _sfFieldSFPub_spchildptr  (this, 
                          FieldSFPub_spchildptrFieldId,
                          FCDSParTestFC::ParentFieldId),
    _sfFieldSFPro_spchildptr  (this, 
                          FieldSFPro_spchildptrFieldId,
                          FCDSParTestFC::ParentFieldId),
    _sfFieldSFPri_spchildptr  (this, 
                          FieldSFPri_spchildptrFieldId,
                          FCDSParTestFC::ParentFieldId),
    _sfFieldSFNo_spchildptr   (this, 
                          FieldSFNo_spchildptrFieldId,
                          FCDSParTestFC::ParentFieldId),
    _mfFieldMFPub_spchildptr  (this, 
                          FieldMFPub_spchildptrFieldId,
                          FCDSParTestFC::ParentFieldId),
    _mfFieldMFPro_spchildptr  (this, 
                          FieldMFPro_spchildptrFieldId,
                          FCDSParTestFC::ParentFieldId),
    _mfFieldMFPri_spchildptr  (this, 
                          FieldMFPri_spchildptrFieldId,
                          FCDSParTestFC::ParentFieldId),
    _mfFieldMFNo_spchildptr   (this, 
                          FieldMFNo_spchildptrFieldId,
                          FCDSParTestFC::ParentFieldId)
{
}

FCDPtrTestFCCustomAccessBase::FCDPtrTestFCCustomAccessBase(const FCDPtrTestFCCustomAccessBase &source) :
    Inherited(source),
    _sfFieldSFPub_ptr         (NullFC),
    _sfFieldSFPub_weakptr     (NullFC),
    _sfFieldSFPub_mpchildptr  (this, 
                          FieldSFPub_mpchildptrFieldId,
                          FCDTestFC::ParentsFieldId),
    _sfFieldSFPro_ptr         (NullFC),
    _sfFieldSFPro_weakptr     (NullFC),
    _sfFieldSFPro_mpchildptr  (this, 
                          FieldSFPro_mpchildptrFieldId,
                          FCDTestFC::ParentsFieldId),
    _sfFieldSFPri_ptr         (NullFC),
    _sfFieldSFPri_weakptr     (NullFC),
    _sfFieldSFPri_mpchildptr  (this, 
                          FieldSFPri_mpchildptrFieldId,
                          FCDTestFC::ParentsFieldId),
    _sfFieldSFNo_ptr          (NullFC),
    _sfFieldSFNo_weakptr      (NullFC),
    _sfFieldSFNo_mpchildptr   (this, 
                          FieldSFNo_mpchildptrFieldId,
                          FCDTestFC::ParentsFieldId),
    _mfFieldMFPub_ptr         (),
    _mfFieldMFPub_weakptr     (),
    _mfFieldMFPub_mpchildptr  (this, 
                          FieldMFPub_mpchildptrFieldId,
                          FCDTestFC::ParentsFieldId),
    _mfFieldMFPro_ptr         (),
    _mfFieldMFPro_weakptr     (),
    _mfFieldMFPro_mpchildptr  (this, 
                          FieldMFPro_mpchildptrFieldId,
                          FCDTestFC::ParentsFieldId),
    _mfFieldMFPri_ptr         (),
    _mfFieldMFPri_weakptr     (),
    _mfFieldMFPri_mpchildptr  (this, 
                          FieldMFPri_mpchildptrFieldId,
                          FCDTestFC::ParentsFieldId),
    _mfFieldMFNo_ptr          (),
    _mfFieldMFNo_weakptr      (),
    _mfFieldMFNo_mpchildptr   (this, 
                          FieldMFNo_mpchildptrFieldId,
                          FCDTestFC::ParentsFieldId),
    _sfFieldSFPub_spchildptr  (this, 
                          FieldSFPub_spchildptrFieldId,
                          FCDSParTestFC::ParentFieldId),
    _sfFieldSFPro_spchildptr  (this, 
                          FieldSFPro_spchildptrFieldId,
                          FCDSParTestFC::ParentFieldId),
    _sfFieldSFPri_spchildptr  (this, 
                          FieldSFPri_spchildptrFieldId,
                          FCDSParTestFC::ParentFieldId),
    _sfFieldSFNo_spchildptr   (this, 
                          FieldSFNo_spchildptrFieldId,
                          FCDSParTestFC::ParentFieldId),
    _mfFieldMFPub_spchildptr  (this, 
                          FieldMFPub_spchildptrFieldId,
                          FCDSParTestFC::ParentFieldId),
    _mfFieldMFPro_spchildptr  (this, 
                          FieldMFPro_spchildptrFieldId,
                          FCDSParTestFC::ParentFieldId),
    _mfFieldMFPri_spchildptr  (this, 
                          FieldMFPri_spchildptrFieldId,
                          FCDSParTestFC::ParentFieldId),
    _mfFieldMFNo_spchildptr   (this, 
                          FieldMFNo_spchildptrFieldId,
                          FCDSParTestFC::ParentFieldId)
{
}


/*-------------------------- destructors ----------------------------------*/

FCDPtrTestFCCustomAccessBase::~FCDPtrTestFCCustomAccessBase(void)
{
}

/*-------------------------------------------------------------------------*/
/* Child linking                                                           */

bool FCDPtrTestFCCustomAccessBase::unlinkChild(
    const FieldContainerPtr pChild,
    const UInt16            childFieldId)
{
    if(childFieldId == FieldSFPub_mpchildptrFieldId)
    {
        FCDTestFCPtr pTypedChild =
            dynamic_cast<FCDTestFCPtr>(pChild);
            
        if(pTypedChild != NullFC)
        {
            if(pTypedChild == _sfFieldSFPub_mpchildptr.getValue())
            {
                editSField(FieldSFPub_mpchildptrFieldMask);

                _sfFieldSFPub_mpchildptr.setValue(NullFC);
                
                return true;
            }
            
            FWARNING(("FCDPtrTestFCCustomAccessBase::unlinkParent: Child <-> "
                      "Parent link inconsistent.\n"));
            
            return false;
        }
        
        return false;
    }
    
    if(childFieldId == FieldSFPro_mpchildptrFieldId)
    {
        FCDTestFCPtr pTypedChild =
            dynamic_cast<FCDTestFCPtr>(pChild);
            
        if(pTypedChild != NullFC)
        {
            if(pTypedChild == _sfFieldSFPro_mpchildptr.getValue())
            {
                editSField(FieldSFPro_mpchildptrFieldMask);

                _sfFieldSFPro_mpchildptr.setValue(NullFC);
                
                return true;
            }
            
            FWARNING(("FCDPtrTestFCCustomAccessBase::unlinkParent: Child <-> "
                      "Parent link inconsistent.\n"));
            
            return false;
        }
        
        return false;
    }
    
    if(childFieldId == FieldSFPri_mpchildptrFieldId)
    {
        FCDTestFCPtr pTypedChild =
            dynamic_cast<FCDTestFCPtr>(pChild);
            
        if(pTypedChild != NullFC)
        {
            if(pTypedChild == _sfFieldSFPri_mpchildptr.getValue())
            {
                editSField(FieldSFPri_mpchildptrFieldMask);

                _sfFieldSFPri_mpchildptr.setValue(NullFC);
                
                return true;
            }
            
            FWARNING(("FCDPtrTestFCCustomAccessBase::unlinkParent: Child <-> "
                      "Parent link inconsistent.\n"));
            
            return false;
        }
        
        return false;
    }
    
    if(childFieldId == FieldSFNo_mpchildptrFieldId)
    {
        FCDTestFCPtr pTypedChild =
            dynamic_cast<FCDTestFCPtr>(pChild);
            
        if(pTypedChild != NullFC)
        {
            if(pTypedChild == _sfFieldSFNo_mpchildptr.getValue())
            {
                editSField(FieldSFNo_mpchildptrFieldMask);

                _sfFieldSFNo_mpchildptr.setValue(NullFC);
                
                return true;
            }
            
            FWARNING(("FCDPtrTestFCCustomAccessBase::unlinkParent: Child <-> "
                      "Parent link inconsistent.\n"));
            
            return false;
        }
        
        return false;
    }
    
    if(childFieldId == FieldMFPub_mpchildptrFieldId)
    {
        FCDTestFCPtr pTypedChild =
            dynamic_cast<FCDTestFCPtr>(pChild);
            
        if(pTypedChild != NullFC)
        {
            MFUnrecChildFCDTestFCPtr::iterator pI =
                _mfFieldMFPub_mpchildptr.find_nc(pTypedChild);
                
            if(pI != _mfFieldMFPub_mpchildptr.end())
            {
                editMField(FieldMFPub_mpchildptrFieldMask, _mfFieldMFPub_mpchildptr);

                _mfFieldMFPub_mpchildptr.erase(pI);
                
                return true;
            }
            
            FWARNING(("FCDPtrTestFCCustomAccessBase::unlinkParent: Child <-> "
                      "Parent link inconsistent.\n"));
            
            return false;
        }
        
        return false;
    }
    
    if(childFieldId == FieldMFPro_mpchildptrFieldId)
    {
        FCDTestFCPtr pTypedChild =
            dynamic_cast<FCDTestFCPtr>(pChild);
            
        if(pTypedChild != NullFC)
        {
            MFUnrecChildFCDTestFCPtr::iterator pI =
                _mfFieldMFPro_mpchildptr.find_nc(pTypedChild);
                
            if(pI != _mfFieldMFPro_mpchildptr.end())
            {
                editMField(FieldMFPro_mpchildptrFieldMask, _mfFieldMFPro_mpchildptr);

                _mfFieldMFPro_mpchildptr.erase(pI);
                
                return true;
            }
            
            FWARNING(("FCDPtrTestFCCustomAccessBase::unlinkParent: Child <-> "
                      "Parent link inconsistent.\n"));
            
            return false;
        }
        
        return false;
    }
    
    if(childFieldId == FieldMFPri_mpchildptrFieldId)
    {
        FCDTestFCPtr pTypedChild =
            dynamic_cast<FCDTestFCPtr>(pChild);
            
        if(pTypedChild != NullFC)
        {
            MFUnrecChildFCDTestFCPtr::iterator pI =
                _mfFieldMFPri_mpchildptr.find_nc(pTypedChild);
                
            if(pI != _mfFieldMFPri_mpchildptr.end())
            {
                editMField(FieldMFPri_mpchildptrFieldMask, _mfFieldMFPri_mpchildptr);

                _mfFieldMFPri_mpchildptr.erase(pI);
                
                return true;
            }
            
            FWARNING(("FCDPtrTestFCCustomAccessBase::unlinkParent: Child <-> "
                      "Parent link inconsistent.\n"));
            
            return false;
        }
        
        return false;
    }
    
    if(childFieldId == FieldMFNo_mpchildptrFieldId)
    {
        FCDTestFCPtr pTypedChild =
            dynamic_cast<FCDTestFCPtr>(pChild);
            
        if(pTypedChild != NullFC)
        {
            MFUnrecChildFCDTestFCPtr::iterator pI =
                _mfFieldMFNo_mpchildptr.find_nc(pTypedChild);
                
            if(pI != _mfFieldMFNo_mpchildptr.end())
            {
                editMField(FieldMFNo_mpchildptrFieldMask, _mfFieldMFNo_mpchildptr);

                _mfFieldMFNo_mpchildptr.erase(pI);
                
                return true;
            }
            
            FWARNING(("FCDPtrTestFCCustomAccessBase::unlinkParent: Child <-> "
                      "Parent link inconsistent.\n"));
            
            return false;
        }
        
        return false;
    }
    
    if(childFieldId == FieldSFPub_spchildptrFieldId)
    {
        FCDSParTestFCPtr pTypedChild =
            dynamic_cast<FCDSParTestFCPtr>(pChild);
            
        if(pTypedChild != NullFC)
        {
            if(pTypedChild == _sfFieldSFPub_spchildptr.getValue())
            {
                editSField(FieldSFPub_spchildptrFieldMask);

                _sfFieldSFPub_spchildptr.setValue(NullFC);
                
                return true;
            }
            
            FWARNING(("FCDPtrTestFCCustomAccessBase::unlinkParent: Child <-> "
                      "Parent link inconsistent.\n"));
            
            return false;
        }
        
        return false;
    }
    
    if(childFieldId == FieldSFPro_spchildptrFieldId)
    {
        FCDSParTestFCPtr pTypedChild =
            dynamic_cast<FCDSParTestFCPtr>(pChild);
            
        if(pTypedChild != NullFC)
        {
            if(pTypedChild == _sfFieldSFPro_spchildptr.getValue())
            {
                editSField(FieldSFPro_spchildptrFieldMask);

                _sfFieldSFPro_spchildptr.setValue(NullFC);
                
                return true;
            }
            
            FWARNING(("FCDPtrTestFCCustomAccessBase::unlinkParent: Child <-> "
                      "Parent link inconsistent.\n"));
            
            return false;
        }
        
        return false;
    }
    
    if(childFieldId == FieldSFPri_spchildptrFieldId)
    {
        FCDSParTestFCPtr pTypedChild =
            dynamic_cast<FCDSParTestFCPtr>(pChild);
            
        if(pTypedChild != NullFC)
        {
            if(pTypedChild == _sfFieldSFPri_spchildptr.getValue())
            {
                editSField(FieldSFPri_spchildptrFieldMask);

                _sfFieldSFPri_spchildptr.setValue(NullFC);
                
                return true;
            }
            
            FWARNING(("FCDPtrTestFCCustomAccessBase::unlinkParent: Child <-> "
                      "Parent link inconsistent.\n"));
            
            return false;
        }
        
        return false;
    }
    
    if(childFieldId == FieldSFNo_spchildptrFieldId)
    {
        FCDSParTestFCPtr pTypedChild =
            dynamic_cast<FCDSParTestFCPtr>(pChild);
            
        if(pTypedChild != NullFC)
        {
            if(pTypedChild == _sfFieldSFNo_spchildptr.getValue())
            {
                editSField(FieldSFNo_spchildptrFieldMask);

                _sfFieldSFNo_spchildptr.setValue(NullFC);
                
                return true;
            }
            
            FWARNING(("FCDPtrTestFCCustomAccessBase::unlinkParent: Child <-> "
                      "Parent link inconsistent.\n"));
            
            return false;
        }
        
        return false;
    }
    
    if(childFieldId == FieldMFPub_spchildptrFieldId)
    {
        FCDSParTestFCPtr pTypedChild =
            dynamic_cast<FCDSParTestFCPtr>(pChild);
            
        if(pTypedChild != NullFC)
        {
            MFUnrecChildFCDSParTestFCPtr::iterator pI =
                _mfFieldMFPub_spchildptr.find_nc(pTypedChild);
                
            if(pI != _mfFieldMFPub_spchildptr.end())
            {
                editMField(FieldMFPub_spchildptrFieldMask, _mfFieldMFPub_spchildptr);

                _mfFieldMFPub_spchildptr.erase(pI);
                
                return true;
            }
            
            FWARNING(("FCDPtrTestFCCustomAccessBase::unlinkParent: Child <-> "
                      "Parent link inconsistent.\n"));
            
            return false;
        }
        
        return false;
    }
    
    if(childFieldId == FieldMFPro_spchildptrFieldId)
    {
        FCDSParTestFCPtr pTypedChild =
            dynamic_cast<FCDSParTestFCPtr>(pChild);
            
        if(pTypedChild != NullFC)
        {
            MFUnrecChildFCDSParTestFCPtr::iterator pI =
                _mfFieldMFPro_spchildptr.find_nc(pTypedChild);
                
            if(pI != _mfFieldMFPro_spchildptr.end())
            {
                editMField(FieldMFPro_spchildptrFieldMask, _mfFieldMFPro_spchildptr);

                _mfFieldMFPro_spchildptr.erase(pI);
                
                return true;
            }
            
            FWARNING(("FCDPtrTestFCCustomAccessBase::unlinkParent: Child <-> "
                      "Parent link inconsistent.\n"));
            
            return false;
        }
        
        return false;
    }
    
    if(childFieldId == FieldMFPri_spchildptrFieldId)
    {
        FCDSParTestFCPtr pTypedChild =
            dynamic_cast<FCDSParTestFCPtr>(pChild);
            
        if(pTypedChild != NullFC)
        {
            MFUnrecChildFCDSParTestFCPtr::iterator pI =
                _mfFieldMFPri_spchildptr.find_nc(pTypedChild);
                
            if(pI != _mfFieldMFPri_spchildptr.end())
            {
                editMField(FieldMFPri_spchildptrFieldMask, _mfFieldMFPri_spchildptr);

                _mfFieldMFPri_spchildptr.erase(pI);
                
                return true;
            }
            
            FWARNING(("FCDPtrTestFCCustomAccessBase::unlinkParent: Child <-> "
                      "Parent link inconsistent.\n"));
            
            return false;
        }
        
        return false;
    }
    
    if(childFieldId == FieldMFNo_spchildptrFieldId)
    {
        FCDSParTestFCPtr pTypedChild =
            dynamic_cast<FCDSParTestFCPtr>(pChild);
            
        if(pTypedChild != NullFC)
        {
            MFUnrecChildFCDSParTestFCPtr::iterator pI =
                _mfFieldMFNo_spchildptr.find_nc(pTypedChild);
                
            if(pI != _mfFieldMFNo_spchildptr.end())
            {
                editMField(FieldMFNo_spchildptrFieldMask, _mfFieldMFNo_spchildptr);

                _mfFieldMFNo_spchildptr.erase(pI);
                
                return true;
            }
            
            FWARNING(("FCDPtrTestFCCustomAccessBase::unlinkParent: Child <-> "
                      "Parent link inconsistent.\n"));
            
            return false;
        }
        
        return false;
    }
    
    
    return Inherited::unlinkChild(pChild, childFieldId);
}

void FCDPtrTestFCCustomAccessBase::onCreate(const FCDPtrTestFCCustomAccess *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
        FCDPtrTestFCCustomAccess *pThis = static_cast<FCDPtrTestFCCustomAccess *>(this);

        pThis->setFieldSFPub_ptr(source->getFieldSFPub_ptr());

        pThis->setFieldSFPub_weakptr(source->getFieldSFPub_weakptr());

        pThis->setFieldSFPub_mpchildptr(source->getFieldSFPub_mpchildptr());

        pThis->setFieldSFPro_ptr(source->getFieldSFPro_ptr());

        pThis->setFieldSFPro_weakptr(source->getFieldSFPro_weakptr());

        pThis->setFieldSFPro_mpchildptr(source->getFieldSFPro_mpchildptr());

        pThis->setFieldSFPri_ptr(source->getFieldSFPri_ptr());

        pThis->setFieldSFPri_weakptr(source->getFieldSFPri_weakptr());

        pThis->setFieldSFPri_mpchildptr(source->getFieldSFPri_mpchildptr());

        MFUnrecFCDTestFCPtr::const_iterator FieldMFPub_ptrIt  =
            source->_mfFieldMFPub_ptr.begin();
        MFUnrecFCDTestFCPtr::const_iterator FieldMFPub_ptrEnd =
            source->_mfFieldMFPub_ptr.end  ();

        while(FieldMFPub_ptrIt != FieldMFPub_ptrEnd)
        {
            pThis->pushToFieldMFPub_ptr(*FieldMFPub_ptrIt);

            ++FieldMFPub_ptrIt;
        }

        MFWeakFCDTestFCPtr::const_iterator FieldMFPub_weakptrIt  =
            source->_mfFieldMFPub_weakptr.begin();
        MFWeakFCDTestFCPtr::const_iterator FieldMFPub_weakptrEnd =
            source->_mfFieldMFPub_weakptr.end  ();

        while(FieldMFPub_weakptrIt != FieldMFPub_weakptrEnd)
        {
            pThis->pushToFieldMFPub_weakptr(*FieldMFPub_weakptrIt);

            ++FieldMFPub_weakptrIt;
        }

        MFUnrecChildFCDTestFCPtr::const_iterator FieldMFPub_mpchildptrIt  =
            source->_mfFieldMFPub_mpchildptr.begin();
        MFUnrecChildFCDTestFCPtr::const_iterator FieldMFPub_mpchildptrEnd =
            source->_mfFieldMFPub_mpchildptr.end  ();

        while(FieldMFPub_mpchildptrIt != FieldMFPub_mpchildptrEnd)
        {
            pThis->pushToFieldMFPub_mpchildptr(*FieldMFPub_mpchildptrIt);

            ++FieldMFPub_mpchildptrIt;
        }

        MFUnrecFCDTestFCPtr::const_iterator FieldMFPro_ptrIt  =
            source->_mfFieldMFPro_ptr.begin();
        MFUnrecFCDTestFCPtr::const_iterator FieldMFPro_ptrEnd =
            source->_mfFieldMFPro_ptr.end  ();

        while(FieldMFPro_ptrIt != FieldMFPro_ptrEnd)
        {
            pThis->pushToFieldMFPro_ptr(*FieldMFPro_ptrIt);

            ++FieldMFPro_ptrIt;
        }

        MFWeakFCDTestFCPtr::const_iterator FieldMFPro_weakptrIt  =
            source->_mfFieldMFPro_weakptr.begin();
        MFWeakFCDTestFCPtr::const_iterator FieldMFPro_weakptrEnd =
            source->_mfFieldMFPro_weakptr.end  ();

        while(FieldMFPro_weakptrIt != FieldMFPro_weakptrEnd)
        {
            pThis->pushToFieldMFPro_weakptr(*FieldMFPro_weakptrIt);

            ++FieldMFPro_weakptrIt;
        }

        MFUnrecChildFCDTestFCPtr::const_iterator FieldMFPro_mpchildptrIt  =
            source->_mfFieldMFPro_mpchildptr.begin();
        MFUnrecChildFCDTestFCPtr::const_iterator FieldMFPro_mpchildptrEnd =
            source->_mfFieldMFPro_mpchildptr.end  ();

        while(FieldMFPro_mpchildptrIt != FieldMFPro_mpchildptrEnd)
        {
            pThis->pushToFieldMFPro_mpchildptr(*FieldMFPro_mpchildptrIt);

            ++FieldMFPro_mpchildptrIt;
        }

        MFUnrecFCDTestFCPtr::const_iterator FieldMFPri_ptrIt  =
            source->_mfFieldMFPri_ptr.begin();
        MFUnrecFCDTestFCPtr::const_iterator FieldMFPri_ptrEnd =
            source->_mfFieldMFPri_ptr.end  ();

        while(FieldMFPri_ptrIt != FieldMFPri_ptrEnd)
        {
            pThis->pushToFieldMFPri_ptr(*FieldMFPri_ptrIt);

            ++FieldMFPri_ptrIt;
        }

        MFWeakFCDTestFCPtr::const_iterator FieldMFPri_weakptrIt  =
            source->_mfFieldMFPri_weakptr.begin();
        MFWeakFCDTestFCPtr::const_iterator FieldMFPri_weakptrEnd =
            source->_mfFieldMFPri_weakptr.end  ();

        while(FieldMFPri_weakptrIt != FieldMFPri_weakptrEnd)
        {
            pThis->pushToFieldMFPri_weakptr(*FieldMFPri_weakptrIt);

            ++FieldMFPri_weakptrIt;
        }

        MFUnrecChildFCDTestFCPtr::const_iterator FieldMFPri_mpchildptrIt  =
            source->_mfFieldMFPri_mpchildptr.begin();
        MFUnrecChildFCDTestFCPtr::const_iterator FieldMFPri_mpchildptrEnd =
            source->_mfFieldMFPri_mpchildptr.end  ();

        while(FieldMFPri_mpchildptrIt != FieldMFPri_mpchildptrEnd)
        {
            pThis->pushToFieldMFPri_mpchildptr(*FieldMFPri_mpchildptrIt);

            ++FieldMFPri_mpchildptrIt;
        }

        pThis->setFieldSFPub_spchildptr(source->getFieldSFPub_spchildptr());

        pThis->setFieldSFPro_spchildptr(source->getFieldSFPro_spchildptr());

        pThis->setFieldSFPri_spchildptr(source->getFieldSFPri_spchildptr());

        MFUnrecChildFCDSParTestFCPtr::const_iterator FieldMFPub_spchildptrIt  =
            source->_mfFieldMFPub_spchildptr.begin();
        MFUnrecChildFCDSParTestFCPtr::const_iterator FieldMFPub_spchildptrEnd =
            source->_mfFieldMFPub_spchildptr.end  ();

        while(FieldMFPub_spchildptrIt != FieldMFPub_spchildptrEnd)
        {
            pThis->pushToFieldMFPub_spchildptr(*FieldMFPub_spchildptrIt);

            ++FieldMFPub_spchildptrIt;
        }

        MFUnrecChildFCDSParTestFCPtr::const_iterator FieldMFPro_spchildptrIt  =
            source->_mfFieldMFPro_spchildptr.begin();
        MFUnrecChildFCDSParTestFCPtr::const_iterator FieldMFPro_spchildptrEnd =
            source->_mfFieldMFPro_spchildptr.end  ();

        while(FieldMFPro_spchildptrIt != FieldMFPro_spchildptrEnd)
        {
            pThis->pushToFieldMFPro_spchildptr(*FieldMFPro_spchildptrIt);

            ++FieldMFPro_spchildptrIt;
        }

        MFUnrecChildFCDSParTestFCPtr::const_iterator FieldMFPri_spchildptrIt  =
            source->_mfFieldMFPri_spchildptr.begin();
        MFUnrecChildFCDSParTestFCPtr::const_iterator FieldMFPri_spchildptrEnd =
            source->_mfFieldMFPri_spchildptr.end  ();

        while(FieldMFPri_spchildptrIt != FieldMFPri_spchildptrEnd)
        {
            pThis->pushToFieldMFPri_spchildptr(*FieldMFPri_spchildptrIt);

            ++FieldMFPri_spchildptrIt;
        }
    }
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldSFPub_ptr  (void) const
{
    SFUnrecFCDTestFCPtr::GetHandlePtr returnValue(
        new  SFUnrecFCDTestFCPtr::GetHandle(
             &_sfFieldSFPub_ptr, 
             this->getType().getFieldDesc(FieldSFPub_ptrFieldId)));

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldSFPub_ptr (void)
{
    SFUnrecFCDTestFCPtr::EditHandlePtr returnValue(
        new  SFUnrecFCDTestFCPtr::EditHandle(
             &_sfFieldSFPub_ptr, 
             this->getType().getFieldDesc(FieldSFPub_ptrFieldId)));

    returnValue->setSetMethod(boost::bind(&FCDPtrTestFCCustomAccess::setFieldSFPub_ptr, 
                                          static_cast<FCDPtrTestFCCustomAccess *>(this), _1));

    editSField(FieldSFPub_ptrFieldMask);

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldSFPub_weakptr (void) const
{
    SFWeakFCDTestFCPtr::GetHandlePtr returnValue(
        new  SFWeakFCDTestFCPtr::GetHandle(
             &_sfFieldSFPub_weakptr, 
             this->getType().getFieldDesc(FieldSFPub_weakptrFieldId)));

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldSFPub_weakptr(void)
{
    SFWeakFCDTestFCPtr::EditHandlePtr returnValue(
        new  SFWeakFCDTestFCPtr::EditHandle(
             &_sfFieldSFPub_weakptr, 
             this->getType().getFieldDesc(FieldSFPub_weakptrFieldId)));

    returnValue->setSetMethod(boost::bind(&FCDPtrTestFCCustomAccess::setFieldSFPub_weakptr, 
                                          static_cast<FCDPtrTestFCCustomAccess *>(this), _1));

    editSField(FieldSFPub_weakptrFieldMask);

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldSFPub_mpchildptr (void) const
{
    SFUnrecChildFCDTestFCPtr::GetHandlePtr returnValue(
        new  SFUnrecChildFCDTestFCPtr::GetHandle(
             &_sfFieldSFPub_mpchildptr, 
             this->getType().getFieldDesc(FieldSFPub_mpchildptrFieldId)));

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldSFPub_mpchildptr(void)
{
    SFUnrecChildFCDTestFCPtr::EditHandlePtr returnValue(
        new  SFUnrecChildFCDTestFCPtr::EditHandle(
             &_sfFieldSFPub_mpchildptr, 
             this->getType().getFieldDesc(FieldSFPub_mpchildptrFieldId)));

    returnValue->setSetMethod(boost::bind(&FCDPtrTestFCCustomAccess::setFieldSFPub_mpchildptr, 
                                          static_cast<FCDPtrTestFCCustomAccess *>(this), _1));

    editSField(FieldSFPub_mpchildptrFieldMask);

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldSFPro_ptr  (void) const
{
    SFUnrecFCDTestFCPtr::GetHandlePtr returnValue(
        new  SFUnrecFCDTestFCPtr::GetHandle(
             &_sfFieldSFPro_ptr, 
             this->getType().getFieldDesc(FieldSFPro_ptrFieldId)));

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldSFPro_ptr (void)
{
    SFUnrecFCDTestFCPtr::EditHandlePtr returnValue(
        new  SFUnrecFCDTestFCPtr::EditHandle(
             &_sfFieldSFPro_ptr, 
             this->getType().getFieldDesc(FieldSFPro_ptrFieldId)));

    returnValue->setSetMethod(boost::bind(&FCDPtrTestFCCustomAccess::setFieldSFPro_ptr, 
                                          static_cast<FCDPtrTestFCCustomAccess *>(this), _1));

    editSField(FieldSFPro_ptrFieldMask);

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldSFPro_weakptr (void) const
{
    SFWeakFCDTestFCPtr::GetHandlePtr returnValue(
        new  SFWeakFCDTestFCPtr::GetHandle(
             &_sfFieldSFPro_weakptr, 
             this->getType().getFieldDesc(FieldSFPro_weakptrFieldId)));

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldSFPro_weakptr(void)
{
    SFWeakFCDTestFCPtr::EditHandlePtr returnValue(
        new  SFWeakFCDTestFCPtr::EditHandle(
             &_sfFieldSFPro_weakptr, 
             this->getType().getFieldDesc(FieldSFPro_weakptrFieldId)));

    returnValue->setSetMethod(boost::bind(&FCDPtrTestFCCustomAccess::setFieldSFPro_weakptr, 
                                          static_cast<FCDPtrTestFCCustomAccess *>(this), _1));

    editSField(FieldSFPro_weakptrFieldMask);

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldSFPro_mpchildptr (void) const
{
    SFUnrecChildFCDTestFCPtr::GetHandlePtr returnValue(
        new  SFUnrecChildFCDTestFCPtr::GetHandle(
             &_sfFieldSFPro_mpchildptr, 
             this->getType().getFieldDesc(FieldSFPro_mpchildptrFieldId)));

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldSFPro_mpchildptr(void)
{
    SFUnrecChildFCDTestFCPtr::EditHandlePtr returnValue(
        new  SFUnrecChildFCDTestFCPtr::EditHandle(
             &_sfFieldSFPro_mpchildptr, 
             this->getType().getFieldDesc(FieldSFPro_mpchildptrFieldId)));

    returnValue->setSetMethod(boost::bind(&FCDPtrTestFCCustomAccess::setFieldSFPro_mpchildptr, 
                                          static_cast<FCDPtrTestFCCustomAccess *>(this), _1));

    editSField(FieldSFPro_mpchildptrFieldMask);

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldSFPri_ptr  (void) const
{
    SFUnrecFCDTestFCPtr::GetHandlePtr returnValue(
        new  SFUnrecFCDTestFCPtr::GetHandle(
             &_sfFieldSFPri_ptr, 
             this->getType().getFieldDesc(FieldSFPri_ptrFieldId)));

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldSFPri_ptr (void)
{
    SFUnrecFCDTestFCPtr::EditHandlePtr returnValue(
        new  SFUnrecFCDTestFCPtr::EditHandle(
             &_sfFieldSFPri_ptr, 
             this->getType().getFieldDesc(FieldSFPri_ptrFieldId)));

    returnValue->setSetMethod(boost::bind(&FCDPtrTestFCCustomAccess::setFieldSFPri_ptr, 
                                          static_cast<FCDPtrTestFCCustomAccess *>(this), _1));

    editSField(FieldSFPri_ptrFieldMask);

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldSFPri_weakptr (void) const
{
    SFWeakFCDTestFCPtr::GetHandlePtr returnValue(
        new  SFWeakFCDTestFCPtr::GetHandle(
             &_sfFieldSFPri_weakptr, 
             this->getType().getFieldDesc(FieldSFPri_weakptrFieldId)));

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldSFPri_weakptr(void)
{
    SFWeakFCDTestFCPtr::EditHandlePtr returnValue(
        new  SFWeakFCDTestFCPtr::EditHandle(
             &_sfFieldSFPri_weakptr, 
             this->getType().getFieldDesc(FieldSFPri_weakptrFieldId)));

    returnValue->setSetMethod(boost::bind(&FCDPtrTestFCCustomAccess::setFieldSFPri_weakptr, 
                                          static_cast<FCDPtrTestFCCustomAccess *>(this), _1));

    editSField(FieldSFPri_weakptrFieldMask);

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldSFPri_mpchildptr (void) const
{
    SFUnrecChildFCDTestFCPtr::GetHandlePtr returnValue(
        new  SFUnrecChildFCDTestFCPtr::GetHandle(
             &_sfFieldSFPri_mpchildptr, 
             this->getType().getFieldDesc(FieldSFPri_mpchildptrFieldId)));

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldSFPri_mpchildptr(void)
{
    SFUnrecChildFCDTestFCPtr::EditHandlePtr returnValue(
        new  SFUnrecChildFCDTestFCPtr::EditHandle(
             &_sfFieldSFPri_mpchildptr, 
             this->getType().getFieldDesc(FieldSFPri_mpchildptrFieldId)));

    returnValue->setSetMethod(boost::bind(&FCDPtrTestFCCustomAccess::setFieldSFPri_mpchildptr, 
                                          static_cast<FCDPtrTestFCCustomAccess *>(this), _1));

    editSField(FieldSFPri_mpchildptrFieldMask);

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldSFNo_ptr   (void) const
{
    SFUnrecFCDTestFCPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldSFNo_ptr  (void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldSFNo_weakptr (void) const
{
    SFWeakFCDTestFCPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldSFNo_weakptr(void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldSFNo_mpchildptr (void) const
{
    SFUnrecChildFCDTestFCPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldSFNo_mpchildptr(void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldMFPub_ptr  (void) const
{
    MFUnrecFCDTestFCPtr::GetHandlePtr returnValue(
        new  MFUnrecFCDTestFCPtr::GetHandle(
             &_mfFieldMFPub_ptr, 
             this->getType().getFieldDesc(FieldMFPub_ptrFieldId)));

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldMFPub_ptr (void)
{
    MFUnrecFCDTestFCPtr::EditHandlePtr returnValue(
        new  MFUnrecFCDTestFCPtr::EditHandle(
             &_mfFieldMFPub_ptr, 
             this->getType().getFieldDesc(FieldMFPub_ptrFieldId)));

    returnValue->setAddMethod(boost::bind(&FCDPtrTestFCCustomAccess::pushToFieldMFPub_ptr, 
                              static_cast<FCDPtrTestFCCustomAccess *>(this), _1));

    editMField(FieldMFPub_ptrFieldMask, _mfFieldMFPub_ptr);

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldMFPub_weakptr (void) const
{
    MFWeakFCDTestFCPtr::GetHandlePtr returnValue(
        new  MFWeakFCDTestFCPtr::GetHandle(
             &_mfFieldMFPub_weakptr, 
             this->getType().getFieldDesc(FieldMFPub_weakptrFieldId)));

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldMFPub_weakptr(void)
{
    MFWeakFCDTestFCPtr::EditHandlePtr returnValue(
        new  MFWeakFCDTestFCPtr::EditHandle(
             &_mfFieldMFPub_weakptr, 
             this->getType().getFieldDesc(FieldMFPub_weakptrFieldId)));

    returnValue->setAddMethod(boost::bind(&FCDPtrTestFCCustomAccess::pushToFieldMFPub_weakptr, 
                              static_cast<FCDPtrTestFCCustomAccess *>(this), _1));

    editMField(FieldMFPub_weakptrFieldMask, _mfFieldMFPub_weakptr);

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldMFPub_mpchildptr (void) const
{
    MFUnrecChildFCDTestFCPtr::GetHandlePtr returnValue(
        new  MFUnrecChildFCDTestFCPtr::GetHandle(
             &_mfFieldMFPub_mpchildptr, 
             this->getType().getFieldDesc(FieldMFPub_mpchildptrFieldId)));

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldMFPub_mpchildptr(void)
{
    MFUnrecChildFCDTestFCPtr::EditHandlePtr returnValue(
        new  MFUnrecChildFCDTestFCPtr::EditHandle(
             &_mfFieldMFPub_mpchildptr, 
             this->getType().getFieldDesc(FieldMFPub_mpchildptrFieldId)));

    returnValue->setAddMethod(boost::bind(&FCDPtrTestFCCustomAccess::pushToFieldMFPub_mpchildptr, 
                              static_cast<FCDPtrTestFCCustomAccess *>(this), _1));

    editMField(FieldMFPub_mpchildptrFieldMask, _mfFieldMFPub_mpchildptr);

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldMFPro_ptr  (void) const
{
    MFUnrecFCDTestFCPtr::GetHandlePtr returnValue(
        new  MFUnrecFCDTestFCPtr::GetHandle(
             &_mfFieldMFPro_ptr, 
             this->getType().getFieldDesc(FieldMFPro_ptrFieldId)));

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldMFPro_ptr (void)
{
    MFUnrecFCDTestFCPtr::EditHandlePtr returnValue(
        new  MFUnrecFCDTestFCPtr::EditHandle(
             &_mfFieldMFPro_ptr, 
             this->getType().getFieldDesc(FieldMFPro_ptrFieldId)));

    returnValue->setAddMethod(boost::bind(&FCDPtrTestFCCustomAccess::pushToFieldMFPro_ptr, 
                              static_cast<FCDPtrTestFCCustomAccess *>(this), _1));

    editMField(FieldMFPro_ptrFieldMask, _mfFieldMFPro_ptr);

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldMFPro_weakptr (void) const
{
    MFWeakFCDTestFCPtr::GetHandlePtr returnValue(
        new  MFWeakFCDTestFCPtr::GetHandle(
             &_mfFieldMFPro_weakptr, 
             this->getType().getFieldDesc(FieldMFPro_weakptrFieldId)));

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldMFPro_weakptr(void)
{
    MFWeakFCDTestFCPtr::EditHandlePtr returnValue(
        new  MFWeakFCDTestFCPtr::EditHandle(
             &_mfFieldMFPro_weakptr, 
             this->getType().getFieldDesc(FieldMFPro_weakptrFieldId)));

    returnValue->setAddMethod(boost::bind(&FCDPtrTestFCCustomAccess::pushToFieldMFPro_weakptr, 
                              static_cast<FCDPtrTestFCCustomAccess *>(this), _1));

    editMField(FieldMFPro_weakptrFieldMask, _mfFieldMFPro_weakptr);

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldMFPro_mpchildptr (void) const
{
    MFUnrecChildFCDTestFCPtr::GetHandlePtr returnValue(
        new  MFUnrecChildFCDTestFCPtr::GetHandle(
             &_mfFieldMFPro_mpchildptr, 
             this->getType().getFieldDesc(FieldMFPro_mpchildptrFieldId)));

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldMFPro_mpchildptr(void)
{
    MFUnrecChildFCDTestFCPtr::EditHandlePtr returnValue(
        new  MFUnrecChildFCDTestFCPtr::EditHandle(
             &_mfFieldMFPro_mpchildptr, 
             this->getType().getFieldDesc(FieldMFPro_mpchildptrFieldId)));

    returnValue->setAddMethod(boost::bind(&FCDPtrTestFCCustomAccess::pushToFieldMFPro_mpchildptr, 
                              static_cast<FCDPtrTestFCCustomAccess *>(this), _1));

    editMField(FieldMFPro_mpchildptrFieldMask, _mfFieldMFPro_mpchildptr);

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldMFPri_ptr  (void) const
{
    MFUnrecFCDTestFCPtr::GetHandlePtr returnValue(
        new  MFUnrecFCDTestFCPtr::GetHandle(
             &_mfFieldMFPri_ptr, 
             this->getType().getFieldDesc(FieldMFPri_ptrFieldId)));

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldMFPri_ptr (void)
{
    MFUnrecFCDTestFCPtr::EditHandlePtr returnValue(
        new  MFUnrecFCDTestFCPtr::EditHandle(
             &_mfFieldMFPri_ptr, 
             this->getType().getFieldDesc(FieldMFPri_ptrFieldId)));

    returnValue->setAddMethod(boost::bind(&FCDPtrTestFCCustomAccess::pushToFieldMFPri_ptr, 
                              static_cast<FCDPtrTestFCCustomAccess *>(this), _1));

    editMField(FieldMFPri_ptrFieldMask, _mfFieldMFPri_ptr);

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldMFPri_weakptr (void) const
{
    MFWeakFCDTestFCPtr::GetHandlePtr returnValue(
        new  MFWeakFCDTestFCPtr::GetHandle(
             &_mfFieldMFPri_weakptr, 
             this->getType().getFieldDesc(FieldMFPri_weakptrFieldId)));

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldMFPri_weakptr(void)
{
    MFWeakFCDTestFCPtr::EditHandlePtr returnValue(
        new  MFWeakFCDTestFCPtr::EditHandle(
             &_mfFieldMFPri_weakptr, 
             this->getType().getFieldDesc(FieldMFPri_weakptrFieldId)));

    returnValue->setAddMethod(boost::bind(&FCDPtrTestFCCustomAccess::pushToFieldMFPri_weakptr, 
                              static_cast<FCDPtrTestFCCustomAccess *>(this), _1));

    editMField(FieldMFPri_weakptrFieldMask, _mfFieldMFPri_weakptr);

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldMFPri_mpchildptr (void) const
{
    MFUnrecChildFCDTestFCPtr::GetHandlePtr returnValue(
        new  MFUnrecChildFCDTestFCPtr::GetHandle(
             &_mfFieldMFPri_mpchildptr, 
             this->getType().getFieldDesc(FieldMFPri_mpchildptrFieldId)));

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldMFPri_mpchildptr(void)
{
    MFUnrecChildFCDTestFCPtr::EditHandlePtr returnValue(
        new  MFUnrecChildFCDTestFCPtr::EditHandle(
             &_mfFieldMFPri_mpchildptr, 
             this->getType().getFieldDesc(FieldMFPri_mpchildptrFieldId)));

    returnValue->setAddMethod(boost::bind(&FCDPtrTestFCCustomAccess::pushToFieldMFPri_mpchildptr, 
                              static_cast<FCDPtrTestFCCustomAccess *>(this), _1));

    editMField(FieldMFPri_mpchildptrFieldMask, _mfFieldMFPri_mpchildptr);

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldMFNo_ptr   (void) const
{
    MFUnrecFCDTestFCPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldMFNo_ptr  (void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldMFNo_weakptr (void) const
{
    MFWeakFCDTestFCPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldMFNo_weakptr(void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldMFNo_mpchildptr (void) const
{
    MFUnrecChildFCDTestFCPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldMFNo_mpchildptr(void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldSFPub_spchildptr (void) const
{
    SFUnrecChildFCDSParTestFCPtr::GetHandlePtr returnValue(
        new  SFUnrecChildFCDSParTestFCPtr::GetHandle(
             &_sfFieldSFPub_spchildptr, 
             this->getType().getFieldDesc(FieldSFPub_spchildptrFieldId)));

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldSFPub_spchildptr(void)
{
    SFUnrecChildFCDSParTestFCPtr::EditHandlePtr returnValue(
        new  SFUnrecChildFCDSParTestFCPtr::EditHandle(
             &_sfFieldSFPub_spchildptr, 
             this->getType().getFieldDesc(FieldSFPub_spchildptrFieldId)));

    returnValue->setSetMethod(boost::bind(&FCDPtrTestFCCustomAccess::setFieldSFPub_spchildptr, 
                                          static_cast<FCDPtrTestFCCustomAccess *>(this), _1));

    editSField(FieldSFPub_spchildptrFieldMask);

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldSFPro_spchildptr (void) const
{
    SFUnrecChildFCDSParTestFCPtr::GetHandlePtr returnValue(
        new  SFUnrecChildFCDSParTestFCPtr::GetHandle(
             &_sfFieldSFPro_spchildptr, 
             this->getType().getFieldDesc(FieldSFPro_spchildptrFieldId)));

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldSFPro_spchildptr(void)
{
    SFUnrecChildFCDSParTestFCPtr::EditHandlePtr returnValue(
        new  SFUnrecChildFCDSParTestFCPtr::EditHandle(
             &_sfFieldSFPro_spchildptr, 
             this->getType().getFieldDesc(FieldSFPro_spchildptrFieldId)));

    returnValue->setSetMethod(boost::bind(&FCDPtrTestFCCustomAccess::setFieldSFPro_spchildptr, 
                                          static_cast<FCDPtrTestFCCustomAccess *>(this), _1));

    editSField(FieldSFPro_spchildptrFieldMask);

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldSFPri_spchildptr (void) const
{
    SFUnrecChildFCDSParTestFCPtr::GetHandlePtr returnValue(
        new  SFUnrecChildFCDSParTestFCPtr::GetHandle(
             &_sfFieldSFPri_spchildptr, 
             this->getType().getFieldDesc(FieldSFPri_spchildptrFieldId)));

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldSFPri_spchildptr(void)
{
    SFUnrecChildFCDSParTestFCPtr::EditHandlePtr returnValue(
        new  SFUnrecChildFCDSParTestFCPtr::EditHandle(
             &_sfFieldSFPri_spchildptr, 
             this->getType().getFieldDesc(FieldSFPri_spchildptrFieldId)));

    returnValue->setSetMethod(boost::bind(&FCDPtrTestFCCustomAccess::setFieldSFPri_spchildptr, 
                                          static_cast<FCDPtrTestFCCustomAccess *>(this), _1));

    editSField(FieldSFPri_spchildptrFieldMask);

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldSFNo_spchildptr (void) const
{
    SFUnrecChildFCDSParTestFCPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldSFNo_spchildptr(void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldMFPub_spchildptr (void) const
{
    MFUnrecChildFCDSParTestFCPtr::GetHandlePtr returnValue(
        new  MFUnrecChildFCDSParTestFCPtr::GetHandle(
             &_mfFieldMFPub_spchildptr, 
             this->getType().getFieldDesc(FieldMFPub_spchildptrFieldId)));

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldMFPub_spchildptr(void)
{
    MFUnrecChildFCDSParTestFCPtr::EditHandlePtr returnValue(
        new  MFUnrecChildFCDSParTestFCPtr::EditHandle(
             &_mfFieldMFPub_spchildptr, 
             this->getType().getFieldDesc(FieldMFPub_spchildptrFieldId)));

    returnValue->setAddMethod(boost::bind(&FCDPtrTestFCCustomAccess::pushToFieldMFPub_spchildptr, 
                              static_cast<FCDPtrTestFCCustomAccess *>(this), _1));

    editMField(FieldMFPub_spchildptrFieldMask, _mfFieldMFPub_spchildptr);

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldMFPro_spchildptr (void) const
{
    MFUnrecChildFCDSParTestFCPtr::GetHandlePtr returnValue(
        new  MFUnrecChildFCDSParTestFCPtr::GetHandle(
             &_mfFieldMFPro_spchildptr, 
             this->getType().getFieldDesc(FieldMFPro_spchildptrFieldId)));

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldMFPro_spchildptr(void)
{
    MFUnrecChildFCDSParTestFCPtr::EditHandlePtr returnValue(
        new  MFUnrecChildFCDSParTestFCPtr::EditHandle(
             &_mfFieldMFPro_spchildptr, 
             this->getType().getFieldDesc(FieldMFPro_spchildptrFieldId)));

    returnValue->setAddMethod(boost::bind(&FCDPtrTestFCCustomAccess::pushToFieldMFPro_spchildptr, 
                              static_cast<FCDPtrTestFCCustomAccess *>(this), _1));

    editMField(FieldMFPro_spchildptrFieldMask, _mfFieldMFPro_spchildptr);

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldMFPri_spchildptr (void) const
{
    MFUnrecChildFCDSParTestFCPtr::GetHandlePtr returnValue(
        new  MFUnrecChildFCDSParTestFCPtr::GetHandle(
             &_mfFieldMFPri_spchildptr, 
             this->getType().getFieldDesc(FieldMFPri_spchildptrFieldId)));

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldMFPri_spchildptr(void)
{
    MFUnrecChildFCDSParTestFCPtr::EditHandlePtr returnValue(
        new  MFUnrecChildFCDSParTestFCPtr::EditHandle(
             &_mfFieldMFPri_spchildptr, 
             this->getType().getFieldDesc(FieldMFPri_spchildptrFieldId)));

    returnValue->setAddMethod(boost::bind(&FCDPtrTestFCCustomAccess::pushToFieldMFPri_spchildptr, 
                              static_cast<FCDPtrTestFCCustomAccess *>(this), _1));

    editMField(FieldMFPri_spchildptrFieldMask, _mfFieldMFPri_spchildptr);

    return returnValue;
}

GetFieldHandlePtr FCDPtrTestFCCustomAccessBase::getHandleFieldMFNo_spchildptr (void) const
{
    MFUnrecChildFCDSParTestFCPtr::GetHandlePtr returnValue;

    return returnValue;
}

EditFieldHandlePtr FCDPtrTestFCCustomAccessBase::editHandleFieldMFNo_spchildptr(void)
{
    EditFieldHandlePtr returnValue;

    return returnValue;
}


#ifdef OSG_MT_CPTR_ASPECT
void FCDPtrTestFCCustomAccessBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<FCDPtrTestFCCustomAccessBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr FCDPtrTestFCCustomAccessBase::createAspectCopy(void) const
{
    FCDPtrTestFCCustomAccessPtr returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const FCDPtrTestFCCustomAccess *>(this));

    return returnValue;
}
#endif

void FCDPtrTestFCCustomAccessBase::resolveLinks(void)
{
    Inherited::resolveLinks();

    static_cast<FCDPtrTestFCCustomAccess *>(this)->setFieldSFPub_ptr(NullFC);

    static_cast<FCDPtrTestFCCustomAccess *>(this)->setFieldSFPub_weakptr(NullFC);

    static_cast<FCDPtrTestFCCustomAccess *>(this)->setFieldSFPub_mpchildptr(NullFC);

    static_cast<FCDPtrTestFCCustomAccess *>(this)->setFieldSFPro_ptr(NullFC);

    static_cast<FCDPtrTestFCCustomAccess *>(this)->setFieldSFPro_weakptr(NullFC);

    static_cast<FCDPtrTestFCCustomAccess *>(this)->setFieldSFPro_mpchildptr(NullFC);

    static_cast<FCDPtrTestFCCustomAccess *>(this)->setFieldSFPri_ptr(NullFC);

    static_cast<FCDPtrTestFCCustomAccess *>(this)->setFieldSFPri_weakptr(NullFC);

    static_cast<FCDPtrTestFCCustomAccess *>(this)->setFieldSFPri_mpchildptr(NullFC);

    static_cast<FCDPtrTestFCCustomAccess *>(this)->setFieldSFPub_spchildptr(NullFC);

    static_cast<FCDPtrTestFCCustomAccess *>(this)->setFieldSFPro_spchildptr(NullFC);

    static_cast<FCDPtrTestFCCustomAccess *>(this)->setFieldSFPri_spchildptr(NullFC);


    static_cast<FCDPtrTestFCCustomAccess *>(this)->clearFieldMFPub_ptr();
    static_cast<FCDPtrTestFCCustomAccess *>(this)->clearFieldMFPub_weakptr();
    static_cast<FCDPtrTestFCCustomAccess *>(this)->clearFieldMFPub_mpchildptr();
    static_cast<FCDPtrTestFCCustomAccess *>(this)->clearFieldMFPro_ptr();
    static_cast<FCDPtrTestFCCustomAccess *>(this)->clearFieldMFPro_weakptr();
    static_cast<FCDPtrTestFCCustomAccess *>(this)->clearFieldMFPro_mpchildptr();
    static_cast<FCDPtrTestFCCustomAccess *>(this)->clearFieldMFPri_ptr();
    static_cast<FCDPtrTestFCCustomAccess *>(this)->clearFieldMFPri_weakptr();
    static_cast<FCDPtrTestFCCustomAccess *>(this)->clearFieldMFPri_mpchildptr();
    static_cast<FCDPtrTestFCCustomAccess *>(this)->clearFieldMFPub_spchildptr();
    static_cast<FCDPtrTestFCCustomAccess *>(this)->clearFieldMFPro_spchildptr();
    static_cast<FCDPtrTestFCCustomAccess *>(this)->clearFieldMFPri_spchildptr();
}


#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<FCDPtrTestFCCustomAccessPtr>::_type("FCDPtrTestFCCustomAccessPtr", "NodeCorePtr");
#endif

OSG_FIELDTRAITS_GETTYPE(FCDPtrTestFCCustomAccessPtr)

OSG_EXPORT_PTR_SFIELD_FULL(PointerSField, 
                           FCDPtrTestFCCustomAccessPtr, 
                           0);

OSG_EXPORT_PTR_MFIELD_FULL(PointerMField, 
                           FCDPtrTestFCCustomAccessPtr, 
                           0);

OSG_END_NAMESPACE
