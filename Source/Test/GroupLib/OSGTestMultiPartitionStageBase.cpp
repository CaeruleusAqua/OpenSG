/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class TestMultiPartitionStage!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILETESTMULTIPARTITIONSTAGEINST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <OSGConfig.h>




#include "OSGTestMultiPartitionStageBase.h"
#include "OSGTestMultiPartitionStage.h"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::TestMultiPartitionStage
    just dumps a message on traversal and render for testing
 */

/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

/*! \var std::string     TestMultiPartitionStageBase::_sfMessage
    
*/

/*! \var Int32           TestMultiPartitionStageBase::_sfNumPartitions
    
*/

/*! \var Int32           TestMultiPartitionStageBase::_mfOrder
    
*/

/*! \var bool            TestMultiPartitionStageBase::_sfUseGroup
    
*/


void TestMultiPartitionStageBase::classDescInserter(TypeObject &oType)
{
    FieldDescriptionBase *pDesc = NULL;


#ifdef OSG_1_GET_COMPAT
    typedef const SFString *(TestMultiPartitionStageBase::*GetSFMessageF)(void) const;

    GetSFMessageF GetSFMessage = &TestMultiPartitionStageBase::getSFMessage;
#endif

    pDesc = new SFString::Description(
        SFString::getClassType(),
        "message",
        "",
        MessageFieldId, MessageFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TestMultiPartitionStageBase::editSFMessage),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFMessage));
#else
        reinterpret_cast<FieldGetMethodSig >(&TestMultiPartitionStageBase::getSFMessage));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFInt32 *(TestMultiPartitionStageBase::*GetSFNumPartitionsF)(void) const;

    GetSFNumPartitionsF GetSFNumPartitions = &TestMultiPartitionStageBase::getSFNumPartitions;
#endif

    pDesc = new SFInt32::Description(
        SFInt32::getClassType(),
        "numPartitions",
        "",
        NumPartitionsFieldId, NumPartitionsFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TestMultiPartitionStageBase::editSFNumPartitions),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFNumPartitions));
#else
        reinterpret_cast<FieldGetMethodSig >(&TestMultiPartitionStageBase::getSFNumPartitions));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const MFInt32 *(TestMultiPartitionStageBase::*GetMFOrderF)(void) const;

    GetMFOrderF GetMFOrder = &TestMultiPartitionStageBase::getMFOrder;
#endif

    pDesc = new MFInt32::Description(
        MFInt32::getClassType(),
        "order",
        "",
        OrderFieldId, OrderFieldMask,
        false,
        Field::MFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TestMultiPartitionStageBase::editMFOrder),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetMFOrder));
#else
        reinterpret_cast<FieldGetMethodSig >(&TestMultiPartitionStageBase::getMFOrder));
#endif

    oType.addInitialDesc(pDesc);

#ifdef OSG_1_GET_COMPAT
    typedef const SFBool *(TestMultiPartitionStageBase::*GetSFUseGroupF)(void) const;

    GetSFUseGroupF GetSFUseGroup = &TestMultiPartitionStageBase::getSFUseGroup;
#endif

    pDesc = new SFBool::Description(
        SFBool::getClassType(),
        "useGroup",
        "",
        UseGroupFieldId, UseGroupFieldMask,
        false,
        Field::SFDefaultFlags,
        reinterpret_cast<FieldEditMethodSig>(&TestMultiPartitionStageBase::editSFUseGroup),
#ifdef OSG_1_GET_COMPAT
        reinterpret_cast<FieldGetMethodSig >(GetSFUseGroup));
#else
        reinterpret_cast<FieldGetMethodSig >(&TestMultiPartitionStageBase::getSFUseGroup));
#endif

    oType.addInitialDesc(pDesc);
}


TestMultiPartitionStageBase::TypeObject TestMultiPartitionStageBase::_type(
    TestMultiPartitionStageBase::getClassname(),
    Inherited::getClassname(),
    "NULL",
    0,
    (PrototypeCreateF) &TestMultiPartitionStageBase::createEmpty,
    TestMultiPartitionStage::initMethod,
    (InitalInsertDescFunc) &TestMultiPartitionStageBase::classDescInserter,
    false,
    0,
    "<?xml version=\"1.0\"?>\n"
    "\n"
    "<FieldContainer\n"
    "\tname=\"TestMultiPartitionStage\"\n"
    "\tparent=\"Stage\"\n"
    "\tlibrary=\"Group\"\n"
    "\tpointerfieldtypes=\"none\"\n"
    "\tstructure=\"concrete\"\n"
    "\tsystemcomponent=\"true\"\n"
    "\tparentsystemcomponent=\"true\"\n"
    "\tdecoratable=\"false\"\n"
    "\tuseLocalIncludes=\"false\"\n"
    "    isNodeCore=\"true\"\n"
    ">\n"
    "just dumps a message on traversal and render for testing\n"
    "\t<Field\n"
    "\t\tname=\"message\"\n"
    "\t\ttype=\"std::string\"\n"
    "\t\tcardinality=\"single\"\n"
    "\t\tvisibility=\"external\"\n"
    "\t\taccess=\"public\"\n"
    "\t>\n"
    "\t</Field>\n"
    "    <Field\n"
    "        name=\"numPartitions\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "        defaultValue=\"1\"\n"
    "    >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"order\"\n"
    "        type=\"Int32\"\n"
    "        cardinality=\"multi\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "    </Field>\n"
    "    <Field\n"
    "        name=\"useGroup\"\n"
    "        type=\"bool\"\n"
    "        cardinality=\"single\"\n"
    "        visibility=\"external\"\n"
    "        access=\"public\"\n"
    "    >\n"
    "    </Field>\n"
    "</FieldContainer>\n",
    "just dumps a message on traversal and render for testing\n"
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &TestMultiPartitionStageBase::getType(void)
{
    return _type;
}

const FieldContainerType &TestMultiPartitionStageBase::getType(void) const
{
    return _type;
}

UInt32 TestMultiPartitionStageBase::getContainerSize(void) const
{
    return sizeof(TestMultiPartitionStage);
}

/*------------------------- decorator get ------------------------------*/


SFString *TestMultiPartitionStageBase::editSFMessage(void)
{
    editSField(MessageFieldMask);

    return &_sfMessage;
}

const SFString *TestMultiPartitionStageBase::getSFMessage(void) const
{
    return &_sfMessage;
}

#ifdef OSG_1_GET_COMPAT
SFString            *TestMultiPartitionStageBase::getSFMessage        (void)
{
    return this->editSFMessage        ();
}
#endif

SFInt32 *TestMultiPartitionStageBase::editSFNumPartitions(void)
{
    editSField(NumPartitionsFieldMask);

    return &_sfNumPartitions;
}

const SFInt32 *TestMultiPartitionStageBase::getSFNumPartitions(void) const
{
    return &_sfNumPartitions;
}

#ifdef OSG_1_GET_COMPAT
SFInt32             *TestMultiPartitionStageBase::getSFNumPartitions  (void)
{
    return this->editSFNumPartitions  ();
}
#endif

MFInt32 *TestMultiPartitionStageBase::editMFOrder(void)
{
    editMField(OrderFieldMask, _mfOrder);

    return &_mfOrder;
}

const MFInt32 *TestMultiPartitionStageBase::getMFOrder(void) const
{
    return &_mfOrder;
}

#ifdef OSG_1_GET_COMPAT
MFInt32             *TestMultiPartitionStageBase::getMFOrder          (void)
{
    return this->editMFOrder          ();
}
#endif

SFBool *TestMultiPartitionStageBase::editSFUseGroup(void)
{
    editSField(UseGroupFieldMask);

    return &_sfUseGroup;
}

const SFBool *TestMultiPartitionStageBase::getSFUseGroup(void) const
{
    return &_sfUseGroup;
}

#ifdef OSG_1_GET_COMPAT
SFBool              *TestMultiPartitionStageBase::getSFUseGroup       (void)
{
    return this->editSFUseGroup       ();
}
#endif



/*********************************** Non-ptr code ********************************/
void TestMultiPartitionStageBase::pushToOrder(const Int32& value)
{
    editMField(OrderFieldMask, _mfOrder);
    _mfOrder.push_back(value);
}

void TestMultiPartitionStageBase::insertIntoOrder(UInt32                uiIndex,
                                                   const Int32& value   )
{
    editMField(OrderFieldMask, _mfOrder);

    MFInt32::iterator fieldIt = _mfOrder.begin();

    fieldIt += uiIndex;

    _mfOrder.insert(fieldIt, value);
}

void TestMultiPartitionStageBase::replaceInOrder(UInt32                uiIndex,
                                                       const Int32& value   )
{
    if(uiIndex >= _mfOrder.size())
        return;

    editMField(OrderFieldMask, _mfOrder);

    _mfOrder[uiIndex] = value;
}

void TestMultiPartitionStageBase::replaceInOrder(const Int32& pOldElem,
                                                        const Int32& pNewElem)
{
    Int32  elemIdx = _mfOrder.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(OrderFieldMask, _mfOrder);

        MFInt32::iterator fieldIt = _mfOrder.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

void TestMultiPartitionStageBase::removeFromOrder(UInt32 uiIndex)
{
    if(uiIndex < _mfOrder.size())
    {
        editMField(OrderFieldMask, _mfOrder);

        MFInt32::iterator fieldIt = _mfOrder.begin();

        fieldIt += uiIndex;
        _mfOrder.erase(fieldIt);
    }
}

void TestMultiPartitionStageBase::removeFromOrder(const Int32& value)
{
    Int32 iElemIdx = _mfOrder.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(OrderFieldMask, _mfOrder);

        MFInt32::iterator fieldIt = _mfOrder.begin();

        fieldIt += iElemIdx;

        _mfOrder.erase(fieldIt);
    }
}

void TestMultiPartitionStageBase::clearOrder(void)
{
    editMField(OrderFieldMask, _mfOrder);

    _mfOrder.clear();
}


/*------------------------------ access -----------------------------------*/

UInt32 TestMultiPartitionStageBase::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

    if(FieldBits::NoField != (MessageFieldMask & whichField))
    {
        returnValue += _sfMessage.getBinSize();
    }
    if(FieldBits::NoField != (NumPartitionsFieldMask & whichField))
    {
        returnValue += _sfNumPartitions.getBinSize();
    }
    if(FieldBits::NoField != (OrderFieldMask & whichField))
    {
        returnValue += _mfOrder.getBinSize();
    }
    if(FieldBits::NoField != (UseGroupFieldMask & whichField))
    {
        returnValue += _sfUseGroup.getBinSize();
    }

    return returnValue;
}

void TestMultiPartitionStageBase::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

    if(FieldBits::NoField != (MessageFieldMask & whichField))
    {
        _sfMessage.copyToBin(pMem);
    }
    if(FieldBits::NoField != (NumPartitionsFieldMask & whichField))
    {
        _sfNumPartitions.copyToBin(pMem);
    }
    if(FieldBits::NoField != (OrderFieldMask & whichField))
    {
        _mfOrder.copyToBin(pMem);
    }
    if(FieldBits::NoField != (UseGroupFieldMask & whichField))
    {
        _sfUseGroup.copyToBin(pMem);
    }
}

void TestMultiPartitionStageBase::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

    if(FieldBits::NoField != (MessageFieldMask & whichField))
    {
        _sfMessage.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (NumPartitionsFieldMask & whichField))
    {
        _sfNumPartitions.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (OrderFieldMask & whichField))
    {
        _mfOrder.copyFromBin(pMem);
    }
    if(FieldBits::NoField != (UseGroupFieldMask & whichField))
    {
        _sfUseGroup.copyFromBin(pMem);
    }
}

//! create a new instance of the class
TestMultiPartitionStagePtr TestMultiPartitionStageBase::create(void)
{
    TestMultiPartitionStagePtr fc;

    if(getClassType().getPrototype() != NullFC)
    {
        fc = dynamic_cast<TestMultiPartitionStage::ObjPtr>(
            getClassType().getPrototype()-> shallowCopy());
    }

    return fc;
}

//! create an empty new instance of the class, do not copy the prototype
TestMultiPartitionStagePtr TestMultiPartitionStageBase::createEmpty(void)
{
    TestMultiPartitionStagePtr returnValue;

    newPtr<TestMultiPartitionStage>(returnValue);

    return returnValue;
}

FieldContainerPtr TestMultiPartitionStageBase::shallowCopy(void) const
{
    TestMultiPartitionStagePtr returnValue;

    newPtr(returnValue, dynamic_cast<const TestMultiPartitionStage *>(this));

    return returnValue;
}



/*------------------------- constructors ----------------------------------*/

TestMultiPartitionStageBase::TestMultiPartitionStageBase(void) :
    Inherited(),
    _sfMessage                (),
    _sfNumPartitions          (Int32(1)),
    _mfOrder                  (),
    _sfUseGroup               ()
{
}

TestMultiPartitionStageBase::TestMultiPartitionStageBase(const TestMultiPartitionStageBase &source) :
    Inherited(source),
    _sfMessage                (source._sfMessage                ),
    _sfNumPartitions          (source._sfNumPartitions          ),
    _mfOrder                  (source._mfOrder                  ),
    _sfUseGroup               (source._sfUseGroup               )
{
}

/*-------------------------- destructors ----------------------------------*/

TestMultiPartitionStageBase::~TestMultiPartitionStageBase(void)
{
}


#ifdef OSG_MT_CPTR_ASPECT
void TestMultiPartitionStageBase::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<TestMultiPartitionStageBase *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif


#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr TestMultiPartitionStageBase::createAspectCopy(void) const
{
    TestMultiPartitionStagePtr returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const TestMultiPartitionStage *>(this));

    return returnValue;
}
#endif

void TestMultiPartitionStageBase::resolveLinks(void)
{
    Inherited::resolveLinks();

#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif

#ifdef OSG_MT_CPTR_ASPECT
    _mfOrder.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
}


#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<TestMultiPartitionStagePtr>::_type("TestMultiPartitionStagePtr", "StagePtr");
#endif


OSG_END_NAMESPACE
