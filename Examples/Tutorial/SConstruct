#! /usr/bin/python

import os
import popen2
import re
import sys

pj = os.path.join

##############################################################################
# Helper Functions

def CheckOpenSG2(context, libs):
    """ Uses osg2-config to locate the OpenSG2 libraries in 'libs' (a list).
        osg2-config is searched in the directory given in the contexts
        build environment variable 'OPENSG2CONFIGDIR' or if that is not set
        it is searched in the users 'PATH' system environment variable.
    """
    context.Message('Checking for OpenSG 2 ... ')
    
    context_env_clone = context.env.Clone()
    osg2_config       = None
    
    if not context.env.has_key('OPENSG2CONFIGDIR') or context.env.subst('${OPENSG2CONFIGDIR}') == '':
        # search directories in PATH for osg2-config
        osg2_config = context.env.WhereIs('osg2-config')
        if osg2_config == None:
            context.Result(False)
            print 'CheckOpenSG2: can not find osg2-config, try setting OPENSG2CONFIGDIR.'
            return False
    else:
        osg2_config = context.env.subst(pj('${OPENSG2CONFIGDIR}', 'osg2-config'))

    cmd_line_cflags = \
        sys.executable + ' ' + osg2_config + ' --cflags'
    cmd_line_libs   = \
        sys.executable + ' ' + osg2_config + ' --libs'

    for lib in libs:
        cmd_line_cflags += ' ' + lib
        cmd_line_libs   += ' ' + lib
    
    call = popen2.Popen3(cmd_line_cflags)
    call.wait()
    
    out_lines = call.fromchild.read()

    context.env.MergeFlags(out_lines)
    
    call = popen2.Popen3(cmd_line_libs)
    call.wait()
    
    out_lines = call.fromchild.read()
    
    context.env.MergeFlags(out_lines)
    
    ret = context.TryLink("""
#include <OpenSG/OSGConfig.h>
int main(int, char *[])
{
    return 0;
}
""", '.cpp')
    
    # reset environment
    if not ret:
        context.Result(False)
        context.env = context_env_clone
        print 'CheckOpenSG2: Linking against OpenSG 2 failed.'
        return False
    
    context.Result(True)
    
    return True


##############################################################################
# Options/Build Variables

root_env   = Environment()
build_opts = Options(args = ARGUMENTS)

opt_opensg2_conf_dir =\
    PathOption(key = 'OPENSG2CONFIGDIR',
                 help = 'Directory where osg2-config can be found',
                 default = None)

opt_build_type =\
    EnumOption(key = 'BUILDTYPE',
                 help = 'Type of build to do',
                 default = 'debug',
                 allowed_values = ['debug', 'optimized'])

build_opts.AddOptions(
    opt_opensg2_conf_dir,
    opt_build_type)

Help(build_opts.GenerateHelpText(root_env))

build_opts.Update(root_env)


##############################################################################
# Configure

conf = root_env.Configure(
    custom_tests = { 'CheckOpenSG2' : CheckOpenSG2 } )

if not conf.CheckOpenSG2(['OSGCluster', 'OSGFileIO', 'OSGUtil', 'OSGWindowGLUT']):
    Exit(1)

conf.Finish()

##############################################################################
# Build data

if root_env['BUILDTYPE'] == 'debug':
    root_env.AppendUnique(CXXFLAGS = '-g')
elif root_env['BUILDTYPE'] == 'optimized':
    root_env.AppendUnique(CXXFLAGS = '-O2')

# collect source files and build a program for each source
source_re = re.compile(r'^\d\d[_a-zA-Z0-9]+\.cpp$')
sources   = []

for f in os.listdir('.'):
    if os.path.isfile(f) and source_re.match(f):
        root_env.Program(f)

