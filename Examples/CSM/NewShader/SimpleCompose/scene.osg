#OSG V1.0 

Node
{
  core ChunkOverrideGroup 
  {
    fallbackChunkBlock ChunkBlock
    {
      chunks
      [
        ShaderProgramChunk
        {
          vertexShader 
          [
            ShaderProgram
            {
              shaderType GL_VERTEX_SHADER

              program "

                float simpleLight(void)
                {
                  // calculate vertex position in eye coordinates
                  vec4 ecPosition = -normalize(gl_ModelViewMatrix * 
                                               gl_Vertex);

                  // compute the transformed normal
                  vec3 tnorm      = normalize(gl_NormalMatrix * gl_Normal);

                  // Calculate a diffuse light intensity
                  return dot(ecPosition.xyz, tnorm);
                }
              "
            }

            ShaderProgram
            {
              shaderType GL_VERTEX_SHADER

              program "

                float simpleLight(void);

                varying float Diffuse; 

                void main(void)
                {
                  Diffuse = simpleLight();

                  // output final vertex information
                  gl_Position     = gl_ModelViewProjectionMatrix * gl_Vertex;
                }
              "
            }
          ]       
        }
      ]
    }
  }

  children
  [
    Node
    {
      core ChunkOverrideGroup
      {
        fallbackChunkBlock ChunkBlock
        {
          chunks
          [
            ShaderProgramChunk
            {
              fragmentShader 
              [
                ShaderProgram
                {
                  shaderType GL_FRAGMENT_SHADER

                  variables ShaderProgramVariables
                  {
                    variables
                    [
                      ShaderVariableReal
                      {
                        name "ColR"
                        value 1.0
                      }
                       ShaderVariableReal
                      {
                        name "ColG"
                        value 0.6
                      }
                      ShaderVariableReal
                      {
                        name "ColB"
                        value 0.6
                      }
                    ]
                  }

                  program "
                    varying float Diffuse; 
                    uniform float ColR;
                    uniform float ColG;
                    uniform float ColB;

                    void main (void)
                    {
                      gl_FragColor = vec4(ColR * Diffuse, 
                                          ColG * Diffuse, 
                                          ColB * Diffuse, 
                                          1.);
                    }
                  "
                }
              ]
            }
          ]
        }
      }
  
      children
      [
        Node
        {
          core ComponentTransform
          {
            translation 5 0 0 
          }
      
          children
          [
            Node
            {
              core Inline
              {
                url "../../SimpleTeapot/object.wrl"
              }
            }
          ]
        }
      ]
    }



    Node
    {
      core ChunkOverrideGroup
      {
        fallbackChunkBlock ChunkBlock
        {
          chunks
          [
            ShaderProgramChunk
            {
              fragmentShader 
              [
                ShaderProgram
                {
                  shaderType GL_FRAGMENT_SHADER
  
                  variables ShaderProgramVariables
                  {
                    variables
                    [
                      ShaderVariableReal
                      {
                        name "ColR"
                        value 0.6
                      }
                      ShaderVariableReal
                      {
                        name "ColG"
                        value 1.0
                      }
                      ShaderVariableReal
                      {
                        name "ColB"
                        value 0.6
                      }
                    ]
                  }

                  program "
                    varying float Diffuse; 
                    uniform float ColR;
                    uniform float ColG;
                    uniform float ColB;

                    void main (void)
                    {
                      gl_FragColor = vec4(ColR * Diffuse, 
                                          ColG * Diffuse, 
                                          ColB * Diffuse, 
                                          1.);
                    }
                  "
                }
              ]
            }
          ]
        }
      }
  
      children
      [
        Node
        {
          core ComponentTransform
          {
            translation -5 0 0 
          }
      
          children
          [
            Node
            {
              core Inline
              {
                url "../../SimpleTeapot/object.wrl"
              }
            }
          ]
        }
      ]
    }



    Node
    {
      core ChunkOverrideGroup
      {
        fallbackChunkBlock ChunkBlock
        {
          chunks
          [
            ShaderProgramChunk
            {
              fragmentShader 
              [
                ShaderProgram
                {
                  shaderType GL_FRAGMENT_SHADER

                  variables ShaderProgramVariables
                  {
                    variables
                    [
                      ShaderVariableReal
                      {
                        name "ColR"
                        value 0.6
                      }
                      ShaderVariableReal
                      {
                        name "ColG"
                        value 0.6
                      }
                      ShaderVariableReal
                      {
                        name "ColB"
                        value 1.0
                      }
                    ]
                  }
  
                  program "
                    varying float Diffuse; 
                    uniform float ColR;
                    uniform float ColG;
                    uniform float ColB;

                    void main (void)
                    {
                      gl_FragColor = vec4(ColR * Diffuse, 
                                          ColG * Diffuse, 
                                          ColB * Diffuse, 
                                          1.);
                    }
                  "
                }
              ]
            }
          ]
        }
      }
  
      children
      [
        Node
        {
          core ComponentTransform
          {
            translation 0 5 0 
          }
      
          children
          [
            Node
            {
              core Inline
              {
                url "../../SimpleTeapot/object.wrl"
              }
            }
          ]
        }
      ]
    }



    Node
    {
      core ChunkOverrideGroup
      {
        fallbackChunkBlock ChunkBlock
        {
          chunks
          [
            ShaderProgramChunk
            {
              fragmentShader 
              [
                ShaderProgram
                {
                  shaderType GL_FRAGMENT_SHADER

                  variables ShaderProgramVariables
                  {
                    variables
                    [
                      ShaderVariableReal
                      {
                        name "ColR"
                        value 0.6
                      }
                      ShaderVariableReal
                      {
                        name "ColG"
                        value 1.0
                      }
                      ShaderVariableReal
                      {
                        name "ColB"
                        value 1.0
                      }
                    ]
                  }

                  program "
                    varying float Diffuse; 
                    uniform float ColR;
                    uniform float ColG;
                    uniform float ColB;
 
                    void main (void)
                    {
                      gl_FragColor = vec4(ColR * Diffuse, 
                                          ColG * Diffuse, 
                                          ColB * Diffuse, 
                                          1.);
                    }
                  "
                }
              ]
            }
          ]
        }
      }
  
      children
      [
        Node
        {
          core ComponentTransform
          {
            translation 0 -5 0 
          }
      
          children
          [
            Node
            {
              core Inline
              {
                url "../../SimpleTeapot/object.wrl"
              }
            }
          ]
        }
      ]
    }


  ]
}