
uniform bool OSGLight0Active;
uniform bool OSGLight1Active;
uniform bool OSGLight2Active;

vec4 Ambient;
vec4 Diffuse;
vec4 Specular;

void pointLight(in int i, 
                in vec3 normal, 
                in vec3 eye, 
                in vec3 ecPosition3)
{
    float nDotVP; 
    float nDotHV; 
    float pf;     
    float attenuation;
    float d;          
    vec3  VP;
    vec3  halfVector; 
                                  
    VP = vec3(gl_LightSource[i].position) - 
        ecPosition3;
    // Compute distance between surface and light position
    d = length(VP);

    // Normalize the vector from surface to light position
    VP = normalize(VP);

    // Compute attenuation
    attenuation = 1.0 / (gl_LightSource[i].constantAttenuation +
                         gl_LightSource[i].linearAttenuation * d +
                         gl_LightSource[i].quadraticAttenuation * d * d);
    halfVector = normalize(VP + eye);
    nDotVP = max(0.0, dot(normal, VP));
    nDotHV = max(0.0, dot(normal, halfVector));

    if (nDotVP == 0.0)
        pf = 0.0;
    else
        pf = pow(nDotHV, gl_FrontMaterial.shininess);

    Ambient  += gl_LightSource[i].ambient * attenuation;
    Diffuse  += gl_LightSource[i].diffuse * nDotVP * attenuation;
    Specular += gl_LightSource[i].specular * pf * attenuation;
}

vec3 fnormal(void)
{
    //Compute the normal
    vec3 normal = gl_NormalMatrix * gl_Normal;
    normal = normalize(normal);
    return normal;
}

void flight(in vec3 normal, in vec4 ecPosition, float alphaFade)
{
    vec4 color;
    vec3 ecPosition3;
    vec3 eye;

    ecPosition3 = (vec3 (ecPosition)) / ecPosition.w;
    eye = vec3 (0.0, 0.0, 1.0);

    // Clear the light intensity accumulators
    Ambient  = vec4 (0.0);
    Diffuse  = vec4 (0.0);
    Specular = vec4 (0.0);

    if(OSGLight0Active)
        pointLight(0, normal, eye, ecPosition3);

    if(OSGLight1Active)
        pointLight(1, normal, eye, ecPosition3);

    if(OSGLight2Active)
        pointLight(2, normal, eye, ecPosition3);

    color = gl_FrontLightModelProduct.sceneColor +
        Ambient  * gl_FrontMaterial.ambient +
        Diffuse  * gl_FrontMaterial.diffuse;
    color += Specular * gl_FrontMaterial.specular;
    color = clamp( color, 0.0, 1.0 );
    gl_FrontColor = color;
    gl_FrontColor.a *= alphaFade;

}

void main(void)
{
    vec3  transformedNormal;
    float alphaFade = 1.0;

    // Eye-coordinate position of vertex, needed in various calculations
    vec4 ecPosition = gl_ModelViewMatrix * gl_Vertex;

    // Do fixed functionality vertex transform
    gl_Position = ftransform();
    transformedNormal = fnormal();
    flight(transformedNormal, ecPosition, alphaFade);
}
