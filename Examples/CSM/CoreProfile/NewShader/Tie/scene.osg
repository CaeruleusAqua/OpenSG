#OSG V1.0 

Node
{
  core ChunkOverrideGroup
  {
    fallbackChunkBlock ChunkBlock
    {
      chunks
      [
        ShaderProgramChunk
        {
          vertexShader 
          [
            ShaderProgram
            {
              shaderType GL_VERTEX_SHADER

              variables ShaderProgramVariables
              {
                proceduralVariables
                [
                  ShaderVariableOSG
                  {
                    name "OSGModelViewMatrix"
                  }
                  ShaderVariableOSG
                  {
                    name "OSGModelViewProjectionMatrix"
                  }
                  ShaderVariableOSG
                  {
                    name "OSGNormalMatrix"
                  }
                ]
              }

              attributes
              [
                "NormalsIndex    Normal",
                "ColorsIndex     Color",
                "PositionsIndex  Position",
              ]

              program "

                varying float Diffuse; 
                varying vec4  VColor;

                uniform mat4 OSGModelViewMatrix;
                uniform mat4 OSGModelViewProjectionMatrix;
                uniform mat4 OSGNormalMatrix;

                attribute vec3 Normal;
                attribute vec3 Position;
                attribute vec4 Color;

                void main(void)
                {
                  // calculate vertex position in eye coordinates
                  vec4 ecPosition = -normalize(OSGModelViewMatrix * 
                                               vec4(Position, 1.0));

                  // compute the transformed normal
                  vec4 tnorm      = normalize(OSGNormalMatrix * 
                                              vec4(Normal, 0.0));

                  // Calculate a diffuse light intensity
                  Diffuse             = dot(ecPosition.xyz, 
                                            tnorm.xyz     );

                  VColor = Color;

                  // output final vertex information
                  gl_Position     = OSGModelViewProjectionMatrix * 
                                    vec4(Position, 1.0);
                }
              "
            }
          ]

          fragmentShader 
          [
            ShaderProgram
            {
              shaderType GL_FRAGMENT_SHADER

              program "
                varying float Diffuse; 
                varying vec4 VColor;

                void main (void)
                {
                  gl_FragColor = vec4(VColor.x * Diffuse, 
                                      VColor.y * Diffuse, 
                                      VColor.z * Diffuse, 
                                      1.);
                }
              "
            }
          ]
        }
      ]
    }
  }

  children
  [
    Node
    {
      core Inline
      {
        url "../../../Models/tie_strip_shared.osg"
#        url "/tmp/foo.osb"
      }
    }
  ]
}
