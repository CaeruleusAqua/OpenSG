CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

PROJECT(OpenSG)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${OpenSG_SOURCE_DIR}/CMake")

##########################
# Disallow in-source build
##########################

IF("${OpenSG_SOURCE_DIR}"  STREQUAL "${OpenSG_BINARY_DIR}")
  MESSAGE(FATAL_ERROR "OpenSG requires an out of source Build. \n"
                      "Please create a separate binary directory and run "
                      "CMake there.")
ENDIF("${OpenSG_SOURCE_DIR}"  STREQUAL "${OpenSG_BINARY_DIR}")

OPTION(BUILD_SHARED_LIBS "Set to OFF to build static libraries" ON)

OPTION(OSG_ENABLE_NEW_SHADER "" ON)
OPTION(OSG_ENABLE_OGL2_SHADERFUNCTIONS "" ON)
SET(OSG_SHADER_CACHE_MODE 0 CACHE STRING "")

OPTION(OSG_ENABLE_FCD2CODE "" OFF)
OPTION(OSG_ENABLE_SCANPARSE_REGEN "" OFF)

OPTION(OSG_ENABLE_GLDEFINE_MAPPER "" ON)
OPTION(OSG_ENABLE_NEW_OSB_IO "" ON)

OPTION(OSG_ENABLE_SSE2 "" ON)

OPTION(OSG_ENABLE_TESTCONTAINER "" OFF)
OPTION(OSG_ENABLE_VALGRIND_CHECKS "" OFF)
OPTION(OSG_ENABLE_MEMORY_DEBUGGING "" OFF)

IF(UNIX)
    OPTION(OSG_ENABLE_ELF_LOCALSTORAGE "" ON)
ELSEIF(WIN32)
    OPTION(OSG_ENABLE_WIN_LOCALSTORAGE "" ON)
ENDIF()

OPTION(OSGCOMPAT_ENABLE                  "" OFF)
OPTION(OSGCOMPAT_ENABLE_DEPRECATED       "" OFF)
OPTION(OSGCOMPAT_ENABLE_DEPRECATED_PROPS "" OFF)


# Not sure
#OPTION(OSG_ENABLE_MTCPTR "" ON)
#OPTION(OSG_ENABLE_GIF    "" ON)

##################
# System Packages
##################

OPTION(OSGBUILD_BASE         "" ON)
OPTION(OSGBUILD_SYSTEM       "" ON)
OPTION(OSGBUILD_STATE        "" ON)
OPTION(OSGBUILD_DRAWABLE     "" ON)
OPTION(OSGBUILD_GROUP        "" ON)
OPTION(OSGBUILD_TEXT         "" ON)
OPTION(OSGBUILD_UTIL         "" ON)
OPTION(OSGBUILD_WINDOW       "" ON)
OPTION(OSGBUILD_EFFECTGROUPS "" ON)
OPTION(OSGBUILD_CLUSTER      "" ON)
OPTION(OSGBUILD_FILEIO       "" ON)
OPTION(OSGBUILD_IMAGEFILEIO  "" ON)
OPTION(OSGBUILD_WINDOWGLUT   "" ON)

IF(UNIX)
    OPTION(OSGBUILD_WINDOWX "" ON)
ENDIF(UNIX)

IF(WIN32)
    OPTION(OSGBUILD_WINDOWWIN32 "" ON)
ENDIF(WIN32)

#OPTION(OSGBUILD_ "" ON)

##################
# Contrib Packages
##################

OPTION(OSGBUILD_BACKGROUNDLOADER    "" ON)
OPTION(OSGBUILD_COMPLEXSCENEMANAGER "" ON)
OPTION(OSGBUILD_MANIPULATORS        "" ON)
OPTION(OSGBUILD_PLY                 "" OFF)
OPTION(OSGBUILD_VTK                 "" ON)
OPTION(OSGBUILD_TESTS               "" ON)

## prep options for OSGConfigured.h

IF(NOT OSGCOMPAT_DISABLE_DEPRECATED)
    SET(OSG_DISABLE_DEPRECATED 1)
ENDIF(NOT OSGCOMPAT_DISABLE_DEPRECATED)

IF(OSG_ENABLE_SSE2)
    SET(OSG_SIMD_SSE 1)
ENDIF(OSG_ENABLE_SSE2)

IF(OSG_ENABLE_NEW_OSB_IO)
    SET(OSG_NEW_OSB_IO 1)
ENDIF(OSG_ENABLE_NEW_OSB_IO)

IF(OSG_ENABLE_GLDEFINE_MAPPER)
    SET(OSG_GL_DEFMAPPER 1)
ENDIF(OSG_ENABLE_GLDEFINE_MAPPER)

IF(OSG_ENABLE_OGL2_SHADERFUNCTIONS)
    SET(OSG_OGL2_SHADERFUNCS 1)
ENDIF(OSG_ENABLE_OGL2_SHADERFUNCTIONS)

IF(OSG_ENABLE_NEW_SHADER)
    SET(OSG_NEW_SHADER 1)
ENDIF(OSG_ENABLE_NEW_SHADER)

IF(OSGCOMPAT_ENABLE)
    SET(OSG_1_COMPAT 1)
ENDIF(OSGCOMPAT_ENABLE)

IF(NOT OSG_ENABLE_SCANPARSE_REGEN)
    SET(OSG_PREBUILD_SCANPARSE 1)
ENDIF(NOT OSG_ENABLE_SCANPARSE_REGEN)

IF(OSG_ENABLE_ELF_LOCALSTORAGE)
    SET(OSG_PTHREAD_ELF_TLS 1)
ENDIF(OSG_ENABLE_ELF_LOCALSTORAGE)

IF(OSG_ENABLE_WIN_LOCALSTORAGE)
    SET(OSG_WIN32_ASPECT_USE_LOCALSTORAGE 1)
ENDIF(OSG_ENABLE_WIN_LOCALSTORAGE)

IF(OSGCOMPAT_ENABLE_DEPRECATED_PROPS)
    SET(OSG_DEPRECATED_PROPS 1)
ENDIF(OSGCOMPAT_ENABLE_DEPRECATED_PROPS)

SET(OSG_SHC_MODE_${OSG_SHADER_CACHE_MODE} 1)

SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

##############
# Compiler
##############

SET(OSG_PLATFORM_64 0)
SET(OSG_PLATFORM_32 0)
SET(OSG_LIBDIR_SUFFIX "")

IF(CMAKE_CXX_SIZEOF_DATA_PTR EQUAL 8)
    SET(OSG_PLATFORM_64 1)
    SET(OSG_LIBDIR_SUFFIX "64")
ELSE()
    SET(OSG_PLATFORM_32 1)
ENDIF()


IF(${CMAKE_CXX_PLATFORM_ID} STREQUAL "Linux")
    SET(LINUX 1)
ENDIF()

IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Debug CACHE STRING
      "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."
      FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)


IF(NOT OSG_COMPILER_DEFAULTS)
   INCLUDE(CMake/SetupCompiler.cmake)
   SET( OSG_COMPILER_DEFAULTS 1 CACHE BOOL "Defaults written" FORCE ) #INTERNAL
ENDIF(NOT OSG_COMPILER_DEFAULTS)

INCLUDE(CMake/UpdateCompiler.cmake)

IF(CMAKE_BUILD_TYPE STREQUAL "Debug" OR 
   CMAKE_BUILD_TYPE STREQUAL "DebugGV")

    SET(OSG_LIBDIR_SUFFIX "${OSG_LIBDIR_SUFFIX}/debug")

ENDIF()

IF(CMAKE_BUILD_TYPE STREQUAL "DebugRT")

    SET(OSG_LIBDIR_SUFFIX "${OSG_LIBDIR_SUFFIX}/debugrt")

ENDIF()

##########
#### boost
##########

SET(Boost_USE_MULTITHREAD ON )
SET(Boost_USE_STATIC_LIBS OFF)

FIND_PACKAGE(Boost COMPONENTS filesystem)

IF(Boost_FOUND)

    INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIR} )

    IF(UNIX)
        LINK_DIRECTORIES   (${Boost_LIBRARY_DIRS})
    ENDIF(UNIX)

    ADD_DEFINITIONS(-DBOOST_ALL_DYN_LINK)

    IF(CMAKE_BUILD_TYPE STREQUAL "DebugRT")
        SET(OSG_BOOST_LIBS ${Boost_FILESYSTEM_LIBRARY_DEBUG})
    ELSE()
        SET(OSG_BOOST_LIBS ${Boost_FILESYSTEM_LIBRARY_RELEASE})
    ENDIF()

    IF(WIN32)
        IF(${Boost_MINOR_VERSION} GREATER 34)
            FIND_PACKAGE(Boost COMPONENTS system)

            IF(CMAKE_BUILD_TYPE STREQUAL "DebugRT")

                SET(OSG_BOOST_LIBS ${OSG_BOOST_LIBS} 
                                   ${Boost_SYSTEM_LIBRARY_DEBUG})

            ELSE(CMAKE_BUILD_TYPE STREQUAL "DebugRT")

                SET(OSG_BOOST_LIBS ${OSG_BOOST_LIBS} 
                                   ${Boost_SYSTEM_LIBRARY_RELEASE})

            ENDIF(CMAKE_BUILD_TYPE STREQUAL "DebugRT")
        ENDIF()
    ENDIF(WIN32)

ELSE(Boost_FOUND)

    MESSAGE(SEND_ERROR "BOOST NOTFOUND." ${Boost_ERROR_REASON})

    SET(BOOST_ROOT "" CACHE PATH "")

ENDIF(Boost_FOUND)

#########
#### zlib
#########

FIND_PACKAGE(ZLIB)

IF(ZLIB_FOUND)
    SET(OSG_WITH_ZLIB 1)   
ENDIF(ZLIB_FOUND)

IF(NOT WIN32)
    #############
    #### Freetype
    #############

    FIND_PACKAGE(Freetype)

    IF(FREETYPE_FOUND)
        SET(OSG_WITH_FT2 1)   

        FIND_LIBRARY(FONTCONFIG_LIBRARY NAMES fontconfig)

        IF(FONTCONFIG_LIBRARY MATCHES "fontconfig")
            SET(OSG_WITH_FONTCONFIG 1)   
        ENDIF()

    ENDIF(FREETYPE_FOUND)
ENDIF(NOT WIN32)

##############
#### ImageLibs
##############

FIND_PACKAGE(TIFF)
FIND_PACKAGE(PNG)
FIND_PACKAGE(JPEG)
FIND_PACKAGE(GDAL)

SET(OSG_EXTERNAL_IMAGELIBS)

IF(TIFF_FOUND)
    SET(OSG_EXTERNAL_IMAGELIBS ${OSG_EXTERNAL_IMAGELIBS} TIFF_LIBRARIES)
    SET(OSG_EXTERNAL_IMAGEINCS ${OSG_EXTERNAL_IMAGEINCS} TIFF_INCLUDE_DIR)
    SET(OSG_WITH_TIF 1)
ENDIF(TIFF_FOUND)

IF(PNG_FOUND)
    SET(OSG_EXTERNAL_IMAGELIBS ${OSG_EXTERNAL_IMAGELIBS} PNG_LIBRARIES)
    SET(OSG_EXTERNAL_IMAGEINCS ${OSG_EXTERNAL_IMAGEINCS} PNG_INCLUDE_DIR)
    SET(OSG_WITH_PNG 1)
ENDIF(PNG_FOUND)

IF(JPEG_FOUND)
    SET(OSG_EXTERNAL_IMAGELIBS ${OSG_EXTERNAL_IMAGELIBS} JPEG_LIBRARIES)
    SET(OSG_EXTERNAL_IMAGEINCS ${OSG_EXTERNAL_IMAGEINCS} JPEG_INCLUDE_DIR)
    SET(OSG_WITH_JPG 1)
ENDIF(JPEG_FOUND)

IF(GDAL_FOUND)
    SET(OSG_EXTERNAL_IMAGELIBS ${OSG_EXTERNAL_IMAGELIBS} GDAL_LIBRARY)
    SET(OSG_EXTERNAL_IMAGEINCS ${OSG_EXTERNAL_IMAGEINCS} GDAL_INCLUDE_DIR)
    SET(OSG_WITH_GDAL 1)
ENDIF(GDAL_FOUND)

#############
#### Collada
#############

FIND_PACKAGE(Collada)

IF(COLLADA_FOUND)

    SET(OSG_WITH_COLLADA 1)

    IF(CMAKE_BUILD_TYPE STREQUAL "DebugRT")
        SET(OSG_COLLADA_LIBS ${COLLADA_LIBRARY_DEBUG})
    ELSE()
        SET(OSG_COLLADA_LIBS ${COLLADA_LIBRARY})
    ENDIF()

ELSE(COLLADA_FOUND)

    SET(OSG_COLLADA_LIBS "")

ENDIF(COLLADA_FOUND)

#############
#### GLUT
#############

FIND_PACKAGE(GLUT)

IF(GLUT_FOUND)
    SET(OSG_WITH_GLUT 1)
    SET(OSG_GLUT_INC_DIR ${GLUT_INCLUDE_DIR})
ELSE(GLUT_FOUND)
    SET(OSG_GLUT_INC_DIR )
ENDIF(GLUT_FOUND)

#############
#### OpenGL
#############

FIND_PACKAGE(OpenGL)
FIND_PACKAGE(GLU)

#############
#### X11
#############

FIND_PACKAGE(X11)

IF(GLUT_FOUND)
    SET(OSG_X_LIBS ${X11_X11_LIB})
ENDIF(GLUT_FOUND)

#############
#### VTK
#############

FIND_PACKAGE(VTK)

IF(VTK_FOUND)
    SET(OSG_WITH_VTK 1)
    SET(OSG_VTK_LIBS vtkRendering)
ENDIF(VTK_FOUND)

#############
#### Python
#############

FIND_PACKAGE(PythonInterp)

###############
#### Flex/Bison
###############

FIND_PROGRAM(FLEX_EXE flex)
FIND_PROGRAM(BISON_EXE bison)

#############
#### Support
#############

IF(UNIX)
   FIND_LIBRARY(OSG_THREAD_LIB NAMES pthread)
   FIND_LIBRARY(OSG_DL_LIB     NAMES dl)
ENDIF(UNIX)

###########
#### Helper
###########

SET(OSG_CMAKE_PASSES "OSGCOLLECT" "OSGSETUP" "OSGSETUPTEST")

SET(OSG_PASSDIR_OSGCOLLECT   "")
SET(OSG_PASSDIR_OSGSETUP     "")
SET(OSG_PASSDIR_OSGSETUPTEST "Test")

FUNCTION(PROCESS_DIR)

    IF(NOT OSG_CMAKE_PASS STREQUAL "OSGCOLLECT")
        RETURN()
    ENDIF()

    FILE(GLOB LOCAL_SRC_IN  . OSG*.cpp)
    FILE(GLOB LOCAL_HDR     . OSG*.h)
    FILE(GLOB LOCAL_INL     . OSG*.inl)
    FILE(GLOB LOCAL_INS     . OSG*.ins)
    FILE(GLOB LOCAL_FCD     . OSG*.fcd)
    FILE(GLOB LOCAL_LL      . OSG*.ll)
    FILE(GLOB LOCAL_YY      . OSG*.yy)

    FOREACH(SRC_FILE  ${LOCAL_SRC_IN})
        IF(NOT ${SRC_FILE} MATCHES OSG.*Test.cpp)
            SET(LOCAL_SRC ${LOCAL_SRC} ${SRC_FILE})
        ENDIF()
    ENDFOREACH(SRC_FILE)

    FILE(GLOB LOCAL_TEST_SRC  . test*.cpp)

    IF(LOCAL_SRC)
        FILE(APPEND ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.cmake
             "SET(${PROJECT_NAME}_SRC \${${PROJECT_NAME}_SRC} ${LOCAL_SRC})\n\n")
    ENDIF(LOCAL_SRC)

    IF(LOCAL_HDR)
        FILE(APPEND ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.cmake
             "SET(${PROJECT_NAME}_HDR \${${PROJECT_NAME}_HDR} ${LOCAL_HDR})\n\n")
    ENDIF(LOCAL_HDR)

    IF(LOCAL_INL)
        FILE(APPEND ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.cmake
             "SET(${PROJECT_NAME}_INL \${${PROJECT_NAME}_INL} ${LOCAL_INL})\n\n")
    ENDIF(LOCAL_INL)

    IF(LOCAL_INS)
        FILE(APPEND ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.cmake
             "SET(${PROJECT_NAME}_INS \${${PROJECT_NAME}_INS} ${LOCAL_INS})\n\n")
    ENDIF(LOCAL_INS)

    IF(LOCAL_FCD)
        FILE(APPEND ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.cmake
             "SET(${PROJECT_NAME}_FCD \${${PROJECT_NAME}_FCD} ${LOCAL_FCD})\n\n")
    ENDIF(LOCAL_FCD)

    IF(LOCAL_LL)
        FILE(APPEND ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.cmake
             "SET(${PROJECT_NAME}_LL \${${PROJECT_NAME}_LL} ${LOCAL_LL})\n\n")
    ENDIF(LOCAL_LL)

    IF(LOCAL_YY)
        FILE(APPEND ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.cmake
             "SET(${PROJECT_NAME}_YY \${${PROJECT_NAME}_YY} ${LOCAL_YY})\n\n")
    ENDIF(LOCAL_YY)

    IF(LOCAL_TEST_SRC)
        FILE(APPEND ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.cmake
             "SET(${PROJECT_NAME}_TEST_SRC \${${PROJECT_NAME}_TEST_SRC} ${LOCAL_TEST_SRC})\n\n")
    ENDIF(LOCAL_TEST_SRC)

    FILE(APPEND ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.cmake
         "SET(${PROJECT_NAME}_INC \${${PROJECT_NAME}_INC} ${CMAKE_CURRENT_SOURCE_DIR})\n\n")


    INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})

ENDFUNCTION(PROCESS_DIR)

FUNCTION(COLLECT_SUBDIRS)

    FILE(GLOB LOCALSUBDIRS . */CMakeLists.txt)
 
    FOREACH(LOCAL_SUBDIR ${LOCALSUBDIRS})

        GET_FILENAME_COMPONENT(LOCAL_SUBDIR_PATH ${LOCAL_SUBDIR} PATH)

        IF(NOT ${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${LOCAL_SUBDIR_PATH})
            ADD_SUBDIRECTORY(${LOCAL_SUBDIR_PATH})
        ENDIF()

    ENDFOREACH()

ENDFUNCTION(COLLECT_SUBDIRS)

FUNCTION(SETUP_PROJECT PROJ_NAME PROJ_DEFINE)

    PROJECT(${PROJ_NAME})

    MESSAGE(STATUS "Processing ${PROJ_NAME}")

    IF(OSG_CMAKE_PASS STREQUAL "OSGCOLLECT")

        FILE(WRITE ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.cmake "#base autogen\n")

        IF(PROJ_NAME STREQUAL "OSGBase")
            FILE(APPEND ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.cmake
                "SET(${PROJECT_NAME}_INC \${${PROJECT_NAME}_INC} ${PROJECT_BINARY_DIR}/Base)\n\n")

            FILE(APPEND ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.cmake
                "SET(${PROJECT_NAME}_HDR \${${PROJECT_NAME}_HDR} ${PROJECT_BINARY_DIR}/Base/OSGConfigured.h)\n\n")
        ENDIF(PROJ_NAME STREQUAL "OSGBase")

        FOREACH(EXINC ${${PROJ_NAME}_Extra_Inc})
            FILE(APPEND ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.cmake
                "SET(${PROJECT_NAME}_INC \${${PROJECT_NAME}_INC} ${EXINC})\n\n")
        ENDFOREACH()
    ENDIF()

        COLLECT_SUBDIRS()
        PROCESS_DIR()

        FOREACH(ADDSUBDIR ${${PROJ_NAME}_Add_SubDir})
            ADD_SUBDIRECTORY(${ADDSUBDIR} .)
        ENDFOREACH()

    IF(OSG_CMAKE_PASS STREQUAL "OSGSETUP")

        FOREACH(LIBDIR ${${PROJ_NAME}_Ext_LibDir_Dependencies})
             LINK_DIRECTORIES(${${LIBDIR}})
        ENDFOREACH()

        INCLUDE(${CMAKE_BINARY_DIR}/${PROJECT_NAME}.cmake)

        #####
        # FCD
        #####

        IF(OSG_ENABLE_FCD2CODE AND PYTHONINTERP_FOUND)

            FOREACH(FCDFile ${${PROJECT_NAME}_FCD})
            
                GET_FILENAME_COMPONENT(FCDBase ${FCDFile} NAME_WE)
                GET_FILENAME_COMPONENT(FCDDir  ${FCDFile} PATH)

                SET(FCDBaseHdr "${FCDBase}Base.h")
                SET(FCDBaseCpp "${FCDBase}Base.cpp")
                SET(FCDBaseInl "${FCDBase}Base.inl")
                SET(FCDBaseFld "${FCDBase}Fields.h")
            
                IF(NOT EXISTS ${FCDDir}/${FCDBaseCpp})
                    SET(${PROJECT_NAME}_SRC ${${PROJECT_NAME}_SRC} ${FCDDir}/${FCDBaseCpp})
                    SET(${PROJECT_NAME}_HDR ${${PROJECT_NAME}_HDR} ${FCDDir}/${FCDBaseHds})
                    SET(${PROJECT_NAME}_INL ${${PROJECT_NAME}_INL} ${FCDDir}/${FCDBaseInl})
                    SET(${PROJECT_NAME}_HDR ${${PROJECT_NAME}_HDR} ${FCDDir}/${FCDBaseFld})
                ENDIF(NOT EXISTS ${FCDDir}/${FCDBaseCpp})

                SET(FCDCommand ${CMAKE_SOURCE_DIR}/Tools/fcd2code/fcd2code)

                ADD_CUSTOM_COMMAND(
                    OUTPUT ${FCDDir}/${FCDBaseHdr} 
                           ${FCDDir}/${FCDBaseCpp}
                           ${FCDDir}/${FCDBaseInl} 
                           ${FCDDir}/${FCDBaseFld}
                    COMMAND ${PYTHON_EXECUTABLE} ${FCDCommand} -c -b -d ${FCDFile} -p ${FCDDir} -r ${CMAKE_SOURCE_DIR}
                    MAIN_DEPENDENCY ${FCDFile})

            ENDFOREACH()

        ENDIF(OSG_ENABLE_FCD2CODE AND PYTHONINTERP_FOUND)

        ############
        # Flex/Bison
        ############

        IF(OSG_ENABLE_SCANPARSE_REGEN AND FLEX_EXE AND BISON_EXE)

            FOREACH(YYFile ${${PROJECT_NAME}_YY})

                GET_FILENAME_COMPONENT(YYBase ${YYFile} NAME_WE)

                STRING(REPLACE "Parser" "_" YYOpt ${YYBase})

                SET(YYSrc ${CMAKE_CURRENT_BINARY_DIR}/${YYBase}.cpp)
                SET(YYHdr ${CMAKE_CURRENT_BINARY_DIR}/${YYBase}.hpp)

                ADD_CUSTOM_COMMAND(
                    OUTPUT ${YYSrc} ${YYHdr}
                    COMMAND ${BISON_EXE} -d -v -p${YYOpt} -b${YYOpt} -o ${YYSrc} ${YYFile}
                    MAIN_DEPENDENCY ${YYFile})                      

                SET(${PROJECT_NAME}_SRC ${${PROJECT_NAME}_SRC} ${YYSrc})
                SET(${PROJECT_NAME}_HDR ${${PROJECT_NAME}_HDR} ${YYHdr})

            ENDFOREACH()

            FOREACH(LLFile ${${PROJECT_NAME}_LL})

                GET_FILENAME_COMPONENT(LLBase ${LLFile} NAME_WE)

                STRING(REPLACE "Scanner" "_" LLOpt ${LLBase})

                SET(LLSrc ${CMAKE_CURRENT_BINARY_DIR}/${LLBase}.cpp)

                ADD_CUSTOM_COMMAND(
                    OUTPUT ${LLSrc}
                    COMMAND ${FLEX_EXE} -+ -P${LLOpt} -t ${LLFile} >  ${LLSrc}
                    MAIN_DEPENDENCY ${LLFile})

                SET(${PROJECT_NAME}_SRC ${${PROJECT_NAME}_SRC} ${LLSrc})

            ENDFOREACH()

            IF(${PROJECT_NAME}_YY OR ${PROJECT_NAME}_LL)
                SET(${PROJECT_NAME}_INC ${${PROJECT_NAME}_INC} ${CMAKE_CURRENT_BINARY_DIR})
            ENDIF(${PROJECT_NAME}_YY OR ${PROJECT_NAME}_LL)

        ENDIF(OSG_ENABLE_SCANPARSE_REGEN AND FLEX_EXE AND BISON_EXE)

        ADD_LIBRARY(${PROJECT_NAME} ${${PROJECT_NAME}_SRC})

        INCLUDE_DIRECTORIES(${${PROJECT_NAME}_INC})

        SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES DEFINE_SYMBOL 
                                              ${PROJ_DEFINE})

        SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES DEBUGRT_POSTFIX 
                                              "_d")

        FOREACH(OSGDEP ${${PROJECT_NAME}_OSG_Dependencies})
  
            INCLUDE(${CMAKE_BINARY_DIR}/${OSGDEP}.cmake)
            INCLUDE_DIRECTORIES(${${OSGDEP}_INC})

            ADD_DEPENDENCIES(${PROJECT_NAME} ${OSGDEP})

            TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${OSGDEP})

        ENDFOREACH()

        FOREACH(INC ${${PROJECT_NAME}_Ext_Inc_Dependencies})
            INCLUDE_DIRECTORIES(${${INC}})
        ENDFOREACH()    

        FOREACH(LIB ${${PROJECT_NAME}_Ext_Lib_Dependencies})
            TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${${LIB}})
        ENDFOREACH()    

        INSTALL(TARGETS ${PROJECT_NAME}
                RUNTIME DESTINATION lib${OSG_LIBDIR_SUFFIX} 
                LIBRARY DESTINATION lib${OSG_LIBDIR_SUFFIX}
                ARCHIVE DESTINATION lib${OSG_LIBDIR_SUFFIX})

        INSTALL(FILES ${${PROJECT_NAME}_HDR} 
                DESTINATION include/OpenSG
                PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ
                            GROUP_EXECUTE GROUP_READ
                            WORLD_EXECUTE WORLD_READ)

        INSTALL(FILES ${${PROJECT_NAME}_INL} 
                DESTINATION include/OpenSG
                PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ
                            GROUP_EXECUTE GROUP_READ
                            WORLD_EXECUTE WORLD_READ)

        INSTALL(FILES ${${PROJECT_NAME}_INS} 
                DESTINATION include/OpenSG
                PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ
                            GROUP_EXECUTE GROUP_READ
                            WORLD_EXECUTE WORLD_READ)

    ENDIF()

    IF(OSG_CMAKE_PASS STREQUAL "OSGSETUPTEST" AND OSGBUILD_TESTS)

        INCLUDE(${CMAKE_BINARY_DIR}/${PROJECT_NAME}.cmake)
        INCLUDE_DIRECTORIES(${${PROJECT_NAME}_INC})

        FOREACH(OSGDEP ${${PROJECT_NAME}_OSG_Dependencies})
  
            INCLUDE(${CMAKE_BINARY_DIR}/${OSGDEP}.cmake)
            INCLUDE_DIRECTORIES(${${OSGDEP}_INC})

        ENDFOREACH()

        FOREACH(INC ${${PROJECT_NAME}_Ext_Inc_Dependencies})
            INCLUDE_DIRECTORIES(${${INC}})
        ENDFOREACH()    

        FOREACH(EXTINC ${${PROJ_NAME}_Test_Ext_Inc_Dependencies})
            INCLUDE_DIRECTORIES(${${EXTINC}})
        ENDFOREACH()

        FOREACH(OSGTESTDEP ${${PROJ_NAME}_Test_OSG_Dependencies})

            IF(NOT EXISTS ${CMAKE_BINARY_DIR}/${OSGTESTDEP}.cmake)
                MESSAGE(STATUS "Test dependency (${OSGTESTDEP}) not found, "
                               "ignoring tests for ${PROJ_NAME}\n")

                RETURN()
            ENDIF(NOT EXISTS ${CMAKE_BINARY_DIR}/${OSGTESTDEP}.cmake)

            INCLUDE(${CMAKE_BINARY_DIR}/${OSGTESTDEP}.cmake)
            INCLUDE_DIRECTORIES(${${OSGTESTDEP}_INC})

        ENDFOREACH()

        FOREACH(LIBDIR ${${PROJ_NAME}_Ext_LibDir_Dependencies})
             LINK_DIRECTORIES(${${LIBDIR}})
        ENDFOREACH()

        FOREACH(EXE_SRC ${${PROJECT_NAME}_TEST_SRC})

            GET_FILENAME_COMPONENT(EXE ${EXE_SRC} NAME_WE)

            ADD_EXECUTABLE(${EXE} ${EXE_SRC})

            FOREACH(OSGTESTDEP ${${PROJ_NAME}_Test_OSG_Dependencies})
                  ADD_DEPENDENCIES(${EXE} ${OSGTESTDEP})

                TARGET_LINK_LIBRARIES(${EXE} ${OSGTESTDEP})
            ENDFOREACH()

            TARGET_LINK_LIBRARIES(${EXE} ${PROJECT_NAME})

        ENDFOREACH()

    ENDIF()

ENDFUNCTION(SETUP_PROJECT)


MACRO(CLEAR_PROJECT PROJ_NAME)

    SET(${PROJ_NAME}_OSG_Dependencies )
    SET(${PROJ_NAME}_Ext_Lib_Dependencies )
    SET(${PROJ_NAME}_Ext_LibDir_Dependencies )
    SET(${PROJ_NAME}_Ext_Inc_Dependencies )
    SET(${PROJ_NAME}_Extra_Inc )
    SET(${PROJ_NAME}_Add_SubDir )

    SET(${PROJ_NAME}_Test_OSG_Dependencies )
    SET(${PROJ_NAME}_Test_Ext_Inc_Dependencies )

ENDMACRO(CLEAR_PROJECT)

MACRO(CHECK_PROJECT PROJ_NAME)
    IF(NOT ${PROJECT_NAME} STREQUAL ${PROJ_NAME})
        RETURN()
    ENDIF()
ENDMACRO(CHECK_PROJECT PROJ_NAME)

########
# Clean
########

FILE(GLOB OSG_OLD_CONFIG_FILES  ${CMAKE_BINARY_DIR}/*.cmake)

IF(OSG_OLD_CONFIG_FILES)
    FILE(REMOVE ${OSG_OLD_CONFIG_FILES})
ENDIF(OSG_OLD_CONFIG_FILES)

#########
# Recurse
#########

SET(OSG_VERBOSE_SCAN FALSE)

FOREACH(PASS ${OSG_CMAKE_PASSES})
 
     SET(OSG_CMAKE_PASS ${PASS})

     MESSAGE(STATUS "\nPASS : ${OSG_CMAKE_PASS}\n")

     ADD_SUBDIRECTORY(Source/Base ${OSG_PASSDIR_${PASS}})
     ADD_SUBDIRECTORY(Source/System ${OSG_PASSDIR_${PASS}})
     ADD_SUBDIRECTORY(Source/WindowSystem ${OSG_PASSDIR_${PASS}})

     ADD_SUBDIRECTORY(Source/Contrib ${OSG_PASSDIR_${PASS}})
     ADD_SUBDIRECTORY(Source/Test ${OSG_PASSDIR_${PASS}})
ENDFOREACH()


###############
# OSGConfigured
###############

CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/OSGConfigured.h.cmake 
               ${CMAKE_BINARY_DIR}/Source/Base/Base/OSGConfigured.h.tmp)

FIND_PROGRAM(CMAKE_EXE cmake)

EXECUTE_PROCESS(
    COMMAND cmake -E copy_if_different
                     ${CMAKE_BINARY_DIR}/Source/Base/Base/OSGConfigured.h.tmp 
                     ${CMAKE_BINARY_DIR}/Source/Base/Base/OSGConfigured.h)


