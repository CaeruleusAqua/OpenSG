CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

PROJECT(OpenSG)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${OpenSG_SOURCE_DIR}/CMake")

INCLUDE(BuildFunctions)

SET(CMAKE_VERBOSE_MAKEFILE ON)

##########################
# Disallow in-source build
##########################

IF("${OpenSG_SOURCE_DIR}"  STREQUAL "${OpenSG_BINARY_DIR}")
  MESSAGE(FATAL_ERROR "OpenSG requires an out of source Build. \n"
                      "Please create a separate binary directory and run "
                      "CMake there.")
ENDIF("${OpenSG_SOURCE_DIR}"  STREQUAL "${OpenSG_BINARY_DIR}")

OPTION(BUILD_SHARED_LIBS "Set to OFF to build static libraries" ON)

OPTION(OSG_ENABLE_NEW_SHADER "" ON)
OPTION(OSG_ENABLE_OGL2_SHADERFUNCTIONS "" ON)
SET(OSG_SHADER_CACHE_MODE 0 CACHE STRING "")

OPTION(OSG_ENABLE_FCD2CODE "" OFF)
OPTION(OSG_ENABLE_SCANPARSE_REGEN "" OFF)

OPTION(OSG_ENABLE_GLDEFINE_MAPPER "" ON)
OPTION(OSG_ENABLE_NEW_OSB_IO "" ON)

OPTION(OSG_ENABLE_SSE2 "" ON)

OPTION(OSG_ENABLE_TESTCONTAINER "" OFF)
OPTION(OSG_ENABLE_VALGRIND_CHECKS "" OFF)
OPTION(OSG_ENABLE_MEMORY_DEBUGGING "" OFF)

IF(UNIX)
    OPTION(OSG_ENABLE_ELF_LOCALSTORAGE "" ON)
ELSEIF(WIN32)
    OPTION(OSG_ENABLE_WIN_LOCALSTORAGE "" ON)
ENDIF()

OPTION(OSGCOMPAT_ENABLE                  "" OFF)
OPTION(OSGCOMPAT_ENABLE_DEPRECATED       "" OFF)
OPTION(OSGCOMPAT_ENABLE_DEPRECATED_PROPS "" OFF)

# Not sure
#OPTION(OSG_ENABLE_MTCPTR "" ON)
#OPTION(OSG_ENABLE_GIF    "" ON)

## prep options for OSGConfigured.h

IF(NOT OSGCOMPAT_DISABLE_DEPRECATED)
    SET(OSG_DISABLE_DEPRECATED 1)
ENDIF(NOT OSGCOMPAT_DISABLE_DEPRECATED)

IF(OSG_ENABLE_SSE2)
    SET(OSG_SIMD_SSE 1)
ENDIF(OSG_ENABLE_SSE2)

IF(OSG_ENABLE_NEW_OSB_IO)
    SET(OSG_NEW_OSB_IO 1)
ENDIF(OSG_ENABLE_NEW_OSB_IO)

IF(OSG_ENABLE_GLDEFINE_MAPPER)
    SET(OSG_GL_DEFMAPPER 1)
ENDIF(OSG_ENABLE_GLDEFINE_MAPPER)

IF(OSG_ENABLE_OGL2_SHADERFUNCTIONS)
    SET(OSG_OGL2_SHADERFUNCS 1)
ENDIF(OSG_ENABLE_OGL2_SHADERFUNCTIONS)

IF(OSG_ENABLE_NEW_SHADER)
    SET(OSG_NEW_SHADER 1)
ENDIF(OSG_ENABLE_NEW_SHADER)

IF(OSGCOMPAT_ENABLE)
    SET(OSG_1_COMPAT 1)
ENDIF(OSGCOMPAT_ENABLE)

IF(NOT OSG_ENABLE_SCANPARSE_REGEN)
    SET(OSG_PREBUILD_SCANPARSE 1)
ENDIF(NOT OSG_ENABLE_SCANPARSE_REGEN)

IF(OSG_ENABLE_ELF_LOCALSTORAGE)
    SET(OSG_PTHREAD_ELF_TLS 1)
ENDIF(OSG_ENABLE_ELF_LOCALSTORAGE)

IF(OSG_ENABLE_WIN_LOCALSTORAGE)
    SET(OSG_WIN32_ASPECT_USE_LOCALSTORAGE 1)
ENDIF(OSG_ENABLE_WIN_LOCALSTORAGE)

IF(OSGCOMPAT_ENABLE_DEPRECATED_PROPS)
    SET(OSG_DEPRECATED_PROPS 1)
ENDIF(OSGCOMPAT_ENABLE_DEPRECATED_PROPS)

SET(OSG_SHC_MODE_${OSG_SHADER_CACHE_MODE} 1)

SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

##############
# Compiler
##############

SET(OSG_PLATFORM_64 0)
SET(OSG_PLATFORM_32 0)
SET(OSG_LIBDIR_SUFFIX "")

IF(CMAKE_CXX_SIZEOF_DATA_PTR EQUAL 8)
    SET(OSG_PLATFORM_64 1)
    SET(OSG_LIBDIR_SUFFIX "64")
ELSE()
    SET(OSG_PLATFORM_32 1)
ENDIF()


IF(${CMAKE_CXX_PLATFORM_ID} STREQUAL "Linux")
    SET(LINUX 1)
ENDIF()

IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Debug CACHE STRING
      "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."
      FORCE)
ENDIF(NOT CMAKE_BUILD_TYPE)


IF(NOT OSG_COMPILER_DEFAULTS)
   INCLUDE(CMake/SetupCompiler.cmake)
   SET( OSG_COMPILER_DEFAULTS 1 CACHE BOOL "Defaults written" FORCE ) #INTERNAL
ENDIF(NOT OSG_COMPILER_DEFAULTS)

INCLUDE(CMake/UpdateCompiler.cmake)

IF(CMAKE_BUILD_TYPE STREQUAL "Debug" OR
   CMAKE_BUILD_TYPE STREQUAL "DebugGV")

    SET(OSG_LIBDIR_SUFFIX "${OSG_LIBDIR_SUFFIX}/debug")

ENDIF()

IF(CMAKE_BUILD_TYPE STREQUAL "DebugRT")

    SET(OSG_LIBDIR_SUFFIX "${OSG_LIBDIR_SUFFIX}/debugrt")

ENDIF()

##########
#### boost
##########

SET(Boost_USE_MULTITHREAD ON )
SET(Boost_USE_STATIC_LIBS OFF)

FIND_PACKAGE(Boost COMPONENTS filesystem)

IF(Boost_FOUND)

    INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIR} )

    IF(UNIX)
        LINK_DIRECTORIES   (${Boost_LIBRARY_DIRS})
    ENDIF(UNIX)

    ADD_DEFINITIONS(-DBOOST_ALL_DYN_LINK)

    IF(CMAKE_BUILD_TYPE STREQUAL "DebugRT")
        SET(OSG_BOOST_LIBS ${Boost_FILESYSTEM_LIBRARY_DEBUG})
    ELSE()
        SET(OSG_BOOST_LIBS ${Boost_FILESYSTEM_LIBRARY_RELEASE})
    ENDIF()

    IF(WIN32)
        IF(${Boost_MINOR_VERSION} GREATER 34)
            FIND_PACKAGE(Boost COMPONENTS system)

            IF(CMAKE_BUILD_TYPE STREQUAL "DebugRT")

                SET(OSG_BOOST_LIBS ${OSG_BOOST_LIBS} 
                                   ${Boost_SYSTEM_LIBRARY_DEBUG})

            ELSE(CMAKE_BUILD_TYPE STREQUAL "DebugRT")

                SET(OSG_BOOST_LIBS ${OSG_BOOST_LIBS} 
                                   ${Boost_SYSTEM_LIBRARY_RELEASE})

            ENDIF(CMAKE_BUILD_TYPE STREQUAL "DebugRT")
        ENDIF()
    ENDIF(WIN32)

ELSE(Boost_FOUND)

    MESSAGE(SEND_ERROR "BOOST NOTFOUND." ${Boost_ERROR_REASON})

    SET(BOOST_ROOT "" CACHE PATH "")

ENDIF(Boost_FOUND)

#########
#### zlib
#########

FIND_PACKAGE(ZLIB)

IF(ZLIB_FOUND)
    SET(OSG_WITH_ZLIB 1)
ENDIF(ZLIB_FOUND)

IF(NOT WIN32)
    #############
    #### Freetype
    #############

    FIND_PACKAGE(Freetype)

    IF(FREETYPE_FOUND)
        SET(OSG_WITH_FT2 1)

        FIND_LIBRARY(FONTCONFIG_LIBRARY NAMES fontconfig)

        IF(FONTCONFIG_LIBRARY MATCHES "fontconfig")
            SET(OSG_WITH_FONTCONFIG 1)
        ENDIF()

    ENDIF(FREETYPE_FOUND)
ENDIF(NOT WIN32)

##############
#### ImageLibs
##############

FIND_PACKAGE(TIFF)
FIND_PACKAGE(PNG)
FIND_PACKAGE(JPEG)
FIND_PACKAGE(GDAL)

SET(OSG_EXTERNAL_IMAGELIBS)

IF(TIFF_FOUND)
    SET(OSG_EXTERNAL_IMAGELIBS ${OSG_EXTERNAL_IMAGELIBS} TIFF_LIBRARIES)
    SET(OSG_EXTERNAL_IMAGEINCS ${OSG_EXTERNAL_IMAGEINCS} TIFF_INCLUDE_DIR)
    SET(OSG_WITH_TIF 1)
ENDIF(TIFF_FOUND)

IF(PNG_FOUND)
    SET(OSG_EXTERNAL_IMAGELIBS ${OSG_EXTERNAL_IMAGELIBS} PNG_LIBRARIES)
    SET(OSG_EXTERNAL_IMAGEINCS ${OSG_EXTERNAL_IMAGEINCS} PNG_INCLUDE_DIR)
    SET(OSG_WITH_PNG 1)
ENDIF(PNG_FOUND)

IF(JPEG_FOUND)
    SET(OSG_EXTERNAL_IMAGELIBS ${OSG_EXTERNAL_IMAGELIBS} JPEG_LIBRARIES)
    SET(OSG_EXTERNAL_IMAGEINCS ${OSG_EXTERNAL_IMAGEINCS} JPEG_INCLUDE_DIR)
    SET(OSG_WITH_JPG 1)
ENDIF(JPEG_FOUND)

IF(GDAL_FOUND)
    SET(OSG_EXTERNAL_IMAGELIBS ${OSG_EXTERNAL_IMAGELIBS} GDAL_LIBRARY)
    SET(OSG_EXTERNAL_IMAGEINCS ${OSG_EXTERNAL_IMAGEINCS} GDAL_INCLUDE_DIR)
    SET(OSG_WITH_GDAL 1)
ENDIF(GDAL_FOUND)

#############
#### Collada
#############

FIND_PACKAGE(Collada)

IF(COLLADA_FOUND)

    SET(OSG_WITH_COLLADA 1)

    IF(CMAKE_BUILD_TYPE STREQUAL "DebugRT")
        SET(OSG_COLLADA_LIBS ${COLLADA_LIBRARY_DEBUG})
    ELSE()
        SET(OSG_COLLADA_LIBS ${COLLADA_LIBRARY})
    ENDIF()

ELSE(COLLADA_FOUND)

    SET(OSG_COLLADA_LIBS "")

ENDIF(COLLADA_FOUND)

#############
#### GLUT
#############

FIND_PACKAGE(GLUT)

IF(GLUT_FOUND)
    SET(OSG_WITH_GLUT 1)
    SET(OSG_GLUT_INC_DIR ${GLUT_INCLUDE_DIR})
ELSE(GLUT_FOUND)
    SET(OSG_GLUT_INC_DIR )
ENDIF(GLUT_FOUND)

#############
#### OpenGL
#############

FIND_PACKAGE(OpenGL REQUIRED)
FIND_PACKAGE(GLU REQUIRED)

#############
#### X11
#############

FIND_PACKAGE(X11)

IF(GLUT_FOUND)
    SET(OSG_X_LIBS ${X11_X11_LIB})
ENDIF(GLUT_FOUND)

#############
#### VTK
#############

FIND_PACKAGE(VTK)

IF(VTK_FOUND)
    SET(OSG_WITH_VTK 1)
    SET(OSG_VTK_LIBS vtkRendering)
ENDIF(VTK_FOUND)

#############
#### Python
#############

FIND_PACKAGE(PythonInterp)

###############
#### Flex/Bison
###############

FIND_PROGRAM(FLEX_EXE flex)
FIND_PROGRAM(BISON_EXE bison)

#############
#### Support
#############

IF(UNIX)
   FIND_LIBRARY(OSG_THREAD_LIB NAMES pthread)
   FIND_LIBRARY(OSG_DL_LIB     NAMES dl)
ENDIF(UNIX)

########
# Clean
########

FILE(GLOB OSG_OLD_CONFIG_FILES  ${CMAKE_BINARY_DIR}/*.cmake)

IF(OSG_OLD_CONFIG_FILES)
    FILE(REMOVE ${OSG_OLD_CONFIG_FILES})
ENDIF(OSG_OLD_CONFIG_FILES)

##############################################################################
# MAIN BUILD LOOP
##############################################################################

SET(OSG_CMAKE_PASSES "OSGCOLLECT" "OSGSETUP" "OSGSETUPTEST")

SET(OSG_PASSDIR_OSGCOLLECT   "")
SET(OSG_PASSDIR_OSGSETUP     "")
SET(OSG_PASSDIR_OSGSETUPTEST "Test")

# Find files describing libraries to build
FILE(GLOB_RECURSE OSG_LIBRARY_CONFIG_FILES RELATIVE "${CMAKE_SOURCE_DIR}"
     "Source/*CMakeLists.Lib.*.txt")

# run build passes
FOREACH(PASS ${OSG_CMAKE_PASSES})

    SET(OSG_CMAKE_PASS ${PASS})

    MESSAGE(STATUS "\nPASS : ${OSG_CMAKE_PASS}\n")

    FOREACH(LIBCONFIGFILE ${OSG_LIBRARY_CONFIG_FILES})
        GET_FILENAME_COMPONENT(LIBCONFIGDIR ${LIBCONFIGFILE} PATH)

        ADD_SUBDIRECTORY(${LIBCONFIGDIR} ${OSG_PASSDIR_${PASS}})
    ENDFOREACH(LIBCONFIGFILE)
ENDFOREACH()


###############
# OSGConfigured
###############

CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/OSGConfigured.h.cmake
               ${CMAKE_BINARY_DIR}/Source/Base/Base/OSGConfigured.h.tmp)

FIND_PROGRAM(CMAKE_EXE cmake)

EXECUTE_PROCESS(
    COMMAND cmake -E copy_if_different
                     ${CMAKE_BINARY_DIR}/Source/Base/Base/OSGConfigured.h.tmp
                     ${CMAKE_BINARY_DIR}/Source/Base/Base/OSGConfigured.h)
