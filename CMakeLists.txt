CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

PROJECT(OpenSG)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${OpenSG_SOURCE_DIR}/CMake")

OPTION(BUILD_SHARED_LIBS "Set to OFF to build static libraries" ON)

OPTION(OSG_ENABLE_NEW_SHADER "" OFF)
OPTION(OSG_ENABLE_OGL2_SHADERFUNCTIONS "" OFF)
SET(OSG_SHADER_CACHE_MODE 5 CACHE STRING "" FORCE)

OPTION(OSG_ENABLE_GV_BETA "" OFF)
OPTION(OSG_ENABLE_GV_WARNINGS "" OFF)

OPTION(OSG_ENABLE_FCD2CODE "" OFF)
OPTION(OSG_ENABLE_SCANPARSE_REGEN "" OFF)

OPTION(OSG_ENABLE_GLDEFINE_MAPPER "" ON)
OPTION(OSG_ENABLE_NEW_OSB_IO "" ON)

OPTION(OSG_ENABLE_SSE2 "" ON)

OPTION(OSG_ENABLE_TESTCONTAINER "" OFF)
OPTION(OSG_ENABLE_VALGRIND_CHECKS "" OFF)
OPTION(OSG_ENABLE_MEMORY_DEBUGGING "" OFF)

IF(UNIX)
    OPTION(OSG_ENABLE_ELF_LOCALSTORAGE "" ON)
ELSEIF(WIN)
    OPTION(OSG_ENABLE_WIN_LOCALSTORAGE "" ON)
ENDIF()

OPTION(OSGCOMPAT_ENABLE "" OFF)
OPTION(OSGCOMPAT_DISABLE_DEPRECATED "" ON)
OPTION(OSGCOMPAT_ENABLE_DEPRECATED_PROPS "" OFF)


# Not sure
#OPTION(OSG_ENABLE_MTCPTR "" ON)
#OPTION(OSG_ENABLE_GIF "" ON)

##################
# System Packages
##################

OPTION(OSGBUILD_BASE         "" ON)
OPTION(OSGBUILD_SYSTEM       "" ON)
OPTION(OSGBUILD_STATE        "" ON)
OPTION(OSGBUILD_DRAWABLE     "" ON)
OPTION(OSGBUILD_GROUP        "" ON)
OPTION(OSGBUILD_TEXT         "" ON)
OPTION(OSGBUILD_UTIL         "" ON)
OPTION(OSGBUILD_WINDOW       "" ON)
OPTION(OSGBUILD_EFFECTGROUPS "" ON)
OPTION(OSGBUILD_CLUSTER      "" ON)
OPTION(OSGBUILD_FILEIO       "" ON)
OPTION(OSGBUILD_IMAGEFILEIO  "" ON)
OPTION(OSGBUILD_WINDOWGLUT   "" ON)

IF(UNIX)
    OPTION(OSGBUILD_WINDOWX "" ON)
ENDIF(UNIX)

#OPTION(OSGBUILD_ "" ON)

##################
# Contrib Packages
##################

OPTION(OSGBUILD_BACKGROUNDLOADER OFF)
OPTION(OSGBUILD_COMPLEXSCENEMANAGER OFF)
OPTION(OSGBUILD_LABELLING OFF)
OPTION(OSGBUILD_MANIPULATORS OFF)
OPTION(OSGBUILD_PLY OFF)
OPTION(OSGBUILD_RRT OFF)
OPTION(OSGBUILD_TRIANGULATOR OFF)
OPTION(OSGBUILD_VTK OFF)
OPTION(OSGBUILD_TESTS ON)

## prep options for OSGConfigured.h

IF(OSGCOMPAT_DISABLE_DEPRECATED)
    SET(OSG_DISABLE_DEPRECATED 1)
ENDIF(OSGCOMPAT_DISABLE_DEPRECATED)

IF(OSG_ENABLE_SSE2)
    SET(OSG_SIMD_SSE 1)
ENDIF(OSG_ENABLE_SSE2)

IF(OSG_ENABLE_NEW_OSB_IO)
    SET(OSG_NEW_OSB_IO 1)
ENDIF(OSG_ENABLE_NEW_OSB_IO)

IF(OSG_ENABLE_GV_BETA)
    SET(OSG_GV_BETA 1)
ENDIF(OSG_ENABLE_GV_BETA)

IF(OSG_ENABLE_GLDEFINE_MAPPER)
    SET(OSG_GL_DEFMAPPER 1)
ENDIF(OSG_ENABLE_GLDEFINE_MAPPER)

IF(OSG_ENABLE_OGL2_SHADERFUNCTIONS)
    SET(OSG_OGL2_SHADERFUNCS 1)
ENDIF(OSG_ENABLE_OGL2_SHADERFUNCTIONS)

IF(OSG_ENABLE_NEW_SHADER)
    SET(OSG_NEW_SHADER 1)
ENDIF(OSG_ENABLE_NEW_SHADER)

IF(OSGCOMPAT_ENABLE)
    SET(OSG_1_COMPAT 1)
ENDIF(OSGCOMPAT_ENABLE)

IF(NOT OSG_ENABLE_SCANPARSE_REGEN)
    SET(OSG_PREBUILD_SCANPARSE 1)
ENDIF(NOT OSG_ENABLE_SCANPARSE_REGEN)

IF(OSG_ENABLE_ELF_LOCALSTORAGE)
    SET(OSG_PTHREAD_ELF_TLS 1)
ENDIF(OSG_ENABLE_ELF_LOCALSTORAGE)

IF(OSG_ENABLE_WIN_LOCALSTORAGE)
    SET(OSG_WIN32_ASPECT_USE_LOCALSTORAGE 1)
ENDIF(OSG_ENABLE_WIN_LOCALSTORAGE)

IF(OSGCOMPAT_ENABLE_DEPRECATED_PROPS)
    SET(OSG_DEPRECATED_PROPS 1)
ENDIF(OSGCOMPAT_ENABLE_DEPRECATED_PROPS)

SET(OSG_SHC_MODE_${OSG_SHADER_CACHE_MODE} 1)

SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

##########
#### boost
##########

SET(Boost_USE_MULTITHREAD ON )
SET(Boost_USE_STATIC_LIBS OFF)

FIND_PACKAGE(Boost COMPONENTS filesystem)

IF(Boost_FOUND)

    set(BOOST_ROOT ${Boost_INCLUDE_DIR})
	
    INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIR} )
    LINK_DIRECTORIES   (${Boost_LIBRARY_DIRS})

    ADD_DEFINITIONS(-DBOOST_ALL_DYN_LINK)

ELSE(Boost_FOUND)

    MESSAGE(SEND_ERROR "BOOST NOTFOUND." ${Boost_ERROR_REASON})

ENDIF(Boost_FOUND)

#########
#### zlib
#########

FIND_PACKAGE(ZLIB)

IF(ZLIB_FOUND)
    SET(OSG_WITH_ZLIB 1)   
ENDIF(ZLIB_FOUND)

#############
#### Freetype
#############

FIND_PACKAGE(Freetype)

IF(FREETYPE_FOUND)
    SET(OSG_WITH_FT2 1)   

    FIND_LIBRARY(FONTCONFIG_LIBRARY NAMES fontconfig)

    IF(FONTCONFIG_LIBRARY MATCHES "fontconfig")
        SET(OSG_WITH_FONTCONFIG 1)   
    ENDIF()

ENDIF(FREETYPE_FOUND)


##############
#### ImageLibs
##############

FIND_PACKAGE(TIFF)
FIND_PACKAGE(PNG)
FIND_PACKAGE(JPEG)
FIND_PACKAGE(GDAL)

SET(OSG_EXTERNAL_IMAGELIBS)

IF(TIFF_FOUND)
    SET(OSG_EXTERNAL_IMAGELIBS ${OSG_EXTERNAL_IMAGELIBS} ${TIFF_LIBRARIES})
    SET(OSG_WITH_TIF 1)
ENDIF(TIFF_FOUND)

IF(PNG_FOUND)
    SET(OSG_EXTERNAL_IMAGELIBS ${OSG_EXTERNAL_IMAGELIBS} ${PNG_LIBRARIES})
    SET(OSG_WITH_PNG 1)
ENDIF(PNG_FOUND)

IF(JPEG_FOUND)
    SET(OSG_EXTERNAL_IMAGELIBS ${OSG_EXTERNAL_IMAGELIBS} ${JPEG_LIBRARIES})
    SET(OSG_WITH_JPG 1)
ENDIF(JPEG_FOUND)

IF(GDAL_FOUND)
    SET(OSG_EXTERNAL_IMAGELIBS ${OSG_EXTERNAL_IMAGELIBS} ${GDAL_LIBRARY})
    SET(OSG_WITH_GDAL 1)
ENDIF(GDAL_FOUND)

#############
#### Collada
#############

FIND_PACKAGE(Collada)

IF(COLLADA_FOUND)
    SET(OSG_WITH_COLLADA 1)
ENDIF(COLLADA_FOUND)

#############
#### GLUT
#############

FIND_PACKAGE(GLUT)

IF(GLUT_FOUND)
    SET(OSG_WITH_GLUT 1)
ENDIF(GLUT_FOUND)

#############
#### OpenGL
#############

FIND_PACKAGE(OpenGL)
FIND_PACKAGE(GLU)

#############
#### X11
#############

FIND_PACKAGE(X11)

IF(GLUT_FOUND)
    SET(OSG_X_LIBS ${X11_X11_LIB})
ENDIF(GLUT_FOUND)

#############
#### VTK
#############

FIND_PACKAGE(VTK)

IF(VTK_FOUND)
    SET(OSG_WITH_VTK 1)
    SET(OSG_VTK_LIBS vtkRendering)
ENDIF(VTK_FOUND)

#############
#### Support
#############

IF(UNIX)
   FIND_LIBRARY(OSG_THREAD_LIB NAMES pthread)
   FIND_LIBRARY(OSG_DL_LIB     NAMES dl)
ENDIF(UNIX)

###########
#### Helper
###########

SET(OSG_CMAKE_PASSES "OSGCOLLECT" "OSGSETUP" "OSGSETUPTEST")

FUNCTION(PROCESS_DIR)

    IF(NOT OSG_CMAKE_PASS STREQUAL "OSGCOLLECT")
        RETURN()
    ENDIF()

    FILE(GLOB LOCAL_SRC_IN  . OSG*.cpp)

    FOREACH(SRC_FILE  ${LOCAL_SRC_IN})
        IF(NOT ${SRC_FILE} MATCHES OSG.*Test.cpp)
            SET(LOCAL_SRC ${LOCAL_SRC} ${SRC_FILE})
        ENDIF()
    ENDFOREACH(SRC_FILE)

    FILE(GLOB LOCAL_TEST_SRC  . test*.cpp)

    IF(LOCAL_SRC)
        FILE(APPEND ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.cmake
             "SET(${PROJECT_NAME}_SRC \${${PROJECT_NAME}_SRC} ${LOCAL_SRC})\n\n")
    ENDIF(LOCAL_SRC)

    IF(LOCAL_TEST_SRC)
        FILE(APPEND ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.cmake
             "SET(${PROJECT_NAME}_TEST_SRC \${${PROJECT_NAME}_TEST_SRC} ${LOCAL_TEST_SRC})\n\n")
    ENDIF(LOCAL_TEST_SRC)

    FILE(APPEND ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.cmake
         "SET(${PROJECT_NAME}_INC \${${PROJECT_NAME}_INC} ${CMAKE_CURRENT_SOURCE_DIR})\n\n")


    INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})

ENDFUNCTION(PROCESS_DIR)

FUNCTION(COLLECT_SUBDIRS)

    FILE(GLOB LOCALSUBDIRS . */CMakeLists.txt)
 
    FOREACH(LOCAL_SUBDIR ${LOCALSUBDIRS})

        GET_FILENAME_COMPONENT(LOCAL_SUBDIR_PATH ${LOCAL_SUBDIR} PATH)

        IF(NOT ${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${LOCAL_SUBDIR_PATH})
            ADD_SUBDIRECTORY(${LOCAL_SUBDIR_PATH})
        ENDIF()

    ENDFOREACH()

ENDFUNCTION(COLLECT_SUBDIRS)

FUNCTION(SETUP_PROJECT PROJ_NAME PROJ_DEFINE)

    PROJECT(${PROJ_NAME})

    MESSAGE(STATUS "Processing ${PROJ_NAME}")

    IF(OSG_CMAKE_PASS STREQUAL "OSGCOLLECT")

        FILE(WRITE ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.cmake "#base autogen\n")

        FILE(APPEND ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.cmake
            "SET(${PROJECT_NAME}_INC \${${PROJECT_NAME}_INC} ${PROJECT_BINARY_DIR}/Base)\n\n")

        FOREACH(EXINC ${${PROJ_NAME}_Extra_Inc})
            FILE(APPEND ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.cmake
                "SET(${PROJECT_NAME}_INC \${${PROJECT_NAME}_INC} ${EXINC})\n\n")
        ENDFOREACH()
    ENDIF()

        COLLECT_SUBDIRS()
        PROCESS_DIR()

        FOREACH(ADDSUBDIR ${${PROJ_NAME}_Add_SubDir})
            ADD_SUBDIRECTORY(${ADDSUBDIR} .)
        ENDFOREACH()

    IF(OSG_CMAKE_PASS STREQUAL "OSGSETUP")

        FOREACH(LIBDIR ${${PROJ_NAME}_Ext_LibDir_Dependencies})
             LINK_DIRECTORIES(${${LIBDIR}})
        ENDFOREACH()

        INCLUDE(${CMAKE_BINARY_DIR}/${PROJECT_NAME}.cmake)

        ADD_LIBRARY(${PROJECT_NAME} ${${PROJECT_NAME}_SRC})

        INCLUDE_DIRECTORIES(${${PROJECT_NAME}_INC})

        SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES DEFINE_SYMBOL 
                                              ${PROJ_DEFINE})

        SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES LINK_FLAGS -Wl,--no-undefined)

        FOREACH(OSGDEP ${${PROJECT_NAME}_OSG_Dependencies})
  
            INCLUDE(${CMAKE_BINARY_DIR}/${OSGDEP}.cmake)
            INCLUDE_DIRECTORIES(${${OSGDEP}_INC})

            ADD_DEPENDENCIES(${PROJECT_NAME} ${OSGDEP})

            TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${OSGDEP})

        ENDFOREACH()

        FOREACH(INC ${${PROJECT_NAME}_Ext_Inc_Dependencies})
            INCLUDE_DIRECTORIES(${${INC}})
        ENDFOREACH()    

        FOREACH(LIB ${${PROJECT_NAME}_Ext_Lib_Dependencies})
            TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${${LIB}})
        ENDFOREACH()    

    ENDIF()

    IF(OSG_CMAKE_PASS STREQUAL "OSGSETUPTEST" AND OSGBUILD_TESTS)

        INCLUDE(${CMAKE_BINARY_DIR}/${PROJECT_NAME}.cmake)
        INCLUDE_DIRECTORIES(${${PROJECT_NAME}_INC})

        FOREACH(OSGDEP ${${PROJECT_NAME}_OSG_Dependencies})
  
            INCLUDE(${CMAKE_BINARY_DIR}/${OSGDEP}.cmake)
            INCLUDE_DIRECTORIES(${${OSGDEP}_INC})

        ENDFOREACH()

        FOREACH(INC ${${PROJECT_NAME}_Ext_Inc_Dependencies})
            INCLUDE_DIRECTORIES(${${INC}})
        ENDFOREACH()    

        FOREACH(OSGTESTDEP ${${PROJ_NAME}_Test_OSG_Dependencies})

            INCLUDE(${CMAKE_BINARY_DIR}/${OSGTESTDEP}.cmake)
            INCLUDE_DIRECTORIES(${${OSGTESTDEP}_INC})

        ENDFOREACH()

        FOREACH(LIBDIR ${${PROJ_NAME}_Ext_LibDir_Dependencies})
             LINK_DIRECTORIES(${${LIBDIR}})
        ENDFOREACH()

        FOREACH(EXE_SRC ${${PROJECT_NAME}_TEST_SRC})

            GET_FILENAME_COMPONENT(EXE ${EXE_SRC} NAME_WE)

            ADD_EXECUTABLE(${EXE} ${EXE_SRC})

            FOREACH(OSGTESTDEP ${${PROJ_NAME}_Test_OSG_Dependencies})
                  ADD_DEPENDENCIES(${EXE} ${OSGTESTDEP})

                TARGET_LINK_LIBRARIES(${EXE} ${OSGTESTDEP})
            ENDFOREACH()

            TARGET_LINK_LIBRARIES(${EXE} ${PROJECT_NAME})

        ENDFOREACH()

    ENDIF()

ENDFUNCTION(SETUP_PROJECT)


MACRO(CLEAR_PROJECT PROJ_NAME)

    SET(${PROJ_NAME}_OSG_Dependencies )
    SET(${PROJ_NAME}_Ext_Lib_Dependencies )
    SET(${PROJ_NAME}_Ext_LibDir_Dependencies )
    SET(${PROJ_NAME}_Ext_Inc_Dependencies )
    SET(${PROJ_NAME}_Extra_Inc )
    SET(${PROJ_NAME}_Add_SubDir )

    SET(${PROJ_NAME}_Test_OSG_Dependencies )

ENDMACRO(CLEAR_PROJECT)

MACRO(CHECK_PROJECT PROJ_NAME)
    IF(NOT ${PROJECT_NAME} STREQUAL ${PROJ_NAME})
        RETURN()
    ENDIF()
ENDMACRO(CHECK_PROJECT PROJ_NAME)

#########
# Recurse
#########

SET(OSG_VERBOSE_SCAN FALSE)

FOREACH(PASS ${OSG_CMAKE_PASSES})
 
     SET(OSG_CMAKE_PASS ${PASS})

     MESSAGE(STATUS "\nPASS : ${OSG_CMAKE_PASS}\n")

     ADD_SUBDIRECTORY(Source/Base)
     ADD_SUBDIRECTORY(Source/System)
     ADD_SUBDIRECTORY(Source/WindowSystem)

     ADD_SUBDIRECTORY(Source/Contrib)
     ADD_SUBDIRECTORY(Source/Test)
ENDFOREACH()

###############
# OSGConfigured
###############

CONFIGURE_FILE(OSGConfigured.h.cmake Source/Base/Base/OSGConfigured.h.tmp)

FIND_PROGRAM(CMAKE_EXE cmake)

EXECUTE_PROCESS(COMMAND cmake -E copy_if_different
                        Source/Base/Base/OSGConfigured.h.tmp 
                        Source/Base/Base/OSGConfigured.h)


