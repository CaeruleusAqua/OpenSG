CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

PROJECT(OpenSG)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${OpenSG_SOURCE_DIR}/CMake")

INCLUDE(BuildFunctions)

# show build command lines, let the user decide
#SET(CMAKE_VERBOSE_MAKEFILE ON)

##########################
# Disallow in-source build
##########################

IF("${OpenSG_SOURCE_DIR}"  STREQUAL "${OpenSG_BINARY_DIR}")
  MESSAGE(FATAL_ERROR "OpenSG requires an out of source Build. \n"
                      "Please create a separate binary directory and run "
                      "CMake there.")
ENDIF("${OpenSG_SOURCE_DIR}"  STREQUAL "${OpenSG_BINARY_DIR}")

SET(OSG_BUILD_ACTIVE TRUE)

##############################################################################
# BUILD OPTIONS
##############################################################################

IF(NOT WIN32)
    IF(OSG_BUILD_DEPENDEND)
        # Hide it from further manipulation
        SET(OSG_BUILD_DEPENDEND ${OSG_BUILD_DEPENDEND} CACHE INTERNAL "")
    ENDIF(OSG_BUILD_DEPENDEND)
ENDIF(NOT WIN32)

OPTION(OSG_VERBOSE_BUILD_MESSAGES "Print verbose messages when generating the build system" OFF)
MARK_AS_ADVANCED(OSG_VERBOSE_BUILD_MESSAGES)

OSG_OPTION(BUILD_SHARED_LIBS "Set to OFF to build static libraries" ON)

OSG_OPTION(OSG_ENABLE_NEW_SHADER "" ON)
OSG_OPTION(OSG_ENABLE_OGL2_SHADERFUNCTIONS "" ON)
OSG_SET_CACHE(OSG_SHADER_CACHE_MODE 0 STRING "")

OSG_OPTION(OSG_ENABLE_FCD2CODE "" OFF)
OSG_OPTION(OSG_ENABLE_SCANPARSE_REGEN "" OFF)

OSG_OPTION(OSG_ENABLE_GLDEFINE_MAPPER "" ON)
OSG_OPTION(OSG_ENABLE_NEW_OSB_IO "" ON)

OSG_OPTION(OSG_ENABLE_SSE2 "" ON)

OSG_OPTION(OSG_ENABLE_TESTCONTAINER "" OFF)
OSG_OPTION(OSG_ENABLE_VALGRIND_CHECKS "" OFF)
OSG_OPTION(OSG_ENABLE_MEMORY_DEBUGGING "" OFF)
OSG_OPTION(OSG_ENABLE_DOUBLE_MATRIX_STACK "" OFF)

IF(WIN32)
    OPTION(OSG_ENABLE_WIN_LOCALSTORAGE "" ON)
ELSEIF(APPLE)
    OPTION(OSG_ENABLE_ELF_LOCALSTORAGE "" OFF)
ELSEIF(UNIX)
    OPTION(OSG_ENABLE_ELF_LOCALSTORAGE "" ON)
ENDIF()

OPTION(OSGBUILD_EXAMPLES_SIMPLE "" OFF)

OSG_OPTION(OSGCOMPAT_ENABLE                  "" OFF)
OSG_OPTION(OSGCOMPAT_ENABLE_DEPRECATED       "" OFF)
OSG_OPTION(OSGCOMPAT_ENABLE_DEPRECATED_PROPS "" OFF)

OPTION(OSG_ENABLE_DOXY_DOC "Build the doxygen documentation - this has to be enabled each time cmake is run!" OFF)
SET(OSG_DOXY_DOC_TYPE "User" CACHE STRING
    "The type of documentation to generate (User, Developer, Trac)")
SET(OSG_DOXY_INPUTS CACHE FILEPATH "include given file instead of autogen")

# Not sure
#OPTION(OSG_ENABLE_MTCPTR "" ON)
#OPTION(OSG_ENABLE_GIF    "" ON)

## prep options for OSGConfigured.h

IF(NOT OSGCOMPAT_ENABLE_DEPRECATED)
    SET(OSG_DISABLE_DEPRECATED 1)
ENDIF(NOT OSGCOMPAT_ENABLE_DEPRECATED)

IF(OSG_ENABLE_SSE2)
    SET(OSG_SIMD_SSE 1)
ENDIF(OSG_ENABLE_SSE2)

IF(OSG_ENABLE_NEW_OSB_IO)
    SET(OSG_NEW_OSB_IO 1)
ENDIF(OSG_ENABLE_NEW_OSB_IO)

IF(OSG_ENABLE_GLDEFINE_MAPPER)
    SET(OSG_GL_DEFMAPPER 1)
ENDIF(OSG_ENABLE_GLDEFINE_MAPPER)

IF(OSG_ENABLE_OGL2_SHADERFUNCTIONS)
    SET(OSG_OGL2_SHADERFUNCS 1)
ENDIF(OSG_ENABLE_OGL2_SHADERFUNCTIONS)

IF(OSG_ENABLE_NEW_SHADER)
    SET(OSG_NEW_SHADER 1)
ENDIF(OSG_ENABLE_NEW_SHADER)

IF(OSGCOMPAT_ENABLE)
    SET(OSG_1_COMPAT 1)
ENDIF(OSGCOMPAT_ENABLE)

IF(NOT OSG_ENABLE_SCANPARSE_REGEN)
    SET(OSG_PREBUILD_SCANPARSE 1)
ENDIF(NOT OSG_ENABLE_SCANPARSE_REGEN)

IF(OSG_ENABLE_ELF_LOCALSTORAGE)
    SET(OSG_PTHREAD_ELF_TLS 1)
ENDIF(OSG_ENABLE_ELF_LOCALSTORAGE)

IF(OSG_ENABLE_WIN_LOCALSTORAGE)
    SET(OSG_WIN32_ASPECT_USE_LOCALSTORAGE 1)
ENDIF(OSG_ENABLE_WIN_LOCALSTORAGE)

IF(OSGCOMPAT_ENABLE_DEPRECATED_PROPS)
    SET(OSG_DEPRECATED_PROPS 1)
ENDIF(OSGCOMPAT_ENABLE_DEPRECATED_PROPS)

SET(OSG_SHC_MODE_${OSG_SHADER_CACHE_MODE} 1)

SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

#####################
# External extenstion
#####################

FOREACH(EXTERNAL ${OSG_EXTRA_EXTERNAL_MODULES})
    OPTION(OSGBUILD_${EXTERNAL} 
           "Build using ${EXTERNAL} module" OFF)

    IF(OSGBUILD_${EXTERNAL})
      FIND_PATH(OSG_${EXTERNAL}_SOURCE_DIR 
                CMakeLists.Lib.${EXTERNAL}.txt
                ${CMAKE_CURRENT_SOURCE_DIR}/../${EXTERNAL})

      IF(NOT EXISTS 
             ${OSG_${EXTERNAL}_SOURCE_DIR}/CMakeLists.Lib.${EXTERNAL}.txt)

          MESSAGE(SEND_ERROR "Cannot find ${EXTERNAL} sources directory: "
                             "${OSG_${EXTERNAL}_SOURCE_DIR}")
      ELSE()
          LIST(APPEND OSG_EXTERNAL_CONFIGS "${EXTERNAL}")
      ENDIF()
    ENDIF()
ENDFOREACH(EXTERNAL)

SET(OSG_EXTRA_EXTERNAL_MODULES "" CACHE STRING 
    "Extra modules that OpenSG will try to import.")

##############
# Compiler
##############

SET(OSG_PLATFORM_64 0)
SET(OSG_PLATFORM_32 0)
SET(OSG_LIBDIR_SUFFIX "")

IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
    SET(OSG_PLATFORM_64 1)
    SET(OSG_LIBDIR_SUFFIX "64")
ELSE()
    SET(OSG_PLATFORM_32 1)
ENDIF()


IF(${CMAKE_CXX_PLATFORM_ID} STREQUAL "Linux")
    SET(LINUX 1)
ENDIF()

IF(NOT WIN32 AND NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Debug CACHE STRING
      "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."
      FORCE)
ENDIF(NOT WIN32 AND NOT CMAKE_BUILD_TYPE)


IF(NOT OSG_COMPILER_DEFAULTS)
   INCLUDE(CMake/SetupCompiler.cmake)
   SET( OSG_COMPILER_DEFAULTS 1 CACHE INTERNAL "Defaults written" FORCE ) #INTERNAL
ENDIF(NOT OSG_COMPILER_DEFAULTS)

INCLUDE(CMake/UpdateCompiler.cmake)

IF(CMAKE_BUILD_TYPE STREQUAL "Debug" OR
   CMAKE_BUILD_TYPE STREQUAL "DebugGV")

    SET(OSG_LIBDIR_SUFFIX "${OSG_LIBDIR_SUFFIX}/debug")

ENDIF()

IF(CMAKE_BUILD_TYPE STREQUAL "DebugRT")

    SET(OSG_LIBDIR_SUFFIX "${OSG_LIBDIR_SUFFIX}/debugrt")

ENDIF()

ADD_DEFINITIONS(-D OSG_BUILD_ACTIVE)

##############################################################################
# DEPENDENCIES
##############################################################################

IF(NOT OSG_BUILD_DEPENDEND)

    ##########
    #### boost
    ##########

    SET(Boost_USE_MULTITHREAD ON )
    SET(Boost_USE_STATIC_LIBS OFF)

    FIND_PACKAGE(Boost COMPONENTS filesystem)

    IF(Boost_FOUND)

        INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIR} )

        IF(UNIX)
            LINK_DIRECTORIES   (${Boost_LIBRARY_DIRS})
        ENDIF(UNIX)

        ADD_DEFINITIONS(-DBOOST_ALL_DYN_LINK)

        IF(CMAKE_BUILD_TYPE STREQUAL "DebugRT")
            SET(OSG_BOOST_LIBS ${Boost_FILESYSTEM_LIBRARY_DEBUG})
        ELSE()
            SET(OSG_BOOST_LIBS ${Boost_FILESYSTEM_LIBRARY_RELEASE})
        ENDIF()

        SET(OSG_BOOST_INCDIRS ${Boost_INCLUDE_DIR})

        OSG_ADD_OPT(BOOST_ROOT)

        IF(WIN32)

            SET(OSG_BOOST_TARGETS )

            OSG_ADD_LIB_TARGET(OSG_BOOST_TARGETS Boost_FILESYSTEM_LIBRARY)

            IF(${Boost_MINOR_VERSION} GREATER 34)
                FIND_PACKAGE(Boost COMPONENTS system)

                OSG_ADD_LIB_TARGET(OSG_BOOST_TARGETS Boost_SYSTEM_LIBRARY)
            ENDIF()

            SET(OSG_BOOST_LIBS ${OSG_BOOST_TARGETS})

        ENDIF(WIN32)

        IF(APPLE)
            FIND_PACKAGE(Boost COMPONENTS system)
            SET(OSG_BOOST_LIBS ${OSG_BOOST_LIBS} ${Boost_SYSTEM_LIBRARY})
        ENDIF(APPLE)

    ELSE(Boost_FOUND)

        MESSAGE(SEND_ERROR "BOOST NOTFOUND." ${Boost_ERROR_REASON})
    
        IF(NOT BOOST_ROOT)
            SET(BOOST_ROOT "" CACHE PATH "")
        ENDIF(NOT BOOST_ROOT)

    ENDIF(Boost_FOUND)

    #########
    #### zlib
    #########

    OSG_FIND_PACKAGE(ZLIB)

    IF(ZLIB_FOUND)
        OSG_SET(OSG_WITH_ZLIB 1)
    ENDIF(ZLIB_FOUND)

    IF(UNIX AND NOT APPLE)
        #############
        #### Freetype
        #############

        FIND_PACKAGE(Freetype)

        IF(FREETYPE_FOUND)
            OSG_SET(OSG_WITH_FT2 1)

            FIND_LIBRARY(FONTCONFIG_LIBRARY NAMES fontconfig)

            IF(FONTCONFIG_LIBRARY MATCHES "fontconfig")
                OSG_SET(OSG_WITH_FONTCONFIG 1)
            ENDIF()

        ENDIF(FREETYPE_FOUND)

        OSG_ADD_OPT(FREETYPE_FOUND)
        OSG_ADD_OPT(FREETYPE_INCLUDE_DIR_freetype2)
        OSG_ADD_OPT(FONTCONFIG_LIBRARY)
        OSG_ADD_OPT(FREETYPE_LIBRARIES)
    ENDIF(UNIX AND NOT APPLE)

    ##############
    #### ImageLibs
    ##############

    OSG_FIND_PACKAGE(TIFF)
    OSG_FIND_PACKAGE(PNG)
    OSG_FIND_PACKAGE(JPEG)
    OSG_FIND_PACKAGE(GDAL)

    SET(OSG_EXTERNAL_IMAGELIBS)
    SET(OSG_EXTERNAL_IMAGEINCS)

    IF(TIFF_FOUND)
        SET(OSG_EXTERNAL_IMAGELIBS ${OSG_EXTERNAL_IMAGELIBS} TIFF_LIBRARIES)
        SET(OSG_EXTERNAL_IMAGEINCS ${OSG_EXTERNAL_IMAGEINCS} TIFF_INCLUDE_DIR)
        OSG_SET(OSG_WITH_TIF 1)
    ENDIF(TIFF_FOUND)

    IF(PNG_FOUND)
        SET(OSG_EXTERNAL_IMAGELIBS ${OSG_EXTERNAL_IMAGELIBS} PNG_LIBRARIES)
        SET(OSG_EXTERNAL_IMAGEINCS ${OSG_EXTERNAL_IMAGEINCS} PNG_INCLUDE_DIR)
        OSG_SET(OSG_WITH_PNG 1)
    ENDIF(PNG_FOUND)

    IF(JPEG_FOUND)
        SET(OSG_EXTERNAL_IMAGELIBS ${OSG_EXTERNAL_IMAGELIBS} JPEG_LIBRARIES)
        SET(OSG_EXTERNAL_IMAGEINCS ${OSG_EXTERNAL_IMAGEINCS} JPEG_INCLUDE_DIR)
        OSG_SET(OSG_WITH_JPG 1)
    ENDIF(JPEG_FOUND)

    IF(GDAL_FOUND)
        SET(OSG_EXTERNAL_IMAGELIBS ${OSG_EXTERNAL_IMAGELIBS} GDAL_LIBRARY)
        SET(OSG_EXTERNAL_IMAGEINCS ${OSG_EXTERNAL_IMAGEINCS} GDAL_INCLUDE_DIR)
        OSG_SET(OSG_WITH_GDAL 1)
    ENDIF(GDAL_FOUND)

    OSG_ADD_OPT(OSG_EXTERNAL_IMAGELIBS)
    OSG_ADD_OPT(OSG_EXTERNAL_IMAGEINCS)

    #############
    #### Collada
    #############

    FIND_PACKAGE(Collada)

    IF(COLLADA_FOUND)

        OSG_SET(OSG_WITH_COLLADA 1)

        IF(CMAKE_BUILD_TYPE STREQUAL "DebugRT")
            OSG_SET(OSG_COLLADA_LIBS ${COLLADA_LIBRARY_DEBUG})
        ELSE()
            OSG_SET(OSG_COLLADA_LIBS ${COLLADA_LIBRARY_RELEASE})
        ENDIF()

        OSG_ADD_OPT(COLLADA_DAE_INCLUDE_DIR)
        OSG_ADD_OPT(COLLADA_DOM_INCLUDE_DIR)

        IF(WIN32)

            SET(OSG_COLLADA_TARGETS )

            OSG_ADD_LIB_TARGET(OSG_COLLADA_TARGETS COLLADA_LIBRARY)

            SET(OSG_COLLADA_LIBS ${OSG_COLLADA_TARGETS})

        ENDIF(WIN32)

    ELSE(COLLADA_FOUND)

        SET(OSG_COLLADA_LIBS "")

    ENDIF(COLLADA_FOUND)

    OSG_ADD_OPT(COLLADA_FOUND)

    #############
    #### GLUT
    #############

    OSG_FIND_PACKAGE(GLUT)

    IF(GLUT_FOUND)
        OSG_SET(OSG_WITH_GLUT 1)
        OSG_SET(OSG_GLUT_INC_DIR ${GLUT_INCLUDE_DIR})
        OSG_SET(OSG_GLUT_LIBS ${GLUT_LIBRARIES})
    ELSE(GLUT_FOUND)
        OSG_SET(OSG_GLUT_INC_DIR)
        OSG_SET(OSG_GLUT_LIBS)
    ENDIF(GLUT_FOUND)

    #############
    #### QT
    #############

    OSG_FIND_PACKAGE(Qt4)

    IF(QT4_FOUND)
        OSG_SET(OSG_WITH_QT 1)
        OSG_SET(OSG_QT4_INC_DIR ${QT_INCLUDE_DIR})
        OSG_SET(OSG_QT4_LIBS ${QT_LIBRARY_DIR})
    ELSE(QT4_FOUND)
        OSG_SET(OSG_QT4_INC_DIR)
        OSG_SET(OSG_QT4_LIBS)
    ENDIF(QT4_FOUND)

    #############
    #### OpenGL
    #############

    FIND_PACKAGE(OpenGL REQUIRED)
    FIND_PACKAGE(GLU REQUIRED)

    OSG_ADD_OPT(OPENGL_gl_LIBRARY)
    OSG_ADD_OPT(OPENGL_glu_LIBRARY)

    #############
    #### X11
    #############

    FIND_PACKAGE(X11)

    IF(X11_FOUND)
        OSG_SET(OSG_X_LIBS ${X11_X11_LIB})
        OSG_SET(OSG_X_INC_DIR ${X11_X11_INCLUDE_PATH})
    ENDIF(X11_FOUND)

    OSG_ADD_OPT(X11_FOUND)

    #############
    #### VTK
    #############

    FIND_PACKAGE(VTK)

    IF(VTK_FOUND)
        OSG_SET(OSG_WITH_VTK 1)
        OSG_SET(OSG_VTK_LIBS vtkRendering)

        OSG_ADD_OPT(OSG_VTK_LIBS)
        OSG_ADD_OPT(VTK_LIBRARY_DIRS)
        OSG_ADD_OPT(VTK_INCLUDE_DIRS)
        OSG_ADD_OPT(VTK_DIR)
    ENDIF(VTK_FOUND)

    OSG_ADD_OPT(VTK_FOUND)

    #############
    #### Python
    #############

    FIND_PACKAGE(PythonInterp)

    ###############
    #### Flex/Bison
    ###############

    FIND_PROGRAM(FLEX_EXE flex)
    FIND_PROGRAM(BISON_EXE bison)

    OSG_ADD_OPT(FLEX_EXE)
    OSG_ADD_OPT(BISON_EXE)


    #############
    #### Support
    #############

    IF(UNIX)
        FIND_LIBRARY(OSG_THREAD_LIB NAMES pthread)
        FIND_LIBRARY(OSG_DL_LIB     NAMES dl)

        OSG_ADD_OPT(OSG_THREAD_LIB)
        OSG_ADD_OPT(OSG_DL_LIB)
    ENDIF(UNIX)

    IF(APPLE)
        FIND_LIBRARY(OSG_APPLICATIONSERVICES_FRAMEWORK NAMES ApplicationServices)
        FIND_LIBRARY(OSG_CARBON_FRAMEWORK NAMES Carbon)
        FIND_LIBRARY(OSG_COCOA_FRAMEWORK NAMES Cocoa)
    ENDIF(APPLE)

    OSG_ADD_OPT(CMAKE_INSTALL_PREFIX)

ENDIF(NOT OSG_BUILD_DEPENDEND)

###############
#### Doxygen
###############

FIND_PACKAGE(Doxygen)

##############################################################################
# Overrides if dependend
##############################################################################

IF(NOT WIN32)
    IF(OSG_BUILD_DEPENDEND)
        INCLUDE(${OSG_REFERENCE_DIR}/CMake.settings)
        # Needed to get the correct vtk/boost settings
        FIND_PACKAGE(VTK)
        OSG_BOOST_DEP_SETUP()
    ELSE(OSG_BUILD_DEPENDEND)
        OSG_WRITE_SETTINGS(${CMAKE_BINARY_DIR}/CMake.settings)
    ENDIF(OSG_BUILD_DEPENDEND)
ENDIF(NOT WIN32)

##############################################################################
# MAIN BUILD STEPS
##############################################################################

SET(OSG_CMAKE_PASSES "OSGCOLLECT" "OSGSETUP" "OSGSETUPTEST")

SET(OSG_PASSDIR_OSGCOLLECT           "")
SET(OSG_PASSDIR_OSGSETUP             "")
SET(OSG_PASSDIR_OSGSETUPTEST         "Test")

###############
# Clean
###############

FILE(GLOB OSG_OLD_BUILD_FILES  "${CMAKE_BINARY_DIR}/*.cmake")

IF(OSG_OLD_BUILD_FILES)
    FILE(REMOVE ${OSG_OLD_BUILD_FILES})
ENDIF(OSG_OLD_BUILD_FILES)

FILE(GLOB OSG_OLD_CONFIG_FILES "${CMAKE_BINARY_DIR}/bin/osg2-config.part*.tmp")

IF(OSG_OLD_CONFIG_FILES)
    FILE(REMOVE ${OSG_OLD_CONFIG_FILES})
ENDIF(OSG_OLD_CONFIG_FILES)

#################
# Documentation I
#################

IF(OSG_ENABLE_DOXY_DOC)

    IF(NOT OSG_DOXY_INPUTS)
        # add a pass for doxygen to run
        LIST(APPEND OSG_CMAKE_PASSES "OSGDOXYDOC")
        SET(OSG_PASS_DIR_OSGDOXYDOC "Doc")
    ENDIF(NOT OSG_DOXY_INPUTS)

    # set up variables for the config file
    IF(DOXYGEN_DOT_EXECUTABLE)
        SET(OSG_DOXY_HAVE_DOT "YES")
    ENDIF(DOXYGEN_DOT_EXECUTABLE)

    SET(OSG_DOXY_CONFIGURATION_FILE_IN "${CMAKE_SOURCE_DIR}/Doc/opensg-doxy.in")
    SET(OSG_DOXY_CONFIGURATION_FILE    "${CMAKE_BINARY_DIR}/Doc/opensg-doxy")

    IF(OSG_DOXY_DOC_TYPE STREQUAL "User")
        SET(OSG_DOXY_FULL_PATH_NAMES "YES")
        SET(OSG_DOXY_STRIP_FROM_PATH "${CMAKE_BINARY_DIR} ${CMAKE_SOURCE_DIR}")
        SET(OSG_DOXY_INTERNAL_DOCS "NO")
        SET(OSG_DOXY_STRIP_CODE_COMMENTS "YES")
        SET(OSG_DOXY_GENERATE_TREEVIEW "NO")
        SET(OSG_DOXY_SEARCHENGINE "NO")

    ELSEIF(OSG_DOXY_DOC_TYPE STREQUAL "Developer")
        SET(OSG_DOXY_FULL_PATH_NAMES "YES")
        SET(OSG_DOXY_STRIP_FROM_PATH "${CMAKE_BINARY_DIR} ${CMAKE_SOURCE_DIR}")
        SET(OSG_DOXY_INTERNAL_DOCS "YES")
        SET(OSG_DOXY_STRIP_CODE_COMMENTS "NO")
        SET(OSG_DOXY_GENERATE_TREEVIEW "YES")
        SET(OSG_DOXY_SEARCHENGINE "NO")

    ELSEIF(OSG_DOXY_DOC_TYPE STREQUAL "Trac")
        SET(OSG_DOXY_FULL_PATH_NAMES "NO")
        SET(OSG_DOXY_INTERNAL_DOCS "NO")
        SET(OSG_DOXY_STRIP_CODE_COMMENTS "YES")
        SET(OSG_DOXY_HAVE_DOT "NO")
        SET(OSG_DOXY_GENERATE_TREEVIEW "NO")
        SET(OSG_DOXY_HTML_HEADER "${CMAKE_SOURCE_DIR}/Doc/TracHeader.html")
        SET(OSG_DOXY_HTML_FOOTER "${CMAKE_SOURCE_DIR}/Doc/TracFooter.html")
        SET(OSG_DOXY_SEARCHENGINE "YES")
    ENDIF(OSG_DOXY_DOC_TYPE STREQUAL "User")

    SET(OSG_DOXY_HTML_CSS "${CMAKE_SOURCE_DIR}/Doc/doxygen_osg.css")

    # write doxygen config file
    CONFIGURE_FILE("${OSG_DOXY_CONFIGURATION_FILE_IN}"
                   "${OSG_DOXY_CONFIGURATION_FILE}")

    IF(OSG_DOXY_INPUTS)
        FILE(APPEND ${OSG_DOXY_CONFIGURATION_FILE}
            "@INCLUDE = ${OSG_DOXY_INPUTS}\n")
    ENDIF(OSG_DOXY_INPUTS)

ENDIF(OSG_ENABLE_DOXY_DOC)

###############
# Passes
###############

# Find files describing libraries to build
FILE(GLOB_RECURSE OSG_LIBRARY_CONFIG_FILES RELATIVE "${CMAKE_SOURCE_DIR}"
     "Source/*CMakeLists.Lib.*.txt")

# run build passes
FOREACH(PASS ${OSG_CMAKE_PASSES})

    SET(OSG_CMAKE_PASS ${PASS})

    MESSAGE(STATUS "\nPASS : ${OSG_CMAKE_PASS}\n")

    FOREACH(LIBCONFIGFILE ${OSG_LIBRARY_CONFIG_FILES})
        GET_FILENAME_COMPONENT(LIBCONFIGDIR ${LIBCONFIGFILE} PATH)

        ADD_SUBDIRECTORY(${LIBCONFIGDIR} ${OSG_PASSDIR_${PASS}})
    ENDFOREACH(LIBCONFIGFILE)

    FOREACH(EXTERNAL_CONFIG ${OSG_EXTERNAL_CONFIGS})
        ADD_SUBDIRECTORY(${OSG_${EXTERNAL_CONFIG}_SOURCE_DIR} 
                         External/${EXTERNAL_CONFIG}/${OSG_PASSDIR_${PASS}})
    ENDFOREACH(EXTERNAL_CONFIG ${OSG_EXTERNAL_CONFIGS})
    
ENDFOREACH()


###############
# OSGConfigured
###############

CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/OSGConfigured.h.cmake"
               "${CMAKE_BINARY_DIR}/Source/Base/Base/OSGConfigured.h.tmp")

EXECUTE_PROCESS(
    COMMAND "${CMAKE_COMMAND}" -E copy_if_different
                     "${CMAKE_BINARY_DIR}/Source/Base/Base/OSGConfigured.h.tmp"
                     "${CMAKE_BINARY_DIR}/Source/Base/Base/OSGConfigured.h")

#################
# Examples/Simple
#################

IF(OSGBUILD_EXAMPLES_SIMPLE)
    ADD_SUBDIRECTORY(Examples/Simple)
ENDIF(OSGBUILD_EXAMPLES_SIMPLE)

##################
# Documentation II
##################

IF(OSG_ENABLE_DOXY_DOC)
    # run doxygen
    EXECUTE_PROCESS(
        COMMAND "${DOXYGEN_EXECUTABLE}" "${OSG_DOXY_CONFIGURATION_FILE}")

    # force the variable to off - prevent rebuilding the doc if you only want
    # to recompile the lib.
    SET(OSG_ENABLE_DOXY_DOC "OFF" CACHE BOOL
        "Build the doxygen documentation - this has to be enabled each time cmake is run!" FORCE)
ENDIF(OSG_ENABLE_DOXY_DOC)

##################
# osg2-config
##################

# osg2-config is created from multiple parts (parts 1 and 3 static, part 2
# is generated during the OSGCOLLECT pass.

# substitute variables in static parts
CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/CMake/osg2-config.part1.in"
               "${CMAKE_BINARY_DIR}/bin/osg2-config.part1.tmp")
CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/CMake/osg2-config.part3.in"
               "${CMAKE_BINARY_DIR}/bin/osg2-config.part3.tmp")

# read in all parts
FILE(READ "${CMAKE_BINARY_DIR}/bin/osg2-config.part1.tmp" OSG2_CONFIG_PART1_CONTENT)
FILE(READ "${CMAKE_BINARY_DIR}/bin/osg2-config.part2.tmp" OSG2_CONFIG_PART2_CONTENT)
FILE(READ "${CMAKE_BINARY_DIR}/bin/osg2-config.part3.tmp" OSG2_CONFIG_PART3_CONTENT)

# concatenate final file
FILE(WRITE  "${CMAKE_BINARY_DIR}/bin/osg2-config" "${OSG2_CONFIG_PART1_CONTENT}")
FILE(APPEND "${CMAKE_BINARY_DIR}/bin/osg2-config" "${OSG2_CONFIG_PART2_CONTENT}")
FILE(APPEND "${CMAKE_BINARY_DIR}/bin/osg2-config" "${OSG2_CONFIG_PART3_CONTENT}")

FILE(REMOVE  "${CMAKE_BINARY_DIR}/bin/osg2-config.part1.tmp")
FILE(REMOVE  "${CMAKE_BINARY_DIR}/bin/osg2-config.part2.tmp")
FILE(REMOVE  "${CMAKE_BINARY_DIR}/bin/osg2-config.part3.tmp")

INSTALL(PROGRAMS "${CMAKE_BINARY_DIR}/bin/osg2-config"
        DESTINATION bin)
