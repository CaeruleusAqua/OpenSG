/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class @!Classname!@!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILE@!CLASSNAME!@INST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>
#include "boost/bind.hpp"

#include <@!HeaderPrefix!@OSGConfig.h>

@@AdditionalIncludes@@

@@BeginFieldLoop@@
    @@if field.hasDefaultHeader
#include @!field.DefaultHeader:30!@   // @!field.Name!@ default header
    @@endif // field.hasDefaultHeader
@@EndFieldLoop@@

@@BeginFieldLoop@@
    @@if field.isPtrField
        @@if field.needClassInclude
#include <@!field.ClassInclude!@> // @!field.Name!@ Class
        @@endif // field.isPtrField
    @@endif // field.needClassInclude
@@EndFieldLoop@@

#include "OSG@!Classname!@Base.h"
#include "OSG@!Classname!@.h"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::@!Classname!@
    @!Description!@
 */

@@if hasFields
/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

    @@if isDecorator
/*! \var @!Parent!@Ptr @!Classname!@Base::_sfDecoratee
    The object being decorated
*/
    @@else // isDecorator
        @@BeginFieldLoop@@
/*! \var @!field.Type:15!@ @!Classname!@Base::_@!field.VarName!@
    @!field.Description!@
*/

        @@EndFieldLoop@@
    @@endif // isDecorator

void @!Classname!@Base::classDescInserter(TypeObject &oType)
{
    @@if hasFields
    FieldDescriptionBase *pDesc = NULL;

    @@endif // hasFields
    @@if isDecorator
    pDesc = new SF@!Parent!@Ptr::Description(
        SF@!Parent!@Ptr::getClassType(),
        "decoratee",
        "undocumented decoratee",
        DecorateeFieldId, DecorateeFieldMask,
        true,
        @!DecorateeFieldFlags!@,
        static_cast     <FieldEditMethodSig>(&@!Classname!@Base::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&@!Classname!@Base::getSFDecoratee));

    oType.addInitialDesc(pDesc);
    @@else // isDecorator
        @@BeginFieldLoop@@

    pDesc = new @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps!@::Description(
        @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps!@::getClassType(),
        "@!field.DescName!@",
        @!field.SafeDescription!@,
        @!field.Name!@FieldId, @!field.Name!@FieldMask,
        @!field.Visibility!@,
        @!field.Flags!@,
        reinterpret_cast<FieldEditMethodSig>(&@!Classname!@Base::editHandle@!field.Name!@),
        reinterpret_cast<FieldGetMethodSig >(&@!Classname!@Base::getHandle@!field.Name!@));

    oType.addInitialDesc(pDesc);
        @@EndFieldLoop@@
    @@endif // isDecorator
}

@@endif // hasFields

@!Classname!@Base::TypeObject @!Classname!@Base::_type(
    @!Classname!@Base::getClassname(),
    Inherited::getClassname(),
    "@!Group!@",
    @!Namespace!@,
@@if isAbstract
    NULL,
@@else // isAbstract
    (ProtoBundleCreateF) &@!Classname!@Base::createEmpty,
@@endif // isAbstract
    @!Classname!@::initMethod,
@@if hasFields
    (InitalInsertDescFunc) &@!Classname!@Base::classDescInserter,
@@else // hasFields
    NULL,
@@endif // hasFields
    false,
    @!FieldsUnmarkedOnCreate!@,
    @!Fcdxml!@,
    @!SafeDescription!@
    );

/*------------------------------ get -----------------------------------*/

FieldBundleType &@!Classname!@Base::getType(void)
{
    return _type;
}

const FieldBundleType &@!Classname!@Base::getType(void) const
{
    return _type;
}

UInt32 @!Classname!@Base::getContainerSize(void) const
{
    return sizeof(@!Classname!@);
}

/*------------------------- decorator get ------------------------------*/

@@if isDecorator
const SF@!Parent!@Ptr *@!Classname!@Base::getSFDecoratee(void) const
{
    return &_sfDecoratee;
}

    @@BeginFieldLoop@@
        @@if field.isPtrField
//! Get the @!Classname!@::_@!field.VarName!@ field.
const @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps!@ *@!Classname!@Base::get@!field.CARD!@@!field.Name!@(void) const
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->get@!field.CARD!@@!field.Name!@();
    }
    else
    {
        return NULL;
    }
}
        @@else // field.isPtrField
@!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps!@ *@!Classname!@Base::edit@!field.CARD!@@!field.Name!@(void)
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->edit@!field.CARD!@@!field.Name!@();
    }
    else
    {
        return NULL;
    }
}

const @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps!@ *@!Classname!@Base::get@!field.CARD!@@!field.Name!@(void) const
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->get@!field.CARD!@@!field.Name!@();
    }
    else
    {
        return NULL;
    }
}
            @@if CompatOneSix
#ifdef OSG_1_GET_COMPAT
@!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps:17!@ *@!Classname!@Base::get@!field.CARD!@@!field.Name:15!@(void)
{
    return this->edit@!field.CARD!@@!field.Name:15!@();
}
#endif
            @@endif // CompatOneSix
        @@endif // field.isPtrField

    @@EndFieldLoop@@
@@endif // isDecorator

@@if !isDecorator
    @@BeginFieldLoop@@
        @@if field.isPtrField
//! Get the @!Classname!@::_@!field.VarName!@ field.
const @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps!@ *@!Classname!@Base::get@!field.CARD!@@!field.Name!@(void) const
{
    return &_@!field.VarName!@;
}
        @@else // field.isPtrField
@!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps!@ *@!Classname!@Base::edit@!field.CARD!@@!field.Name!@(void)
{
            @@if field.isMField
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);
            @@else // field.isMField
    editSField(@!field.Name!@FieldMask);
            @@endif // field.isMField

    return &_@!field.VarName!@;
}

const @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps!@ *@!Classname!@Base::get@!field.CARD!@@!field.Name!@(void) const
{
    return &_@!field.VarName!@;
}

            @@if CompatOneSix
#ifdef OSG_1_GET_COMPAT
@!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps:17!@ *@!Classname!@Base::get@!field.CARD!@@!field.Name:15!@(void)
{
    return this->edit@!field.CARD!@@!field.Name:15!@();
}
#endif
            @@endif // CompatOneSix
        @@endif // field.isPtrField

    @@EndFieldLoop@@
@@endif // !isDecorator


@@BeginMFFieldLoop@@
    @@if field.isPtrField
        @@if field.writePushToField
void @!Classname!@Base::@!field.PushToField!@(@!field.Type!@ConstArg value)
{
            @@if field.checkNilPtr
    if(value == NullFC)
        return;

            @@endif // field.checkNilPtr
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    addRef(value);

    _mf@!field.Name!@.push_back(value);
            @@if !field.checkNilPtr

    if(value == NullFC)
        return;
            @@endif // field.checkNilPtr
            @@if field.linkMParent

    @!Classname!@Ptr thisP = Inherited::constructPtr<@!Classname!@>(
        static_cast<@!Classname!@ *>(this));

    value->addParent(thisP, @!field.Name!@FieldMask);
            @@endif // field.linkMParent
            @@if field.linkSParent

    @!Classname!@Ptr thisP = Inherited::constructPtr<@!Classname!@>(
        static_cast<@!Classname!@ *>(this));

    value->setParent(thisP, @!field.Name!@FieldMask);
            @@endif // field.linkSParent
}

        @@endif // field.writePushToField
        @@if field.writeInsertIntoMField
void @!Classname!@Base::@!field.InsertIntoMField!@(UInt32                uiIndex,
                                                   @!field.Type!@ConstArg value   )
{
            @@if field.checkNilPtr
    if(value == NullFC)
        return;

            @@endif // field.checkNilPtr
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    MF@!field.TypeCaps!@::iterator fieldIt = _mf@!field.Name!@.begin();

    addRef(value);

    fieldIt += uiIndex;

    _mf@!field.Name!@.insert(fieldIt, value);
            @@if !field.checkNilPtr

    if(value == NullFC)
        return;
            @@endif // !field.checkNilPtr
            @@if field.linkMParent

    @!Classname!@Ptr thisP = Inherited::constructPtr<@!Classname!@>(
        static_cast<@!Classname!@ *>(this));

    value->addParent(thisP, @!field.Name!@FieldMask);
            @@endif // field.linkMParent
            @@if field.linkSParent

    @!Classname!@Ptr thisP = Inherited::constructPtr<@!Classname!@>(
        static_cast<@!Classname!@ *>(this));

    value->setParent(thisP, @!field.Name!@FieldMask);
            @@endif // field.linkSParent
}

        @@endif // field.writeInsertIntoMField
        @@if field.writeReplaceInMFieldIndex
void @!Classname!@Base::@!field.ReplaceInMFieldIndex!@(UInt32                uiIndex,
                                                       @!field.Type!@ConstArg value   )
{
            @@if field.checkNilPtr
    if(value == NullFC)
        return;

            @@endif // field.checkNilPtr
    if(uiIndex >= _mf@!field.Name!@.size())
        return;

    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    addRef(value);
            @@if field.linkMParent

    @!Classname!@Ptr thisP = Inherited::constructPtr<@!Classname!@>(
        static_cast<@!Classname!@ *>(this));

    if(_mf@!field.Name!@[uiIndex] != NullFC)
    {
        _mf@!field.Name!@[uiIndex]->subParent(thisP);
    }
            @@endif // field.linkMParent
            @@if field.linkSParent

    @!Classname!@Ptr thisP = Inherited::constructPtr<@!Classname!@>(
        static_cast<@!Classname!@ *>(this));

    if(_mf@!field.Name!@[uiIndex] != NullFC)
    {
        _mf@!field.Name!@[uiIndex]->setParent(thisP, @!field.Name!@FieldMask);
    }
            @@endif // field.linkSParent

    subRef(_mf@!field.Name!@[uiIndex]);

    _mf@!field.Name!@[uiIndex] = value;
            @@if !field.checkNilPtr

    if(value == NullFC)
        return;
            @@endif // !field.checkNilPtr
            @@if field.linkMParent

    value->addParent(thisP, @!field.Name!@FieldMask);
            @@endif // field.linkMParent
            @@if field.linkSParent

    value->setParent(thisP, @!field.Name!@FieldMask);
            @@endif // field.linkSParent
}

        @@endif // field.writeReplaceInMFieldIndex
        @@if field.writeReplaceInMFieldObject
void @!Classname!@Base::@!field.ReplaceInMFieldObject!@(@!field.Type!@ConstArg pOldElem,
                                                        @!field.Type!@ConstArg pNewElem)
{
            @@if field.checkNilPtr
    if(pNewElem == NullFC)
        return;

            @@endif // field.checkNilPtr
    Int32  elemIdx = _mf@!field.Name!@.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

        MF@!field.TypeCaps!@::iterator fieldIt = _mf@!field.Name!@.begin();

        fieldIt += elemIdx;

            @@if field.linkMParent
        @!Classname!@Ptr thisP = Inherited::constructPtr<@!Classname!@>(
            static_cast<@!Classname!@ *>(this));

        if(pOldElem != NullFC)
        {
            pOldElem->subParent(thisP);
        }

                @@if !field.checkNilPtr
        if(pNewElem != NullFC)
        {
            pNewElem->addParent(thisP, @!field.Name!@FieldMask);
        }
                @@else // !field.checkNilPtr
        pNewElem->addParent(thisP, @!field.Name!@FieldMask);
                @@endif

            @@endif // field.linkMParent
            @@if field.linkSParent
        @!Classname!@Ptr thisP = Inherited::constructPtr<@!Classname!@>(
            static_cast<@!Classname!@ *>(this));

        if(pOldElem != NullFC)
        {
            pOldElem->setParent(NullFC, @!field.Name!@FieldMask);
        }

        if(pNewElem != NullFC)
        {
            pNewElem->setParent(thisP, @!field.Name!@FieldMask);
        }

            @@endif // field.linkSParent
        addRef(pNewElem);
        subRef(pOldElem);

        (*fieldIt) = pNewElem;
    }
}

        @@endif // field.writeReplaceInMFieldObject
        @@if field.writeRemoveFromMFieldIndex
void @!Classname!@Base::@!field.RemoveFromMFieldIndex!@(UInt32 uiIndex)
{
    if(uiIndex < _mf@!field.Name!@.size())
    {
        editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

        MF@!field.TypeCaps!@::iterator fieldIt = _mf@!field.Name!@.begin();

        fieldIt += uiIndex;

            @@if field.linkMParent
        @!Classname!@Ptr thisP = Inherited::constructPtr<@!Classname!@>(
            static_cast<@!Classname!@ *>(this));

        if(*fieldIt != NullFC)
        {
            (*fieldIt)->subParent(thisP);
        }

            @@endif // field.linkMParent
            @@if field.linkSParent
        if(*fieldIt != NullFC)
        {
            (*fieldIt)->setParent(NullFC, @!field.Name!@FieldMask);
        }

            @@endif // field.linkSParent
        subRef(*fieldIt);

            @@if field.isRemoveToSet
        *fieldIt = @!field.RemoveTo!@;
            @@else // field.isRemoveToSet
        _mf@!field.Name!@.erase(fieldIt);
            @@endif // field.isRemoveToSet
    }
}

        @@endif // field.writeRemoveFromMFieldIndex
        @@if field.writeRemoveFromMFieldObject
void @!Classname!@Base::@!field.RemoveFromMFieldObject!@(@!field.Type!@ConstArg value)
{
    Int32 iElemIdx = _mf@!field.Name!@.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

        MF@!field.TypeCaps!@::iterator fieldIt = _mf@!field.Name!@.begin();

        fieldIt += iElemIdx;

            @@if field.linkMParent
        @!Classname!@Ptr thisP = Inherited::constructPtr<@!Classname!@>(
            static_cast<@!Classname!@ *>(this));

        if(*fieldIt != NullFC)
        {
            (*fieldIt)->subParent(thisP);
        }

            @@endif // field.linkMParent
            @@if field.linkSParent
        if(*fieldIt != NullFC)
        {
            (*fieldIt)->setParent(NullFC, @!field.Name!@FieldMask);
        }

            @@endif // field.linkSParent
        subRef(*fieldIt);

            @@if field.isRemoveToSet
        *fieldIt = @!field.RemoveTo!@;
            @@else // field.isRemoveToSet
        _mf@!field.Name!@.erase(fieldIt);
            @@endif // field.isRemoveToSet
    }
}
        @@endif // field.writeRemoveFromMFieldObject
        @@if field.writeClearField
void @!Classname!@Base::@!field.ClearField!@(void)
{
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    MF@!field.TypeCaps!@::iterator       fieldIt  = _mf@!field.Name!@.begin();
    MF@!field.TypeCaps!@::const_iterator fieldEnd = _mf@!field.Name!@.end  ();

    while(fieldIt != fieldEnd)
    {
            @@if field.linkMParent
        @!Classname!@Ptr thisP = Inherited::constructPtr<@!Classname!@>(
            static_cast<@!Classname!@ *>(this));

        if(*fieldIt != NullFC)
        {
            (*fieldIt)->subParent(thisP);
        }

            @@endif // field.linkMParent
            @@if field.linkSParent
        if(*fieldIt != NullFC)
        {
            (*fieldIt)->setParent(NullFC, @!field.Name!@FieldMask);
        }

            @@endif // field.linkSParent
        subRef(*fieldIt);

            @@if field.isRemoveToSet
        *fieldIt = @!field.RemoveTo!@;

            @@endif // field.isRemoveToSet
        ++fieldIt;
    }
            @@if field.doClearMField

    _mf@!field.Name!@.clear();
            @@endif // field.doClearMField
}
        @@endif // field.writeClearField

    @@else // field.isPtrField
/*********************************** Non-ptr code ********************************/
        @@if field.writePushToField
void @!Classname!@Base::@!field.PushToField!@(const @!field.Type!@& value)
{
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);
    _mf@!field.Name!@.push_back(value);
}

        @@endif // field.writePushToField
        @@if field.writeInsertIntoMField
void @!Classname!@Base::@!field.InsertIntoMField!@(UInt32                uiIndex,
                                                   const @!field.Type!@& value   )
{
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    MF@!field.TypeCaps!@::iterator fieldIt = _mf@!field.Name!@.begin();

    fieldIt += uiIndex;

    _mf@!field.Name!@.insert(fieldIt, value);
}

        @@endif // field.writeInsertIntoMField
        @@if field.writeReplaceInMFieldIndex
void @!Classname!@Base::@!field.ReplaceInMFieldIndex!@(UInt32                uiIndex,
                                                       const @!field.Type!@& value   )
{
    if(uiIndex >= _mf@!field.Name!@.size())
        return;

    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    _mf@!field.Name!@[uiIndex] = value;
}

        @@endif // field.writeReplaceInMFieldIndex
        @@if field.writeReplaceInMFieldObject
void @!Classname!@Base::@!field.ReplaceInMFieldObject!@(const @!field.Type!@& pOldElem,
                                                        const @!field.Type!@& pNewElem)
{
    Int32  elemIdx = _mf@!field.Name!@.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

        MF@!field.TypeCaps!@::iterator fieldIt = _mf@!field.Name!@.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

        @@endif // field.writeReplaceInMFieldObject
        @@if field.writeRemoveFromMFieldIndex
void @!Classname!@Base::@!field.RemoveFromMFieldIndex!@(UInt32 uiIndex)
{
    if(uiIndex < _mf@!field.Name!@.size())
    {
        editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

        MF@!field.TypeCaps!@::iterator fieldIt = _mf@!field.Name!@.begin();

        fieldIt += uiIndex;
        _mf@!field.Name!@.erase(fieldIt);
    }
}

        @@endif // field.writeRemoveFromMFieldIndex
        @@if field.writeRemoveFromMFieldObject
void @!Classname!@Base::@!field.RemoveFromMFieldObject!@(const @!field.Type!@& value)
{
    Int32 iElemIdx = _mf@!field.Name!@.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

        MF@!field.TypeCaps!@::iterator fieldIt = _mf@!field.Name!@.begin();

        fieldIt += iElemIdx;

        _mf@!field.Name!@.erase(fieldIt);
    }
}

        @@endif // field.writeRemoveFromMFieldObject
        @@if field.writeClearField
void @!Classname!@Base::@!field.ClearField!@(void)
{
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    _mf@!field.Name!@.clear();
}
        @@endif // field.writeClearField
    @@endif // field.isPtrField
@@EndMFFieldLoop@@


/*------------------------------ access -----------------------------------*/

UInt32 @!Classname!@Base::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

@@if isDecorator
    if(FieldBits::NoField != (DecorateeFieldMask & whichField))
    {
        returnValue += _sfDecoratee.getBinSize();
    }
@@else // isDecorator
    @@BeginFieldLoop@@
    if(FieldBits::NoField != (@!field.Name!@FieldMask & whichField))
    {
        returnValue += _@!field.VarName!@.getBinSize();
    }
    @@EndFieldLoop@@
@@endif // isDecorator

    return returnValue;
}

void @!Classname!@Base::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

@@if isDecorator
    if(FieldBits::NoField != (DecorateeFieldMask & whichField))
    {
        _sfDecoratee.copyToBin(pMem);
    }
@@else // isDecorator
    @@BeginFieldLoop@@
    if(FieldBits::NoField != (@!field.Name!@FieldMask & whichField))
    {
        _@!field.VarName!@.copyToBin(pMem);
    }
    @@EndFieldLoop@@
@@endif // isDecorator
}

void @!Classname!@Base::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

@@if isDecorator
    if(FieldBits::NoField != (DecorateeFieldMask & whichField))
    {
        _sfDecoratee.copyFromBin(pMem);
    }
@@else // isDecorator
    @@BeginFieldLoop@@
    if(FieldBits::NoField != (@!field.Name!@FieldMask & whichField))
    {
        _@!field.VarName!@.copyFromBin(pMem);
    }
    @@EndFieldLoop@@
@@endif // isDecorator
}

@@if !isAbstract
//! create an empty new instance of the class, do not copy the prototype
@!Classname!@P @!Classname!@Base::createEmpty(void)
{
    @!Classname!@P returnValue;

    newPtr<@!Classname!@>(returnValue);

    return returnValue;
}

FieldBundleP @!Classname!@Base::shallowCopy(void) const
{
    @!Classname!@P returnValue;

    newPtr(returnValue, dynamic_cast<const @!Classname!@ *>(this));

    return returnValue;
}

@@endif // !isAbstract


/*------------------------- constructors ----------------------------------*/

@!Classname!@Base::@!Classname!@Base(void) :
@@if !hasFields
    Inherited()
@@else // !hasFields
    Inherited(),
    @@if isDecorator
    _sfDecoratee()
    @@else // isDecorator
        @@BeginFieldLoop@@
    _@!field.VarName:25!@(@!field.TypedDefault!@)@!field.Separator!@
        @@EndFieldLoop@@
    @@endif // isDecorator
@@endif // !hasFields
{
}

@!Classname!@Base::@!Classname!@Base(const @!Classname!@Base &source) :
@@if !hasFields
    Inherited(source)
@@else // !hasFields
    Inherited(source),
    @@if isDecorator
    _sfDecoratee(source._sfDecoratee)
    @@else // isDecorator
        @@BeginFieldLoop@@
            @@if field.isPtrField
    _@!field.VarName:25!@()@!field.Separator!@
            @@else // field.isPtrField
    _@!field.VarName:25!@(source._@!field.VarName:25!@)@!field.Separator!@
            @@endif // field.isPtrField
        @@EndFieldLoop@@
    @@endif // isDecorator
@@endif // !hasFields
{
}

/*-------------------------- destructors ----------------------------------*/

@!Classname!@Base::~@!Classname!@Base(void)
{
}

@@if hasPtrFields
void @!Classname!@Base::onCreate(const @!Classname!@ *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
    @@BeginFieldLoop@@
        @@if field.isPtrField
            @@if field.isMField

        MF@!field.TypeCaps!@::const_iterator @!field.Name!@It  =
            source->_mf@!field.Name!@.begin();
        MF@!field.TypeCaps!@::const_iterator @!field.Name!@End =
            source->_mf@!field.Name!@.end  ();

        while(@!field.Name!@It != @!field.Name!@End)
        {
            this->@!field.PushToField!@(*@!field.Name!@It);

            ++@!field.Name!@It;
        }
            @@else // field.isMField

        this->set@!field.Name!@(source->get@!field.Name!@());
            @@endif // field.isMField
        @@endif // field.isPtrField
    @@EndFieldLoop@@
    }
}
@@endif // hasPtrFields

void @!Classname!@Base::resolveLinks(void)
{
    Inherited::resolveLinks();
@@BeginSFFieldLoop@@
    @@if field.isPtrField

    static_cast<@!Classname!@ *>(this)->set@!field.Name!@(NullFC);
    @@endif // field.isPtrField
@@EndSFFieldLoop@@
@@BeginMFFieldLoop@@
    @@if field.isPtrField

    static_cast<@!Classname!@ *>(this)->@!field.ClearField!@();
    @@endif // field.isPtrField
@@EndMFFieldLoop@@
}

@@BeginFieldLoop@@
@!field.CARD!@@!field.TypeCaps!@::GetHandlePtr @!Classname!@Base::getHandle@!field.Name:15!@ (void)
{
    @!field.CARD!@@!field.TypeCaps!@::GetHandlePtr returnValue(
        new  @!field.CARD!@@!field.TypeCaps!@::GetHandle(
             &_@!field.VarName!@, 
             this->getType().getFieldDesc(@!field.Name!@FieldId)));

    return returnValue;
}

@!field.CARD!@@!field.TypeCaps!@::EditHandlePtr @!Classname!@Base::editHandle@!field.Name:15!@(void)
{
@@if !field.noAccess
    @!field.CARD!@@!field.TypeCaps!@::EditHandlePtr returnValue(
        new  @!field.CARD!@@!field.TypeCaps!@::EditHandle(
             &_@!field.VarName!@, 
             this->getType().getFieldDesc(@!field.Name!@FieldId)));
@@if field.isMField
  @@if field.isPtrField

    returnValue->setAddMethod(boost::bind(&@!Classname!@::@!field.PushToField!@, this, _1));
  @@endif

    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);
@@else // field.isMField
  @@if field.isPtrField

    returnValue->setSetMethod(boost::bind(&@!Classname!@::set@!field.Name!@, this, _1));
  @@endif

    editSField(@!field.Name!@FieldMask);
@@endif // field.isMField
@@else
    @!field.CARD!@@!field.TypeCaps!@::EditHandlePtr returnValue;
@@endif

    return returnValue;
}

@@EndFieldLoop@@

@@if isDecoratable
/*------------------------------ get -----------------------------------*/

    @@if !isDecorator
        @@BeginSFFieldLoop@@
            @@if field.isPtrField

//! Get the value of the @!Classname!@::_@!field.VarName!@ field.
@!field.Type!@Const @!Classname!@Base::get@!field.Name!@(void) const
{
    return _@!field.VarName!@.getValue();
}

//! Set the value of the @!Classname!@::_@!field.VarName!@ field.
void @!Classname!@Base::set@!field.Name!@(@!field.Type!@ConstArg value)
{
    editSField(@!field.Name!@FieldMask);

    setRefd(_@!field.VarName!@.getValue(), value);
}
            @@else // field.isPtrField
//! Get the value of the @!Classname!@::_@!field.VarName!@ field.

@!field.Type!@ &@!Classname!@Base::edit@!field.Name!@(void)
{
    editSField(@!field.Name!@FieldMask);

    return _@!field.VarName!@.getValue();
}

//! Get the value of the @!Classname!@::_@!field.VarName!@ field.
const @!field.Type!@ &@!Classname!@Base::get@!field.Name!@(void) const
{
    return _@!field.VarName!@.getValue();
}

                @@if CompatOneSix
#ifdef OSG_1_GET_COMPAT
@!field.Type:19!@ &@!Classname!@Base::get@!field.Name:15!@(void)
{
    return this->edit@!field.Name:15!@();
}
#endif
                @@endif // CompatOneSix

//! Set the value of the @!Classname!@::_@!field.VarName!@ field.
void @!Classname!@Base::set@!field.Name!@(const @!field.Type!@ &value)
{
    editSField(@!field.Name!@FieldMask);

    _@!field.VarName!@.setValue(value);
}
            @@endif // field.isPtrField
        @@EndSFFieldLoop@@

        @@BeginMFFieldLoop@@
//! Get the value of the \a index element the @!Classname!@::_@!field.VarName!@ field.
            @@if field.isPtrField
@!field.Type!@Const @!Classname!@Base::get@!field.Name!@(const UInt32 index) const
            @@else // field.isPtrField
const @!field.Type!@ &@!Classname!@Base::get@!field.Name!@(const UInt32 index) const
            @@endif // field.isPtrField
{
    return _@!field.VarName!@[index];
}
            @@if !field.isPtrField

@!field.Type!@ &@!Classname!@Base::edit@!field.Name!@(const UInt32 index)
{
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    return _@!field.VarName!@[index];
}

//! Get the @!Classname!@::_@!field.VarName!@ field.
@!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps!@ &@!Classname!@Base::edit@!field.Name!@(void)
{
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    return _@!field.VarName!@;
}

                @@if CompatOneSix
#ifdef OSG_1_GET_COMPAT
@!field.Type:19!@ &@!Classname!@Base::get@!field.Name:15!@(const UInt32 index)
{
    return this->edit@!field.Name:15!@(index);
}

@!field.CARD!@@!field.TypeCaps:17!@ &@!Classname!@Base::get@!field.Name:15!@(void)
{
    return this->edit@!field.Name:15!@();
}

#endif
                @@endif // CompatOneSix
            @@endif // !field.isPtrField

//! Get the @!Classname!@::_@!field.VarName!@ field.
const @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps!@ &@!Classname!@Base::get@!field.Name!@(void) const
{
    return _@!field.VarName!@;
}

        @@EndMFFieldLoop@@
    @@else // !isDecorator
        @@BeginSFFieldLoop@@
            @@if field.isPtrField

//! Get the value of the @!Classname!@::_@!field.VarName!@ field.
@!field.Type!@Const @!Classname!@Base::get@!field.Name!@(void) const
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->get@!field.Name!@();
    }
    else
    {
        return Inherited::get@!field.Name!@();
    }
}

//! Set the value of the @!Classname!@::_@!field.VarName!@ field.
void @!Classname!@Base::set@!field.Name!@(@!field.Type!@ConstArg value)
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        getDecoratee()->set@!field.Name!@(value);
    }
    else
    {
//        Inherited::set@!field.Name!@(value);
    }
}
            @@else // field.isPtrField

//! Get the value of the @!Classname!@::_@!field.VarName!@ field.
@!field.Type!@ &@!Classname!@Base::edit@!field.Name!@(void)
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->edit@!field.Name!@();
    }
    else
    {
        return Inherited::edit@!field.Name!@();
    }
}

//! Get the value of the @!Classname!@::_@!field.VarName!@ field.
const @!field.Type!@ &@!Classname!@Base::get@!field.Name!@(void) const
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->get@!field.Name!@();
    }
    else
    {
        return Inherited::get@!field.Name!@();
    }
}

                @@if CompatOneSix
#ifdef OSG_1_GET_COMPAT
inline
@!field.Type:19!@ &@!Classname!@Base::get@!field.Name:15!@(void)
{
    return this->edit@!field.Name:15!@();
}
#endif
                @@endif // CompatOneSix

//! Set the value of the @!Classname!@::_@!field.VarName!@ field.
void @!Classname!@Base::set@!field.Name!@(const @!field.Type!@ &value)
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        getDecoratee()->set@!field.Name!@(value);
    }
    else
    {
//        Inherited::set@!field.Name!@(value);
    }
}
            @@endif // field.isPtrField
        @@EndSFFieldLoop@@

        @@BeginMFFieldLoop@@
//! Get the value of the \a index element the @!Classname!@::_@!field.VarName!@ field.
            @@if field.isPtrField
@!field.Type!@Const @!Classname!@Base::get@!field.Name!@(const UInt32 index) const
            @@else // field.isPtrField
const @!field.Type!@ &@!Classname!@Base::get@!field.Name!@(const UInt32 index) const
            @@endif // field.isPtrField
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->get@!field.Name!@(index);
    }
    else
    {
        return Inherited::get@!field.Name!@(index);
    }
}
            @@if !field.isPtrField

@!field.Type!@ &@!Classname!@Base::edit@!field.Name!@(const UInt32 index)
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->edit@!field.Name!@(index);
    }
    else
    {
        return Inherited::edit@!field.Name!@(index);
    }
}

//! Get the @!Classname!@::_@!field.VarName!@ field.
@!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps!@ &@!Classname!@Base::edit@!field.Name!@(void)
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->edit@!field.Name!@();
    }
    else
    {
        return Inherited::edit@!field.Name!@();
    }
}
            @@endif // !field.isPtrField

//! Get the @!Classname!@::_@!field.VarName!@ field.
const @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps!@ &@!Classname!@Base::get@!field.Name!@(void) const
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->get@!field.Name!@();
    }
    else
    {
        return Inherited::get@!field.Name!@();
    }
}

        @@EndMFFieldLoop@@
    @@endif // !isDecorator
@@endif // isDecoratable
@@if PointerField

OSG_END_NAMESPACE

    @@if SFPointerField
#include "@!HeaderPrefix!@OSGSFieldAdaptor.ins"
    @@endif // SFPointerField
    @@if MFPointerField
#include "@!HeaderPrefix!@OSGMFieldAdaptor.ins"
    @@endif // MFPointerField

OSG_BEGIN_NAMESPACE
@@endif // PointerField

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<@!Classname!@P>::_type("@!Classname!@P", "@!Parent!@P");
#endif

@@if PointerField
OSG_FIELDTRAITS_GETTYPE(@!Classname!@Ptr)

    @@if SFPointerField
OSG_FIELD_DLLEXPORT_DEF2(SFieldAdaptor, @!Classname!@Ptr, SFFieldContainerPtr);
    @@endif // SFPointerField
    @@if MFPointerField
OSG_FIELD_DLLEXPORT_DEF2(MFieldAdaptor, @!Classname!@Ptr, MFFieldContainerPtr);
    @@endif // MFPointerField
@@endif // PointerField


OSG_END_NAMESPACE
