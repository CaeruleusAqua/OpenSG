/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class @!Classname!@!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILE@!CLASSNAME!@INST

#include <stdlib.h>
#include <stdio.h>
#include <boost/assign/list_of.hpp>

#include <@!HeaderPrefix!@OSGConfig.h>

@@AdditionalIncludes@@

@@BeginFieldLoop@@
@@if field.hasDefaultHeader
#include @!field.DefaultHeader:30!@   // @!field.Name!@ default header
@@endif
@@EndFieldLoop@@

@@BeginFieldLoop@@
@@if field.isPtrField
@@if field.needClassInclude
#include <@!field.ClassInclude!@> // @!field.Name!@ Class
@@endif
@@endif
@@EndFieldLoop@@

#include "OSG@!Classname!@Base.h"
#include "OSG@!Classname!@.h"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::@!Classname!@
    @!Description!@
 */

@@if hasFields
/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

@@if isDecorator
/*! \var @!Parent!@Ptr @!Classname!@Base::_sfDecoratee
    The object being decorated
*/
@@else
@@BeginFieldLoop@@
/*! \var @!field.Type:15!@ @!Classname!@Base::_@!field.VarName!@
    @!field.Description!@
*/
@@EndFieldLoop@@
@@endif

void @!Classname!@Base::classDescInserter(TypeObject &oType)
{
@@if hasFields
    FieldDescriptionBase *pDesc = NULL;

@@endif
@@if isDecorator
    pDesc = new SF@!Parent!@Ptr::Description(
        SF@!Parent!@Ptr::getClassType(),
        "decoratee",
        "undocumented decoratee",
        DecorateeFieldId, DecorateeFieldMask,
        true,
        @!DecorateeFieldFlags!@,
        static_cast     <FieldEditMethodSig>(&@!Classname!@Base::invalidEditField),
        reinterpret_cast<FieldGetMethodSig >(&@!Classname!@Base::getSFDecoratee));

    oType.addInitialDesc(pDesc);
@@else
@@BeginFieldLoop@@
@@if CompatOneSix
@@if !field.isPtrField

#ifdef OSG_1_COMPAT
    typedef const @!field.CARD!@@!field.TypeCaps!@ *(@!Classname!@Base::*Get@!field.CARD!@@!field.Name!@F)(void) const;

    Get@!field.CARD!@@!field.Name!@F Get@!field.CARD!@@!field.Name!@ = &@!Classname!@Base::get@!field.CARD!@@!field.Name!@;
#endif
@@endif
@@endif

    pDesc = new @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps!@::Description(
        @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps!@::getClassType(),
        "@!field.DescName!@",
        @!field.SafeDescription!@,
        @!field.Name!@FieldId, @!field.Name!@FieldMask,
        @!field.Visibility!@,
        @!field.Flags!@,
@@if field.isPtrField
        static_cast     <FieldEditMethodSig>(&@!Classname!@Base::invalidEditField),
@@else
        reinterpret_cast<FieldEditMethodSig>(&@!Classname!@Base::edit@!field.CARD!@@!field.Name!@),
@@endif
@@if !field.isPtrField
@@if CompatOneSix
#ifdef OSG_1_COMPAT
        reinterpret_cast<FieldGetMethodSig >(Get@!field.CARD!@@!field.Name!@));
#else
        reinterpret_cast<FieldGetMethodSig >(&@!Classname!@Base::get@!field.CARD!@@!field.Name!@));
#endif
@@else
        reinterpret_cast<FieldGetMethodSig >(&@!Classname!@Base::get@!field.CARD!@@!field.Name!@));
@@endif
@@else
        reinterpret_cast<FieldGetMethodSig >(&@!Classname!@Base::get@!field.CARD!@@!field.Name!@));
@@endif

    oType.addInitialDesc(pDesc);
@@EndFieldLoop@@
@@endif
}

@@endif

@!Classname!@Base::TypeObject @!Classname!@Base::_type(true,
    @!Classname!@Base::getClassname(),
    Inherited::getClassname(),
    "@!Group!@",
    @!Namespace!@,
@@if isAbstract
    NULL,
@@else
    (PrototypeCreateF) &@!Classname!@Base::createEmpty,
@@endif
    @!Classname!@::initMethod,
@@if hasFields
    (InitalInsertDescFunc) &@!Classname!@Base::classDescInserter,
@@else
    NULL,
@@endif
    false,
    @!Fcdxml!@,
    @!SafeDescription!@
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &@!Classname!@Base::getType(void)
{
    return _type;
}

const FieldContainerType &@!Classname!@Base::getType(void) const
{
    return _type;
}

UInt32 @!Classname!@Base::getContainerSize(void) const
{
    return sizeof(@!Classname!@);
}

/*------------------------- decorator get ------------------------------*/

@@if isDecorator
const SF@!Parent!@Ptr *@!Classname!@Base::getSFDecoratee(void) const
{
    return &_sfDecoratee;
}

@@BeginFieldLoop@@
@@if field.isPtrField
//! Get the @!Classname!@::_@!field.VarName!@ field.
const @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps!@ *@!Classname!@Base::get@!field.CARD!@@!field.Name!@(void) const
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->get@!field.CARD!@@!field.Name!@();
    }
    else
    {
        return NULL;
    }
}
@@else
@!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps!@ *@!Classname!@Base::edit@!field.CARD!@@!field.Name!@(void)
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->edit@!field.CARD!@@!field.Name!@();
    }
    else
    {
        return NULL;
    }
}

const @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps!@ *@!Classname!@Base::get@!field.CARD!@@!field.Name!@(void) const
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->get@!field.CARD!@@!field.Name!@();
    }
    else
    {
        return NULL;
    }
}
@@if CompatOneSix
#ifdef OSG_1_COMPAT
@!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps:17!@ *@!Classname!@Base::get@!field.CARD!@@!field.Name:15!@(void)
{
    return this->edit@!field.CARD!@@!field.Name:15!@();
}
#endif
@@endif
@@endif

@@EndFieldLoop@@
@@endif

@@if !isDecorator
@@BeginFieldLoop@@
@@if field.isPtrField
//! Get the @!Classname!@::_@!field.VarName!@ field.
const @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps!@ *@!Classname!@Base::get@!field.CARD!@@!field.Name!@(void) const
{
    return &_@!field.VarName!@;
}
@@else
@!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps!@ *@!Classname!@Base::edit@!field.CARD!@@!field.Name!@(void)
{
@@if field.isMField
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);
@@else
    editSField(@!field.Name!@FieldMask);
@@endif

    return &_@!field.VarName!@;
}

const @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps!@ *@!Classname!@Base::get@!field.CARD!@@!field.Name!@(void) const
{
    return &_@!field.VarName!@;
}

@@if CompatOneSix
#ifdef OSG_1_COMPAT
@!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps:17!@ *@!Classname!@Base::get@!field.CARD!@@!field.Name:15!@(void)
{
    return this->edit@!field.CARD!@@!field.Name:15!@();
}
#endif
@@endif
@@endif

@@EndFieldLoop@@
@@endif

@@if hasPtrFields
void @!Classname!@Base::pushToField(      FieldContainerPtrConstArg pNewElement,
                                    const UInt32                    uiFieldId  )
{
    Inherited::pushToField(pNewElement, uiFieldId);

@@BeginFieldLoop@@
@@if field.isPtrField
@@if field.isSField
    if(uiFieldId == @!field.Name!@FieldId)
    {
        static_cast<@!Classname!@ *>(this)->set@!field.Name!@(
            cast_dynamic<@!field.Type!@>(pNewElement));
    }
@@else
    if(uiFieldId == @!field.Name!@FieldId)
    {
        static_cast<@!Classname!@ *>(this)->@!field.PushToField!@(
            cast_dynamic<@!field.Type!@>(pNewElement));
    }
@@endif
@@endif
@@EndFieldLoop@@
}

void @!Classname!@Base::insertIntoMField(const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::insertIntoMField(uiIndex, pNewElement, uiFieldId);

@@BeginMFFieldLoop@@
@@if field.isPtrField
    if(uiFieldId == @!field.Name!@FieldId)
    {
        static_cast<@!Classname!@ *>(this)->@!field.InsertIntoMField!@(
            uiIndex,
            cast_dynamic<@!field.Type!@>(pNewElement));
    }
@@endif
@@EndMFFieldLoop@@
}

void @!Classname!@Base::replaceInMField (const UInt32                    uiIndex,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::replaceInMField(uiIndex, pNewElement, uiFieldId);

@@BeginMFFieldLoop@@
@@if field.isPtrField
    if(uiFieldId == @!field.Name!@FieldId)
    {
        static_cast<@!Classname!@ *>(this)->@!field.ReplaceInMFieldIndex!@(
            uiIndex,
            cast_dynamic<@!field.Type!@>(pNewElement));
    }
@@endif
@@EndMFFieldLoop@@
}

void @!Classname!@Base::replaceInMField (      FieldContainerPtrConstArg pOldElement,
                                               FieldContainerPtrConstArg pNewElement,
                                         const UInt32                    uiFieldId  )
{
    Inherited::replaceInMField(pOldElement, pNewElement, uiFieldId);

@@BeginMFFieldLoop@@
@@if field.isPtrField
    if(uiFieldId == @!field.Name!@FieldId)
    {
        static_cast<@!Classname!@ *>(this)->@!field.ReplaceInMFieldObject!@(
            cast_dynamic<@!field.Type!@>(pOldElement),
            cast_dynamic<@!field.Type!@>(pNewElement));
    }
@@endif
@@EndMFFieldLoop@@
}

void @!Classname!@Base::removeFromMField(const UInt32 uiIndex,
                                         const UInt32 uiFieldId)
{
    Inherited::removeFromMField(uiIndex, uiFieldId);

@@BeginMFFieldLoop@@
@@if field.isPtrField
    if(uiFieldId == @!field.Name!@FieldId)
    {
        static_cast<@!Classname!@ *>(this)->@!field.RemoveFromMFieldIndex!@(
            uiIndex);
    }
@@endif
@@EndMFFieldLoop@@
}

void @!Classname!@Base::removeFromMField(      FieldContainerPtrConstArg pElement,
                                         const UInt32                    uiFieldId)
{
    Inherited::removeFromMField(pElement, uiFieldId);

@@BeginMFFieldLoop@@
@@if field.isPtrField
    if(uiFieldId == @!field.Name!@FieldId)
    {
        static_cast<@!Classname!@ *>(this)->@!field.RemoveFromMFieldObject!@(
            cast_dynamic<@!field.Type!@>(pElement));
    }
@@endif
@@EndMFFieldLoop@@
}

void @!Classname!@Base::clearField(const UInt32 uiFieldId)
{
    Inherited::clearField(uiFieldId);

@@BeginFieldLoop@@
@@if field.isPtrField
@@if field.isSField
    if(uiFieldId == @!field.Name!@FieldId)
    {
        static_cast<@!Classname!@ *>(this)->set@!field.Name!@(NullFC);
    }
@@else
    if(uiFieldId == @!field.Name!@FieldId)
    {
        static_cast<@!Classname!@ *>(this)->@!field.ClearField!@();
    }
@@endif
@@endif
@@EndFieldLoop@@
}

@@BeginMFFieldLoop@@
@@if field.isPtrField
@@if field.writePushToField
void @!Classname!@Base::@!field.PushToField!@(@!field.Type!@ConstArg value)
{
@@if field.checkNilPtr
    if(value == NullFC)
        return;

@@endif
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    addRef(value);

    _mf@!field.Name!@.push_back(value);
@@if !field.checkNilPtr

    if(value == NullFC)
        return;
@@endif
@@if field.linkMParent

    @!Classname!@Ptr thisP = Inherited::constructPtr<@!Classname!@>(
        static_cast<@!Classname!@ *>(this));

    value->addParent(thisP, @!field.Name!@FieldMask);
@@endif
@@if field.linkSParent

    @!Classname!@Ptr thisP = Inherited::constructPtr<@!Classname!@>(
        static_cast<@!Classname!@ *>(this));

    value->setParent(thisP, @!field.Name!@FieldMask);
@@endif
}

@@endif
@@if field.writeInsertIntoMField
void @!Classname!@Base::@!field.InsertIntoMField!@(UInt32                uiIndex,
                                                   @!field.Type!@ConstArg value   )
{
@@if field.checkNilPtr
    if(value == NullFC)
        return;

@@endif
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    MF@!field.TypeCaps!@::iterator fieldIt = _mf@!field.Name!@.begin();

    addRef(value);

    fieldIt += uiIndex;

    _mf@!field.Name!@.insert(fieldIt, value);
@@if !field.checkNilPtr

    if(value == NullFC)
        return;
@@endif
@@if field.linkMParent

    @!Classname!@Ptr thisP = Inherited::constructPtr<@!Classname!@>(
        static_cast<@!Classname!@ *>(this));

    value->addParent(thisP, @!field.Name!@FieldMask);
@@endif
@@if field.linkSParent

    @!Classname!@Ptr thisP = Inherited::constructPtr<@!Classname!@>(
        static_cast<@!Classname!@ *>(this));

    value->setParent(thisP, @!field.Name!@FieldMask);
@@endif
}

@@endif
@@if field.writeReplaceInMFieldIndex
void @!Classname!@Base::@!field.ReplaceInMFieldIndex!@(UInt32                uiIndex,
                                                       @!field.Type!@ConstArg value   )
{
@@if field.checkNilPtr
    if(value == NullFC)
        return;

@@endif
    if(uiIndex >= _mf@!field.Name!@.size())
        return;

    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    addRef(value);
@@if field.linkMParent

    @!Classname!@Ptr thisP = Inherited::constructPtr<@!Classname!@>(
        static_cast<@!Classname!@ *>(this));

    if(_mf@!field.Name!@[uiIndex] != NullFC)
    {
        _mf@!field.Name!@[uiIndex]->subParent(thisP);
    }
@@endif
@@if field.linkSParent

    @!Classname!@Ptr thisP = Inherited::constructPtr<@!Classname!@>(
        static_cast<@!Classname!@ *>(this));

    if(_mf@!field.Name!@[uiIndex] != NullFC)
    {
        _mf@!field.Name!@[uiIndex]->setParent(thisP, @!field.Name!@FieldMask);
    }
@@endif

    subRef(_mf@!field.Name!@[uiIndex]);

    _mf@!field.Name!@[uiIndex] = value;
@@if !field.checkNilPtr

    if(value == NullFC)
        return;
@@endif
@@if field.linkMParent

    value->addParent(thisP, @!field.Name!@FieldMask);
@@endif
@@if field.linkSParent

    value->setParent(thisP, @!field.Name!@FieldMask);
@@endif
}

@@endif
@@if field.writeReplaceInMFieldObject
void @!Classname!@Base::@!field.ReplaceInMFieldObject!@(@!field.Type!@ConstArg pOldElem,
                                                        @!field.Type!@ConstArg pNewElem)
{
@@if field.checkNilPtr
    if(pNewElem == NullFC)
        return;

@@endif
    Int32  elemIdx = _mf@!field.Name!@.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

        MF@!field.TypeCaps!@::iterator fieldIt = _mf@!field.Name!@.begin();

        fieldIt += elemIdx;

@@if field.linkMParent
        @!Classname!@Ptr thisP = Inherited::constructPtr<@!Classname!@>(
            static_cast<@!Classname!@ *>(this));

        if(pOldElem != NullFC)
        {
            pOldElem->subParent(thisP);
        }

@@if !field.checkNilPtr
        if(pNewElem != NullFC)
        {
            pNewElem->addParent(thisP, @!field.Name!@FieldMask);
        }
@@else
        pNewElem->addParent(thisP, @!field.Name!@FieldMask);
@@endif

@@endif
@@if field.linkSParent
        @!Classname!@Ptr thisP = Inherited::constructPtr<@!Classname!@>(
            static_cast<@!Classname!@ *>(this));

        if(pOldElem != NullFC)
        {
            pOldElem->setParent(NullFC, @!field.Name!@FieldMask);
        }

        if(pNewElem != NullFC)
        {
            pNewElem->setParent(thisP, @!field.Name!@FieldMask);
        }

@@endif
        addRef(pNewElem);
        subRef(pOldElem);

        (*fieldIt) = pNewElem;
    }
}

@@endif
@@if field.writeRemoveFromMFieldIndex
void @!Classname!@Base::@!field.RemoveFromMFieldIndex!@(UInt32 uiIndex)
{
    if(uiIndex < _mf@!field.Name!@.size())
    {
        editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

        MF@!field.TypeCaps!@::iterator fieldIt = _mf@!field.Name!@.begin();

        fieldIt += uiIndex;

@@if field.linkMParent
        @!Classname!@Ptr thisP = Inherited::constructPtr<@!Classname!@>(
            static_cast<@!Classname!@ *>(this));

        if(*fieldIt != NullFC)
        {
            (*fieldIt)->subParent(thisP);
        }

@@endif
@@if field.linkSParent
        if(*fieldIt != NullFC)
        {
            (*fieldIt)->setParent(NullFC, @!field.Name!@FieldMask);
        }

@@endif
        subRef(*fieldIt);

@@if field.isRemoveToSet
        *fieldIt = @!field.RemoveTo!@;
@@else
        _mf@!field.Name!@.erase(fieldIt);
@@endif
    }
}

@@endif
@@if field.writeRemoveFromMFieldObject
void @!Classname!@Base::@!field.RemoveFromMFieldObject!@(@!field.Type!@ConstArg value)
{
    Int32 iElemIdx = _mf@!field.Name!@.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

        MF@!field.TypeCaps!@::iterator fieldIt = _mf@!field.Name!@.begin();

        fieldIt += iElemIdx;

@@if field.linkMParent
        @!Classname!@Ptr thisP = Inherited::constructPtr<@!Classname!@>(
            static_cast<@!Classname!@ *>(this));

        if(*fieldIt != NullFC)
        {
            (*fieldIt)->subParent(thisP);
        }

@@endif
@@if field.linkSParent
        if(*fieldIt != NullFC)
        {
            (*fieldIt)->setParent(NullFC, @!field.Name!@FieldMask);
        }

@@endif
        subRef(*fieldIt);

@@if field.isRemoveToSet
        *fieldIt = @!field.RemoveTo!@;
@@else
        _mf@!field.Name!@.erase(fieldIt);
@@endif
    }
}
@@endif
@@if field.writeClearField
void @!Classname!@Base::@!field.ClearField!@(void)
{
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    MF@!field.TypeCaps!@::iterator       fieldIt  = _mf@!field.Name!@.begin();
    MF@!field.TypeCaps!@::const_iterator fieldEnd = _mf@!field.Name!@.end  ();

    while(fieldIt != fieldEnd)
    {
@@if field.linkMParent
        @!Classname!@Ptr thisP = Inherited::constructPtr<@!Classname!@>(
            static_cast<@!Classname!@ *>(this));

        if(*fieldIt != NullFC)
        {
            (*fieldIt)->subParent(thisP);
        }

@@endif
@@if field.linkSParent
        if(*fieldIt != NullFC)
        {
            (*fieldIt)->setParent(NullFC, @!field.Name!@FieldMask);
        }

@@endif
        subRef(*fieldIt);

@@if field.isRemoveToSet
        *fieldIt = @!field.RemoveTo!@;

@@endif
        ++fieldIt;
    }
@@if field.doClearMField

    _mf@!field.Name!@.clear();
@@endif
}
@@endif

@@else
/*********************************** Non-ptr code ********************************/
@@if field.writePushToField
void @!Classname!@Base::@!field.PushToField!@(const @!field.Type!@& value)
{
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);
    _mf@!field.Name!@.push_back(value);
}

@@endif
@@if field.writeInsertIntoMField
void @!Classname!@Base::@!field.InsertIntoMField!@(UInt32                uiIndex,
                                                   const @!field.Type!@& value   )
{
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    MF@!field.TypeCaps!@::iterator fieldIt = _mf@!field.Name!@.begin();

    fieldIt += uiIndex;

    _mf@!field.Name!@.insert(fieldIt, value);
}

@@endif
@@if field.writeReplaceInMFieldIndex
void @!Classname!@Base::@!field.ReplaceInMFieldIndex!@(UInt32                uiIndex,
                                                       const @!field.Type!@& value   )
{
    if(uiIndex >= _mf@!field.Name!@.size())
        return;

    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    _mf@!field.Name!@[uiIndex] = value;
}

@@endif
@@if field.writeReplaceInMFieldObject
void @!Classname!@Base::@!field.ReplaceInMFieldObject!@(const @!field.Type!@& pOldElem,
                                                        const @!field.Type!@& pNewElem)
{
    Int32  elemIdx = _mf@!field.Name!@.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

        MF@!field.TypeCaps!@::iterator fieldIt = _mf@!field.Name!@.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

@@endif
@@if field.writeRemoveFromMFieldIndex
void @!Classname!@Base::@!field.RemoveFromMFieldIndex!@(UInt32 uiIndex)
{
    if(uiIndex < _mf@!field.Name!@.size())
    {
        editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

        MF@!field.TypeCaps!@::iterator fieldIt = _mf@!field.Name!@.begin();

        fieldIt += uiIndex;
        _mf@!field.Name!@.erase(fieldIt);
    }
}

@@endif
@@if field.writeRemoveFromMFieldObject
void @!Classname!@Base::@!field.RemoveFromMFieldObject!@(const @!field.Type!@& value)
{
    Int32 iElemIdx = _mf@!field.Name!@.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

        MF@!field.TypeCaps!@::iterator fieldIt = _mf@!field.Name!@.begin();

        fieldIt += iElemIdx;

        _mf@!field.Name!@.erase(fieldIt);
    }
}

@@endif
@@if field.writeClearField
void @!Classname!@Base::@!field.ClearField!@(void)
{
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    _mf@!field.Name!@.clear();
}
@@endif
@@endif
@@EndMFFieldLoop@@

@@endif

/*------------------------------ access -----------------------------------*/

UInt32 @!Classname!@Base::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

@@if isDecorator
    if(FieldBits::NoField != (DecorateeFieldMask & whichField))
    {
        returnValue += _sfDecoratee.getBinSize();
    }
@@else
@@BeginFieldLoop@@
    if(FieldBits::NoField != (@!field.Name!@FieldMask & whichField))
    {
        returnValue += _@!field.VarName!@.getBinSize();
    }
@@EndFieldLoop@@
@@endif

    return returnValue;
}

void @!Classname!@Base::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

@@if isDecorator
    if(FieldBits::NoField != (DecorateeFieldMask & whichField))
    {
        _sfDecoratee.copyToBin(pMem);
    }
@@else
@@BeginFieldLoop@@
    if(FieldBits::NoField != (@!field.Name!@FieldMask & whichField))
    {
        _@!field.VarName!@.copyToBin(pMem);
    }
@@EndFieldLoop@@
@@endif
}

void @!Classname!@Base::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

@@if isDecorator
    if(FieldBits::NoField != (DecorateeFieldMask & whichField))
    {
        _sfDecoratee.copyFromBin(pMem);
    }
@@else
@@BeginFieldLoop@@
    if(FieldBits::NoField != (@!field.Name!@FieldMask & whichField))
    {
        _@!field.VarName!@.copyFromBin(pMem);
    }
@@EndFieldLoop@@
@@endif
}

@@if !isAbstract
//! create an empty new instance of the class, do not copy the prototype
@!Classname!@Ptr @!Classname!@Base::createEmpty(void)
{
    @!Classname!@Ptr returnValue;

    newPtr<@!Classname!@>(returnValue);

    return returnValue;
}

FieldContainerPtr @!Classname!@Base::shallowCopy(void) const
{
    @!Classname!@Ptr returnValue;

    newPtr(returnValue, dynamic_cast<const @!Classname!@ *>(this));

    return returnValue;
}

@@endif


/*------------------------- constructors ----------------------------------*/

@!Classname!@Base::@!Classname!@Base(void) :
@@if !hasFields
    Inherited()
@@else
    Inherited(),
@@if isDecorator
    _sfDecoratee()
@@else
@@BeginFieldLoop@@
    _@!field.VarName:25!@(@!field.TypedDefault!@)@!field.Separator!@
@@EndFieldLoop@@
@@endif
@@endif
{
}

@!Classname!@Base::@!Classname!@Base(const @!Classname!@Base &source) :
@@if !hasFields
    Inherited(source)
@@else
    Inherited(source),
@@if isDecorator
    _sfDecoratee(source._sfDecoratee)
@@else
@@BeginFieldLoop@@
@@if field.isPtrField
    _@!field.VarName:25!@()@!field.Separator!@
@@else
    _@!field.VarName:25!@(source._@!field.VarName:25!@)@!field.Separator!@
@@endif
@@EndFieldLoop@@
@@endif
@@endif
{
}

/*-------------------------- destructors ----------------------------------*/

@!Classname!@Base::~@!Classname!@Base(void)
{
}

@@if hasPtrFields
void @!Classname!@Base::onCreate(const @!Classname!@ *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
@@BeginFieldLoop@@
@@if field.isPtrField
@@if field.isMField

        MF@!field.TypeCaps!@::const_iterator @!field.Name!@It  =
            source->_mf@!field.Name!@.begin();
        MF@!field.TypeCaps!@::const_iterator @!field.Name!@End =
            source->_mf@!field.Name!@.end  ();

        while(@!field.Name!@It != @!field.Name!@End)
        {
            this->@!field.PushToField!@(*@!field.Name!@It);

            ++@!field.Name!@It;
        }
@@else

        this->set@!field.Name!@(source->get@!field.Name!@());
@@endif
@@endif
@@EndFieldLoop@@
    }
}
@@endif

#ifdef OSG_MT_FIELDCONTAINERPTR
void @!Classname!@Base::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo,
                                        UInt32             uiCopyOffset)
{
    this->execSync(static_cast<@!Classname!@Base *>(&oFrom),
                   whichField,
                   syncMode,
                   uiSyncInfo,
                   uiCopyOffset);
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
void @!Classname!@Base::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<@!Classname!@Base *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif

#if 0
void @!Classname!@Base::execBeginEditV(ConstFieldMaskArg whichField,
                                       UInt32            uiAspect,
                                       UInt32            uiContainerSize)
{
    this->execBeginEdit(whichField, uiAspect, uiContainerSize);
}
#endif

@@if !isAbstract
#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr @!Classname!@Base::createAspectCopy(void) const
{
    @!Classname!@Ptr returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const @!Classname!@ *>(this));

    return returnValue;
}
#endif
@@endif

void @!Classname!@Base::resolveLinks(void)
{
    Inherited::resolveLinks();
@@BeginSFFieldLoop@@
@@if field.isPtrField

    static_cast<@!Classname!@ *>(this)->set@!field.Name!@(NullFC);
@@endif
@@EndSFFieldLoop@@
@@BeginMFFieldLoop@@
@@if field.isPtrField

    static_cast<@!Classname!@ *>(this)->@!field.ClearField!@();
@@endif
@@EndMFFieldLoop@@
}

@@if isDecoratable
/*------------------------------ get -----------------------------------*/

@@if !isDecorator
@@BeginSFFieldLoop@@
@@if field.isPtrField

//! Get the value of the @!Classname!@::_@!field.VarName!@ field.
@!field.Type!@Const @!Classname!@Base::get@!field.Name!@(void) const
{
    return _@!field.VarName!@.getValue();
}

//! Set the value of the @!Classname!@::_@!field.VarName!@ field.
void @!Classname!@Base::set@!field.Name!@(@!field.Type!@ConstArg value)
{
    editSField(@!field.Name!@FieldMask);

    setRefd(_@!field.VarName!@.getValue(), value);
}
@@else
//! Get the value of the @!Classname!@::_@!field.VarName!@ field.

@!field.Type!@ &@!Classname!@Base::edit@!field.Name!@(void)
{
    editSField(@!field.Name!@FieldMask);

    return _@!field.VarName!@.getValue();
}

//! Get the value of the @!Classname!@::_@!field.VarName!@ field.
const @!field.Type!@ &@!Classname!@Base::get@!field.Name!@(void) const
{
    return _@!field.VarName!@.getValue();
}

@@if CompatOneSix
#ifdef OSG_1_COMPAT
@!field.Type:19!@ &@!Classname!@Base::get@!field.Name:15!@(void)
{
    return this->edit@!field.Name:15!@();
}
#endif
@@endif CompatOneSix

//! Set the value of the @!Classname!@::_@!field.VarName!@ field.
void @!Classname!@Base::set@!field.Name!@(const @!field.Type!@ &value)
{
    editSField(@!field.Name!@FieldMask);

    _@!field.VarName!@.setValue(value);
}
@@endif
@@EndSFFieldLoop@@

@@BeginMFFieldLoop@@
//! Get the value of the \a index element the @!Classname!@::_@!field.VarName!@ field.
@@if field.isPtrField
@!field.Type!@Const @!Classname!@Base::get@!field.Name!@(const UInt32 index) const
@@else
const @!field.Type!@ &@!Classname!@Base::get@!field.Name!@(const UInt32 index) const
@@endif
{
    return _@!field.VarName!@[index];
}
@@if !field.isPtrField

@!field.Type!@ &@!Classname!@Base::edit@!field.Name!@(const UInt32 index)
{
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    return _@!field.VarName!@[index];
}

//! Get the @!Classname!@::_@!field.VarName!@ field.
@!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps!@ &@!Classname!@Base::edit@!field.Name!@(void)
{
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    return _@!field.VarName!@;
}

@@if CompatOneSix
#ifdef OSG_1_COMPAT
@!field.Type:19!@ &@!Classname!@Base::get@!field.Name:15!@(const UInt32 index)
{
    return this->edit@!field.Name:15!@(index);
}

@!field.CARD!@@!field.TypeCaps:17!@ &@!Classname!@Base::get@!field.Name:15!@(void)
{
    return this->edit@!field.Name:15!@();
}

#endif
@@endif
@@endif

//! Get the @!Classname!@::_@!field.VarName!@ field.
const @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps!@ &@!Classname!@Base::get@!field.Name!@(void) const
{
    return _@!field.VarName!@;
}

@@EndMFFieldLoop@@
@@else
@@BeginSFFieldLoop@@
@@if field.isPtrField

//! Get the value of the @!Classname!@::_@!field.VarName!@ field.
@!field.Type!@Const @!Classname!@Base::get@!field.Name!@(void) const
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->get@!field.Name!@();
    }
    else
    {
        return Inherited::get@!field.Name!@();
    }
}

//! Set the value of the @!Classname!@::_@!field.VarName!@ field.
void @!Classname!@Base::set@!field.Name!@(@!field.Type!@ConstArg value)
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        getDecoratee()->set@!field.Name!@(value);
    }
    else
    {
//        Inherited::set@!field.Name!@(value);
    }
}
@@else

//! Get the value of the @!Classname!@::_@!field.VarName!@ field.
@!field.Type!@ &@!Classname!@Base::edit@!field.Name!@(void)
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->edit@!field.Name!@();
    }
    else
    {
        return Inherited::edit@!field.Name!@();
    }
}

//! Get the value of the @!Classname!@::_@!field.VarName!@ field.
const @!field.Type!@ &@!Classname!@Base::get@!field.Name!@(void) const
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->get@!field.Name!@();
    }
    else
    {
        return Inherited::get@!field.Name!@();
    }
}

@@if CompatOneSix
#ifdef OSG_1_COMPAT
inline
@!field.Type:19!@ &@!Classname!@Base::get@!field.Name:15!@(void)
{
    return this->edit@!field.Name:15!@();
}
#endif
@@endif //CompatOneSix

//! Set the value of the @!Classname!@::_@!field.VarName!@ field.
void @!Classname!@Base::set@!field.Name!@(const @!field.Type!@ &value)
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        getDecoratee()->set@!field.Name!@(value);
    }
    else
    {
//        Inherited::set@!field.Name!@(value);
    }
}
@@endif
@@EndSFFieldLoop@@

@@BeginMFFieldLoop@@
//! Get the value of the \a index element the @!Classname!@::_@!field.VarName!@ field.
@@if field.isPtrField
@!field.Type!@Const @!Classname!@Base::get@!field.Name!@(const UInt32 index) const
@@else
const @!field.Type!@ &@!Classname!@Base::get@!field.Name!@(const UInt32 index) const
@@endif
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->get@!field.Name!@(index);
    }
    else
    {
        return Inherited::get@!field.Name!@(index);
    }
}
@@if !field.isPtrField

@!field.Type!@ &@!Classname!@Base::edit@!field.Name!@(const UInt32 index)
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->edit@!field.Name!@(index);
    }
    else
    {
        return Inherited::edit@!field.Name!@(index);
    }
}

//! Get the @!Classname!@::_@!field.VarName!@ field.
@!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps!@ &@!Classname!@Base::edit@!field.Name!@(void)
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->edit@!field.Name!@();
    }
    else
    {
        return Inherited::edit@!field.Name!@();
    }
}
@@endif

//! Get the @!Classname!@::_@!field.VarName!@ field.
const @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps!@ &@!Classname!@Base::get@!field.Name!@(void) const
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->get@!field.Name!@();
    }
    else
    {
        return Inherited::get@!field.Name!@();
    }
}

@@EndMFFieldLoop@@
@@endif
@@endif
@@if PointerField

OSG_END_NAMESPACE

@@if SFPointerField
#include "@!HeaderPrefix!@OSGSField.ins"
@@endif
@@if MFPointerField
#include "@!HeaderPrefix!@OSGMField.ins"
@@endif

#if defined(OSG_TMPL_STATIC_MEMBER_NEEDS_FUNCTION_INSTANTIATION) || \
    defined(OSG_TMPL_STATIC_MEMBER_NEEDS_CLASS_INSTANTIATION   )

@@if SFPointerField
#include "@!HeaderPrefix!@OSGSFieldFuncs.ins"
@@endif
@@if MFPointerField
#include "@!HeaderPrefix!@OSGMFieldFuncs.ins"
@@endif
#endif

OSG_BEGIN_NAMESPACE
@@endif

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<@!Classname!@Ptr>::_type("@!Classname!@Ptr", "@!Parent!@Ptr");
#endif

@@if PointerField
OSG_FIELDTRAITS_GETTYPE(@!Classname!@Ptr)

@@if SFPointerField
OSG_FIELD_DLLEXPORT_DEF1(SField, @!Classname!@Ptr);
@@endif
@@if MFPointerField
OSG_FIELD_DLLEXPORT_DEF1(MField, @!Classname!@Ptr);
@@endif
@@endif


/*------------------------------------------------------------------------*/
/*                              cvs id's                                  */

#ifdef OSG_SGI_CC
#pragma set woff 1174
#endif

#ifdef OSG_LINUX_ICC
#pragma warning( disable : 177 )
#endif

namespace
{
    static Char8 cvsid_cpp       [] = "@(#)$Id: FCBaseTemplate_cpp.h 403 2006-11-09 12:34:33Z PatrickDaehne $";
    static Char8 cvsid_hpp       [] = OSG@!CLASSNAME!@BASE_HEADER_CVSID;
    static Char8 cvsid_inl       [] = OSG@!CLASSNAME!@BASE_INLINE_CVSID;

    static Char8 cvsid_fields_hpp[] = OSG@!CLASSNAME!@FIELDS_HEADER_CVSID;
}

OSG_END_NAMESPACE
