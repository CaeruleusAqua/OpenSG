/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class @!Classname!@!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#define OSG_COMPILE@!CLASSNAME!@INST

#include <cstdlib>
#include <cstdio>
#include <boost/assign/list_of.hpp>

#include <@!HeaderPrefix!@OSGConfig.h>

@@AdditionalIncludes@@

@@BeginFieldLoop@@
    @@if field.hasDefaultHeader
#include @!field.DefaultHeader:30!@   // @!field.Name!@ default header
    @@endif // field.hasDefaultHeader
@@EndFieldLoop@@

@@BeginFieldLoop@@
    @@if field.isPtrField
        @@if field.needClassInclude
#include <@!field.ClassInclude!@> // @!field.Name!@ Class
        @@endif // field.isPtrField
    @@endif // field.needClassInclude
@@EndFieldLoop@@

#include "OSG@!Classname!@Base.h"
#include "OSG@!Classname!@.h"

#include "boost/bind.hpp"

OSG_BEGIN_NAMESPACE

/***************************************************************************\
 *                            Description                                  *
\***************************************************************************/

/*! \class OSG::@!Classname!@
    @!Description!@
 */

@@if hasFields
/***************************************************************************\
 *                         Field Description                               *
\***************************************************************************/

    @@if isDecorator
/*! \var @!Parent!@Ptr @!Classname!@Base::_sfDecoratee
    The object being decorated
*/
    @@else // isDecorator
        @@BeginFieldLoop@@
/*! \var @!field.FullType:15!@ @!Classname!@Base::_@!field.VarName!@
    @!field.Description!@
*/

        @@EndFieldLoop@@
    @@endif // isDecorator

void @!Classname!@Base::classDescInserter(TypeObject &oType)
{
    @@if hasFields
    FieldDescriptionBase *pDesc = NULL;

@@if hasMixinParent
    Inherited::classDescInserter(oType);

@@endif
    @@endif // hasFields
    @@if isDecorator
    pDesc = new SFUnrec@!Parent!@Ptr::Description(
        SFUnrec@!Parent!@Ptr::getClassType(),
        "decoratee",
        "undocumented decoratee",
        DecorateeFieldId, DecorateeFieldMask,
        true,
        @!DecorateeFieldFlags!@,
        static_cast<FieldEditMethodSig>(&@!Classname!@Base::editHandleDecoratee),
        static_cast<FieldGetMethodSig >(&@!Classname!@Base::getHandleDecoratee ));

    oType.addInitialDesc(pDesc);
    @@else // isDecorator
        @@BeginFieldLoop@@

    pDesc = new @!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps!@::Description(
        @!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps!@::getClassType(),
        "@!field.DescName!@",
        @!field.SafeDescription!@,
        @!field.Name!@FieldId, @!field.Name!@FieldMask,
        @!field.Visibility!@,
        @!field.Flags!@,
    @@if !field.noAccess
        static_cast<FieldEditMethodSig>(&@!Classname!@Base::editHandle@!field.Name!@),
        static_cast<FieldGetMethodSig >(&@!Classname!@Base::getHandle@!field.Name!@));
    @@else  //!field.noAccess
        static_cast     <FieldEditMethodSig>(&@!Classname!@Base::invalidEditField),
        static_cast     <FieldGetMethodSig >(&@!Classname!@Base::invalidGetField));
    @@endif //!field.noAccess

    oType.addInitialDesc(pDesc);
        @@EndFieldLoop@@
    @@endif // isDecorator
}

@@endif // hasFields

@!Classname!@Base::TypeObject @!Classname!@Base::_type(
    @!Classname!@Base::getClassname(),
    Inherited::getClassname(),
    "@!Group!@",
    @!Namespace!@,
@@if isAbstract
    NULL,
@@else // isAbstract
    (PrototypeCreateF) &@!Classname!@Base::createEmptyLocal,
@@endif // isAbstract
    @!Classname!@::initMethod,
    @!Classname!@::exitMethod,
@@if hasFields
    (InitalInsertDescFunc) &@!Classname!@Base::classDescInserter,
@@else // hasFields
    NULL,
@@endif // hasFields
    false,
    @!FieldsUnmarkedOnCreate!@,
    @!Fcdxml!@,
    @!SafeDescription!@
    );

/*------------------------------ get -----------------------------------*/

FieldContainerType &@!Classname!@Base::getType(void)
{
    return _type;
}

const FieldContainerType &@!Classname!@Base::getType(void) const
{
    return _type;
}

UInt32 @!Classname!@Base::getContainerSize(void) const
{
    return sizeof(@!Classname!@);
}

/*------------------------- decorator get ------------------------------*/

@@if isDecorator
const SFUnrec@!Parent!@Ptr *@!Classname!@Base::getSFDecoratee(void) const
{
    return &_sfDecoratee;
}

    @@BeginFieldLoop@@
        @@if !field.noAccess
        @@if field.isPtrField
//! Get the @!Classname!@::_@!field.VarName!@ field.
const @!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps!@ *@!Classname!@Base::get@!field.CARD!@@!field.Name!@(void) const
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->get@!field.CARD!@@!field.Name!@();
    }
    else
    {
        return NULL;
    }
}
        @@else // field.isPtrField
@!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps!@ *@!Classname!@Base::edit@!field.CARD!@@!field.Name!@(void)
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->edit@!field.CARD!@@!field.Name!@();
    }
    else
    {
        return NULL;
    }
}

const @!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps!@ *@!Classname!@Base::get@!field.CARD!@@!field.Name!@(void) const
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->get@!field.CARD!@@!field.Name!@();
    }
    else
    {
        return NULL;
    }
}
            @@if CompatOneSix
#ifdef OSG_1_GET_COMPAT
@!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps:17!@ *@!Classname!@Base::get@!field.CARD!@@!field.Name:15!@(void)
{
    return this->edit@!field.CARD!@@!field.Name:15!@();
}
#endif
            @@endif // CompatOneSix
        @@endif // field.isPtrField
        @@endif //!field.noAccess

    @@EndFieldLoop@@
@@endif // isDecorator

@@if !isDecorator
    @@BeginFieldLoop@@
        @@if !field.noAccess
        @@if field.isPtrField
//! Get the @!Classname!@::_@!field.VarName!@ field.
const @!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps!@ *@!Classname!@Base::get@!field.CARD!@@!field.Name!@(void) const
{
    return &_@!field.VarName!@;
}
        @@else // field.isPtrField
@!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps!@ *@!Classname!@Base::edit@!field.CARD!@@!field.Name!@(void)
{
            @@if field.isMField
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);
            @@else // field.isMField
    editSField(@!field.Name!@FieldMask);
            @@endif // field.isMField

    return &_@!field.VarName!@;
}

const @!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps!@ *@!Classname!@Base::get@!field.CARD!@@!field.Name!@(void) const
{
    return &_@!field.VarName!@;
}

            @@if CompatOneSix
#ifdef OSG_1_GET_COMPAT
@!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps:17!@ *@!Classname!@Base::get@!field.CARD!@@!field.Name:15!@(void)
{
    return this->edit@!field.CARD!@@!field.Name:15!@();
}
#endif
            @@endif // CompatOneSix
        @@endif // field.isPtrField
        @@endif //!field.noAccess

    @@EndFieldLoop@@
@@endif // !isDecorator


@@BeginMFFieldLoop@@
    @@if field.isPtrField
    @@if !field.noAccess
        @@if field.writePushToField
void @!Classname!@Base::@!field.PushToField!@(@!field.Type!@ConstArg value)
{
            @@if field.checkNilPtr
    if(value == NullFC)
        return;

            @@endif // field.checkNilPtr
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    //addRef(value);

    _mf@!field.Name!@.push_back(value);
            @@if !field.checkNilPtr

//    if(value == NullFC)
//        return;
            @@endif // field.checkNilPtr
            @@if field.linkMParent

//    value->addParent(this, @!field.Name!@FieldId);
            @@endif // field.linkMParent
            @@if field.linkSParent

//    value->setParent(this, @!field.Name!@FieldId);
            @@endif // field.linkSParent
}

        @@endif // field.writePushToField
        @@if field.writeAssignMField
void @!Classname!@Base::@!field.AssignMField:15!@(const @!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps:15!@ &value)
{
    @!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps:15!@::const_iterator elemIt  =
        value.begin();
    @!field.FieldTypeNS!@@!field.CARD!@@!field.FieldTypeCaps:15!@::const_iterator elemEnd =
        value.end  ();

    static_cast<@!Classname!@ *>(this)->@!field.ClearField!@();

    while(elemIt != elemEnd)
    {
        this->@!field.PushToField!@(*elemIt);

        ++elemIt;
    }
}

        @@endif // field.writeAssignMField
        @@if field.writeInsertIntoMField
void @!Classname!@Base::@!field.InsertIntoMField!@(UInt32                uiIndex,
                                                   @!field.Type!@ConstArg value   )
{
            @@if field.checkNilPtr
    if(value == NullFC)
        return;

            @@endif // field.checkNilPtr
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    MF@!field.FieldTypeCaps!@::iterator fieldIt = _mf@!field.Name!@.begin_nc();

    //addRef(value);

    fieldIt += uiIndex;

    _mf@!field.Name!@.insert(fieldIt, value);
            @@if !field.checkNilPtr

//    if(value == NullFC)
//        return;
            @@endif // !field.checkNilPtr
            @@if field.linkMParent

//    value->addParent(this, @!field.Name!@FieldId);
            @@endif // field.linkMParent
            @@if field.linkSParent

//    value->setParent(this, @!field.Name!@FieldId);
            @@endif // field.linkSParent
}

        @@endif // field.writeInsertIntoMField
        @@if field.writeReplaceInMFieldIndex
void @!Classname!@Base::@!field.ReplaceInMFieldIndex!@(UInt32                uiIndex,
                                                       @!field.Type!@ConstArg value   )
{
            @@if field.checkNilPtr
    if(value == NullFC)
        return;

            @@endif // field.checkNilPtr
    if(uiIndex >= _mf@!field.Name!@.size())
        return;

    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

            @@if field.linkMParent

//    if(_mf@!field.Name!@[uiIndex] != NullFC)
//    {
//        _mf@!field.Name!@[uiIndex]->subParent(this);
//    }
            @@endif // field.linkMParent
            @@if field.linkSParent

//    if(_mf@!field.Name!@[uiIndex] != NullFC)
//    {
//        _mf@!field.Name!@[uiIndex]->setParent(this, @!field.Name!@FieldId);
//    }
            @@endif // field.linkSParent

//    addRef(value);
//    subRef(_mf@!field.Name!@[uiIndex]);

//    _mf@!field.Name!@[uiIndex] = value;

      _mf@!field.Name!@.replace(uiIndex, value);
            @@if !field.checkNilPtr

//    if(value == NullFC)
//        return;
            @@endif // !field.checkNilPtr
            @@if field.linkMParent

//    value->addParent(this, @!field.Name!@FieldId);
            @@endif // field.linkMParent
            @@if field.linkSParent

//    value->setParent(this, @!field.Name!@FieldId);
            @@endif // field.linkSParent
}

        @@endif // field.writeReplaceInMFieldIndex
        @@if field.writeReplaceInMFieldObject
void @!Classname!@Base::@!field.ReplaceInMFieldObject!@(@!field.Type!@ConstArg pOldElem,
                                                        @!field.Type!@ConstArg pNewElem)
{
            @@if field.checkNilPtr
    if(pNewElem == NullFC)
        return;

            @@endif // field.checkNilPtr
    Int32  elemIdx = _mf@!field.Name!@.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

            @@if field.linkMParent

//        if(pOldElem != NullFC)
//        {
//            pOldElem->subParent(this);
//        }

                @@if !field.checkNilPtr
//        if(pNewElem != NullFC)
//        {
//            pNewElem->addParent(this, @!field.Name!@FieldMask);
//        }
                @@else // !field.checkNilPtr
//        pNewElem->addParent(this, @!field.Name!@FieldMask);
                @@endif

            @@endif // field.linkMParent
            @@if field.linkSParent
//        if(pOldElem != NullFC)
//        {
//            pOldElem->setParent(NullFC, @!field.Name!@FieldMask);
//        }

//        if(pNewElem != NullFC)
//        {
//            pNewElem->setParent(this, @!field.Name!@FieldMask);
//        }

            @@endif // field.linkSParent
//        MF@!field.TypeCaps!@::iterator fieldIt = _mf@!field.Name!@.begin();

//        fieldIt += elemIdx;
//        addRef(pNewElem);
//        subRef(pOldElem);

//        (*fieldIt) = pNewElem;
          _mf@!field.Name!@.replace(elemIdx, pNewElem);
    }
}

        @@endif // field.writeReplaceInMFieldObject
        @@if field.writeRemoveFromMFieldIndex
void @!Classname!@Base::@!field.RemoveFromMFieldIndex!@(UInt32 uiIndex)
{
    if(uiIndex < _mf@!field.Name!@.size())
    {
        editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

        MF@!field.FieldTypeCaps!@::iterator fieldIt = _mf@!field.Name!@.begin_nc();

        fieldIt += uiIndex;

            @@if field.linkMParent

//        if(*fieldIt != NullFC)
//        {
//            (*fieldIt)->subParent(this);
//        }

            @@endif // field.linkMParent
            @@if field.linkSParent
//        if(*fieldIt != NullFC)
//        {
//            (*fieldIt)->setParent(NullFC, @!field.Name!@FieldMask);
//        }

            @@endif // field.linkSParent
        //subRef(*fieldIt);

            @@if field.isRemoveToSet
        //*fieldIt = @!field.RemoveTo!@;
        _mf@!field.Name!@.replace(uiIndex, @!field.RemoveTo!@);
            @@else // field.isRemoveToSet
        _mf@!field.Name!@.erase(fieldIt);
            @@endif // field.isRemoveToSet
    }
}

        @@endif // field.writeRemoveFromMFieldIndex
        @@if field.writeRemoveFromMFieldObject
void @!Classname!@Base::@!field.RemoveFromMFieldObject!@(@!field.Type!@ConstArg value)
{
    Int32 iElemIdx = _mf@!field.Name!@.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

        MF@!field.FieldTypeCaps!@::iterator fieldIt = _mf@!field.Name!@.begin_nc();

        fieldIt += iElemIdx;

            @@if field.linkMParent

//        if(*fieldIt != NullFC)
//        {
//            (*fieldIt)->subParent(this);
//        }

            @@endif // field.linkMParent
            @@if field.linkSParent
//        if(*fieldIt != NullFC)
//        {
//            (*fieldIt)->setParent(NullFC, @!field.Name!@FieldMask);
//        }

            @@endif // field.linkSParent
        //subRef(*fieldIt);

            @@if field.isRemoveToSet
        //*fieldIt = @!field.RemoveTo!@;
        _mf@!field.Name!@.replace(iElemIdx, @!field.RemoveTo!@);
            @@else // field.isRemoveToSet
        _mf@!field.Name!@.erase(fieldIt);
            @@endif // field.isRemoveToSet
    }
}
        @@endif // field.writeRemoveFromMFieldObject
        @@if field.writeClearField
void @!Classname!@Base::@!field.ClearField!@(void)
{
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

            @@if field.isRemoveToSet
    MF@!field.FieldTypeCaps!@::iterator       fieldIt  = _mf@!field.Name!@.begin_nc();
    MF@!field.FieldTypeCaps!@::const_iterator fieldEnd = _mf@!field.Name!@.end  ();

    while(fieldIt != fieldEnd)
    {
            @@if field.linkMParent
//        if(*fieldIt != NullFC)
//        {
//            (*fieldIt)->subParent(this);
//        }

            @@endif // field.linkMParent
            @@if field.linkSParent
//        if(*fieldIt != NullFC)
//        {
//            (*fieldIt)->setParent(NullFC, @!field.Name!@FieldMask);
//        }

            @@endif // field.linkSParent
        //subRef(*fieldIt);

        _mf@!field.Name!@.replace(fieldIt, @!field.RemoveTo!@);

        ++fieldIt;
    }
            @@else // field.isRemoveToSet
            @@if field.doClearMField

    _mf@!field.Name!@.clear();
            @@endif // field.doClearMField
            @@endif // field.isRemoveToSet
}
        @@endif // field.writeClearField

    @@endif //!field.noAccess
    @@else // field.isPtrField
/*********************************** Non-ptr code ********************************/
    @@if !field.noAccess
        @@if field.writePushToField
void @!Classname!@Base::@!field.PushToField!@(const @!field.FullType!@& value)
{
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);
    _mf@!field.Name!@.push_back(value);
}

        @@endif // field.writePushToField
        @@if field.writeInsertIntoMField
void @!Classname!@Base::@!field.InsertIntoMField!@(UInt32                uiIndex,
                                                   const @!field.FullType!@& value   )
{
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    MF@!field.TypeCaps!@::iterator fieldIt = _mf@!field.Name!@.begin();

    fieldIt += uiIndex;

    _mf@!field.Name!@.insert(fieldIt, value);
}

        @@endif // field.writeInsertIntoMField
        @@if field.writeReplaceInMFieldIndex
void @!Classname!@Base::@!field.ReplaceInMFieldIndex!@(UInt32                uiIndex,
                                                       const @!field.FullType!@& value   )
{
    if(uiIndex >= _mf@!field.Name!@.size())
        return;

    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    _mf@!field.Name!@[uiIndex] = value;
}

        @@endif // field.writeReplaceInMFieldIndex
        @@if field.writeReplaceInMFieldObject
void @!Classname!@Base::@!field.ReplaceInMFieldObject!@(const @!field.FullType!@& pOldElem,
                                                        const @!field.FullType!@& pNewElem)
{
    Int32  elemIdx = _mf@!field.Name!@.findIndex(pOldElem);

    if(elemIdx != -1)
    {
        editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

        MF@!field.TypeCaps!@::iterator fieldIt = _mf@!field.Name!@.begin();

        fieldIt += elemIdx;

        (*fieldIt) = pNewElem;
    }
}

        @@endif // field.writeReplaceInMFieldObject
        @@if field.writeRemoveFromMFieldIndex
void @!Classname!@Base::@!field.RemoveFromMFieldIndex!@(UInt32 uiIndex)
{
    if(uiIndex < _mf@!field.Name!@.size())
    {
        editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

        MF@!field.TypeCaps!@::iterator fieldIt = _mf@!field.Name!@.begin();

        fieldIt += uiIndex;
        _mf@!field.Name!@.erase(fieldIt);
    }
}

        @@endif // field.writeRemoveFromMFieldIndex
        @@if field.writeRemoveFromMFieldObject
void @!Classname!@Base::@!field.RemoveFromMFieldObject!@(const @!field.FullType!@& value)
{
    Int32 iElemIdx = _mf@!field.Name!@.findIndex(value);

    if(iElemIdx != -1)
    {
        editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

        MF@!field.TypeCaps!@::iterator fieldIt = _mf@!field.Name!@.begin();

        fieldIt += iElemIdx;

        _mf@!field.Name!@.erase(fieldIt);
    }
}

        @@endif // field.writeRemoveFromMFieldObject
        @@if field.writeClearField
void @!Classname!@Base::@!field.ClearField!@(void)
{
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    _mf@!field.Name!@.clear();
}
        @@endif // field.writeClearField
    @@endif // !field.noAccess
    @@endif // field.isPtrField
@@EndMFFieldLoop@@


/*------------------------------ access -----------------------------------*/

UInt32 @!Classname!@Base::getBinSize(ConstFieldMaskArg whichField)
{
    UInt32 returnValue = Inherited::getBinSize(whichField);

@@if isDecorator
    if(FieldBits::NoField != (DecorateeFieldMask & whichField))
    {
        returnValue += _sfDecoratee.getBinSize();
    }
@@else // isDecorator
    @@BeginFieldLoop@@
    if(FieldBits::NoField != (@!field.Name!@FieldMask & whichField))
    {
        returnValue += _@!field.VarName!@.getBinSize();
    }
    @@EndFieldLoop@@
@@endif // isDecorator

    return returnValue;
}

void @!Classname!@Base::copyToBin(BinaryDataHandler &pMem,
                                  ConstFieldMaskArg  whichField)
{
    Inherited::copyToBin(pMem, whichField);

@@if isDecorator
    if(FieldBits::NoField != (DecorateeFieldMask & whichField))
    {
        _sfDecoratee.copyToBin(pMem);
    }
@@else // isDecorator
    @@BeginFieldLoop@@
    if(FieldBits::NoField != (@!field.Name!@FieldMask & whichField))
    {
        _@!field.VarName!@.copyToBin(pMem);
    }
    @@EndFieldLoop@@
@@endif // isDecorator
}

void @!Classname!@Base::copyFromBin(BinaryDataHandler &pMem,
                                    ConstFieldMaskArg  whichField)
{
    Inherited::copyFromBin(pMem, whichField);

@@if isDecorator
    if(FieldBits::NoField != (DecorateeFieldMask & whichField))
    {
        _sfDecoratee.copyFromBin(pMem);
    }
@@else // isDecorator
    @@BeginFieldLoop@@
    if(FieldBits::NoField != (@!field.Name!@FieldMask & whichField))
    {
        _@!field.VarName!@.copyFromBin(pMem);
    }
    @@EndFieldLoop@@
@@endif // isDecorator
}
@@if hasChildFields

void @!Classname!@Base::subChildPointer(FieldContainerPtr pObj, 
                                        UInt16            usFieldPos)
{
    @@BeginFieldLoop@@
        @@if field.isChildField
            @@if field.isFirstChildField
    if(usFieldPos == @!field.Name!@FieldId)
            @@else
    else if(usFieldPos == @!field.Name!@FieldId)
            @@endif
    {
            @@if field.isSField
        if(_@!field.VarName!@.getValue() == pObj)
        {
            editSField(@!field.Name!@FieldMask);

            _@!field.VarName!@.setValue(NullFC);
        }
            @@else
        @!field.Type!@ pChild = dynamic_cast<@!field.Type!@>(pObj);

        if(pChild != NullFC)
            @!field.RemoveFromMFieldObject!@(pChild);
            @@endif
    }
        @@endif
    @@EndFieldLoop@@
    else
    {
        Inherited::subChildPointer(pObj, usFieldPos);
    }
}

@@endif // !isAbstract

@@if !isAbstract
//! create a new instance of the class
@!Classname!@TransitPtr @!Classname!@Base::create(void)
{
    @!Classname!@TransitPtr fc;

    if(getClassType().getPrototype() != NullFC)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopy();

        fc = dynamic_pointer_cast<@!Classname!@>(tmpPtr);
    }

    return fc;
}

//! create a new instance of the class
@!Classname!@TransitPtr @!Classname!@Base::createLocal(BitVector bFlags)
{
    @!Classname!@TransitPtr fc;

    if(getClassType().getPrototype() != NullFC)
    {
        FieldContainerTransitPtr tmpPtr =
            getClassType().getPrototype()-> shallowCopyLocal(bFlags);

        fc = dynamic_pointer_cast<@!Classname!@>(tmpPtr);
    }

    return fc;
}
@@endif // !isAbstract

@@if !isAbstract
//! create an empty new instance of the class, do not copy the prototype
@!Classname!@Ptr @!Classname!@Base::createEmpty(void)
{
    @!Classname!@Ptr returnValue;

    newPtr<@!Classname!@>(returnValue, Thread::getCurrentLocalFlags());

    returnValue->_pFieldFlags->_bNamespaceMask &= 
        ~Thread::getCurrentLocalFlags(); 

    return returnValue;
}

@!Classname!@Ptr @!Classname!@Base::createEmptyLocal(BitVector bFlags)
{
    @!Classname!@Ptr returnValue;

    newPtr<@!Classname!@>(returnValue, bFlags);

    returnValue->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

FieldContainerTransitPtr @!Classname!@Base::shallowCopy(void) const
{
    @!Classname!@Ptr tmpPtr;

    newPtr(tmpPtr, 
           dynamic_cast<const @!Classname!@ *>(this), 
           Thread::getCurrentLocalFlags());

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~Thread::getCurrentLocalFlags();

    FieldContainerTransitPtr returnValue(tmpPtr);

    return returnValue;
}

FieldContainerTransitPtr @!Classname!@Base::shallowCopyLocal(
    BitVector bFlags) const
{
    @!Classname!@Ptr tmpPtr;

    newPtr(tmpPtr, dynamic_cast<const @!Classname!@ *>(this), bFlags);

    FieldContainerTransitPtr returnValue(tmpPtr);

    tmpPtr->_pFieldFlags->_bNamespaceMask &= ~bFlags;

    return returnValue;
}

@@endif // !isAbstract


/*------------------------- constructors ----------------------------------*/

@!Classname!@Base::@!Classname!@Base(void) :
@@if !hasFields
    Inherited()
@@else // !hasFields
    Inherited(),
    @@if isDecorator
    _sfDecoratee()
    @@else // isDecorator
        @@BeginFieldLoop@@
            @@if field.isChildField
    _@!field.VarName:25!@(this, @!field.Name!@FieldId)@!field.Separator!@
            @@else
    _@!field.VarName:25!@(@!field.TypedDefault!@)@!field.Separator!@
            @@endif
        @@EndFieldLoop@@
    @@endif // isDecorator
@@endif // !hasFields
{
}

@!Classname!@Base::@!Classname!@Base(const @!Classname!@Base &source) :
@@if !hasFields
    Inherited(source)
@@else // !hasFields
    Inherited(source),
    @@if isDecorator
    _sfDecoratee(source._sfDecoratee)
    @@else // isDecorator
        @@BeginFieldLoop@@
            @@if field.isPtrField
                @@if field.isChildField
    _@!field.VarName:25!@(this, @!field.Name!@FieldId)@!field.Separator!@
                @@else
                    @@if field.isSField
    _@!field.VarName:25!@(NullFC)@!field.Separator!@
                    @@else
    _@!field.VarName:25!@()@!field.Separator!@
                    @@endif // isSField
                @@endif // ChildField
            @@else // field.isPtrField
    _@!field.VarName:25!@(source._@!field.VarName:25!@)@!field.Separator!@
            @@endif // field.isPtrField
        @@EndFieldLoop@@
    @@endif // isDecorator
@@endif // !hasFields
{
}


/*-------------------------- destructors ----------------------------------*/

@!Classname!@Base::~@!Classname!@Base(void)
{
}

@@if hasPtrFields
void @!Classname!@Base::onCreate(const @!Classname!@ *source)
{
    Inherited::onCreate(source);

    if(source != NULL)
    {
    @@BeginFieldLoop@@
        @@if field.isPtrField
        @@if !field.noAccess
            @@if field.isMField

        MF@!field.FieldTypeCaps!@::const_iterator @!field.Name!@It  =
            source->_mf@!field.Name!@.begin();
        MF@!field.FieldTypeCaps!@::const_iterator @!field.Name!@End =
            source->_mf@!field.Name!@.end  ();

        while(@!field.Name!@It != @!field.Name!@End)
        {
            this->@!field.PushToField!@(*@!field.Name!@It);

            ++@!field.Name!@It;
        }
            @@else // field.isMField

        this->set@!field.Name!@(source->get@!field.Name!@());
            @@endif // field.isMField
        @@endif //!field.noAccess
        @@endif // field.isPtrField
    @@EndFieldLoop@@
    }
}
@@endif // hasPtrFields

@@if isDecorator
GetFieldHandlePtr  @!Classname!@Base::getHandleDecoratee (void) const
{
    SFUnrec@!Parent!@Ptr::GetHandlePtr returnValue(
        new SFUnrec@!Parent!@Ptr::GetHandle(
            &_sfDecoratee,
            this->getType().getFieldDesc(DecorateeFieldId)));

    return returnValue;
}

EditFieldHandlePtr @!Classname!@Base::editHandleDecoratee(void)
{
    SFUnrec@!Parent!@Ptr::EditHandlePtr returnValue(
        new SFUnrec@!Parent!@Ptr::EditHandle(
            &_sfDecoratee,
            this->getType().getFieldDesc(DecorateeFieldId)));

    returnValue->setSetMethod(boost::bind(&@!Classname!@::setDecoratee, 
                              static_cast<@!Classname!@ *>(this), _1));

    editSField(DecorateeFieldMask);

    return returnValue;
}

@@endif // isDecorator
@@BeginFieldLoop@@
GetFieldHandlePtr @!Classname!@Base::getHandle@!field.Name:15!@ (void) const
{
    @!field.CARD!@@!field.FieldTypeCaps!@::GetHandlePtr returnValue(
        new  @!field.CARD!@@!field.FieldTypeCaps!@::GetHandle(
             &_@!field.VarName!@, 
             this->getType().getFieldDesc(@!field.Name!@FieldId)));

    return returnValue;
}

EditFieldHandlePtr @!Classname!@Base::editHandle@!field.Name:15!@(void)
{
@@if !field.noAccess
    @!field.CARD!@@!field.FieldTypeCaps!@::EditHandlePtr returnValue(
        new  @!field.CARD!@@!field.FieldTypeCaps!@::EditHandle(
             &_@!field.VarName!@, 
             this->getType().getFieldDesc(@!field.Name!@FieldId)));
@@if field.isMField
  @@if field.isPtrField

    returnValue->setAddMethod(boost::bind(&@!Classname!@::@!field.PushToField!@, 
                              static_cast<@!Classname!@ *>(this), _1));
  @@endif

    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);
@@else // field.isMField
  @@if field.isPtrField

    returnValue->setSetMethod(boost::bind(&@!Classname!@::set@!field.Name!@, 
                                          static_cast<@!Classname!@ *>(this), _1));
  @@endif

    editSField(@!field.Name!@FieldMask);
@@endif // field.isMField
@@else
    @!field.CARD!@@!field.TypeCaps!@::EditHandlePtr returnValue;
@@endif

    return returnValue;
}

@@EndFieldLoop@@

#ifdef OSG_MT_CPTR_ASPECT
void @!Classname!@Base::execSyncV(      FieldContainer    &oFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    this->execSync(static_cast<@!Classname!@Base *>(&oFrom),
                   whichField,
                   oOffsets,
                   syncMode,
                   uiSyncInfo);
}
#endif


@@if !isAbstract
#ifdef OSG_MT_CPTR_ASPECT
FieldContainerPtr @!Classname!@Base::createAspectCopy(void) const
{
    @!Classname!@Ptr returnValue;

    newAspectCopy(returnValue,
                  dynamic_cast<const @!Classname!@ *>(this));

    return returnValue;
}
#endif
@@endif // !isAbstract

void @!Classname!@Base::resolveLinks(void)
{
    Inherited::resolveLinks();
@@BeginSFFieldLoop@@
    @@if field.isPtrField
    @@if !field.noAccess

    static_cast<@!Classname!@ *>(this)->set@!field.Name!@(NullFC);
    @@endif //!field.noAccess
    @@endif // field.isPtrField
@@EndSFFieldLoop@@

@@if hasValueMField
#ifdef OSG_MT_CPTR_ASPECT
    AspectOffsetStore oOffsets;

    _pAspectStore->fillOffsetArray(oOffsets, this);
#endif
@@endif

@@BeginMFFieldLoop@@
    @@if field.isPtrField
    @@if !field.noAccess
    static_cast<@!Classname!@ *>(this)->@!field.ClearField!@();
    @@endif //!field.noAccess
    @@else
#ifdef OSG_MT_CPTR_ASPECT
    _@!field.VarName!@.terminateShare(Thread::getCurrentAspect(), 
                                      oOffsets);
#endif
    @@endif // field.isPtrField
@@EndMFFieldLoop@@
}

@@if isDecoratable
/*------------------------------ get -----------------------------------*/

    @@if !isDecorator
        @@BeginSFFieldLoop@@
            @@if field.isPtrField

//! Get the value of the @!Classname!@::_@!field.VarName!@ field.
@!field.Type!@Const @!Classname!@Base::get@!field.Name!@(void) const
{
    return _@!field.VarName!@.getValue();
}

//! Set the value of the @!Classname!@::_@!field.VarName!@ field.
void @!Classname!@Base::set@!field.Name!@(@!field.Type!@ConstArg value)
{
    editSField(@!field.Name!@FieldMask);

    _@!field.VarName!@.setValue(value);
}
            @@else // field.isPtrField
//! Get the value of the @!Classname!@::_@!field.VarName!@ field.

@!field.Type!@ &@!Classname!@Base::edit@!field.Name!@(void)
{
    editSField(@!field.Name!@FieldMask);

    return _@!field.VarName!@.getValue();
}

//! Get the value of the @!Classname!@::_@!field.VarName!@ field.
const @!field.Type!@ &@!Classname!@Base::get@!field.Name!@(void) const
{
    return _@!field.VarName!@.getValue();
}

                @@if CompatOneSix
#ifdef OSG_1_GET_COMPAT
@!field.Type:19!@ &@!Classname!@Base::get@!field.Name:15!@(void)
{
    return this->edit@!field.Name:15!@();
}
#endif
                @@endif // CompatOneSix

//! Set the value of the @!Classname!@::_@!field.VarName!@ field.
void @!Classname!@Base::set@!field.Name!@(const @!field.Type!@ &value)
{
    editSField(@!field.Name!@FieldMask);

    _@!field.VarName!@.setValue(value);
}
            @@endif // field.isPtrField
        @@EndSFFieldLoop@@

        @@BeginMFFieldLoop@@
//! Get the value of the \a index element the @!Classname!@::_@!field.VarName!@ field.
            @@if field.isPtrField
@!field.Type!@Const @!Classname!@Base::get@!field.Name!@(const UInt32 index) const
            @@else // field.isPtrField
const @!field.Type!@ &@!Classname!@Base::get@!field.Name!@(const UInt32 index) const
            @@endif // field.isPtrField
{
    return _@!field.VarName!@[index];
}
            @@if !field.isPtrField

@!field.Type!@ &@!Classname!@Base::edit@!field.Name!@(const UInt32 index)
{
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    return _@!field.VarName!@[index];
}

//! Get the @!Classname!@::_@!field.VarName!@ field.
@!field.FieldTypeNS!@@!field.CARD!@@!field.TypeCaps!@ &@!Classname!@Base::edit@!field.Name!@(void)
{
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    return _@!field.VarName!@;
}

                @@if CompatOneSix
#ifdef OSG_1_GET_COMPAT
@!field.Type:19!@ &@!Classname!@Base::get@!field.Name:15!@(const UInt32 index)
{
    return this->edit@!field.Name:15!@(index);
}

@!field.CARD!@@!field.TypeCaps:17!@ &@!Classname!@Base::get@!field.Name:15!@(void)
{
    return this->edit@!field.Name:15!@();
}

#endif
                @@endif // CompatOneSix
            @@endif // !field.isPtrField

//! Get the @!Classname!@::_@!field.VarName!@ field.
const @!field.FieldTypeNS!@@!field.CARD!@@!field.TypeCaps!@ &@!Classname!@Base::get@!field.Name!@(void) const
{
    return _@!field.VarName!@;
}

        @@EndMFFieldLoop@@
    @@else // !isDecorator
        @@BeginSFFieldLoop@@
            @@if field.isPtrField

//! Get the value of the @!Classname!@::_@!field.VarName!@ field.
@!field.Type!@Const @!Classname!@Base::get@!field.Name!@(void) const
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->get@!field.Name!@();
    }
    else
    {
        return Inherited::get@!field.Name!@();
    }
}

//! Set the value of the @!Classname!@::_@!field.VarName!@ field.
void @!Classname!@Base::set@!field.Name!@(@!field.Type!@ConstArg value)
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        getDecoratee()->set@!field.Name!@(value);
    }
    else
    {
//        Inherited::set@!field.Name!@(value);
    }
}
            @@else // field.isPtrField

//! Get the value of the @!Classname!@::_@!field.VarName!@ field.
@!field.Type!@ &@!Classname!@Base::edit@!field.Name!@(void)
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->edit@!field.Name!@();
    }
    else
    {
        return Inherited::edit@!field.Name!@();
    }
}

//! Get the value of the @!Classname!@::_@!field.VarName!@ field.
const @!field.Type!@ &@!Classname!@Base::get@!field.Name!@(void) const
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->get@!field.Name!@();
    }
    else
    {
        return Inherited::get@!field.Name!@();
    }
}

                @@if CompatOneSix
#ifdef OSG_1_GET_COMPAT
inline
@!field.Type:19!@ &@!Classname!@Base::get@!field.Name:15!@(void)
{
    return this->edit@!field.Name:15!@();
}
#endif
                @@endif // CompatOneSix

//! Set the value of the @!Classname!@::_@!field.VarName!@ field.
void @!Classname!@Base::set@!field.Name!@(const @!field.Type!@ &value)
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        getDecoratee()->set@!field.Name!@(value);
    }
    else
    {
//        Inherited::set@!field.Name!@(value);
    }
}
            @@endif // field.isPtrField
        @@EndSFFieldLoop@@

        @@BeginMFFieldLoop@@
//! Get the value of the \a index element the @!Classname!@::_@!field.VarName!@ field.
            @@if field.isPtrField
@!field.Type!@Const @!Classname!@Base::get@!field.Name!@(const UInt32 index) const
            @@else // field.isPtrField
const @!field.Type!@ &@!Classname!@Base::get@!field.Name!@(const UInt32 index) const
            @@endif // field.isPtrField
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->get@!field.Name!@(index);
    }
    else
    {
        return Inherited::get@!field.Name!@(index);
    }
}
            @@if !field.isPtrField

@!field.Type!@ &@!Classname!@Base::edit@!field.Name!@(const UInt32 index)
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->edit@!field.Name!@(index);
    }
    else
    {
        return Inherited::edit@!field.Name!@(index);
    }
}

//! Get the @!Classname!@::_@!field.VarName!@ field.
@!field.FieldTypeNS!@@!field.CARD!@@!field.TypeCaps!@ &@!Classname!@Base::edit@!field.Name!@(void)
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->edit@!field.Name!@();
    }
    else
    {
        return Inherited::edit@!field.Name!@();
    }
}
            @@endif // !field.isPtrField

//! Get the @!Classname!@::_@!field.VarName!@ field.
const @!field.FieldTypeNS!@@!field.CARD!@@!field.TypeCaps!@ &@!Classname!@Base::get@!field.Name!@(void) const
{
    if(_sfDecoratee.getValue() != NullFC)
    {
        return getDecoratee()->get@!field.Name!@();
    }
    else
    {
        return Inherited::get@!field.Name!@();
    }
}

        @@EndMFFieldLoop@@
    @@endif // !isDecorator
@@endif // isDecoratable

#if !defined(OSG_DO_DOC) || defined(OSG_DOC_DEV)
DataType FieldTraits<@!Classname!@Ptr>::_type("@!Classname!@Ptr", "@!Parent!@Ptr");
#endif

@@if PointerField
OSG_FIELDTRAITS_GETTYPE(@!Classname!@Ptr)

    @@if SFPointerField
OSG_EXPORT_PTR_SFIELD_FULL(FieldContainerPtrSField, 
                           @!Classname!@Ptr, 
                           0);
    @@endif // SFPointerField

    @@if MFPointerField
OSG_EXPORT_PTR_MFIELD_FULL(FieldContainerPtrMField, 
                           @!Classname!@Ptr, 
                           0);
    @@endif // MFPointerField
@@endif // PointerField
@@if ChildField

DataType &FieldTraits< @!Classname!@Ptr, 1 >::getType(void)
{                                                           
    return FieldTraits<@!Classname!@Ptr, 0>::getType();
}

@@endif
@@if ChildSFields

OSG_EXPORT_PTR_SFIELD(FieldContainerPtrChildSField,
                      @!Classname!@Ptr,       
                      UnrecordedRefCounts,  
                      1);

@@endif
@@if ChildMFields

OSG_EXPORT_PTR_MFIELD(FieldContainerPtrChildMField,
                      @!Classname!@Ptr,       
                      UnrecordedRefCounts,  
                      1);

@@endif

OSG_END_NAMESPACE
