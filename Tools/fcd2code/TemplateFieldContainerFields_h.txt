/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSG@!CLASSNAME!@FIELDS_H_
#define _OSG@!CLASSNAME!@FIELDS_H_
#ifdef __sgi
#pragma once
#endif

#include "@!HeaderPrefix!@OSGConfig.h"
@@if isInLibrary
#include "OSG@!Libname!@Def.h"
@@endif

#include "OSGFieldContainerFields.h"
#include "OSGFieldContainerPtrSField.h"
#include "OSGFieldContainerPtrMField.h"


OSG_BEGIN_NAMESPACE

class @!Classname!@;

#if !defined(OSG_DO_DOC) // created as a dummy class, remove to prevent doubles
//! @!Classname!@Ptr

OSG_GEN_CONTAINERPTR(@!Classname!@);

#endif

#if !defined(OSG_DO_DOC) || (OSG_DOC_LEVEL >= 3)
@@if isInLibrary
/*! \ingroup Grp@!Libname!@FieldTraits
 */
@@endif
#if !defined(OSG_DOC_DEV_TRAITS)
/*! \hideinhierarchy */
#endif

template <>
struct FieldTraits<@!Classname!@Ptr> :
    public FieldTraitsFCPtrBase<@!Classname!@Ptr>
{
  private:

    static DataType             _type;

  public:

    typedef FieldTraits<@!Classname!@Ptr>  Self;

    enum                        { Convertible = NotConvertible };
@@if PointerField

    @@if isInLibrary
    static OSG_@!LIBNAME!@_DLLMAPPING DataType &getType(void);
    @@else // isInLibrary
    static DataType &getType(void);
    @@endif // isInLibrary

@@endif // PointerField
@@if SFPointerField
    template<typename RefCountPolicy> inline
    static const Char8    *getSName     (void);

//    static const char *getSName(void) { return "SF@!Classname!@Ptr"; }
@@endif // SFPointerField
@@if MFPointerField
    template<typename RefCountPolicy> inline
    static const Char8    *getMName     (void);

//    static const char *getMName(void) { return "MF@!Classname!@Ptr"; }
@@endif // MFPointerField
};

@@if SFPointerField
template<> inline
const Char8 *FieldTraits<@!Classname!@Ptr, 0>::getSName<RecordedRefCounts>(void)
{
    return "SFRec@!Classname!@Ptr"; 
}

template<> inline
const Char8 *FieldTraits<@!Classname!@Ptr, 0>::getSName<UnrecordedRefCounts>(void)
{
    return "SFUnrec@!Classname!@Ptr"; 
}

template<> inline
const Char8 *FieldTraits<@!Classname!@Ptr, 0>::getSName<WeakRefCounts>(void)
{
    return "SFWeak@!Classname!@Ptr"; 
}

template<> inline
const Char8 *FieldTraits<@!Classname!@Ptr, 0>::getSName<NoRefCounts>(void)
{
    return "SFUnrefd@!Classname!@Ptr"; 
}
@@endif

@@if MFPointerField
template<> inline
const Char8 *FieldTraits<@!Classname!@Ptr, 0>::getMName<RecordedRefCounts>(void)
{
    return "MFRec@!Classname!@Ptr"; 
}

template<> inline
const Char8 *FieldTraits<@!Classname!@Ptr, 0>::getMName<UnrecordedRefCounts>(void)
{
    return "MFUnrec@!Classname!@Ptr"; 
}

template<> inline
const Char8 *FieldTraits<@!Classname!@Ptr, 0>::getMName<WeakRefCounts>(void)
{
    return "MFWeak@!Classname!@Ptr"; 
}

template<> inline
const Char8 *FieldTraits<@!Classname!@Ptr, 0>::getMName<NoRefCounts>(void)
{
    return "MFUnrefd@!Classname!@Ptr"; 
}
@@endif

#if !defined(OSG_DOC_DEV_TRAITS)
/*! \class  FieldTraitsTemplateBase<@!Classname!@Ptr, 0>
    \hideinhierarchy
 */
#endif
@@if ChildField


template <>
struct FieldTraits<@!Classname!@Ptr, 1> :
    public FieldTraitsFCPtrBase<@!Classname!@Ptr, 1>
{
  private:

  public:

    typedef FieldTraits<@!Classname!@Ptr, 1>  Self;
    typedef @!ChildFieldParent!@Ptr           ParentType;

@@if ChildSParent
    static const FieldCardinality eFieldCard = SingleField;
@@endif
@@if ChildMParent
    static const FieldCardinality eFieldCard = MultiField;
@@endif

    enum                        { Convertible = NotConvertible };
@@if PointerField

    @@if isInLibrary
    static OSG_@!LIBNAME!@_DLLMAPPING DataType &getType(void);
    @@else // isInLibrary
    static DataType &getType(void);
    @@endif // isInLibrary

@@endif // PointerField
@@if SFPointerField
    template<typename RefCountPolicy> inline
    static const Char8    *getSName     (void);

//    static const char *getSName(void) { return "SF@!Classname!@Ptr"; }
@@endif // SFPointerField
@@if MFPointerField
    template<typename RefCountPolicy> inline
    static const Char8    *getMName     (void);

//    static const char *getMName(void) { return "MF@!Classname!@Ptr"; }
@@endif // MFPointerField
};

@@if SFPointerField
template<> inline
const Char8 *FieldTraits<@!Classname!@Ptr, 1>::getSName<RecordedRefCounts>(void)
{
    return "SFRec@!ChildFieldParent!@Child@!Classname!@Ptr"; 
}

template<> inline
const Char8 *FieldTraits<@!Classname!@Ptr, 1>::getSName<UnrecordedRefCounts>(void)
{
    return "SFUnrec@!ChildFieldParent!@Child@!Classname!@Ptr"; 
}

template<> inline
const Char8 *FieldTraits<@!Classname!@Ptr, 1>::getSName<WeakRefCounts>(void)
{
    return "SFWeak@!ChildFieldParent!@Child@!Classname!@Ptr"; 
}

template<> inline
const Char8 *FieldTraits<@!Classname!@Ptr, 1>::getSName<NoRefCounts>(void)
{
    return "SFUnrefd@!ChildFieldParent!@Child@!Classname!@Ptr"; 
}
@@endif

@@if MFPointerField
template<> inline
const Char8 *FieldTraits<@!Classname!@Ptr, 1>::getMName<RecordedRefCounts>(void)
{
    return "MFRec@!ChildFieldParent!@Child@!Classname!@Ptr"; 
}

template<> inline
const Char8 *FieldTraits<@!Classname!@Ptr, 1>::getMName<UnrecordedRefCounts>(void)
{
    return "MFUnrec@!ChildFieldParent!@Child@!Classname!@Ptr"; 
}

template<> inline
const Char8 *FieldTraits<@!Classname!@Ptr, 1>::getMName<WeakRefCounts>(void)
{
    return "MFWeak@!ChildFieldParent!@Child@!Classname!@Ptr"; 
}

template<> inline
const Char8 *FieldTraits<@!Classname!@Ptr, 1>::getMName<NoRefCounts>(void)
{
    return "MFUnrefd@!ChildFieldParent!@Child@!Classname!@Ptr"; 
}
@@endif

@@endif

#endif // !defined(OSG_DO_DOC) || (OSG_DOC_LEVEL >= 3)


@@if SFPointerField
#if !defined(OSG_DO_DOC) || defined(OSG_DOC_FIELD_TYPEDEFS)
    @@if isInLibrary
/*! \ingroup Grp@!Libname!@FieldSingle */

    @@endif // isInLibrary
typedef FieldContainerPtrSField<@!Classname!@Ptr,
                                RecordedRefCounts  > SFRec@!Classname!@Ptr;
typedef FieldContainerPtrSField<@!Classname!@Ptr,
                                UnrecordedRefCounts> SFUnrec@!Classname!@Ptr;
typedef FieldContainerPtrSField<@!Classname!@Ptr,
                                WeakRefCounts      > SFWeak@!Classname!@Ptr;
typedef FieldContainerPtrSField<@!Classname!@Ptr,
                                NoRefCounts        > SFUncounted@!Classname!@Ptr;
#endif

@@endif

@@if MFPointerField
#if !defined(OSG_DO_DOC) || defined(OSG_DOC_FIELD_TYPEDEFS)
    @@if isInLibrary
/*! \ingroup Grp@!Libname!@FieldMulti */

    @@endif // isInLibrary
typedef FieldContainerPtrMField<@!Classname!@Ptr,
                                RecordedRefCounts  > MFRec@!Classname!@Ptr;
typedef FieldContainerPtrMField<@!Classname!@Ptr,
                                UnrecordedRefCounts> MFUnrec@!Classname!@Ptr;
typedef FieldContainerPtrMField<@!Classname!@Ptr,
                                WeakRefCounts      > MFWeak@!Classname!@Ptr;
typedef FieldContainerPtrMField<@!Classname!@Ptr,
                                NoRefCounts        > MFUncounted@!Classname!@Ptr;
#endif


@@endif
@@if ChildSFields

typedef FieldContainerPtrChildSField<
          @!Classname!@Ptr, 
          UnrecordedRefCounts,
          1                  > SFUnrec@!ChildFieldParent!@Child@!Classname!@Ptr;

@@endif
@@if ChildMFields

typedef FieldContainerPtrChildMField<
          @!Classname!@Ptr, 
          UnrecordedRefCounts,
          1                  > MFUnrec@!ChildFieldParent!@Child@!Classname!@Ptr;

@@endif
OSG_END_NAMESPACE

#endif /* _OSG@!CLASSNAME!@FIELDS_H_ */
