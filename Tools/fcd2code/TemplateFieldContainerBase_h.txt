/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *                            www.opensg.org                                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class @!Classname!@
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/


#ifndef _OSG@!CLASSNAME!@BASE_H_
#define _OSG@!CLASSNAME!@BASE_H_
#ifdef __sgi
#pragma once
#endif


#include "@!HeaderPrefix!@OSGConfig.h"
@@if isInLibrary
#include "OSG@!Libname!@Def.h"
@@endif // isInLibrary

#include "@!HeaderPrefix!@OSGBaseTypes.h"

#include "@!ParentHeaderPrefix!@OSG@!Parent!@.h" // Parent

@@if !isDecorator
    @@BeginFieldLoop@@
#include "@!field.TypeInclude!@" // @!field.Name!@ type
    @@EndFieldLoop@@
@@else // !isDecorator
#include "OSG@!Parent!@Fields.h" // Decoratee type
@@endif // !isDecorator

#include "OSG@!Classname!@Fields.h"

OSG_BEGIN_NAMESPACE

class @!Classname!@;

//! \brief @!Classname!@ Base Class.

@@if isInLibrary
class OSG_@!LIBNAME!@_DLLMAPPING @!Classname!@Base : public @!Parent!@
@@else // isInLibrary
class @!Classname!@Base : public @!Parent!@
@@endif // isInLibrary
{
  public:

    typedef @!Parent!@ Inherited;
    typedef @!Parent!@ ParentContainer;

    typedef Inherited::TypeObject TypeObject;
    typedef TypeObject::InitPhase InitPhase;

    typedef PointerFwdBuilder<@!Parent!@Ptr,
                              @!Parent!@ConstPtr,
                              @!Classname!@>::ObjPtr         ObjPtr;
    typedef PointerFwdBuilder<@!Parent!@Ptr,
                              @!Parent!@ConstPtr,
                              @!Classname!@>::ObjPtrConst    ObjPtrConst;
    typedef PointerFwdBuilder<@!Parent!@Ptr,
                              @!Parent!@ConstPtr,
                              @!Classname!@>::ObjConstPtr    ObjConstPtr;
    typedef PointerFwdBuilder<@!Parent!@Ptr,
                              @!Parent!@ConstPtr,
                              @!Classname!@>::ObjPtrArg      ObjPtrArg;
    typedef PointerFwdBuilder<@!Parent!@Ptr,
                              @!Parent!@ConstPtr,
                              @!Classname!@>::ObjConstPtrArg ObjConstPtrArg;
    typedef PointerFwdBuilder<@!Parent!@Ptr,
                              @!Parent!@ConstPtr,
                              @!Classname!@>::ObjPtrConstArg ObjPtrConstArg;

    /*==========================  PUBLIC  =================================*/

  public:

@@if isDecorator
    enum
    {
        DecorateeFieldId        = Inherited::NextFieldId,
        NextFieldId             = DecorateeFieldId          + 1
    };

    static const OSG::BitVector DecorateeFieldMask =
        (TypeTraits<BitVector>::One << DecorateeFieldId);
@@else // isDecorator
    @@if hasFields
    enum
    {
        @@BeginFieldLoop
            @@if field.isFirstField
        @!field.Name!@FieldId = Inherited::NextFieldId,
                @@if field.isLastField
        NextFieldId = @!field.Name!@FieldId + 1
                @@endif // field.isLastField
            @@else // field.isFirstField
        @!field.Name!@FieldId = @!field.prevField.Name!@FieldId + 1,
                @@if field.isLastField
        NextFieldId = @!field.Name!@FieldId + 1
                @@endif // field.isLastField
            @@endif // field.isFirstField
        @@EndFieldLoop
    };

        @@BeginFieldLoop
    static const OSG::BitVector @!field.Name!@FieldMask =
        (TypeTraits<BitVector>::One << @!field.Name!@FieldId);
        @@EndFieldLoop
    static const OSG::BitVector NextFieldMask =
        (TypeTraits<BitVector>::One << NextFieldId);
    @@endif // hasFields
@@endif // isDecorator

    /*---------------------------------------------------------------------*/
    /*! \name                    Class Get                                 */
    /*! \{                                                                 */

    static FieldContainerType &getClassType   (void);
    static UInt32              getClassTypeId (void);
    static UInt16              getClassGroupId(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                FieldContainer Get                            */
    /*! \{                                                                 */

    virtual       FieldContainerType &getType         (void);
    virtual const FieldContainerType &getType         (void) const;

    virtual       UInt32              getContainerSize(void) const;

    /*! \}                                                                 */
@@if hasPublicFields
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

    @@if isDecorator
    @!MethodType:7!@       const SF@!Parent!@Ptr *getSFDecoratee(void) const;
    @@endif // isDecorator
    @@BeginFieldLoop@@
        @@if field.isPublic
            @@if field.isPtrField
    @!field.MethodType:7!@ const @!field.CARD!@@!field.TypeCaps:17!@ *get@!field.CARD!@@!field.Name:15!@ (void) const;
            @@else // field.isPtrField

                @@if CompatOneSix
#ifdef OSG_1_COMPAT
    @!field.MethodType:7!@       @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps:17!@ *get@!field.CARD!@@!field.Name:15!@ (void);
#endif
                @@endif // CompatOneSix
    @!field.MethodType:7!@       @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps:17!@ *edit@!field.CARD!@@!field.Name:15!@(void);
    @!field.MethodType:7!@ const @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps:17!@ *get@!field.CARD!@@!field.Name:15!@ (void) const;
            @@endif // field.isPtrField
        @@endif // field.isPublic
    @@EndFieldLoop@@

    @@if isDecorator
    @!MethodType:7!@             @!Parent!@PtrConst getDecoratee(void) const;
    @@endif // isDecorator
    @@BeginFieldLoop@@
        @@if field.isPublic
            @@if field.isSField

                @@if field.isPtrField
    @!field.MethodType:7!@       @!field.Type!@Const get@!field.Name:15!@(void) const;
                @@else // field.isPtrField
                    @@if CompatOneSix
#ifdef OSG_1_COMPAT
    @!field.MethodType:7!@       @!field.Type:19!@ &get@!field.Name:15!@ (void);
#endif
                    @@endif // CompatOneSix
    @!field.MethodType:7!@       @!field.Type:19!@ &edit@!field.Name:15!@(void);
    @!field.MethodType:7!@ const @!field.Type:19!@ &get@!field.Name:15!@ (void) const;
                @@endif // field.isPtrField
            @@else // field.isSField

                @@if field.isPtrField
    @!field.MethodType:7!@       @!field.Type!@Const get@!field.Name:15!@(const UInt32 index) const;
                @@else // field.isPtrField
                    @@if CompatOneSix
#ifdef OSG_1_COMPAT
    @!field.MethodType:7!@       @!field.Type:19!@ &get@!field.Name:15!@ (const UInt32 index);
    @!field.MethodType:7!@       @!field.CARD!@@!field.TypeCaps:17!@ &get@!field.Name:15!@(void);
#endif
                    @@endif // CompatOneSix
    @!field.MethodType:7!@       @!field.Type:19!@ &edit@!field.Name:15!@(const UInt32 index);
    @!field.MethodType:7!@ const @!field.Type:19!@ &get@!field.Name:15!@ (const UInt32 index) const;
    @!field.MethodType:7!@       @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps:17!@ &edit@!field.Name:15!@(void);
                @@endif // field.isPtrField
    @!field.MethodType:7!@ const @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps:17!@ &get@!field.Name:15!@(void) const;
            @@endif // field.isSField
        @@endif // field.isPublic
    @@EndFieldLoop@@

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

    @@if isDecorator
    @!MethodType:7!@       void setDecoratee      ( const @!Parent!@Ptr &value );
    @@endif // isDecorator
    @@BeginSFFieldLoop@@
        @@if field.isPublic
            @@if field.isPtrField
                @@if field.PassFieldMask
    @!field.MethodType:7!@ void set@!field.Name:15!@(      @!field.Type!@ConstArg value,
                    const UInt16        uiStoredInFieldId = InvalidParentEPos);
                @@else // field.PassFieldMask
    @!field.MethodType:7!@ void set@!field.Name:15!@(@!field.Type!@ConstArg value);
                @@endif // field.PassFieldMask
            @@else // field.isPtrField
    @!field.MethodType:7!@ void set@!field.Name:15!@(const @!field.Type!@ &value);
            @@endif // field.isPtrField
        @@endif // field.isPublic
    @@EndSFFieldLoop@@

    /*! \}                                                                 */
    @@if hasPtrFields
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr Field Set                                 */
    /*! \{                                                                 */

    virtual void pushToField     (      FieldContainerPtrConstArg pNewElement,
                                  const UInt32                    uiFieldId  );

    virtual void insertIntoMField(const UInt32                    uiIndex,
                                        FieldContainerPtrConstArg pNewElement,
                                  const UInt32                    uiFieldId  );

    virtual void replaceInMField (const UInt32                    uiIndex,
                                        FieldContainerPtrConstArg pNewElement,
                                  const UInt32                    uiFieldId  );

    virtual void replaceInMField (      FieldContainerPtrConstArg pOldElement,
                                        FieldContainerPtrConstArg pNewElement,
                                  const UInt32                    uiFieldId  );

    virtual void removeFromMField(const UInt32                    uiIndex,
                                  const UInt32                    uiFieldId  );

    virtual void removeFromMField(      FieldContainerPtrConstArg pElement,
                                  const UInt32                    uiFieldId  );

    virtual void clearField      (const UInt32                    uiFieldId  );

    /*! \}                                                                 */
    @@endif // hasPtrFields
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    @@BeginMFFieldLoop@@
        @@if field.isPublic
            @@if field.isPtrField
                @@if field.writePushToField
    void @!field.PushToField:15!@           (@!field.Type!@ConstArg value   );
                @@endif // field.writePushToField
                @@if field.writeInsertIntoMField
    void @!field.InsertIntoMField:15!@      (UInt32                uiIndex,
                                             @!field.Type!@ConstArg value   );
                @@endif // field.writeInsertIntoMField
                @@if field.writeReplaceInMFieldIndex
    void @!field.ReplaceInMFieldIndex:15!@  (UInt32                uiIndex,
                                             @!field.Type!@ConstArg value   );
                @@endif // field.writeReplaceInMFieldIndex
                @@if field.writeReplaceInMFieldObject
    void @!field.ReplaceInMFieldObject:15!@ (@!field.Type!@ConstArg pOldElem,
                                             @!field.Type!@ConstArg pNewElem);
                @@endif // field.writeReplaceInMFieldObject
                @@if field.writeRemoveFromMFieldIndex
    void @!field.RemoveFromMFieldIndex:15!@ (UInt32                uiIndex );
                @@endif // field.writeRemoveFromMFieldIndex
                @@if field.writeRemoveFromMFieldObject
    void @!field.RemoveFromMFieldObject:15!@(@!field.Type!@ConstArg value   );
                @@endif // field.writeRemoveFromMFieldObject
                @@if field.writeClearField
    void @!field.ClearField:15!@            (void                          );
                @@endif // field.writeClearField

            @@else // field.isPtrField

                @@if field.writePushToField
    void @!field.PushToField:34!@(const @!field.Type:10!@&value   );
                @@endif // field.writePushToField
                @@if field.writeInsertIntoMField
    void @!field.InsertIntoMField:34!@(      UInt32     uiIndex,
                                            const @!field.Type:10!@&value   );
                @@endif // field.writeInsertIntoMField
                @@if field.writeReplaceInMFieldIndex
    void @!field.ReplaceInMFieldIndex:34!@(      UInt32     uiIndex,
                                            const @!field.Type:10!@&value   );
                @@endif // field.writeReplaceInMFieldIndex
                @@if field.writeReplaceInMFieldObject
    void @!field.ReplaceInMFieldObject:34!@(const @!field.Type:10!@&pOldElem,
                                            const @!field.Type:10!@&pNewElem);
                @@endif // field.writeReplaceInMFieldObject
                @@if field.writeRemoveFromMFieldIndex
    void @!field.RemoveFromMFieldIndex:34!@(      UInt32     uiIndex );
                @@endif // field.writeRemoveFromMFieldIndex
                @@if field.writeRemoveFromMFieldObject
    void @!field.RemoveFromMFieldObject:34!@(const @!field.Type:10!@&value   );
                @@endif // field.writeRemoveFromMFieldObject
                @@if field.writeClearField
    void @!field.ClearField:34!@(      void               );
                @@endif // field.writeClearField

            @@endif // field.isPtrField
        @@endif // field.isPublic

    @@EndMFFieldLoop@@
    /*! \}                                                                 */
@@endif // hasPublicFields
    /*---------------------------------------------------------------------*/
    /*! \name                   Binary Access                              */
    /*! \{                                                                 */

    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);
    virtual void   copyToBin  (BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);
    virtual void   copyFromBin(BinaryDataHandler &pMem,
                               ConstFieldMaskArg  whichField);


    /*! \}                                                                 */
@@if !isAbstract
    /*---------------------------------------------------------------------*/
    /*! \name                   Construction                               */
    /*! \{                                                                 */

    static  @!Classname!@Ptr create     (void);
    static  @!Classname!@Ptr createEmpty(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Copy                                   */
    /*! \{                                                                 */

    virtual FieldContainerPtr shallowCopy(void) const;

    /*! \}                                                                 */
@@endif // !isAbstract
    /*=========================  PROTECTED  ===============================*/

  protected:

    static TypeObject _type;

    static void   classDescInserter(TypeObject &oType);
    static Char8 *getClassname     (void             );

@@if hasFields
    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    @@if isDecorator
    SF@!Parent!@Ptr _sfDecoratee;
    @@else // isDecorator
        @@BeginFieldLoop@@
            @@if !field.isPrivate
    @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps:15!@ _@!field.VarName!@;
            @@endif // !field.isPrivate
        @@EndFieldLoop@@
    @@endif // isDecorator

    /*! \}                                                                 */
@@endif // hasFields
    /*---------------------------------------------------------------------*/
    /*! \name                   Constructors                               */
    /*! \{                                                                 */

    @!Classname!@Base(void);
    @!Classname!@Base(const @!Classname!@Base &source);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                   Destructors                                */
    /*! \{                                                                 */

    virtual ~@!Classname!@Base(void);

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     onCreate                                */
    /*! \{                                                                 */

@@if hasPtrFields
    void onCreate(const @!Classname!@ *source = NULL);
@@endif // hasPtrFields

    /*! \}                                                                 */
@@if hasProtectedFields
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

    @@BeginFieldLoop@@
        @@if field.isProtected
            @@if field.isPtrField
    @!field.MethodType:7!@ const @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps:17!@ *get@!field.CARD!@@!field.Name:15!@ (void) const;
            @@else // field.isPtrField

                @@if CompatOneSix
#ifdef OSG_1_COMPAT
    @!field.MethodType:7!@       @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps:17!@ *get@!field.CARD!@@!field.Name:15!@ (void);
#endif
                @@endif // CompatOneSix
    @!field.MethodType:7!@       @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps:17!@ *edit@!field.CARD!@@!field.Name:15!@(void);
    @!field.MethodType:7!@ const @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps:17!@ *get@!field.CARD!@@!field.Name:15!@ (void) const;
            @@endif // field.isPtrField
        @@endif // field.isProtected
    @@EndFieldLoop@@

    @@BeginFieldLoop@@
        @@if field.isProtected
            @@if field.isSField

                @@if field.isPtrField
    @!field.MethodType:7!@       @!field.Type!@Const get@!field.Name:15!@(void) const;
                @@else // field.isPtrField
                    @@if CompatOneSix
#ifdef OSG_1_COMPAT
    @!field.MethodType:7!@       @!field.Type:19!@ &get@!field.Name:15!@ (void);
#endif
                    @@endif // CompatOneSix
    @!field.MethodType:7!@       @!field.Type:19!@ &edit@!field.Name:15!@(void);
    @!field.MethodType:7!@ const @!field.Type:19!@ &get@!field.Name:15!@ (void) const;
                @@endif // field.isPtrField
            @@else // field.isSField

                @@if field.isPtrField
    @!field.MethodType:7!@       @!field.Type!@Const get@!field.Name:15!@(const UInt32 index) const;
                @@else // field.isPtrField
                    @@if CompatOneSix
#ifdef OSG_1_COMPAT
    @!field.MethodType:7!@       @!field.Type:19!@ &get@!field.Name:15!@ (const UInt32 index);
    @!field.MethodType:7!@       @!field.CARD!@@!field.TypeCaps:17!@ &get@!field.Name:15!@(void);
#endif
                    @@endif // CompatOneSix
    @!field.MethodType:7!@       @!field.Type:19!@ &edit@!field.Name:15!@(const UInt32 index);
    @!field.MethodType:7!@ const @!field.Type:19!@ &get@!field.Name:15!@ (const UInt32 index) const;
    @!field.MethodType:7!@       @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps:17!@ &edit@!field.Name:15!@(void);
                @@endif // field.isPtrField
    @!field.MethodType:7!@ const @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps:17!@ &get@!field.Name:15!@ (void) const;
            @@endif // field.isSField
        @@endif // field.isProtected
    @@EndFieldLoop@@

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

    @@BeginSFFieldLoop@@
        @@if field.isProtected
            @@if field.isPtrField
    @!field.MethodType:7!@ void set@!field.Name:15!@(@!field.Type!@ConstArg value);
            @@else // field.isPtrField
    @!field.MethodType:7!@ void set@!field.Name:15!@(const @!field.Type!@ &value);
            @@endif // field.isPtrField
        @@endif // field.isProtected
    @@EndSFFieldLoop@@

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    @@BeginMFFieldLoop@@
        @@if field.isProtected
            @@if field.isPtrField
                @@if field.writePushToField
    void @!field.PushToField:15!@           (@!field.Type!@ConstArg value   );
                @@endif // field.writePushToField
                @@if field.writeInsertIntoMField
    void @!field.InsertIntoMField:15!@      (UInt32                uiIndex,
                                             @!field.Type!@ConstArg value   );
                @@endif // field.writeInsertIntoMField
                @@if field.writeReplaceInMFieldIndex
    void @!field.ReplaceInMFieldIndex:15!@  (UInt32                uiIndex,
                                             @!field.Type!@ConstArg value   );
                @@endif // field.writeReplaceInMFieldIndex
                @@if field.writeReplaceInMFieldObject
    void @!field.ReplaceInMFieldObject:15!@ (@!field.Type!@ConstArg pOldElem,
                                             @!field.Type!@ConstArg pNewElem);
                @@endif // field.writeReplaceInMFieldObject
                @@if field.writeRemoveFromMFieldIndex
    void @!field.RemoveFromMFieldIndex:15!@ (UInt32                uiIndex );
                @@endif // field.writeRemoveFromMFieldIndex
                @@if field.writeRemoveFromMFieldObject
    void @!field.RemoveFromMFieldObject:15!@(@!field.Type!@ConstArg value   );
                @@endif // field.writeRemoveFromMFieldObject
                @@if field.writeClearField
    void @!field.ClearField:15!@            (void                          );
                @@endif // field.writeClearField

            @@else // field.isPtrField

                @@if field.writePushToField
    void @!field.PushToField:15!@           (const @!field.Type!@& value   );
                @@endif // field.writePushToField
                @@if field.writeInsertIntoMField
    void @!field.InsertIntoMField:15!@      (UInt32                uiIndex,
                                             const @!field.Type!@& value   );
                @@endif // field.writeInsertIntoMField
                @@if field.writeReplaceInMFieldIndex
    void @!field.ReplaceInMFieldIndex:15!@  (UInt32                uiIndex,
                                             const @!field.Type!@& value   );
                @@endif // field.writeReplaceInMFieldIndex
                @@if field.writeReplaceInMFieldObject
    void @!field.ReplaceInMFieldObject:15!@ (const @!field.Type!@& pOldElem,
                                             const @!field.Type!@& pNewElem);
                @@endif // field.writeReplaceInMFieldObject
                @@if field.writeRemoveFromMFieldIndex
    void @!field.RemoveFromMFieldIndex:15!@ (UInt32                uiIndex );
                @@endif // field.writeRemoveFromMFieldIndex
                @@if field.writeRemoveFromMFieldObject
    void @!field.RemoveFromMFieldObject:15!@(const @!field.Type!@& value   );
                @@endif // field.writeRemoveFromMFieldObject
                @@if field.writeClearField
    void @!field.ClearField:15!@            (void                          );
                @@endif // field.writeClearField

            @@endif // field.isPtrField
        @@endif // field.isProtected

    @@EndMFFieldLoop@@

    /*! \}                                                                 */
@@endif // hasProtectedFields
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

#ifdef OSG_MT_FIELDCONTAINERPTR
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo,
                                 UInt32             uiCopyOffset);

            void execSync (      @!Classname!@Base *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo,
                                 UInt32             uiCopyOffset);
#endif
#ifdef OSG_MT_CPTR_ASPECT
    virtual void execSyncV(      FieldContainer    &oFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);

            void execSync (      @!Classname!@Base *pFrom,
                                 ConstFieldMaskArg  whichField,
                                 AspectOffsetStore &oOffsets,
                                 ConstFieldMaskArg  syncMode  ,
                           const UInt32             uiSyncInfo);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */

#if 0
    virtual void execBeginEditV(ConstFieldMaskArg whichField,
                                UInt32            uiAspect,
                                UInt32            uiContainerSize);

            void execBeginEdit (ConstFieldMaskArg whichField,
                                UInt32            uiAspect,
                                UInt32            uiContainerSize);
#endif

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                     Aspect Create                            */
    /*! \{                                                                 */
@@if !isAbstract

#ifdef OSG_MT_CPTR_ASPECT
    virtual FieldContainerPtr createAspectCopy(void) const;
#endif
@@endif // !isAbstract

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Edit                                   */
    /*! \{                                                                 */
    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                       Sync                                   */
    /*! \{                                                                 */

    virtual void resolveLinks(void);

    /*! \}                                                                 */
    /*==========================  PRIVATE  ================================*/

  private:
@@if hasPrivateFields

    /*---------------------------------------------------------------------*/
    /*! \name                      Fields                                  */
    /*! \{                                                                 */

    @@if !isDecorator
        @@BeginFieldLoop@@
            @@if field.isPrivate
    @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps:15!@ _@!field.VarName!@;
            @@endif // field.isPrivate
        @@EndFieldLoop@@
    @@endif // !isDecorator

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Get                                 */
    /*! \{                                                                 */

    @@BeginFieldLoop@@
        @@if field.isPrivate
            @@if field.isPtrField
    @!field.MethodType:7!@ const @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps:17!@ *get@!field.CARD!@@!field.Name:15!@ (void) const;
            @@else // field.isPtrField

                @@if CompatOneSix
#ifdef OSG_1_COMPAT
    @!field.MethodType:7!@       @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps:17!@ *get@!field.CARD!@@!field.Name:15!@ (void);
#endif
                @@endif // CompatOneSix
    @!field.MethodType:7!@       @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps:17!@ *edit@!field.CARD!@@!field.Name:15!@(void);
    @!field.MethodType:7!@ const @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps:17!@ *get@!field.CARD!@@!field.Name:15!@ (void) const;
            @@endif // field.isPtrField
        @@endif // field.isPrivate
    @@EndFieldLoop@@
    @@BeginFieldLoop@@
        @@if field.isPrivate
            @@if field.isSField

                @@if field.isPtrField
    @!field.MethodType:7!@       @!field.Type!@Const get@!field.Name:15!@(void) const;
                @@else // field.isPtrField
                    @@if CompatOneSix
#ifdef OSG_1_COMPAT
    @!field.MethodType:7!@       @!field.Type:19!@ &get@!field.Name:15!@(void);
#endif
                    @@endif // CompatOneSix
    @!field.MethodType:7!@       @!field.Type:19!@ &edit@!field.Name:15!@(void);
    @!field.MethodType:7!@ const @!field.Type:19!@ &get@!field.Name:15!@(void) const;
                @@endif // field.isPtrField
            @@else // field.isSField

                @@if field.isPtrField
    @!field.MethodType:7!@       @!field.Type!@Const get@!field.Name:15!@(const UInt32 index) const;
                @@else // field.isPtrField
                    @@if CompatOneSix
#ifdef OSG_1_COMPAT
    @!field.MethodType:7!@       @!field.Type:19!@ &get@!field.Name:15!@ (const UInt32 index);
    @!field.MethodType:7!@       @!field.CARD!@@!field.TypeCaps:17!@ &get@!field.Name:15!@(void);
#endif
                    @@endif // CompatOneSix
    @!field.MethodType:7!@       @!field.Type:19!@ &edit@!field.Name:15!@(const UInt32 index);
    @!field.MethodType:7!@ const @!field.Type:19!@ &get@!field.Name:15!@ (const UInt32 index) const;
    @!field.MethodType:7!@       @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps:17!@ &get@!field.Name:15!@(void);
                @@endif // field.isPtrField
    @!field.MethodType:7!@ const @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps:17!@ &get@!field.Name:15!@(void) const;
            @@endif // field.isSField
        @@endif // field.isPrivate
    @@EndFieldLoop@@

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                    Field Set                                 */
    /*! \{                                                                 */

    @@BeginSFFieldLoop@@
        @@if field.isPrivate
            @@if field.isPtrField
    @!field.MethodType:7!@ void set@!field.Name:15!@(@!field.Type!@ConstArg value);
            @@else // field.isPtrField
    @!field.MethodType:7!@ void set@!field.Name:15!@(const @!field.Type!@ &value);
            @@endif // field.isPtrField
        @@endif // field.isPrivate
    @@EndSFFieldLoop@@

    /*! \}                                                                 */
    /*---------------------------------------------------------------------*/
    /*! \name                Ptr MField Set                                */
    /*! \{                                                                 */

    @@BeginMFFieldLoop@@
        @@if field.isPrivate

            @@if field.isPtrField
                @@if field.writePushToField
    void @!field.PushToField:15!@           (@!field.Type!@ConstArg value   );
                @@endif // field.writePushToField
                @@if field.writeInsertIntoMField
    void @!field.InsertIntoMField:15!@      (UInt32                uiIndex,
                                             @!field.Type!@ConstArg value   );
                @@endif // field.writeInsertIntoMField
                @@if field.writeReplaceInMFieldIndex
    void @!field.ReplaceInMFieldIndex:15!@  (UInt32                uiIndex,
                                             @!field.Type!@ConstArg value   );
                @@endif // field.writeReplaceInMFieldIndex
                @@if field.writeReplaceInMFieldObject
    void @!field.ReplaceInMFieldObject:15!@ (@!field.Type!@ConstArg pOldElem,
                                             @!field.Type!@ConstArg pNewElem);
                @@endif // field.writeReplaceInMFieldObject
                @@if field.writeRemoveFromMFieldIndex
    void @!field.RemoveFromMFieldIndex:15!@ (UInt32                uiIndex );
                @@endif // field.writeRemoveFromMFieldIndex
                @@if field.writeRemoveFromMFieldObject
    void @!field.RemoveFromMFieldObject:15!@(@!field.Type!@ConstArg value   );
                @@endif // field.writeRemoveFromMFieldObject
                @@if field.writeClearField
    void @!field.ClearField:15!@            (void                          );
                @@endif // field.writeClearField

            @@else // field.isPtrField

                @@if field.writePushToField
    void @!field.PushToField:15!@           (const @!field.Type!@& value   );
                @@endif // field.writePushToField
                @@if field.writeInsertIntoMField
    void @!field.InsertIntoMField:15!@      (UInt32                uiIndex,
                                             const @!field.Type!@& value   );
                @@endif // field.writeInsertIntoMField
                @@if field.writeReplaceInMFieldIndex
    void @!field.ReplaceInMFieldIndex:15!@  (UInt32                uiIndex,
                                             const @!field.Type!@& value   );
                @@endif // field.writeReplaceInMFieldIndex
                @@if field.writeReplaceInMFieldObject
    void @!field.ReplaceInMFieldObject:15!@ (const @!field.Type!@& pOldElem,
                                             const @!field.Type!@& pNewElem);
                @@endif // field.writeReplaceInMFieldObject
                @@if field.writeRemoveFromMFieldIndex
    void @!field.RemoveFromMFieldIndex:15!@ (UInt32                uiIndex );
                @@endif // field.writeRemoveFromMFieldIndex
                @@if field.writeRemoveFromMFieldObject
    void @!field.RemoveFromMFieldObject:15!@(const @!field.Type!@& value    );
                @@endif // field.writeRemoveFromMFieldObject
                @@if field.writeClearField
    void @!field.ClearField:15!@            (void                          );
                @@endif // field.writeClearField

            @@endif // field.isPtrField
        @@endif // field.isPrivate

    @@EndMFFieldLoop@@

    /*! \}                                                                 */
@@endif // hasPrivateFields

    // prohibit default functions (move to 'public' if you need one)
    void operator =(const @!Classname!@Base &source);
};

typedef @!Classname!@Base *@!Classname!@BaseP;

/** Type specific RefPtr type for @!Classname!@. */
typedef RefPtr<@!Classname!@Ptr> @!Classname!@RefPtr;

typedef boost::mpl::if_<
    boost::mpl::bool_<@!Classname!@Base::isNodeCore>,
    CoredNodePtr<@!Classname!@>,
    FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC>::type

        @!Classname!@NodePtr;

OSG_END_NAMESPACE

#define OSG@!CLASSNAME!@BASE_HEADER_CVSID "@(#)$Id: FCBaseTemplate_h.h 313 2006-10-18 22:54:24Z allenb $"

#endif /* _OSG@!CLASSNAME!@BASE_H_ */
