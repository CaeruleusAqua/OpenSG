/*---------------------------------------------------------------------------*\
 *                                OpenSG                                     *
 *                                                                           *
 *                                                                           *
 *               Copyright (C) 2000-2006 by the OpenSG Forum                 *
 *                                                                           *
 *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                License                                    *
 *                                                                           *
 * This library is free software; you can redistribute it and/or modify it   *
 * under the terms of the GNU Library General Public License as published    *
 * by the Free Software Foundation, version 2.                               *
 *                                                                           *
 * This library is distributed in the hope that it will be useful, but       *
 * WITHOUT ANY WARRANTY; without even the implied warranty of                *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *
 * Library General Public License for more details.                          *
 *                                                                           *
 * You should have received a copy of the GNU Library General Public         *
 * License along with this library; if not, write to the Free Software       *
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *
 *                                                                           *
\*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*\
 *                                Changes                                    *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
 *                                                                           *
\*---------------------------------------------------------------------------*/

/*****************************************************************************\
 *****************************************************************************
 **                                                                         **
 **                  This file is automatically generated.                  **
 **                                                                         **
 **          Any changes made to this file WILL be lost when it is          **
 **           regenerated, which can become necessary at any time.          **
 **                                                                         **
 **     Do not change this file, changes should be done in the derived      **
 **     class @!Classname!@!
 **                                                                         **
 *****************************************************************************
\*****************************************************************************/

OSG_BEGIN_NAMESPACE


//! access the type of the class
inline
OSG::FieldContainerType &@!Classname!@Base::getClassType(void)
{
    return _type;
}

//! access the numerical type of the class
inline
OSG::UInt32 @!Classname!@Base::getClassTypeId(void)
{
    return _type.getId();
}

inline
OSG::UInt16 @!Classname!@Base::getClassGroupId(void)
{
    return _type.getGroupId();
}

@@if !isDecorator
    @@if !isDecoratable
/*------------------------------ get -----------------------------------*/

        @@BeginSFFieldLoop@@
            @@if !field.noAccess
            @@if field.isPtrField

//! Get the value of the @!Classname!@::_@!field.VarName!@ field.
inline
@!field.Type!@Const @!Classname!@Base::get@!field.Name!@(void) const
{
    return _@!field.VarName!@.getValue();
}

//! Set the value of the @!Classname!@::_@!field.VarName!@ field.
inline
            @@if field.PassFieldMask
void @!Classname!@Base::set@!field.Name!@(@!field.Type!@ConstArg value,
                             const UInt16      uiStoredInFieldId)
            @@else // field.PassFieldMask
void @!Classname!@Base::set@!field.Name!@(@!field.Type!@ConstArg value)
            @@endif // field.PassFieldMask
{
    editSField(@!field.Name!@FieldMask);

            @@if field.linkMParent
    @!Classname!@Ptr thisP = Inherited::constructPtr<@!Classname!@>(
        static_cast<@!Classname!@ *>(this));

    if(_@!field.VarName!@.getValue() != NullFC)
    {
        _@!field.VarName!@.getValue()->subParent(thisP);
    }

            @@endif // field.linkMParent
            @@if field.linkSParent
    if(_@!field.VarName!@.getValue() != NullFC)
    {
        _@!field.VarName!@.getValue()->setParent(NullFC);
    }

            @@endif // field.linkSParent
            @@if field.doRefCount
    setRefd(_@!field.VarName!@.getValue(), value);
            @@else // field.doRefCount
    _@!field.VarName!@.setValue(value);
            @@endif // field.doRefCount
            @@if field.linkMParent

    if(_@!field.VarName!@.getValue() != NullFC)
    {
        _@!field.VarName!@.getValue()->addParent(thisP, @!field.Name!@FieldMask);
    }
            @@endif // field.linkMParent
            @@if field.linkSParent

    @!Classname!@Ptr thisP = Inherited::constructPtr<@!Classname!@>(
        static_cast<@!Classname!@ *>(this));

    if(_@!field.VarName!@.getValue() != NullFC)
    {
        _@!field.VarName!@.getValue()->setParent(thisP, @!field.Name!@FieldMask);
    }
            @@endif // field.linkSParent
            @@if field.PassFieldMask
    _@!field.VarName!@.getValue().setParentFieldPos(uiStoredInFieldId);
            @@endif // field.PassFieldMask

}
        @@else // field.isPtrField
//! Get the value of the @!Classname!@::_@!field.VarName!@ field.

inline
@!field.Type!@ &@!Classname!@Base::edit@!field.Name!@(void)
{
    editSField(@!field.Name!@FieldMask);

    return _@!field.VarName!@.getValue();
}

//! Get the value of the @!Classname!@::_@!field.VarName!@ field.
inline
const @!field.Type!@ &@!Classname!@Base::get@!field.Name!@(void) const
{
    return _@!field.VarName!@.getValue();
}

            @@if CompatOneSix
#ifdef OSG_1_GET_COMPAT
inline
@!field.Type:19!@ &@!Classname!@Base::get@!field.Name:15!@(void)
{
    return this->edit@!field.Name:15!@();
}
#endif
            @@endif // CompatOneSix

//! Set the value of the @!Classname!@::_@!field.VarName!@ field.
inline
void @!Classname!@Base::set@!field.Name!@(const @!field.Type!@ &value)
{
    editSField(@!field.Name!@FieldMask);

    _@!field.VarName!@.setValue(value);
}
        @@endif // field.isPtrField
        @@endif //!field.noAccess
        @@EndSFFieldLoop@@

        @@BeginMFFieldLoop@@
        @@if !field.noAccess
//! Get the value of the \a index element the @!Classname!@::_@!field.VarName!@ field.
inline
            @@if field.isPtrField
@!field.Type!@Const @!Classname!@Base::get@!field.Name!@(const UInt32 index) const
            @@else // field.isPtrField
const @!field.Type!@ &@!Classname!@Base::get@!field.Name!@(const UInt32 index) const
            @@endif // field.isPtrField
{
    return _@!field.VarName!@[index];
}
            @@if !field.isPtrField

inline
@!field.Type!@ &@!Classname!@Base::edit@!field.Name!@(const UInt32 index)
{
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    return _@!field.VarName!@[index];
}

//! Get the @!Classname!@::_@!field.VarName!@ field.
inline
@!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps!@ &@!Classname!@Base::edit@!field.Name!@(void)
{
    editMField(@!field.Name!@FieldMask, _@!field.VarName!@);

    return _@!field.VarName!@;
}

                @@if CompatOneSix
#ifdef OSG_1_GET_COMPAT
inline
@!field.Type:19!@ &@!Classname!@Base::get@!field.Name:15!@(const UInt32 index)
{
    return this->edit@!field.Name:15!@(index);
}

inline
@!field.CARD!@@!field.TypeCaps:17!@ &@!Classname!@Base::get@!field.Name:15!@(void)
{
    return this->edit@!field.Name:15!@();
}

#endif
                @@endif // CompatOneSix

            @@endif // !field.isPtrField

//! Get the @!Classname!@::_@!field.VarName!@ field.
inline
const @!field.TypeNamespace!@@!field.CARD!@@!field.TypeCaps!@ &@!Classname!@Base::get@!field.Name!@(void) const
{
    return _@!field.VarName!@;
}

        @@endif //!field.noAccess
        @@EndMFFieldLoop@@
    @@endif // !isDecoratable
@@else // !isDecorator

inline
const @!Parent!@PtrConst @!Classname!@Base::getDecoratee(void) const
{
    return _sfDecoratee.getValue();
}

inline
void @!Classname!@Base::setDecoratee(const @!Parent!@Ptr &value)
{
    editSField(DecorateeFieldMask);

    setRefd(_sfDecoratee.getValue(), value);
}
@@endif // !isDecorator
@@if !isAbstract
//! create a new instance of the class
inline
@!Classname!@Ptr @!Classname!@Base::create(void)
{
    @!Classname!@Ptr fc;

    if(getClassType().getPrototype() != NullFC)
    {
        fc = OSG::cast_dynamic<@!Classname!@::ObjPtr>(
            getClassType().getPrototype()-> shallowCopy());
    }

    return fc;
}
@@endif // !isAbstract

#ifdef OSG_MT_FIELDCONTAINERPTR
inline
void @!Classname!@Base::execSync(      @!Classname!@Base *pOther,
                                       ConstFieldMaskArg  whichField,
                                       ConstFieldMaskArg  syncMode,
                                 const UInt32             uiSyncInfo,
                                       UInt32             uiCopyOffset)
{
    Inherited::execSync(pOther, whichField, syncMode, uiSyncInfo, uiCopyOffset);
@@if isDecorator

    if(FieldBits::NoField != (DecorateeFieldMask & whichField))
    {
        _sfDecoratee.syncWith(pOther->_sfDecoratee);
    }
@@else // isDecorator
    @@BeginFieldLoop@@

        @@if field.isSField
    if(FieldBits::NoField != (@!field.Name!@FieldMask & whichField))
        _@!field.VarName!@.syncWith(pOther->_@!field.VarName!@);
        @@else // field.isSField
    if(FieldBits::NoField != (@!field.Name!@FieldMask & whichField))
        _@!field.VarName!@.syncWith(pOther->_@!field.VarName!@,
                                syncMode,
                                uiSyncInfo,
                                uiCopyOffset);
        @@endif // field.isSField
    @@EndFieldLoop@@
@@endif // isDecorator
}
#endif

#ifdef OSG_MT_CPTR_ASPECT
inline
void @!Classname!@Base::execSync (      @!Classname!@Base *pFrom,
                                        ConstFieldMaskArg  whichField,
                                        AspectOffsetStore &oOffsets,
                                        ConstFieldMaskArg  syncMode,
                                  const UInt32             uiSyncInfo)
{
    Inherited::execSync(pFrom, whichField, oOffsets, syncMode, uiSyncInfo);
@@if isDecorator

    if(FieldBits::NoField != (DecorateeFieldMask & whichField))
    {
        _sfDecoratee.syncWith(pFrom->_sfDecoratee);
    }
@@else // isDecorator
    @@BeginFieldLoop@@

    @@if field.isSField
    if(FieldBits::NoField != (@!field.Name!@FieldMask & whichField))
        _@!field.VarName!@.syncWith(pFrom->_@!field.VarName!@);
    @@else // field.isSField
    if(FieldBits::NoField != (@!field.Name!@FieldMask & whichField))
        _@!field.VarName!@.syncWith(pFrom->_@!field.VarName!@,
                                syncMode,
                                uiSyncInfo,
                                oOffsets);
    @@endif // field.isSField
    @@EndFieldLoop@@
@@endif // isDecorator
}
#endif

#if 0
inline
void @!Classname!@Base::execBeginEdit(ConstFieldMaskArg whichField,
                                      UInt32            uiAspect,
                                      UInt32            uiContainerSize)
{
    Inherited::execBeginEdit(whichField, uiAspect, uiContainerSize);
@@if !isDecorator
    @@BeginMFFieldLoop@@

    if(FieldBits::NoField != (@!field.Name!@FieldMask & whichField))
    {
        _@!field.VarName!@.beginEdit(uiAspect, uiContainerSize);
    }
    @@EndMFFieldLoop@@
@@endif // !isDecorator
}
#endif


inline
Char8 *@!Classname!@Base::getClassname(void)
{
    return "@!Classname!@";
}

typedef PointerBuilder<@!Classname!@>::ObjPtr          @!Classname!@Ptr;
typedef PointerBuilder<@!Classname!@>::ObjPtrConst     @!Classname!@PtrConst;
typedef PointerBuilder<@!Classname!@>::ObjConstPtr     @!Classname!@ConstPtr;

typedef PointerBuilder<@!Classname!@>::ObjPtrArg       @!Classname!@PtrArg;
typedef PointerBuilder<@!Classname!@>::ObjConstPtrArg  @!Classname!@ConstPtrArg;
typedef PointerBuilder<@!Classname!@>::ObjPtrConstArg  @!Classname!@PtrConstArg;

OSG_END_NAMESPACE

