/* This is a template file for fcdEdit.
 * To create it from sample source,  cut'n'paste the source and apply the following
 * substitutions:
 * s|\|\\|g 
 * s|"|\"|g 
 * s|^|"| 
 * s|$|",|
 */

char *FCBaseTemplate_h[]={
"/*---------------------------------------------------------------------------*\\",
" *                                OpenSG                                     *",
" *                                                                           *",
" *                                                                           *",
" *               Copyright (C) 2000-2006 by the OpenSG Forum                 *",
" *                                                                           *",
" *                            www.opensg.org                                 *",
" *                                                                           *",
" *   contact: dirk@opensg.org, gerrit.voss@vossg.org, jbehr@zgdv.de          *",
" *                                                                           *",
"\\*---------------------------------------------------------------------------*/",
"/*---------------------------------------------------------------------------*\\",
" *                                License                                    *",
" *                                                                           *",
" * This library is free software; you can redistribute it and/or modify it   *",
" * under the terms of the GNU Library General Public License as published    *",
" * by the Free Software Foundation, version 2.                               *",
" *                                                                           *",
" * This library is distributed in the hope that it will be useful, but       *",
" * WITHOUT ANY WARRANTY; without even the implied warranty of                *",
" * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU         *",
" * Library General Public License for more details.                          *",
" *                                                                           *",
" * You should have received a copy of the GNU Library General Public         *",
" * License along with this library; if not, write to the Free Software       *",
" * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.                 *",
" *                                                                           *",
"\\*---------------------------------------------------------------------------*/",
"/*---------------------------------------------------------------------------*\\",
" *                                Changes                                    *",
" *                                                                           *",
" *                                                                           *",
" *                                                                           *",
" *                                                                           *",
" *                                                                           *",
" *                                                                           *",
"\\*---------------------------------------------------------------------------*/",
"",
"/*****************************************************************************\\",
" *****************************************************************************",
" **                                                                         **",
" **                  This file is automatically generated.                  **",
" **                                                                         **",
" **          Any changes made to this file WILL be lost when it is          **",
" **           regenerated, which can become necessary at any time.          **",
" **                                                                         **",
" **     Do not change this file, changes should be done in the derived      **",
" **     class @!Classname!@",
" **                                                                         **",
" *****************************************************************************",
"\\*****************************************************************************/",
"", 
"",
"#ifndef _OSG@!CLASSNAME!@BASE_H_",
"#define _OSG@!CLASSNAME!@BASE_H_",
"#ifdef __sgi",
"#pragma once",
"#endif",
"",
"",
"#include \"@!HeaderPrefix!@OSGConfig.h\"",
"@@if Library",
"#include \"OSG@!Libname!@Def.h\"",
"@@endif",
"",
"#include \"@!HeaderPrefix!@OSGBaseTypes.h\"",
"",
"#include \"@!ParentHeaderPrefix!@OSG@!Parent!@.h\" // Parent",
"",
"@@if !Decorator",
"@@BeginFieldLoop@@",
"#include \"@!FieldtypeInclude!@\" // @!Fieldname!@ type",
"@@EndFieldLoop@@",
"@@else",
"#include \"OSG@!Parent!@Fields.h\" // Decoratee type",
"@@endif",
"",
"#include \"OSG@!Classname!@Fields.h\"",
"", 
"OSG_BEGIN_NAMESPACE",
"",
"class @!Classname!@;",
"",
"//! \\brief @!Classname!@ Base Class.",
"",
"@@if Library",
"class OSG_@!LIBNAME!@_DLLMAPPING @!Classname!@Base : public @!Parent!@",
"@@else",
"class @!Classname!@Base : public @!Parent!@",
"@@endif",
"{",
"  public:",
"",
"    typedef @!Parent!@ Inherited;",
"    typedef @!Parent!@ ParentContainer;",
"",
"    typedef Inherited::TypeObject TypeObject;",
"    typedef TypeObject::InitPhase InitPhase;",
"",
"    typedef PointerFwdBuilder<@!Parent!@Ptr, ",
"                              @!Parent!@ConstPtr, ",
"                              @!Classname!@>::ObjPtr         ObjPtr;",
"    typedef PointerFwdBuilder<@!Parent!@Ptr, ",
"                              @!Parent!@ConstPtr, ",
"                              @!Classname!@>::ObjPtrConst    ObjPtrConst;",
"    typedef PointerFwdBuilder<@!Parent!@Ptr, ",
"                              @!Parent!@ConstPtr,",
"                              @!Classname!@>::ObjConstPtr    ObjConstPtr;",
"    typedef PointerFwdBuilder<@!Parent!@Ptr, ",
"                              @!Parent!@ConstPtr,",
"                              @!Classname!@>::ObjPtrArg      ObjPtrArg;",
"    typedef PointerFwdBuilder<@!Parent!@Ptr, ",
"                              @!Parent!@ConstPtr,",
"                              @!Classname!@>::ObjConstPtrArg ObjConstPtrArg;",
"    typedef PointerFwdBuilder<@!Parent!@Ptr, ",
"                              @!Parent!@ConstPtr,",
"                              @!Classname!@>::ObjPtrConstArg ObjPtrConstArg;",
"",
"    /*==========================  PUBLIC  =================================*/",
"",
"  public:",
"",
"@@if Decorator",
"    enum",
"    {",
"        DecorateeFieldId        = Inherited::NextFieldId,",
"        NextFieldId             = DecorateeFieldId          + 1",
"    };",
"",
"    static const OSG::BitVector DecorateeFieldMask = ",
"        (TypeTraits<BitVector>::One << DecorateeFieldId);",
"@@else",
"@@FieldIdsAndMasksDecl@@",
"@@endif",
"",
"",
"    /*---------------------------------------------------------------------*/",
"    /*! \\name                    Class Get                                 */",
"    /*! \\{                                                                 */",
"",
"    static FieldContainerType &getClassType   (void); ",
"    static UInt32              getClassTypeId (void); ",
"    static UInt16              getClassGroupId(void);",
"",
"    /*! \\}                                                                 */",
"    /*---------------------------------------------------------------------*/",
"    /*! \\name                FieldContainer Get                            */",
"    /*! \\{                                                                 */",
"",
"    virtual       FieldContainerType &getType         (void); ",
"    virtual const FieldContainerType &getType         (void) const; ",
"",
"    virtual       UInt32              getContainerSize(void) const;",
"",
"    /*! \\}                                                                 */",
"@@if hasPublicFields", 
"    /*---------------------------------------------------------------------*/",
"    /*! \\name                    Field Get                                 */",
"    /*! \\{                                                                 */",
"",
"@@if decorator", 
"    @!FieldMethodType!@ const SF@!Parent!@Ptr *getSFDecoratee(void) const;",
"@@endif", 
"@@BeginFieldLoop@@",
"@@if isPublic", 
"@@if isPtrField",
"    @!FieldMethodType!@ const @!CARDINALITY!@@!CapsFieldtypeClean:17!@ *get@!CARDINALITY!@@!Fieldname:15!@ (void) const;",
"@@else",
"",
"@@if CompatOneSix",
"#ifdef OSG_1_COMPAT",
"    @!FieldMethodType!@       @!FieldNamespace!@@!CARDINALITY!@@!CapsFieldtypeClean:17!@ *get@!CARDINALITY!@@!Fieldname:15!@(void);",
"#endif",
"@@endif",
"    @!FieldMethodType!@       @!FieldNamespace!@@!CARDINALITY!@@!CapsFieldtypeClean:17!@ *edit@!CARDINALITY!@@!Fieldname:15!@(void);",
"    @!FieldMethodType!@ const @!FieldNamespace!@@!CARDINALITY!@@!CapsFieldtypeClean:17!@ *get@!CARDINALITY!@@!Fieldname:15!@ (void) const;",
"@@endif",
"@@endif", 
"@@EndFieldLoop@@",
"",
"@@if Decorator", 
"    @!FieldMethodType!@       @!Parent!@PtrConst getDecoratee(void) const;",
"@@endif", 
"@@BeginFieldLoop@@",
"@@if isPublic", 
"@@if isSField",
"",
"@@if isPtrField",
"    @!FieldMethodType!@       @!Fieldtype:19!@Const get@!Fieldname:15!@(void) const;",
"@@else",
"@@if CompatOneSix",
"#ifdef OSG_1_COMPAT",
"    @!FieldMethodType!@       @!Fieldtype:19!@ &get@!Fieldname:15!@(void);",
"#endif",
"@@endif",
"    @!FieldMethodType!@       @!Fieldtype:19!@ &edit@!Fieldname:15!@(void);",
"    @!FieldMethodType!@ const @!Fieldtype:19!@ &get@!Fieldname:15!@ (void) const;",
"@@endif",
"@@else",
"",
"@@if isPtrField",
"    @!FieldMethodType!@       @!Fieldtype:19!@Const get@!Fieldname:15!@(const UInt32 index) const;",
"@@else",
"@@if CompatOneSix",
"#ifdef OSG_1_COMPAT",
"    @!FieldMethodType!@       @!Fieldtype:19!@ &get@!Fieldname:15!@(const UInt32 index);",
"    @!FieldMethodType!@       @!CARDINALITY!@@!CapsFieldtypeClean:17!@ &get@!Fieldname:15!@(void);",
"#endif",
"@@endif",
"    @!FieldMethodType!@       @!Fieldtype:19!@ &edit@!Fieldname:15!@(const UInt32 index);",
"    @!FieldMethodType!@ const @!Fieldtype:19!@ &get@!Fieldname:15!@ (const UInt32 index) const;",
"    @!FieldMethodType!@       @!FieldNamespace!@@!CARDINALITY!@@!CapsFieldtypeClean:17!@ &edit@!Fieldname:15!@(void);",
"@@endif",
"    @!FieldMethodType!@ const @!FieldNamespace!@@!CARDINALITY!@@!CapsFieldtypeClean:17!@ &get@!Fieldname:15!@(void) const;",
"@@endif", 
"@@endif",
"@@EndFieldLoop@@",
"",
"    /*! \\}                                                                 */",
"    /*---------------------------------------------------------------------*/",
"    /*! \\name                    Field Set                                 */",
"    /*! \\{                                                                 */",
"",
"@@if decorator", 
"    @!FieldMethodType!@ void setDecoratee      ( const @!Parent!@Ptr &value );",
"@@endif", 
"@@BeginSFFieldLoop@@",
"@@if isPublic", 
"@@if isPtrField",
"@@if passFieldMask",
"    @!FieldMethodType!@ void set@!Fieldname:15!@(      @!Fieldtype!@ConstArg value,",
"                    const UInt16        uiStoredInFieldId = InvalidParentEPos);",
"@@else",
"    @!FieldMethodType!@ void set@!Fieldname:15!@(@!Fieldtype!@ConstArg value);",
"@@endif",
"@@else",
"    @!FieldMethodType!@ void set@!Fieldname:15!@(const @!Fieldtype!@ &value);",
"@@endif",
"@@endif", 
"@@EndSFFieldLoop@@",
"",
"    /*! \\}                                                                 */",
"@@if hasPtrFields"
"    /*---------------------------------------------------------------------*/",
"    /*! \\name                Ptr Field Set                                 */",
"    /*! \\{                                                                 */",
"",
"    virtual void pushToField     (      FieldContainerPtrConstArg pNewElement, ",
"                                  const UInt32                    uiFieldId  );",
"",
"    virtual void insertIntoMField(const UInt32                    uiIndex, ",
"                                        FieldContainerPtrConstArg pNewElement, ",
"                                  const UInt32                    uiFieldId  );",
"",
"    virtual void replaceInMField (const UInt32                    uiIndex,",
"                                        FieldContainerPtrConstArg pNewElement, ",
"                                  const UInt32                    uiFieldId  );",
"",
"    virtual void replaceInMField (      FieldContainerPtrConstArg pOldElement,",
"                                        FieldContainerPtrConstArg pNewElement, ",
"                                  const UInt32                    uiFieldId  );",
"",
"    virtual void removeFromMField(const UInt32                    uiIndex, ",
"                                  const UInt32                    uiFieldId  );",
"    ",
"    virtual void removeFromMField(      FieldContainerPtrConstArg pElement, ",
"                                  const UInt32                    uiFieldId  );",
"",
"    virtual void clearField      (const UInt32                    uiFieldId  );",
"",
"    /*! \\}                                                                 */",
"    /*---------------------------------------------------------------------*/",
"    /*! \\name                Ptr MField Set                                */",
"    /*! \\{                                                                 */",
"",
"@@BeginMFFieldLoop@@",
"@@if isPublic",
"@@if isPtrField",
"@@if writePushToField",
"    void @!pushToField!@           (@!Fieldtype!@ConstArg value   );",
"@@endif",
"@@if writeInsertIntoMField",
"    void @!insertIntoMField!@      (UInt32                uiIndex,",
"                                    @!Fieldtype!@ConstArg value   );",
"@@endif",
"@@if writeReplaceInMFieldIndex",
"    void @!replaceInMFieldIndex!@  (UInt32                uiIndex,",
"                                    @!Fieldtype!@ConstArg value   );",
"@@endif",
"@@if writeReplaceInMFieldObject",
"    void @!replaceInMFieldObject!@ (@!Fieldtype!@ConstArg pOldElem,",
"                                    @!Fieldtype!@ConstArg pNewElem);",
"@@endif",
"@@if writeRemoveFromMFieldIndex",
"    void @!removeFromMFieldIndex!@ (UInt32                uiIndex );",
"@@endif",
"@@if writeRemoveFromMFieldObject",
"    void @!removeFromMFieldObject!@(@!Fieldtype!@ConstArg value   );",
"@@endif",
"@@if writeClearField",
"    void @!clearField!@            (void                          );",
"@@endif",
"@@endif", 
"@@endif",
"",
"@@EndMFFieldLoop@@",
"@@endif",
"    /*! \\}                                                                 */",
"@@endif", 
"    /*---------------------------------------------------------------------*/",
"    /*! \\name                   Binary Access                              */",
"    /*! \\{                                                                 */",
"",
"    virtual UInt32 getBinSize (ConstFieldMaskArg  whichField);",
"    virtual void   copyToBin  (BinaryDataHandler &pMem,", 
"                               ConstFieldMaskArg  whichField);",
"    virtual void   copyFromBin(BinaryDataHandler &pMem,", 
"                               ConstFieldMaskArg  whichField);",
"",
"",
"    /*! \\}                                                                 */",
"@@if !Abstract",
"    /*---------------------------------------------------------------------*/",
"    /*! \\name                   Construction                               */",
"    /*! \\{                                                                 */",
"",
"    static  @!Classname!@Ptr create     (void); ",
"    static  @!Classname!@Ptr createEmpty(void); ",
"",
"    /*! \\}                                                                 */",
"    /*---------------------------------------------------------------------*/",
"    /*! \\name                       Copy                                   */",
"    /*! \\{                                                                 */",
"",
"    virtual FieldContainerPtr shallowCopy(void) const; ",
"",
"    /*! \\}                                                                 */",
"@@endif",
"    /*=========================  PROTECTED  ===============================*/",
"",
"  protected:",
"",
"    static TypeObject _type;",
"",
"    static void   classDescInserter(TypeObject &oType);",
"    static Char8 *getClassname     (void             );",
"",
"@@if hasFields", 
"    /*---------------------------------------------------------------------*/",
"    /*! \\name                      Fields                                  */",
"    /*! \\{                                                                 */",
"",
"@@if Decorator", 
"    SF@!Parent!@Ptr _sfDecoratee;",
"@@else", 
"@@BeginFieldLoop@@",
"@@if !isPrivate", 
"    @!FieldNamespace!@@!CARDINALITY!@@!CapsFieldtypeClean:15!@ _@!fieldname!@;",
"@@endif", 
"@@EndFieldLoop@@",
"@@endif", 
"",
"    /*! \\}                                                                 */",
"@@endif", 
"    /*---------------------------------------------------------------------*/",
"    /*! \\name                   Constructors                               */",
"    /*! \\{                                                                 */",
"",
"    @!Classname!@Base(void);",
"    @!Classname!@Base(const @!Classname!@Base &source);",
"",
"    /*! \\}                                                                 */",
"    /*---------------------------------------------------------------------*/",
"    /*! \\name                   Destructors                                */",
"    /*! \\{                                                                 */",
"",
"    virtual ~@!Classname!@Base(void); ",
"",
"    /*! \\}                                                                 */",
"    /*---------------------------------------------------------------------*/",
"    /*! \\name                     onCreate                                */",
"    /*! \\{                                                                 */",
"",
"@@if hasPtrFields",
"    void onCreate(const @!Classname!@ *source = NULL);",
"@@endif",
"",
"    /*! \\}                                                                 */",
"@@if hasProtectedFields", 
"    /*---------------------------------------------------------------------*/",
"    /*! \\name                    Field Get                                 */",
"    /*! \\{                                                                 */",
"",
"@@BeginFieldLoop@@",
"@@if isProtected", 
"@@if isPtrField",
"    @!FieldMethodType!@ const @!FieldNamespace!@@!CARDINALITY!@@!CapsFieldtypeClean:17!@ *get@!CARDINALITY!@@!Fieldname:15!@ (void) const;",
"@@else",
"",
"@@if CompatOneSix",
"#ifdef OSG_1_COMPAT",
"    @!FieldMethodType!@       @!FieldNamespace!@@!CARDINALITY!@@!CapsFieldtypeClean:17!@ *get@!CARDINALITY!@@!Fieldname:15!@(void);",
"#endif",
"@@endif",
"    @!FieldMethodType!@       @!FieldNamespace!@@!CARDINALITY!@@!CapsFieldtypeClean:17!@ *edit@!CARDINALITY!@@!Fieldname:15!@(void);",
"    @!FieldMethodType!@ const @!FieldNamespace!@@!CARDINALITY!@@!CapsFieldtypeClean:17!@ *get@!CARDINALITY!@@!Fieldname:15!@ (void) const;",
"@@endif",
"@@endif", 
"@@EndFieldLoop@@",
"",
"@@BeginFieldLoop@@",
"@@if isProtected", 
"@@if isSField",
"",
"@@if isPtrField",
"    @!FieldMethodType!@       @!Fieldtype:19!@Const get@!Fieldname:15!@(void) const;",
"@@else",
"@@if CompatOneSix",
"#ifdef OSG_1_COMPAT",
"    @!FieldMethodType!@       @!Fieldtype:19!@ &get@!Fieldname:15!@(void);",
"#endif",
"@@endif",
"    @!FieldMethodType!@       @!Fieldtype:19!@ &edit@!Fieldname:15!@(void);",
"    @!FieldMethodType!@ const @!Fieldtype:19!@ &get@!Fieldname:15!@(void) const;",
"@@endif",
"@@else",
"",
"@@if isPtrField",
"    @!FieldMethodType!@       @!Fieldtype:19!@Const get@!Fieldname:15!@(const UInt32 index) const;",
"@@else",
"@@if CompatOneSix",
"#ifdef OSG_1_COMPAT",
"    @!FieldMethodType!@       @!Fieldtype:19!@ &get@!Fieldname:15!@(const UInt32 index);",
"    @!FieldMethodType!@       @!CARDINALITY!@@!CapsFieldtypeClean:17!@ &get@!Fieldname:15!@(void);",
"#endif",
"@@endif",
"    @!FieldMethodType!@       @!Fieldtype:19!@ &edit@!Fieldname:15!@(const UInt32 index);",
"    @!FieldMethodType!@ const @!Fieldtype:19!@ &get@!Fieldname:15!@(const UInt32 index) const;",
"    @!FieldMethodType!@       @!FieldNamespace!@@!CARDINALITY!@@!CapsFieldtypeClean:17!@ &edit@!Fieldname:15!@(void);",
"@@endif",
"    @!FieldMethodType!@ const @!FieldNamespace!@@!CARDINALITY!@@!CapsFieldtypeClean:17!@ &get@!Fieldname:15!@(void) const;",
"@@endif", 
"@@endif",
"@@EndFieldLoop@@",
"",
"    /*! \\}                                                                 */",
"    /*---------------------------------------------------------------------*/",
"    /*! \\name                    Field Set                                 */",
"    /*! \\{                                                                 */",
"",
"@@BeginSFFieldLoop@@",
"@@if isProtected",
"@@if isPtrField",
"    @!FieldMethodType!@ void set@!Fieldname:15!@(@!Fieldtype!@ConstArg value);",
"@@else",
"    @!FieldMethodType!@ void set@!Fieldname:15!@(const @!Fieldtype!@ &value);",
"@@endif",
"@@endif", 
"@@EndSFFieldLoop@@",
"",
"    /*! \\}                                                                 */",
"    /*---------------------------------------------------------------------*/",
"    /*! \\name                Ptr MField Set                                */",
"    /*! \\{                                                                 */",
"",
"@@BeginMFFieldLoop@@",
"@@if isProtected",
"@@if isPtrField",
"@@if writePushToField",
"    void @!pushToField!@           (@!Fieldtype!@ConstArg value   );",
"@@endif",
"@@if writeInsertIntoMField",
"    void @!insertIntoMField!@      (UInt32                uiIndex,",
"                                    @!Fieldtype!@ConstArg value   );",
"@@endif",
"@@if writeReplaceInMFieldIndex",
"    void @!replaceInMFieldIndex!@  (UInt32                uiIndex,",
"                                    @!Fieldtype!@ConstArg value   );",
"@@endif",
"@@if writeReplaceInMFieldObject",
"    void @!replaceInMFieldObject!@ (@!Fieldtype!@ConstArg pOldElem,",
"                                    @!Fieldtype!@ConstArg pNewElem);",
"@@endif",
"@@if writeRemoveFromMFieldIndex",
"    void @!removeFromMFieldIndex!@ (UInt32                uiIndex );",
"@@endif",
"@@if writeRemoveFromMFieldObject",
"    void @!removeFromMFieldObject!@(@!Fieldtype!@ConstArg value   );",
"@@endif",
"@@if writeClearField",
"    void @!clearField!@            (void                          );",
"@@endif",
"@@endif", 
"@@endif",
"",
"@@EndMFFieldLoop@@",
"",
"    /*! \\}                                                                 */",
"@@endif", 
"    /*---------------------------------------------------------------------*/",
"    /*! \\name                       Sync                                   */",
"    /*! \\{                                                                 */",
"",
"#ifdef OSG_MT_FIELDCONTAINERPTR",
"    virtual void execSyncV(      FieldContainer    &oFrom,",
"                                 ConstFieldMaskArg  whichField,",
"                                 ConstFieldMaskArg  syncMode  ,",
"                           const UInt32             uiSyncInfo,",
"                                 UInt32             uiCopyOffset);",
"",
"            void execSync (      @!Classname!@Base *pFrom,",
"                                 ConstFieldMaskArg  whichField,",
"                                 ConstFieldMaskArg  syncMode  ,",
"                           const UInt32             uiSyncInfo,",
"                                 UInt32             uiCopyOffset);",
"#endif",
"#ifdef OSG_MT_CPTR_ASPECT",
"    virtual void execSyncV(      FieldContainer    &oFrom,",
"                                 ConstFieldMaskArg  whichField,",
"                                 AspectOffsetStore &oOffsets,",
"                                 ConstFieldMaskArg  syncMode  ,",
"                           const UInt32             uiSyncInfo);",
"",
"            void execSync (      @!Classname!@Base *pFrom,",
"                                 ConstFieldMaskArg  whichField,",
"                                 AspectOffsetStore &oOffsets,",
"                                 ConstFieldMaskArg  syncMode  ,",
"                           const UInt32             uiSyncInfo);",
"#endif",
"",
"    /*! \\}                                                                 */",
"    /*---------------------------------------------------------------------*/",
"    /*! \\name                       Edit                                   */",
"    /*! \\{                                                                 */",
"",
"#if 0",
"    virtual void execBeginEditV(ConstFieldMaskArg whichField, ",
"                                UInt32            uiAspect,",
"                                UInt32            uiContainerSize);",
"",
"            void execBeginEdit (ConstFieldMaskArg whichField, ",
"                                UInt32            uiAspect,",
"                                UInt32            uiContainerSize);",
"#endif",
"",
"    /*! \\}                                                                 */",
"    /*---------------------------------------------------------------------*/",
"    /*! \\name                     Aspect Create                            */",
"    /*! \\{                                                                 */",
"@@if !abstract", 
"",
"#ifdef OSG_MT_CPTR_ASPECT",
"    virtual FieldContainerPtr createAspectCopy(void) const;",
"#endif",
"@@endif",
"",
"    /*! \\}                                                                 */",
"    /*---------------------------------------------------------------------*/",
"    /*! \\name                       Edit                                   */",
"    /*! \\{                                                                 */",
"    /*! \\}                                                                 */",
"    /*---------------------------------------------------------------------*/",
"    /*! \\name                       Sync                                   */",
"    /*! \\{                                                                 */",
"",
"    virtual void resolveLinks(void);",
"",
"    /*! \\}                                                                 */",
"    /*==========================  PRIVATE  ================================*/",
"",
"  private:",
"@@if hasPrivateFields", 
"",
"    /*---------------------------------------------------------------------*/",
"    /*! \\name                      Fields                                  */",
"    /*! \\{                                                                 */",
"",
"@@if !Decorator", 
"@@BeginFieldLoop@@",
"@@if isPrivate", 
"    @!FieldNamespace!@@!CARDINALITY!@@!CapsFieldtypeClean:15!@ _@!fieldname!@;",
"@@endif", 
"@@EndFieldLoop@@",
"@@endif", 
"",
"    /*! \\}                                                                 */",
"    /*---------------------------------------------------------------------*/",
"    /*! \\name                    Field Get                                 */",
"    /*! \\{                                                                 */",
"",
"@@BeginFieldLoop@@",
"@@if isPrivate", 
"@@if isPtrField",
"    @!FieldMethodType!@ const @!FieldNamespace!@@!CARDINALITY!@@!CapsFieldtypeClean:17!@ *get@!CARDINALITY!@@!Fieldname:15!@ (void) const;",
"@@else",
"",
"@@if CompatOneSix",
"#ifdef OSG_1_COMPAT",
"    @!FieldMethodType!@       @!FieldNamespace!@@!CARDINALITY!@@!CapsFieldtypeClean:17!@ *get@!CARDINALITY!@@!Fieldname:15!@(void);",
"#endif",
"@@endif",
"    @!FieldMethodType!@       @!FieldNamespace!@@!CARDINALITY!@@!CapsFieldtypeClean:17!@ *edit@!CARDINALITY!@@!Fieldname:15!@(void);",
"    @!FieldMethodType!@ const @!FieldNamespace!@@!CARDINALITY!@@!CapsFieldtypeClean:17!@ *get@!CARDINALITY!@@!Fieldname:15!@ (void) const;",
"@@endif",
"@@endif", 
"@@EndFieldLoop@@",
"@@BeginFieldLoop@@",
"@@if isPrivate", 
"@@if isSField",
"",
"@@if isPtrField",
"    @!FieldMethodType!@       @!Fieldtype:19!@Const get@!Fieldname:15!@(void) const;",
"@@else",
"@@if CompatOneSix",
"#ifdef OSG_1_COMPAT",
"    @!FieldMethodType!@       @!Fieldtype:19!@ &get@!Fieldname:15!@(void);",
"#endif",
"@@endif",
"    @!FieldMethodType!@       @!Fieldtype:19!@ &edit@!Fieldname:15!@(void);",
"    @!FieldMethodType!@ const @!Fieldtype:19!@ &get@!Fieldname:15!@(void) const;",
"@@endif",
"@@else",
"",
"@@if isPtrField",
"    @!FieldMethodType!@       @!Fieldtype:19!@Const get@!Fieldname:15!@(const UInt32 index) const;",
"@@else",
"@@if CompatOneSix",
"#ifdef OSG_1_COMPAT",
"    @!FieldMethodType!@       @!Fieldtype:19!@ &get@!Fieldname:15!@(const UInt32 index);",
"    @!FieldMethodType!@       @!CARDINALITY!@@!CapsFieldtypeClean:17!@ &get@!Fieldname:15!@(void);",
"#endif",
"@@endif",
"    @!FieldMethodType!@       @!Fieldtype:19!@ &edit@!Fieldname:15!@(const UInt32 index);",
"    @!FieldMethodType!@ const @!Fieldtype:19!@ &get@!Fieldname:15!@ (const UInt32 index) const;",
"    @!FieldMethodType!@       @!FieldNamespace!@@!CARDINALITY!@@!CapsFieldtypeClean:17!@ &get@!Fieldname:15!@(void);",
"@@endif",
"    @!FieldMethodType!@ const @!FieldNamespace!@@!CARDINALITY!@@!CapsFieldtypeClean:17!@ &get@!Fieldname:15!@(void) const;",
"@@endif", 
"@@endif",
"@@EndFieldLoop@@",
"",
"    /*! \\}                                                                 */",
"    /*---------------------------------------------------------------------*/",
"    /*! \\name                    Field Set                                 */",
"    /*! \\{                                                                 */",
"",
"@@BeginSFFieldLoop@@",
"@@if isPrivate", 
"@@if isPtrField",
"    @!FieldMethodType!@ void set@!Fieldname:15!@(@!Fieldtype!@ConstArg value);",
"@@else",
"    @!FieldMethodType!@ void set@!Fieldname:15!@(const @!Fieldtype!@ &value);",
"@@endif",
"@@endif", 
"@@EndSFFieldLoop@@",
"",
"    /*! \\}                                                                 */",
"    /*---------------------------------------------------------------------*/",
"    /*! \\name                Ptr MField Set                                */",
"    /*! \\{                                                                 */",
"",
"@@BeginMFFieldLoop@@",
"@@if isPrivate",
"@@if isPtrField",
"@@if writePushToField",
"    void @!pushToField!@           (@!Fieldtype!@ConstArg value   );",
"@@endif",
"@@if writeInsertIntoMField",
"    void @!insertIntoMField!@      (UInt32                uiIndex,",
"                                    @!Fieldtype!@ConstArg value   );",
"@@endif",
"@@if writeReplaceInMFieldIndex",
"    void @!replaceInMFieldIndex!@  (UInt32                uiIndex,",
"                                    @!Fieldtype!@ConstArg value   );",
"@@endif",
"@@if writeReplaceInMFieldObject",
"    void @!replaceInMFieldObject!@ (@!Fieldtype!@ConstArg pOldElem,",
"                                    @!Fieldtype!@ConstArg pNewElem);",
"@@endif",
"@@if writeRemoveFromMFieldIndex",
"    void @!removeFromMFieldIndex!@ (UInt32                uiIndex );",
"@@endif",
"@@if writeRemoveFromMFieldObject",
"    void @!removeFromMFieldObject!@(@!Fieldtype!@ConstArg value   );",
"@@endif",
"@@if writeClearField",
"    void @!clearField!@            (void                          );",
"@@endif",
"@@endif", 
"@@endif",
"",
"@@EndMFFieldLoop@@",
"",
"    /*! \\}                                                                 */",
"@@endif", 
"",
"    // prohibit default functions (move to 'public' if you need one)",
"    void operator =(const @!Classname!@Base &source);",
"};",
"",
"typedef @!Classname!@Base *@!Classname!@BaseP;",
"",
"typedef RefPtr<@!Classname!@> @!Classname!@RefPtr;",
"",
"typedef osgIF<",
"    @!Classname!@Base::isNodeCore,",
"",
"    CoredNodePtr<@!Classname!@>,",
"    FieldContainer::attempt_to_create_CoredNodePtr_on_non_NodeCore_FC>::_IRet",
"",
"        @!Classname!@NodePtr;",
"",
"OSG_END_NAMESPACE",
"",
"#define OSG@!CLASSNAME!@BASE_HEADER_CVSID \"@(#)$Id: $\"",
"", 
"#endif /* _OSG@!CLASSNAME!@BASE_H_ */",
NULL };
