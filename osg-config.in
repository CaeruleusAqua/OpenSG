#!/usr/bin/env python
#
# Commandline tool for querying information about OpenSG libraries and required
# flags to compile.
#
# Much of this file is autogenerated at build time, so make sure to modify
# the .in version of this file in the build if you want to make changes
#
# The main components of this file are:
# - A set of classes at the end of the file that are automatically included
#   from the OpenSG build system.  These are used to store and analyze
#   the library information.  Most of the logic used in this tool is in these classes.
# - A string rep list of dictionaries that are automatically created by the build
#   and represent the state of the library objects from the build.  This list
#   is used to construct a local representation of the library information for OpenSG.
# - The option parser.  This section of the code is responsible for reading options and
#   calling the appropriate methods of the library info classes.
#
import os, sys
from optparse import OptionParser

# List of dictionaries in string format that will
# be used to build library information
lib_map_str = """@LIB_MAP_STR@"""

# various other variables needed
inst_prefix = "@PREFIX@"
inst_lib_path = "@LIBPATH@"
inst_inc_path = "@INCPATH@"
version = "@VERSION@"

lib_map_list = eval(lib_map_str)
parser = None
lib_map = {}

def main():
   global parser, lib_map
   
   # Create library map from the dumped set of dictionaries
   for i in lib_map_list:
      if i.has_key("name"):
         name = i["name"]
         lib_map[name] = LibraryInfo(name)
         lib_map[name].load(i)

   # Determine defaults
   if "win32" == sys.platform:
      def_incprefix = "/I"
      def_libprefix = ""
      def_libpathprefix = "/LIBPATH:"
   else:
      def_incprefix = "-I"
      def_libprefix = "-l"
      def_libpathprefix = "-L"
      
   # Create parser
   parser = OptionParser(usage="%prog [LIBRARY] [OPTIONS]", description="OpenSG config options.")

   parser.add_option("--prefix",action="store_true",help="Print the installation prefix.")
   parser.add_option("--version",action="store_true",help="Print the installed CppDom's version number.")
   parser.add_option("--cflags",action="store_true",help="Print OpenSG specific cflags.")
   parser.add_option("--lflags",action="store_true",help="Print library flags.")
   parser.add_option("--llibs",action="store_true",help="Print library list.")
   parser.add_option("--libs",action="store_true",help="Print libraries and flags.")
   parser.add_option("--no-prefix-flags",action="store_true",
                     help="When printing list of libraries and paths, don't include compiler prefix flags (-I,-l,-L)")
   parser.add_option("--inc-prefix",default=def_incprefix, 
                     help="Compiler include path prefix to use. (%s)"%def_incprefix)
   parser.add_option("--lib-prefix",default=def_libprefix, 
                     help="Linker lib prefix to use. (%s)"%def_libprefix)
   parser.add_option("--libpath-prefix",default=def_libpathprefix, 
                     help="Linker library path prefix to use. (%s)"%def_libpathprefix)

   (options, pos_args) = parser.parse_args()  
   
   # Process simple single options
   if options.prefix:
      print inst_prefix
      return
   elif options.version:
      print version
      return
   
   # Try to find libname
   # - Try given name and name with OSG prefix
   libraries = []
   if len(pos_args):      
      for n in pos_args:
         if lib_map.has_key(n):
            libraries.append(lib_map[n])
         elif lib_map.has_key("OSG%s"%n):
            libraries.append(lib_map["OSG%s"%n])
         else:
            print "Error: Can not find library named: ", n
      
   # Make sure we have libraries
   if len(libraries) == 0:
      printUsage()
      sys.exit(1)

   # If set to no prefix flags, then clear all defaults
   if options.no_prefix_flags:
      options.inc_prefix = ""
      options.lib_prefix = ""
      options.libpath_prefix = ""
   
   # Create a configuration adapter for the required library
   default_lib_settings = LibraryInfo()
   default_lib_settings.libpath.insert(0, inst_lib_path) 
   default_lib_settings.cpppath.insert(0, inst_inc_path)
   config_info = ConfigInfoAdapter(libraries, lib_map, default_lib_settings,
                     options.inc_prefix, options.lib_prefix, options.libpath_prefix)
            
   if options.cflags:
      print config_info.getIncPathStr()
   elif options.libs or options.llibs or options.lflags:
      if options.libs:
         print "%s %s"%(config_info.getLibPathStr(), config_info.getLibsStr())
      elif options.llibs:
         print config_info.getLibsStr()
      elif options.lflags:
         print config_info.getLibPathStr()
   else:
      printUsage()
      sys.exit(1)

   

def printUsage():
   global parser, lib_map
   parser.print_help()
   print "\nLibraries: "
   for lib_name in lib_map.keys():
      print "   %s"%lib_name

# --- Copied from Source file --- #
# DO NOT MODIFY HERE
@LIBRARY_UTIL_SRC@
# ----------------------------------- #   

# Main
main()
